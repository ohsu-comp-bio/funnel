# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from tes import tes_pb2 as tes_dot_tes__pb2


class TaskServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CancelTask = channel.unary_unary(
                '/tes.TaskService/CancelTask',
                request_serializer=tes_dot_tes__pb2.CancelTaskRequest.SerializeToString,
                response_deserializer=tes_dot_tes__pb2.CancelTaskResponse.FromString,
                )
        self.GetServiceInfo = channel.unary_unary(
                '/tes.TaskService/GetServiceInfo',
                request_serializer=tes_dot_tes__pb2.GetServiceInfoRequest.SerializeToString,
                response_deserializer=tes_dot_tes__pb2.ServiceInfo.FromString,
                )
        self.ListTasks = channel.unary_unary(
                '/tes.TaskService/ListTasks',
                request_serializer=tes_dot_tes__pb2.ListTasksRequest.SerializeToString,
                response_deserializer=tes_dot_tes__pb2.ListTasksResponse.FromString,
                )
        self.CreateTask = channel.unary_unary(
                '/tes.TaskService/CreateTask',
                request_serializer=tes_dot_tes__pb2.Task.SerializeToString,
                response_deserializer=tes_dot_tes__pb2.CreateTaskResponse.FromString,
                )
        self.GetTask = channel.unary_unary(
                '/tes.TaskService/GetTask',
                request_serializer=tes_dot_tes__pb2.GetTaskRequest.SerializeToString,
                response_deserializer=tes_dot_tes__pb2.Task.FromString,
                )


class TaskServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CancelTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServiceInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CancelTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelTask,
                    request_deserializer=tes_dot_tes__pb2.CancelTaskRequest.FromString,
                    response_serializer=tes_dot_tes__pb2.CancelTaskResponse.SerializeToString,
            ),
            'GetServiceInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServiceInfo,
                    request_deserializer=tes_dot_tes__pb2.GetServiceInfoRequest.FromString,
                    response_serializer=tes_dot_tes__pb2.ServiceInfo.SerializeToString,
            ),
            'ListTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTasks,
                    request_deserializer=tes_dot_tes__pb2.ListTasksRequest.FromString,
                    response_serializer=tes_dot_tes__pb2.ListTasksResponse.SerializeToString,
            ),
            'CreateTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTask,
                    request_deserializer=tes_dot_tes__pb2.Task.FromString,
                    response_serializer=tes_dot_tes__pb2.CreateTaskResponse.SerializeToString,
            ),
            'GetTask': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTask,
                    request_deserializer=tes_dot_tes__pb2.GetTaskRequest.FromString,
                    response_serializer=tes_dot_tes__pb2.Task.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tes.TaskService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CancelTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tes.TaskService/CancelTask',
            tes_dot_tes__pb2.CancelTaskRequest.SerializeToString,
            tes_dot_tes__pb2.CancelTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServiceInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tes.TaskService/GetServiceInfo',
            tes_dot_tes__pb2.GetServiceInfoRequest.SerializeToString,
            tes_dot_tes__pb2.ServiceInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tes.TaskService/ListTasks',
            tes_dot_tes__pb2.ListTasksRequest.SerializeToString,
            tes_dot_tes__pb2.ListTasksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tes.TaskService/CreateTask',
            tes_dot_tes__pb2.Task.SerializeToString,
            tes_dot_tes__pb2.CreateTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tes.TaskService/GetTask',
            tes_dot_tes__pb2.GetTaskRequest.SerializeToString,
            tes_dot_tes__pb2.Task.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
