// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x51\x6f\x1b\xb9\x11\x7e\xd7\xaf\x98\xda\x29\x9a\x00\x92\x2c\xdf\xe1\x8a\x9e\x00\x3f\xc8\xb2\xe3\xa8\xe7\x38\x3a\x49\xa9\xdb\xbe\x18\xdc\xdd\xd1\x2e\xcf\xbb\xe4\x86\xe4\x4a\x51\xdc\xfc\xf7\x62\x38\xdc\x5d\xc9\x96\x63\x5f\xcf\x38\x14\x68\x03\xc4\xd0\x92\x33\xdf\x0c\x39\xc3\x19\xce\x70\x8e\x66\x85\x66\xd8\x01\x38\x84\x77\xda\x3a\x25\x0a\x04\xbd\x04\x97\x21\xbc\xad\x94\xc2\x1c\xac\x27\xe9\xc3\x7b\x21\x55\xbe\xe9\x82\xcb\xa4\x05\x69\xa1\xb2\x98\x40\xb4\x01\x51\x39\xdd\xb3\xb1\xc8\xd1\x58\x8f\xe3\x34\xc4\x5a\x2d\x65\x5a\x19\x84\xb5\x36\xb7\x68\x6c\xbf\x03\x1e\xff\x4a\x14\x38\x84\x5c\xc7\x22\xcf\xb4\x75\x1d\xcf\x30\xd5\xc6\x31\xdc\x52\x1b\x78\xb7\x58\x4c\x21\xd6\x45\x51\x29\x19\x0b\x27\xb5\x02\xa1\x12\xaf\xd1\x1a\x23\x48\x84\xcd\x22\x2d\x4c\xe2\x21\x17\x8b\x29\x71\x0f\xe1\x2f\x83\xc1\x60\x1f\xda\x6c\x3a\xde\x05\x23\xb6\xd9\x74\xcc\x5c\x3f\x0e\x7e\x0c\x5c\x33\xfc\x54\x49\x83\x10\x09\x2b\x63\x5a\x53\x86\xca\xd5\xf2\x09\x88\xe4\xf3\x56\xc0\x68\x3a\xa1\xe5\x4b\x95\x82\x80\x52\x58\xbb\xd6\xac\xce\x21\x4c\x96\x5e\x74\x17\x0a\x71\x8b\x60\x69\x07\x9c\x86\xd2\xe8\x12\x4d\xbe\x01\x83\xd6\x19\x19\x3b\x10\x71\x8c\xd6\xd2\x1c\xe1\xf2\x76\xc1\x52\xe6\xe8\x51\x5e\x63\x3f\xed\x43\x9c\x15\x3a\x81\x3f\x0f\x06\xb0\xf4\x96\xe8\x33\x59\x7f\x53\xe4\x6f\x78\xa5\x41\xf4\x10\x44\x14\x1f\x7f\xf7\x3d\xaf\x64\xa2\xe2\xbc\x4a\x10\x04\x1c\x8c\x45\x9c\x61\x6f\xac\x95\x33\x3a\x1f\x82\xd2\x3d\xeb\xb4\xc1\x03\xde\xe3\x0c\x45\x82\x06\xa4\x82\x0b\x74\x47\x97\xd2\x3a\xd2\xaf\xd4\xca\x62\x63\xc8\xd2\xe0\x0a\x95\x83\x58\xc4\x19\xad\x37\xda\x80\x54\x0e\x4d\x81\x89\x14\x66\xe3\x77\x44\xc6\xe8\xed\x7b\x26\xad\x88\x72\x24\x6c\x2f\x78\x08\xce\x54\xc8\x4a\x5d\xca\x42\x3a\xde\x43\xf9\x85\x3d\x4c\xd8\x5b\xc0\xcf\x18\x57\x4e\x1b\xc8\x75\x6a\xe1\xb5\x75\x89\xae\xdc\x11\x1a\xf3\xa6\x4b\x7a\x45\x1b\xc7\xd0\xef\xc5\xe7\xf3\x40\x7a\xa9\xd3\xb9\xfc\x82\x43\x38\x1e\x0c\x06\x03\x38\x84\xe3\x01\xfc\x74\xca\x52\x16\x19\xc2\xb6\x07\x8b\xd8\xc9\x55\x63\xb6\x44\x38\x11\x09\x4b\x36\x8e\x6f\x51\x25\x9e\x65\xb4\x12\x32\x27\xb5\xeb\x51\x3b\x84\x48\xe7\x2e\x89\xba\x90\x6c\x94\x28\x74\x12\xd1\xda\x02\x6f\x3d\xb9\x35\x64\xe9\xf4\x00\x9c\xea\xdc\x9d\x9d\xf2\x6f\x36\x8e\xcb\x6a\xfb\x36\x92\x83\x85\xe9\x1f\xcd\x0f\xa1\x7f\xc4\xb6\xed\xd1\x39\xe9\x25\xd2\x84\xef\x7e\x12\x75\x3a\x0c\x74\xe6\xb5\xa8\xa1\x0f\xfd\xff\x53\x61\xd1\x2f\xd4\x69\xf2\x37\xef\xa0\xb5\xb6\xe0\x68\x39\xb6\xa1\x5e\xd0\x67\xcd\x30\x84\x03\x16\x70\xb0\x85\x36\xba\x9e\x83\xc1\x54\x6a\xd5\x0c\xce\xfc\xe7\x10\x0e\x5a\xba\xb1\xc1\x84\xce\x84\xc8\x6d\xab\x4a\xcd\x3e\x62\x7f\xbe\xc5\x0d\x4c\xce\xb6\x66\x7f\xc2\xcd\x0e\x48\x4d\x3f\xc7\xd8\xa0\xab\xd9\x7e\xc2\xcd\x16\x05\xcf\x79\x36\x3f\x7a\x9e\x0b\xeb\x64\xbc\xb5\xb5\x06\x97\xf2\xf3\xf6\xda\xa5\x4a\xf0\x33\x5a\x78\x4d\x5e\xd5\x05\xef\xb3\xb6\x0b\x4a\x27\x68\xdf\x04\xbe\x09\xd1\x30\xeb\xbd\x5d\x20\xcc\x8f\xb3\xcb\xda\x6b\x90\xe5\x59\x14\x26\xce\xea\xf0\x17\x08\x3f\xce\x2e\x87\x90\x39\x57\x0e\x8f\x8e\x9a\x28\x36\xfc\xf1\x3b\x0e\x3e\x97\x3a\x4d\x39\x9a\x7a\x9f\xd7\x69\x4a\x67\x26\xc7\x15\xe6\x76\x08\x09\x46\x55\x4a\x7e\xbd\xd4\x5d\x40\x63\xb4\xf1\x84\x97\x34\x3d\xf4\xc3\x81\xf1\xda\x48\x87\x7c\x24\xbc\x03\x49\x0b\xa5\x70\x59\x9f\xa2\x0b\x16\xa5\xdb\x74\x79\x52\x50\x7c\x35\xd2\x39\x54\x44\x68\x5d\x82\x26\x68\xfa\xa1\x72\x65\xe5\xde\xca\x1c\x79\x1f\xf9\x6c\xd8\x38\xc3\xa4\xca\xe9\xd0\xdb\x36\x44\xd2\x9a\x2f\xc6\xe7\x5d\xf8\x50\xa2\xb2\x4e\xc4\xb7\x5d\x1f\x71\xdf\x0b\x55\x89\x9c\xa2\x67\x59\xb9\xf6\x7c\xf4\xa1\x33\xaf\x71\xea\xc4\xb1\x06\xbd\x0c\x5a\x98\x4a\x81\xd8\x96\xe4\xd0\x34\x81\x97\xa2\x13\x28\xa1\xb4\xc5\x58\x13\x56\x07\xa0\x06\x9b\x09\x57\x9f\xea\x41\x7d\xb4\x81\xe9\x1a\x29\x85\x50\x1b\x1f\x39\xfc\xce\xd4\x42\x28\x54\x68\x85\xbb\xa2\x6a\xd8\x71\x56\xa9\x5b\xc2\x6d\x40\x72\xad\x52\x62\x5f\x0b\xe9\x20\x42\xb7\x46\x54\x50\x95\x89\x70\x68\x21\xc2\xa5\x36\x08\x85\x30\xb7\x1c\xdf\xc9\x87\x20\x41\x91\x3c\xa6\xff\x95\x4e\x70\x2a\x55\xba\x90\x05\xea\xca\x0d\x29\x62\xef\xac\xa1\x90\xaa\x72\xb8\x5f\x3c\xed\x7f\x90\xe1\x2d\x28\x8c\xeb\xde\xd7\x81\xec\xf3\x2c\x2d\x26\x4a\xba\x46\x8b\xef\x07\x3b\x6a\xfc\x10\xd4\xb0\x81\xb6\x76\xd2\xd6\xa5\x82\x1a\x93\x33\x58\xcb\x3c\x87\x08\x7d\x66\x2f\x04\x65\xc1\x3c\xdf\x40\x8a\x8a\xb6\x17\x13\xf6\xb0\xc9\x59\x7b\x42\x0f\x81\x3c\xcd\x42\x6c\x90\x08\x20\xa9\x0c\x29\x5e\x1a\x4d\xc7\x9b\x7e\xd6\x90\xb5\xbb\x4a\xc5\x7e\x9d\x48\x83\xb1\xd3\x66\xc3\xa0\xd7\xda\xdc\x9e\x49\xb3\x27\x2e\xb6\xea\x36\xdb\x91\x09\x32\x17\x81\x25\x39\x87\x01\xda\x5a\x24\x87\x16\xca\x93\x39\xde\x8c\x2e\x48\xc7\x1a\xd8\xac\x72\x90\xe8\xb5\xea\x07\xbc\xde\x31\x14\x28\x94\x25\x72\x83\x74\x2c\x94\xae\xd9\xfa\x30\xa8\x27\x79\x00\x64\xe1\xf3\x9e\xc3\x7c\x03\x62\xe9\x90\xcf\xce\x52\x1a\xeb\xbc\x57\x32\x6a\x63\x82\xde\x71\xbd\x3d\x23\xbf\xe7\xac\xc3\xee\xae\x3a\xb3\x21\xcb\x27\xe8\x30\x76\xb0\xce\x84\x4f\xc2\xba\x32\x31\xf2\x01\x17\x4d\x82\x72\x1a\xa4\xeb\x43\x9d\x16\x70\x29\x15\x6d\xed\xac\x21\x97\xbc\x6a\x2f\xaa\xbe\x81\xf1\x05\x46\xaf\xd0\x18\x99\xa0\xe5\x5d\x8f\x30\x13\x2b\xa9\x43\xac\x68\x00\xda\x08\x3b\x9e\x7e\xb4\xad\xe4\x7e\x3b\x5e\x56\x76\x08\x83\x4e\x33\x30\x1b\xbd\x6f\xe9\x7c\xce\xbe\x38\x6d\xc9\x67\xa2\xb8\x88\x86\x30\xe8\x6f\x71\x9c\x49\x7b\x0b\xb6\x14\x31\x7e\x83\x91\x88\x1e\x70\xbe\xf5\x16\x5e\xf7\x7c\x3c\x05\x57\xd1\xea\x5b\x96\x9d\x20\x64\x37\x2a\x86\xb5\xa4\x0c\xfc\xe0\x22\xdb\x70\x3c\x3c\x44\x3e\xc2\xfb\x40\xc0\xc1\xe8\x87\xdd\x13\x14\x28\xdb\xe5\x4d\xc7\x8d\x6b\x90\xfb\x71\x0c\x39\xf2\xc2\xc9\xba\xcf\x13\xd5\xb8\xcb\xfe\xd0\x17\x68\xb7\x53\xcb\xaf\x4a\x2f\xfb\x52\xcc\x8b\xa5\x99\x7d\xa9\xa6\xf3\xe8\x3d\xec\x5e\x26\xe9\xec\xbf\x7d\xf9\xb4\xda\x85\xcc\xd1\xf2\xb5\xe9\x82\xcd\x2b\x53\x74\xa1\x8c\x6c\x17\x52\xf2\x62\x95\x4a\x85\x74\xc5\xa6\xfc\xd4\x85\x34\xc6\x2e\xe8\x3a\x77\x75\x4e\x19\x29\x00\x91\x3a\x4d\xba\xaa\xa5\x84\xd3\x51\x93\x7a\xc7\x7f\xb7\x18\x7b\x79\xbc\xc5\x0b\x2c\xca\xdc\xfb\xc0\xbf\xc2\x42\x2b\x25\x57\x68\x2c\xc2\x09\xac\x84\x92\x79\x2e\xc2\x44\x8a\x0e\xd5\x0a\x4e\x60\x41\xb7\x5d\x1e\xe3\x7b\xad\x5f\xd8\x09\xdc\xdd\xf5\xcf\x9b\xef\xaf\x5f\x03\x89\x30\x69\x55\xd0\x35\x05\x4e\x42\x91\xe4\x53\x67\xaf\x17\x8a\x81\xbb\xbb\xfe\xd8\xff\xfa\xfa\x15\x7a\x3d\x8a\x2e\x3d\x99\xd0\xe8\x42\xd8\xdb\x49\xd2\xe0\xe4\x3a\x65\x19\x21\x76\x7e\xfd\x7a\xc4\x1b\xd7\xf3\xb7\xa0\x5e\xae\xd3\x5a\x29\xf2\x89\xfb\xb4\x21\xcc\xb2\x51\x03\xa1\xf6\x16\x7d\x9c\x52\x57\x2e\x50\xda\x4c\x57\x79\x72\xe3\x8c\x50\x76\x89\xe6\x66\xe9\xd3\xc0\x09\xfc\xe3\x7c\x1e\x28\xd6\x19\xaa\x1b\xa7\x5b\x92\x06\xfc\xc3\xd5\xcd\xf9\xdf\x27\x8b\x9b\x0f\xb3\x9b\xf3\xbf\x4d\xc6\x8b\xc0\x70\x77\x27\x97\xa0\x10\xfa\x14\x6b\x60\x00\xbd\x66\xa5\x77\x77\xa5\x91\xca\x2d\xe1\xc0\xe0\xa7\x0a\xad\xbb\x89\x89\xe4\x04\xfe\x98\x1c\x30\xf9\x16\x69\x0f\x50\x25\x5b\xdf\x01\xd4\x47\x24\x0a\x2b\xdf\xc4\x2d\xb0\xd0\x66\x43\xc8\xfd\xc1\x12\x2e\x4e\x0f\x02\xe3\xd3\xf8\x1c\xb8\x9e\x14\x90\x50\x10\xdc\x86\x67\xbe\x3d\xf8\x61\xe0\x53\x85\x5c\x4a\x4d\x4f\xe7\x8f\x79\xe8\xe1\x1f\x22\xa9\x8e\x22\x61\xb3\x7a\x60\x7a\x3a\x87\xde\x15\x99\xd1\x5f\x0f\x5a\x7d\x79\x46\x3f\x6d\x60\x26\xc4\xa7\x7d\xe6\x39\x66\x63\xb0\x9c\xaf\xe5\x27\xc7\xc3\xb2\x54\x27\x2f\x66\xbb\x1a\xbc\xc0\xe2\x84\xf6\x35\x8d\x5e\xcc\x6a\x35\x34\x79\x77\x8b\xfd\x94\xc9\xee\x1d\xfb\xff\xf0\x90\x77\x00\x2e\x8c\x4c\xce\x7d\xcc\x7b\xbe\xe5\x5f\x3d\x62\xf7\x57\xcf\xb3\xfa\xab\x67\xd9\x9c\xc8\x1a\x6b\xfe\x1a\x3f\x78\x05\xbd\x12\xa1\x28\xe5\xcb\x1d\x5d\xd6\x25\xbb\x59\xd5\xf6\xbf\x78\x39\xf3\x07\xe8\xa5\x95\x5f\xb0\xc1\xfe\x7d\xcc\x0f\x74\xdd\x9b\x5f\x7e\x9c\xbd\x7f\xdc\xf6\x47\xf7\x8d\x3f\x3f\x1d\x2d\xc6\xef\xa0\xd7\xfb\x45\x47\x3d\x9f\x87\xf7\x78\x42\x43\xa4\xb8\x9e\x3a\x7e\x30\xc1\xf9\xe2\x69\x2f\x68\x18\x42\x68\x7f\xd2\xbd\x9e\xe5\x23\x0d\x2a\x05\xf9\x5e\x89\xc6\xef\xcf\x0b\x3a\x4c\x23\xa0\xc0\xc2\x47\xe2\x17\x8c\xf3\x2d\xb8\x2b\xca\x16\xfc\xf7\x0b\x19\xe3\xf3\xba\xc0\xab\xfb\x50\x22\x8e\x75\xa5\x1c\xd5\x68\x75\x1b\xc7\x07\xb4\x7e\x5b\x59\x95\xda\x5a\xe9\xaf\xe3\xfe\x32\xb8\xbf\x0c\x4c\xa4\x8d\xa9\x9c\xa8\xeb\xc0\x11\xe3\x36\xf7\x3f\x46\xbb\xd0\x3a\xcd\x11\xc6\xb9\xae\x12\xaa\x03\x7f\xa1\xea\x66\x72\xf6\x5b\x85\x4d\x19\xe9\x31\x41\x5f\xb4\xfa\xcd\xeb\xf9\xa7\x56\xed\x42\xae\x51\xa6\x99\xb3\xbb\xad\x27\x34\x1c\xf3\xa8\xce\x74\x5c\xb3\x43\x55\xc2\xa7\x4a\xc6\xb7\xf9\xa6\xbd\xf4\x5f\xb5\x44\xbe\x90\xcb\x0d\x8a\x64\x03\x5a\xe5\x52\x51\xf5\xba\x42\x90\x74\x67\x55\x01\xa4\x2a\x7d\x35\x51\x03\xb0\xa8\x9f\x09\x75\xce\xd3\x43\x38\xee\x0f\xc2\xf2\xb6\x3b\x09\xb1\x88\xb9\x85\x03\xa3\xe9\x84\xca\xc7\x2a\x77\x16\x5e\x17\xbe\x67\x8b\x90\x4b\xeb\xba\xe0\x42\xe4\xb0\x5d\x40\x17\xbf\x09\x30\xa1\xd5\x60\x70\x69\xd0\x66\x4d\x41\xe5\xfb\xb7\x8b\xc5\xe5\xa3\xcd\x8c\x0e\x77\x21\x5d\x9c\x41\x82\x36\x36\x32\xf2\x4b\xbd\x5f\x77\xd6\xed\xa5\xd1\xf5\x3c\x50\xdf\xab\x01\x48\x9c\x9f\xa8\xdd\xf5\xaf\x3a\xe2\xca\xd6\xf3\xc7\x42\x91\xc5\x50\x52\x79\x0e\x22\x14\x15\x01\xb3\x10\x5f\xb4\x6a\xaa\x57\xb8\xa2\xb9\xd7\xa3\xd9\xd5\x1b\x5e\xc3\x0e\x52\xd3\xf1\xf3\x31\x31\xc1\xe5\x41\x2b\xef\x67\xba\x5b\xfd\x56\x51\x1e\x64\x57\x8a\xbf\xb3\xd5\x72\xda\x1e\x6b\x5d\x14\xd9\x12\x63\xb9\x94\x98\xc0\x2f\x3a\xe2\x0b\x1e\x3f\x74\xe8\xd0\x47\xf1\x54\x34\x97\xb4\x1b\x22\x55\x28\xd9\x77\xda\xb3\x0f\x5a\xb3\xbb\x8d\xd7\xdd\x96\x6a\xe7\xda\x47\x15\x6e\xdd\xbd\x48\xdf\xe6\x1b\x5d\x9b\x46\x08\x58\xa7\x8d\x48\x11\xec\xc6\x3a\x2c\x7c\x0d\x7c\x18\x9a\xf6\xf5\x7b\x52\xe5\x0f\xa4\x45\x77\xef\x88\x46\x1b\xde\xb0\xba\x8c\xeb\x42\x54\x39\xd8\xe8\x0a\x0a\x3a\x9e\xa0\x10\x13\xaf\x96\xc7\x93\x4b\x9a\xfa\x93\x41\x3e\x55\xdc\xc5\x0b\x91\x94\x4b\x46\x3e\xa4\x73\x56\xa8\xed\xd6\xc6\x82\xaf\x78\x41\x45\x36\xad\x1f\x6e\xcf\xff\x75\x26\x1d\xd2\x81\x22\x2b\xfa\x02\xb3\xdd\x0a\x5f\x3d\x5b\x58\x67\x32\xce\xea\x9e\x83\xb4\x20\xf2\x5c\xaf\x31\x09\x31\x18\x6d\x53\xfe\x8f\x78\xe2\x4c\x1a\xdb\xd6\xf5\x3d\xe8\x1f\xd5\x5d\xa3\xf9\xf7\x6d\xa3\xfd\x91\xee\xfb\x53\xfd\xf7\x7d\x1d\xf8\xe7\xf4\xe0\x1f\x76\xe1\x0f\xe1\x62\xbe\xdb\xf7\x7f\x6e\x66\xe1\xbf\x1f\x4a\x72\x60\x91\xf7\x77\x23\xf3\x36\xd3\x53\x01\x7a\x07\x6f\x69\x74\xc1\xed\x7a\xb5\x92\x46\x2b\xaa\xa5\x5b\x89\xbd\x9d\xbc\xb4\xc3\x38\xda\x8b\xbe\xab\xfd\x37\xb1\x01\xde\x1a\x5d\x9c\xab\x55\xfb\xc0\xe5\xad\xb5\x96\x4b\xd7\x8a\xfa\x68\xd1\xf8\xd7\xce\x66\xa4\x79\xae\x6b\x46\x46\x95\xcb\x3e\xce\x2e\xdb\x81\x05\x2a\xa1\xdc\x2e\x1b\x8f\x4d\xce\xda\x11\x3e\xfd\x4c\xd5\xf9\x56\x67\xec\x7e\x57\x0c\x29\xbc\xd0\x2d\x2a\xd7\x69\xd3\xf1\x0e\x6f\x54\x0f\x9a\x64\xfb\xba\x56\xcf\x68\x8e\x79\xce\xf7\xe2\xb3\x2c\xaa\xa2\x15\xb6\xfd\xb4\xe7\x9f\x00\xdb\xf7\x3d\x52\x20\xaa\x96\x94\x56\xef\x35\xe3\x7d\x72\xf0\x33\xbf\xf6\xc5\xcf\xcb\x35\xfc\xbe\xb9\x95\x69\xf6\x37\x9c\x4c\x19\xef\xbc\xf5\xd1\x45\x6a\xe6\x79\xfd\xdc\xce\x48\x73\xf8\xe8\x33\xbc\x44\x70\x00\xc8\x37\xec\x36\xf5\x73\x5d\x1f\x9a\x4e\xed\xff\xf6\x03\xde\xa3\x46\xe2\x97\x65\xca\x2c\xcf\xb6\x52\xae\xd3\x1d\x53\x8d\x3c\xd2\x39\x01\xf9\x6e\xa6\xb1\x43\xde\xf5\x5e\xb0\x1c\xfd\xe2\x0e\xd8\x0e\x51\x50\x96\x3b\xa0\xfc\x5a\xe8\x7b\xe4\x90\xce\xa6\x63\xce\xb0\xd3\x71\x1b\xf5\x7f\xbf\x46\xef\x21\x2c\x8c\x50\x96\x2e\x6a\xb5\x5e\x74\x27\xf0\xcf\xf6\xb4\x77\xd2\xd0\x0d\xcb\xd1\xc6\x49\xd5\xfa\xda\xff\x3d\xed\xbf\xfa\xf9\xf5\xdf\x01\x00\x00\xff\xff\x31\x01\xb2\xda\x66\x23\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 9062, mode: os.FileMode(420), modTime: time.Unix(1509138251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\x03\x31\x14\x85\xf7\xf3\x14\xd7\xa9\x5d\x26\x33\x2f\xe0\xaa\x95\xe2\xc6\x85\x08\x2e\x25\xd3\xdc\xd8\x4b\x66\x92\x21\x3f\x2a\x86\xfb\xee\x32\x69\x11\x0a\x63\x77\x87\xc3\x77\xbe\xc5\xd9\xdc\x75\x03\xb9\x6e\x50\xf1\xd4\x6c\xee\x41\x3c\x43\x29\xf2\x55\x45\xfb\xa4\x99\x6b\xe3\x97\xe6\xcd\x07\xbb\xa7\xc0\xdc\x99\xec\x1c\x8e\x22\x26\xed\x73\xaa\x00\xfe\x07\x60\x08\x4d\x29\x64\xc0\x21\xc8\xdd\x9c\x23\xf4\x20\x98\x9b\x52\xe6\x40\x2e\x19\x68\x97\xf9\x8c\x30\xcd\x04\x5b\xdd\x9e\xa1\x0a\x08\x40\xa7\x6b\xba\xcc\x5f\xd4\x74\x18\xa0\x97\x6b\x86\x11\x4e\xef\x9f\x13\x4e\x0f\x5b\xd9\x9b\x43\x7b\x81\xd7\x3d\x7b\x8a\xf6\xa6\xc8\x44\xfa\xc1\x3f\xd3\x19\xbf\x52\x35\xa5\xc8\xc7\x6f\x3c\xe6\xa4\x86\x11\x99\xe1\xcb\x07\x8b\x01\x42\x76\x20\xc4\xd1\x3b\x43\x1f\xcb\x23\xbb\x9a\x98\x41\x88\xa4\xa2\x15\xa4\xaf\xae\xfd\x0d\x00\x00\xff\xff\x24\x76\x8a\x2a\x79\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 377, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xcd\x6e\xe2\x30\x10\xc0\xf1\xbb\x9f\x62\x84\xb4\x47\x67\x79\x81\x5c\x16\x22\xc4\x65\x91\x68\xd4\x8f\x53\x64\xe2\x49\xb0\xe2\x8c\x61\x6c\x87\x56\x91\xdf\xbd\x0a\x20\x2a\xaa\xd2\xdb\x24\xf3\x9f\x9f\x1c\xc9\x0c\xc8\x1e\x21\x87\x41\x91\xb1\x56\x89\x16\x03\xd2\x00\x39\x94\x1c\x51\xe0\x3b\xd6\x31\xa8\x9d\x9d\x92\x71\xcc\x8a\xdb\x77\x4a\x42\x71\x1b\x7b\xa4\xe0\x21\x87\x93\xe3\x0e\x19\x38\x12\x48\x59\x3b\x6a\x4c\x3b\xf5\x8b\xf3\x94\x12\x48\x19\x94\xef\xa4\xd1\xd3\xdf\x52\xf9\x6e\xad\x53\x12\xd6\xb5\x17\xf7\xc5\x71\xb7\x34\x9c\xd2\xdf\xda\x91\x76\x2c\x71\x40\x0a\xd2\xba\x56\x20\xb3\xe3\xef\x55\x13\x89\xd0\x4a\x1f\x34\x32\x0b\x17\xc3\x21\x86\xc7\x8d\x8b\x41\xf8\xbd\x8b\x56\x57\x81\x15\xf9\x06\xb9\x6a\x8c\xc5\xe9\xe1\x6f\xc5\x93\x38\xed\x91\xaa\xe0\xbe\x96\x37\x70\xf3\xbf\x2a\x5e\xd7\x65\xb5\xd9\x56\xc5\xf3\x7a\x51\x8a\x71\x34\x0d\x10\x42\xb6\x38\x44\x0f\x73\x90\x29\x89\x71\x3c\xb0\xa1\xd0\xc0\x8c\xf1\x18\xd1\x87\xaa\x9e\x96\x39\xfc\xd1\xb3\x4b\x78\x8e\x24\x20\xe9\xf3\x74\x25\xb6\xaa\x5f\xed\x60\x9e\x3d\x52\x7a\xec\x1d\x7f\x4c\x4e\x36\x6f\x60\xf5\x6f\x76\x3d\xf9\x59\x5b\x1a\xdf\xfd\xca\x69\xe3\xbb\x3b\xec\x72\x71\xa7\x89\x63\xc4\x88\xe2\x33\x00\x00\xff\xff\x5f\xc0\xd7\xf8\x18\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 536, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xcf\x4a\x03\x31\x10\xc7\xf1\xfb\x3e\xc5\xd8\xd2\x63\xb2\xeb\x55\xd8\x8b\xad\x88\x17\x11\x15\x3c\x27\xcd\xa4\x86\xec\x4e\x96\xfc\x41\x21\xcc\xbb\x4b\x77\x17\xa4\x60\xbd\x0d\xc3\x97\xcf\xe1\xb7\xbd\x69\xb5\xa3\x56\xab\xf4\xd9\x6c\x5f\xee\xdf\x40\x3c\x43\xad\xf2\x5d\x25\xff\x64\x98\xd7\x5f\x38\xff\x3e\x42\xf4\x07\x17\x99\x5b\x5b\x88\x70\x10\x29\x9b\x50\xf2\x9a\xe0\xb5\x04\x63\x6c\x6a\x75\x16\x08\x41\xee\xa7\x92\xa0\x03\xc1\xdc\xd4\x3a\x45\x47\xd9\xc2\x66\x01\x06\xa0\x60\x30\xf5\xb7\x77\xd3\x44\xfd\xce\x6c\x96\x7a\x2e\x05\x20\x99\xf9\x5a\x9d\x57\x35\x3e\x6a\xe8\xe4\x35\x6a\xc4\xb1\xdf\xc9\xce\x9e\xf4\x66\x8d\xff\x76\x0e\x2e\xf9\x7f\x21\xeb\x06\xfc\x95\x96\xfc\x82\x6a\x6a\x95\x0f\xdf\x78\x2c\x59\xe9\x01\x99\xe1\x2b\x44\x8f\x11\x62\x21\x10\xe2\x18\xc8\xba\xd3\x79\x9a\xfd\x7c\x31\x83\x10\x59\x25\x2f\x9c\xb9\xd8\xf9\x27\x00\x00\xff\xff\x80\x45\x84\x4d\x88\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 392, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcf\x6a\xc3\x30\x0c\x87\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\xe9\xe8\x76\xdd\x0a\x3b\x3b\x8d\xb2\x79\x6e\x64\x23\xdb\x6c\x60\xf4\xee\x23\x69\xa1\x29\xac\xf4\xf6\xc3\xfe\xf4\xa1\x3f\xab\x87\xba\x33\x54\x77\x3a\x7c\x15\xab\xf7\xcd\xd3\xbe\x7d\x01\xa5\xbe\x5d\xa7\x48\x8f\x08\x39\x57\x7b\x1d\xec\x6b\x2f\xb2\xf8\xa6\xa8\x83\x0d\xf0\xb8\x78\x42\x66\xc7\x13\xfe\xe1\xd8\x6e\x0d\x8b\xd4\x43\x22\xc2\xa3\x0a\xb1\x47\xe6\x05\xea\x52\xf4\x29\xde\x62\x5d\x8a\x45\xce\x66\x00\x42\xa8\x5a\x9f\x02\x34\xa0\x44\x8a\x9c\x3d\x1b\x8a\x03\x94\x17\xd3\xc1\xa7\xa0\x3c\xb2\x9a\xfa\x81\x75\x5f\x9e\x2a\x66\x5a\x01\x52\x3f\xa7\xb3\xeb\x4d\x8f\xbb\x0e\x9a\xea\xb6\x6e\xc4\x11\xd6\x55\x33\xec\x36\xe5\x19\xff\xdf\xb4\x35\xc1\xde\x51\xc5\xd1\x5f\x54\x27\xfe\xca\x55\xe4\x5c\x3d\xff\xe2\x21\x45\xdd\x1d\x51\x04\x7e\x1c\x5b\x64\xe0\x44\xd3\x5c\x8e\x06\xf3\x39\x6d\xa8\x9d\x93\xc8\xa4\xd4\xc1\x2a\xd3\x5f\x9d\xe4\x2f\x00\x00\xff\xff\x36\x8f\xbd\x5a\xbe\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 446, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
