// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\x1b\xb9\x11\x7f\xd7\xa7\x98\xda\x29\x9a\x00\x5a\x59\xbe\xc3\x15\x3d\x01\x7e\x90\x65\xc7\x51\xcf\x76\x74\x92\x5c\xb7\x7d\x31\xb8\xcb\xd9\x5d\x9e\x77\xc9\x0d\xc9\xb5\xa2\xb8\xf9\xee\xc5\x90\xdc\x5d\xc9\x91\x63\x5f\xcf\x38\xf4\x80\x18\x48\x20\x91\xc3\x99\x21\x67\xf8\x9b\x3f\xd4\x02\xf5\x1d\xea\x51\x0f\x60\x1f\xde\x29\x63\x25\x2b\x11\x54\x0a\x36\x47\x78\x5b\x4b\x89\x05\x18\x47\x32\x80\x0b\x26\x64\xb1\xee\x83\xcd\x85\x01\x61\xa0\x36\xc8\x21\x5e\x03\xab\xad\x8a\x4c\xc2\x0a\xd4\xc6\xf1\xb1\x0a\x12\x25\x53\x91\xd5\x1a\x61\xa5\xf4\x2d\x6a\x33\xe8\x81\xe3\x7f\xc9\x4a\x1c\x41\xa1\x12\x56\xe4\xca\xd8\x9e\x5b\x30\x53\xda\x7a\x76\xa9\xd2\xf0\x6e\xb9\x9c\x41\xa2\xca\xb2\x96\x22\x61\x56\x28\x09\x4c\x72\xa7\xd1\x0a\x63\xe0\xcc\xe4\xb1\x62\x9a\x3b\x96\xcb\xe5\x8c\x56\x8f\xe0\x6f\xc3\xe1\x70\x17\xb7\xf9\x6c\xb2\xcd\x8c\x96\xcd\x67\x13\xbf\xea\xc7\xe1\x8f\x61\xd5\x1c\x3f\xd4\x42\x23\xc4\xcc\x88\x84\xf6\x94\xa3\xb4\x8d\x7c\x62\x44\xf2\xfd\x51\xc0\x78\x36\xa5\xed\x0b\x99\x01\x83\x8a\x19\xb3\x52\x5e\x9d\x7d\x98\xa6\x4e\x74\x1f\x4a\x76\x8b\x60\xe8\x04\xac\x82\x4a\xab\x0a\x75\xb1\x06\x8d\xc6\x6a\x91\x58\x60\x49\x82\xc6\xd0\x1c\xf1\xf5\xc7\x05\xa9\x28\xd0\x71\x79\x8d\x83\x6c\x00\x49\x5e\x2a\x0e\x7f\x1d\x0e\x21\x75\x96\x18\x78\xb2\xc1\xba\x2c\xde\xf8\x9d\x06\xd1\x23\x60\x71\x72\xf8\xdd\xf7\x7e\x27\x53\x99\x14\x35\x47\x60\xb0\x37\x61\x49\x8e\xd1\x44\x49\xab\x55\x31\x02\xa9\x22\x63\x95\xc6\x3d\x7f\xc6\x39\x32\x8e\x1a\x84\x84\x33\xb4\x07\xe7\xc2\x58\xd2\xaf\x52\xd2\x60\x6b\xc8\x4a\xe3\x1d\x4a\x0b\x09\x4b\x72\xda\x6f\xbc\x06\x21\x2d\xea\x12\xb9\x60\x7a\xed\x4e\x44\x24\xe8\xec\x7b\x22\x0c\x8b\x0b\x24\xde\x4e\xf0\x08\xac\xae\xd1\x2b\x75\x2e\x4a\x61\xfd\x19\x8a\x4f\xde\xc3\x98\xb9\x05\xfc\x88\x49\x6d\x95\x86\x42\x65\x06\x5e\x1b\xcb\x55\x6d\x0f\x50\xeb\x37\x7d\xd2\x2b\x5e\x5b\xcf\xfa\x82\x7d\x3c\x0d\xa4\xe7\x2a\x5b\x88\x4f\x38\x82\xc3\xe1\x70\x38\x84\x7d\x38\x1c\xc2\x4f\xc7\x5e\xca\x32\x47\xd8\xf4\x60\x96\x58\x71\xd7\x9a\x8d\x33\xcb\x62\x66\xc8\xc6\xc9\x2d\x4a\xee\x96\x8c\xef\x98\x28\x48\xed\x66\xd4\x8c\x20\x56\x85\xe5\x71\x1f\xf8\x5a\xb2\x52\xd1\x27\x2c\x98\xb1\x22\xe9\x43\xa9\x64\xa6\x78\x4c\xbb\x0d\xdc\x1a\xf2\x8d\x21\x43\xf7\x09\xe0\x58\x15\xf6\xe4\xd8\x7f\xf6\xe6\xb2\x79\x63\xf1\x56\x97\x60\x73\xfa\xa3\xf9\x11\x0c\x0e\xbc\xb5\x23\xba\x39\x11\x17\x3a\x7c\x1f\xf0\xb8\xd7\xf3\x8c\x4e\x9c\x5e\x0d\xeb\x7d\xf7\xef\x98\x19\x74\x5b\xb7\x8a\x3c\xd0\xb9\x6c\xa3\x3f\x58\xda\xa0\x69\xa9\x97\xf4\xb5\x59\x30\x82\x3d\x2f\x60\x6f\x83\xdb\xf8\x7a\x01\x1a\x33\xa1\x64\x3b\x38\x77\x5f\x47\xb0\xd7\xd1\x4d\x34\x72\xba\x25\xac\x30\x9d\x2a\xcd\xf2\xb1\xf7\xf0\x5b\x5c\xc3\xf4\x64\x63\xf6\x27\x5c\x6f\x31\x69\xe8\x17\x98\x68\xb4\xcd\xb2\x9f\x70\xbd\x41\xe1\xe7\xdc\xb2\x30\x7a\xea\x0d\xb2\x79\x02\x33\x8d\xa9\xf8\xb8\xb9\x7f\x21\x39\x7e\x44\x03\xaf\xc9\xd7\xfa\xe0\x3c\xd9\xf4\x41\x2a\x8e\xe6\x4d\xbb\x72\x4a\x54\x7e\xf1\xce\xb3\xb8\x9a\x9f\x37\xfe\x14\xdc\xc0\x20\xd3\x49\xde\x00\x63\x4b\x7a\x35\x3f\x1f\x41\x6e\x6d\x35\x3a\x38\x68\x11\x6e\xf4\xe3\x77\x1e\x98\x88\xe6\x82\xbc\x67\xdb\x6e\x63\xce\xb5\x81\x5c\x15\xdc\x78\x97\xe5\x5c\xa3\x31\x68\x36\x40\x07\x79\x90\x65\x3a\x61\x6e\xdd\xe6\xa9\x47\xb0\xd7\x0a\xdd\x54\xbf\x71\x4a\x82\xec\x2d\xcf\x73\xde\xe2\x70\x72\x25\x6c\x2e\x64\xa3\x1d\x9d\xa0\x83\x89\x00\x3b\x6e\x45\x27\xb8\xf3\xfb\x2f\xce\xea\xca\xa0\x0e\x2e\xd5\x0d\x76\x20\xe5\xad\x77\xae\xb2\xcc\x47\x1c\x87\x0b\x2a\xcb\x08\x57\x0a\xbc\xc3\xc2\x8c\x80\x63\x5c\x67\x74\xf7\x53\xd5\x07\xd4\x5a\x69\x47\x78\x4e\xd3\x23\x37\x1c\x16\x5e\x6b\x61\xd1\xc3\x86\xbb\x52\xc2\x40\xc5\x6c\x3e\x20\x04\xc6\xb2\xb2\xeb\xbe\x9f\x64\x14\x83\xb4\xb0\x16\xa5\xdf\x18\x47\x1d\x6c\xf6\xbe\xb6\x55\x6d\xdf\x8a\xc2\x2b\xdc\xf3\xf8\x61\x92\x1c\x79\x5d\x10\x30\x9a\x2e\x8c\xd0\xc9\x9d\x4d\x4e\xfb\xf0\xbe\x42\x69\x2c\x4b\x6e\xfb\x2e\x2a\x5d\x30\x59\xb3\x82\x22\x4c\x55\xdb\x0e\x43\x06\xd0\x5b\x34\x7c\x9a\xe0\xba\x02\x95\x06\x2d\x74\x2d\x81\x6d\x4a\xb2\xa8\xdb\xe0\x44\x08\x0e\x92\x49\x65\x30\x51\xc4\xab\x07\xd0\x30\x9b\x33\xdb\x20\xdf\xb0\x81\x3f\xf0\x74\xad\x94\x92\xc9\xb5\x43\x57\x77\x32\x8d\x10\x82\x53\x25\x71\x5b\x54\xc3\x76\x92\xd7\xf2\x96\xf8\xb6\x4c\x0a\x25\x33\x5a\xbe\x62\xc2\x42\x8c\x76\x85\x28\xa1\xae\x38\xb3\x68\x20\xc6\x94\xdc\xa3\x64\xfa\xd6\xc7\x40\xba\x51\xc0\x91\xf1\xc7\xf4\xbf\x54\x1c\x67\x42\x66\x4b\x51\xa2\xaa\xed\x88\xa2\xda\xd6\x1e\x4a\x21\x6b\x8b\xbb\xc5\xd3\xf9\x07\x19\xce\x82\x4c\xdb\xfe\x43\x1d\xc8\x3e\xcf\xd2\x62\x2a\x85\x6d\xb5\xf8\x7e\xb8\xa5\xc6\x0f\x41\x0d\x13\x68\x1b\x27\xed\x5c\x2a\xa8\x31\x3d\x81\x95\x28\x0a\x88\xd1\x65\x3f\x25\xa3\x4c\xa1\x28\xd6\x90\xa1\xa4\xe3\x45\xee\x3d\x6c\x7a\xb2\x89\x59\xe4\x69\x06\x12\x8d\x44\x00\xbc\xd6\xa4\x78\xa5\x15\x01\x1e\x7d\x6c\x58\x36\xee\x2a\xa4\xf7\x6b\x2e\x34\x26\x56\xe9\xb5\x67\x7a\xad\xf4\xed\x89\xd0\x3b\x22\x45\xa7\x6e\x7b\x1c\x39\x23\x73\x11\x33\x5e\x78\x50\xa4\xa3\x45\x72\x68\x26\x1d\x99\xf5\x87\xd1\x07\x61\xbd\x06\x26\xaf\x2d\x70\xb5\x92\xcd\x9d\x8f\x0e\xa1\x44\x26\x1d\x7c\x68\x87\x23\x52\x35\xcb\x06\x30\x6c\x26\xfd\x00\x88\xd2\xe5\x06\x16\x8b\x35\xb0\xd4\xa2\xbf\x3b\xa9\xd0\xc6\x3a\xaf\xf4\x5c\x5b\x13\x44\x87\xcd\xf1\x8c\xdd\x99\x7b\x1d\xb6\x4f\xd5\xea\x35\x59\x9e\xa3\xc5\xc4\xc2\x2a\x67\x2e\x51\x51\xb5\x4e\xd0\x5f\x70\xd6\x06\x71\xab\x40\xd8\x01\x34\x81\x12\x53\x21\xe9\x68\xe7\x2d\xb9\xf0\xbb\x76\xa2\x9a\x2c\xd5\x27\x79\xea\x0e\xb5\x16\x1c\x8d\x3f\xf5\x18\x73\x76\x27\x54\xc0\x8a\x96\x41\x17\xce\x27\xb3\x2b\xd3\x49\x1e\x74\xe3\x55\x6d\x46\x10\x30\xdf\xa5\x96\xe3\x8b\x8e\xce\xe5\x35\x67\xc7\x1d\xf9\x9c\x95\x67\xf1\x08\x86\x83\x8d\x15\x27\xc2\xdc\x82\xa9\x58\x82\x5f\x59\x48\x44\x5f\xac\x7c\xeb\x2c\xbc\x8a\x1c\x9e\x82\xad\x69\xf7\xdd\x92\x2d\x10\x32\x6b\x99\x38\xe8\xdf\x91\xec\xb7\x2b\xbe\xbc\x44\xf4\x77\xe5\x80\xc0\x83\xd1\x0f\xdb\x37\x28\x50\x76\xdb\x9b\x4d\x5a\xd7\x20\xf7\xf3\x18\x72\xe0\x84\x93\x75\x9f\x27\xaa\x75\x97\xdd\xd0\x17\x68\x37\x43\xcb\xaf\x0a\x2f\xbb\x42\xcc\x8b\x85\x99\x5d\xa1\xa6\xf7\x68\xae\xfa\x20\x92\xf4\x76\x67\xa8\x2e\xd2\xf7\x21\xb7\xb4\x7d\xa5\xfb\x60\x8a\x5a\x97\x7d\xa8\x62\xd3\x87\x8c\xbc\x58\x66\x42\x22\x95\x21\x14\x9f\xfa\x90\x25\xd8\x07\xb5\x11\xbb\x56\x26\x8a\x99\x4d\xf2\xde\xb1\x67\x1a\x78\x92\x66\x6d\xe4\x6a\x04\x86\x8b\xd2\x90\xba\x3b\xf0\x6e\x39\x71\xa2\xfd\x69\x2f\xb1\xac\x0a\xe7\x0e\xff\x09\x7b\xae\xa5\xa0\x84\x05\xe1\x08\xee\x98\x14\x45\xc1\xc2\x44\x86\x16\xe5\x1d\x1c\xc1\x92\x8a\x03\x3f\xe6\xcb\x00\xb7\xc7\x23\xb8\xbf\x1f\x9c\xb6\xdf\x3f\x7f\x0e\x24\x4c\x67\x75\x49\xf9\x1b\x1c\x85\x9a\xd2\x45\xd1\x28\x0a\xb5\xd3\xfd\xfd\x60\xe2\x3e\x7d\xfe\x0c\x51\x44\x40\x13\x09\x4e\xa3\x4b\x66\x6e\xa7\xbc\xe5\x53\xa8\xcc\xcb\x08\x30\xfa\xf9\xf3\x81\x3f\xc3\xc8\xa5\x87\x51\xa1\xb2\x46\x29\x72\x8f\x87\xb4\x01\x71\xbd\x7d\x03\xa1\x72\xc6\x7d\x9c\x52\xd5\x36\x50\x9a\x5c\xd5\x05\xbf\xb1\x9a\x49\x93\xa2\xbe\x49\x5d\x44\x38\x82\x7f\x9d\x2e\x02\xc5\x2a\x47\x79\x63\x55\x47\xd2\x32\x7f\x7f\x79\x73\xfa\xcf\xe9\xf2\xe6\xfd\xfc\xe6\xf4\x1f\xd3\xc9\x32\x2c\xb8\xbf\x17\x29\x48\x84\x01\xc1\x0e\x0c\x21\x6a\x77\x7a\x7f\x5f\x69\x21\x6d\x0a\x7b\x1a\x3f\xd4\x68\xec\x4d\x42\x24\x47\xf0\x67\xbe\xe7\xc9\x37\x48\x23\x40\xc9\x37\xbe\x07\xa6\x0e\x9c\x08\x61\xbe\xca\xb7\xc4\x52\xe9\x35\x71\x1e\x0c\x53\x38\x3b\xde\x0b\x0b\x9f\xe6\xef\x31\xec\x49\x01\x9c\xf0\x70\x93\xbd\x5f\xb7\x83\x7f\x18\xf8\x50\xa3\xaf\x3c\x67\xc7\x8b\xc7\x3c\x74\xff\x4f\xb1\x90\x07\x31\x33\x79\x33\x30\x3b\x5e\x40\x74\x49\x66\x74\x99\x42\xa7\xaf\x9f\x51\x4f\x1b\xd8\x13\xe2\xd3\x3e\xf3\x1c\xb3\x79\x66\x85\xaf\x57\x8e\x0e\x47\x55\x25\x8f\x5e\xcc\x76\x0d\xf3\x12\xcb\x23\x3a\xd7\x2c\x7e\x31\xab\x35\xac\xc9\xbb\x3b\xde\x4f\x99\xec\xc1\xb5\xff\x1f\x2f\x79\x0f\xe0\x4c\x0b\x7e\xea\xe0\xef\xf9\x96\x7f\xf5\x88\xdd\x5f\x3d\xcf\xea\xaf\x9e\x65\x73\x22\x6b\xad\xf9\x6b\xfc\xe0\x15\x44\x15\x42\x59\x89\x97\xbb\xba\x5e\x97\xfc\xe6\xae\xb1\xff\xd9\xcb\x99\x3f\xb0\x4e\x8d\xf8\x84\x2d\xef\xdf\xc7\xfc\x40\x99\xdf\xe2\xfc\x6a\x7e\xf1\xb8\xed\x0f\x1e\x1a\x7f\x71\x3c\x5e\x4e\xde\x41\x14\xfd\xa2\xe2\xc8\x85\xe4\x1d\x9e\xd0\x12\x49\x5f\x5a\x1d\x7e\x31\xe1\xe3\xc5\xd3\x5e\xd0\x2e\x08\xd0\xfe\xa4\x7b\x3d\xcb\x47\x5a\xae\x04\xf2\x51\x85\xda\x9d\xcf\x0b\x3a\x4c\x2b\xa0\xc4\xd2\x21\xf1\x0b\xe2\x7c\xc7\xdc\x96\x55\xc7\xfc\xf7\x83\x8c\xc9\x69\x53\xeb\x35\x4d\x3a\x96\x24\xaa\x96\x96\xca\xb5\xa6\xc7\xe5\x00\x6d\xd0\x15\x59\x95\x32\x46\xb8\xcc\xdc\xe5\x85\xbb\x2b\x42\x2e\x4c\x42\x95\x45\x53\x12\x8e\x3d\xdf\x36\x15\xf4\xdc\xce\x94\xca\x0a\x84\x49\xa1\x6a\x4e\x25\xe1\x2f\x54\xe8\x4c\x4f\x7e\xab\xb0\x99\xe7\xf4\x98\xa0\x4f\x4a\xfe\xe6\xfd\xfc\x5b\xc9\x6e\x23\xd7\x28\xb2\xdc\x6e\xd4\x48\x33\x8d\x29\x6a\x8f\x79\x54\x72\x5a\x5f\xbe\x43\x5d\xc1\x87\x5a\x24\xb7\xc5\xba\xcb\xff\x2f\x3b\x22\x57\xd3\x15\x1a\x19\x5f\x83\x92\x85\x90\x54\xc8\xde\x21\x08\x4a\x5f\x65\x60\x52\x57\xae\xb0\x68\x18\x78\x51\x3f\x13\xd7\x85\x9f\x1e\xc1\xe1\x60\x18\xb6\xb7\xd9\x54\x48\x58\xe2\xbb\x39\x30\x9e\x4d\xa9\x92\xac\x0b\x6b\xe0\x75\xe9\x5a\xdc\x08\x85\x30\xb6\x0f\x36\x20\x87\xe9\x03\xda\xa4\xe9\x16\x86\xae\x83\xc6\x54\xa3\xc9\xdb\xda\xca\xb5\xbb\x97\xcb\xf3\x47\xfb\x1a\x3d\xdf\xa2\xb5\x49\x0e\x1c\x4d\xa2\x45\x8c\x66\xa3\xf3\xdf\x94\xa0\x4d\xa7\x69\x7c\xbd\x08\xd4\x0f\xca\x01\x12\xe7\x26\x1a\x77\xfd\xbb\x8a\x7d\x91\xeb\xd6\x27\x4c\x92\xc5\x50\x50\xa5\x0e\x2c\xd4\x17\x81\x67\xc9\x3e\x29\xd9\x16\xb2\x70\x49\x73\xaf\xc7\xf3\xcb\x37\x7e\x0f\x5b\x9c\xda\xe6\x9e\xc3\x44\x8e\xe9\x5e\x27\xef\x67\xca\xad\x7e\xab\x28\xc7\x64\x5b\x8a\xcb\xd9\x1a\x39\x5d\x03\xba\xa9\x8f\x4c\x85\x89\x48\x05\x72\xf8\x45\xc5\x3e\xc1\xf3\xef\x42\x2a\xb4\x54\x1c\x15\xcd\xf1\xee\x40\x84\x0c\xd5\xfb\x56\xef\xfa\x8b\xbe\xf5\x76\x57\x7a\xbb\xdf\xdc\xbb\x76\xa8\xe2\xbb\x78\x2f\xd2\xc2\xf9\x4a\x03\xa7\x15\xe2\x3a\xb0\x2c\x43\x30\x6b\x63\xb1\x74\xe5\xf0\x7e\x78\xe3\x68\x9e\xdf\x6a\x77\x21\x0d\xda\x07\x57\x34\x5e\xfb\x03\x6b\xca\xb8\x3e\xc4\xb5\x85\xb5\xaa\xa1\xa4\xeb\x09\x12\x91\x3b\xb5\x1c\x3f\x91\xd2\xd4\x5f\x34\xfa\x5b\xe5\x1b\x7a\x01\x49\x7d\xf5\xe8\x2f\xe9\xc2\x2b\xd4\x35\x6e\x13\xe6\x53\xbc\xa0\xa2\x37\xad\x1b\xee\xee\xff\x75\x2e\x2c\xd2\x85\x22\x2b\xba\x02\xb3\x3b\x0a\x57\x48\x1b\x58\xe5\x22\xc9\x9b\xf6\x83\x30\xc0\x8a\x42\xad\x90\x07\x0c\x46\xd3\x76\x02\xc6\x7e\xe2\x44\x68\xd3\x95\xf8\x11\x0c\x0e\x9a\x06\xd2\xe2\xfb\xae\x1f\xfe\xc8\xd3\xc4\x53\x8f\x13\xbb\x9e\x27\x9e\xf3\x40\xb1\xeb\x89\xe2\x6c\xb1\xfd\x28\xf2\xdc\xc8\xe2\xff\x7f\x5f\x91\x03\xb3\x62\xb0\x8d\xcc\x9b\x8b\x9e\x02\xe8\x2d\x7e\xa9\x56\xa5\x7f\xc3\x90\x77\x42\x2b\x49\xb5\x74\x27\x31\xda\x8a\x4b\x5b\x0b\xc7\x3b\xb9\x6f\x6b\xff\x55\xde\x00\x6f\xb5\x2a\x4f\xe5\x5d\xf7\x1e\xe8\xac\xb5\x12\xa9\xed\x44\x5d\x19\xd4\xee\x71\xb8\x1d\x69\x1f\x0e\xda\x91\x71\x6d\xf3\xab\xf9\x79\x37\xb0\x44\xc9\xa4\xdd\x5e\xe6\xc7\xa6\x27\xdd\x88\xbf\xfd\x9e\xaa\xf7\xb5\x26\xd9\xc3\x06\x19\x12\xbc\x50\x16\x55\xa8\xac\x6d\x7e\x87\x07\xbc\x2f\xfa\x65\xbb\x1a\x58\xcf\xe8\x93\xb9\x95\x17\xec\xa3\x28\xeb\xb2\x13\xb6\xf9\x12\xea\x5e\x4c\xbb\xe7\x50\x52\x20\xae\x53\x0a\xab\x0f\xfa\xf2\x2e\x38\xb8\x99\x5f\xfb\x40\xea\xe4\x6a\xff\x1c\xbc\x11\x69\x76\xf7\x9e\x74\x95\x3c\xf1\x34\x4a\xa9\xd5\xdc\x71\x73\xd4\x5b\x23\x66\xf4\xed\x15\xf3\xdb\x2b\x26\xfc\xd1\x5f\x31\x1f\xbd\x4a\xfe\xe7\x12\x14\xff\x9f\x7d\x97\x0a\x95\x3d\x71\xa1\xc6\x8e\xf7\x29\xb1\x76\x0d\x69\x6d\x46\xfe\x89\x23\x0a\xf7\x8b\x3e\xf9\xce\xe5\x16\x51\x50\xdf\x37\xb1\xbd\xe3\xb8\x67\x0e\xc8\xe6\xb3\x89\xcf\x8c\x66\x93\x2e\x5a\xff\x7e\xbd\xfa\x7d\x58\x6a\x26\x0d\x25\xd8\x8d\x5e\x94\xcb\x79\x83\xd9\x1c\x85\xa6\xcc\xd8\xd2\x51\x0a\xd9\x22\xc5\xe0\x1b\x72\x7c\x43\x8e\x3f\x34\x72\xf8\x7b\xf2\xff\xfc\x2b\x88\xff\x06\x00\x00\xff\xff\x15\x68\xce\xdc\x11\x28\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 10257, mode: os.FileMode(420), modTime: time.Unix(1510175229, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\x03\x31\x14\x85\xf7\xf3\x14\xd7\xa9\x5d\x26\x33\x2f\xe0\xaa\x95\xe2\xc6\x85\x08\x2e\x25\xd3\xdc\xd8\x4b\x66\x92\x21\x3f\x2a\x86\xfb\xee\x32\x69\x11\x0a\x63\x77\x87\xc3\x77\xbe\xc5\xd9\xdc\x75\x03\xb9\x6e\x50\xf1\xd4\x6c\xee\x41\x3c\x43\x29\xf2\x55\x45\xfb\xa4\x99\x6b\xe3\x97\xe6\xcd\x07\xbb\xa7\xc0\xdc\x99\xec\x1c\x8e\x22\x26\xed\x73\xaa\x00\xfe\x07\x60\x08\x4d\x29\x64\xc0\x21\xc8\xdd\x9c\x23\xf4\x20\x98\x9b\x52\xe6\x40\x2e\x19\x68\x97\xf9\x8c\x30\xcd\x04\x5b\xdd\x9e\xa1\x0a\x08\x40\xa7\x6b\xba\xcc\x5f\xd4\x74\x18\xa0\x97\x6b\x86\x11\x4e\xef\x9f\x13\x4e\x0f\x5b\xd9\x9b\x43\x7b\x81\xd7\x3d\x7b\x8a\xf6\xa6\xc8\x44\xfa\xc1\x3f\xd3\x19\xbf\x52\x35\xa5\xc8\xc7\x6f\x3c\xe6\xa4\x86\x11\x99\xe1\xcb\x07\x8b\x01\x42\x76\x20\xc4\xd1\x3b\x43\x1f\xcb\x23\xbb\x9a\x98\x41\x88\xa4\xa2\x15\xa4\xaf\xae\xfd\x0d\x00\x00\xff\xff\x24\x76\x8a\x2a\x79\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 377, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xcd\x6e\xe2\x30\x10\xc0\xf1\xbb\x9f\x62\x84\xb4\x47\x67\x79\x81\x5c\x16\x22\xc4\x65\x91\x68\xd4\x8f\x53\x64\xe2\x49\xb0\xe2\x8c\x61\x6c\x87\x56\x91\xdf\xbd\x0a\x20\x2a\xaa\xd2\xdb\x24\xf3\x9f\x9f\x1c\xc9\x0c\xc8\x1e\x21\x87\x41\x91\xb1\x56\x89\x16\x03\xd2\x00\x39\x94\x1c\x51\xe0\x3b\xd6\x31\xa8\x9d\x9d\x92\x71\xcc\x8a\xdb\x77\x4a\x42\x71\x1b\x7b\xa4\xe0\x21\x87\x93\xe3\x0e\x19\x38\x12\x48\x59\x3b\x6a\x4c\x3b\xf5\x8b\xf3\x94\x12\x48\x19\x94\xef\xa4\xd1\xd3\xdf\x52\xf9\x6e\xad\x53\x12\xd6\xb5\x17\xf7\xc5\x71\xb7\x34\x9c\xd2\xdf\xda\x91\x76\x2c\x71\x40\x0a\xd2\xba\x56\x20\xb3\xe3\xef\x55\x13\x89\xd0\x4a\x1f\x34\x32\x0b\x17\xc3\x21\x86\xc7\x8d\x8b\x41\xf8\xbd\x8b\x56\x57\x81\x15\xf9\x06\xb9\x6a\x8c\xc5\xe9\xe1\x6f\xc5\x93\x38\xed\x91\xaa\xe0\xbe\x96\x37\x70\xf3\xbf\x2a\x5e\xd7\x65\xb5\xd9\x56\xc5\xf3\x7a\x51\x8a\x71\x34\x0d\x10\x42\xb6\x38\x44\x0f\x73\x90\x29\x89\x71\x3c\xb0\xa1\xd0\xc0\x8c\xf1\x18\xd1\x87\xaa\x9e\x96\x39\xfc\xd1\xb3\x4b\x78\x8e\x24\x20\xe9\xf3\x74\x25\xb6\xaa\x5f\xed\x60\x9e\x3d\x52\x7a\xec\x1d\x7f\x4c\x4e\x36\x6f\x60\xf5\x6f\x76\x3d\xf9\x59\x5b\x1a\xdf\xfd\xca\x69\xe3\xbb\x3b\xec\x72\x71\xa7\x89\x63\xc4\x88\xe2\x33\x00\x00\xff\xff\x5f\xc0\xd7\xf8\x18\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 536, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xcf\x4a\x03\x31\x10\xc7\xf1\xfb\x3e\xc5\xd8\xd2\x63\xb2\xeb\x55\xd8\x8b\xad\x88\x17\x11\x15\x3c\x27\xcd\xa4\x86\xec\x4e\x96\xfc\x41\x21\xcc\xbb\x4b\x77\x17\xa4\x60\xbd\x0d\xc3\x97\xcf\xe1\xb7\xbd\x69\xb5\xa3\x56\xab\xf4\xd9\x6c\x5f\xee\xdf\x40\x3c\x43\xad\xf2\x5d\x25\xff\x64\x98\xd7\x5f\x38\xff\x3e\x42\xf4\x07\x17\x99\x5b\x5b\x88\x70\x10\x29\x9b\x50\xf2\x9a\xe0\xb5\x04\x63\x6c\x6a\x75\x16\x08\x41\xee\xa7\x92\xa0\x03\xc1\xdc\xd4\x3a\x45\x47\xd9\xc2\x66\x01\x06\xa0\x60\x30\xf5\xb7\x77\xd3\x44\xfd\xce\x6c\x96\x7a\x2e\x05\x20\x99\xf9\x5a\x9d\x57\x35\x3e\x6a\xe8\xe4\x35\x6a\xc4\xb1\xdf\xc9\xce\x9e\xf4\x66\x8d\xff\x76\x0e\x2e\xf9\x7f\x21\xeb\x06\xfc\x95\x96\xfc\x82\x6a\x6a\x95\x0f\xdf\x78\x2c\x59\xe9\x01\x99\xe1\x2b\x44\x8f\x11\x62\x21\x10\xe2\x18\xc8\xba\xd3\x79\x9a\xfd\x7c\x31\x83\x10\x59\x25\x2f\x9c\xb9\xd8\xf9\x27\x00\x00\xff\xff\x80\x45\x84\x4d\x88\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 392, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcf\x6a\xc3\x30\x0c\x87\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\xe9\xe8\x76\xdd\x0a\x3b\x3b\x8d\xb2\x79\x6e\x64\x23\xdb\x6c\x60\xf4\xee\x23\x69\xa1\x29\xac\xf4\xf6\xc3\xfe\xf4\xa1\x3f\xab\x87\xba\x33\x54\x77\x3a\x7c\x15\xab\xf7\xcd\xd3\xbe\x7d\x01\xa5\xbe\x5d\xa7\x48\x8f\x08\x39\x57\x7b\x1d\xec\x6b\x2f\xb2\xf8\xa6\xa8\x83\x0d\xf0\xb8\x78\x42\x66\xc7\x13\xfe\xe1\xd8\x6e\x0d\x8b\xd4\x43\x22\xc2\xa3\x0a\xb1\x47\xe6\x05\xea\x52\xf4\x29\xde\x62\x5d\x8a\x45\xce\x66\x00\x42\xa8\x5a\x9f\x02\x34\xa0\x44\x8a\x9c\x3d\x1b\x8a\x03\x94\x17\xd3\xc1\xa7\xa0\x3c\xb2\x9a\xfa\x81\x75\x5f\x9e\x2a\x66\x5a\x01\x52\x3f\xa7\xb3\xeb\x4d\x8f\xbb\x0e\x9a\xea\xb6\x6e\xc4\x11\xd6\x55\x33\xec\x36\xe5\x19\xff\xdf\xb4\x35\xc1\xde\x51\xc5\xd1\x5f\x54\x27\xfe\xca\x55\xe4\x5c\x3d\xff\xe2\x21\x45\xdd\x1d\x51\x04\x7e\x1c\x5b\x64\xe0\x44\xd3\x5c\x8e\x06\xf3\x39\x6d\xa8\x9d\x93\xc8\xa4\xd4\xc1\x2a\xd3\x5f\x9d\xe4\x2f\x00\x00\xff\xff\x36\x8f\xbd\x5a\xbe\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 446, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
