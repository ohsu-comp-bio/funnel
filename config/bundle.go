// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5f\x73\xdb\x38\x92\x7f\xe7\xa7\xe8\xb3\x32\x55\x49\x95\x24\xdb\x93\x9a\xab\x1b\x55\xf9\xc1\x96\x3d\x8e\x2f\x89\xe3\xb3\x95\xcb\xee\x93\x0b\x24\x9a\x22\x46\x24\xc0\x01\x40\x2b\x8a\x37\xdf\x7d\xab\x1b\x00\x25\x39\x76\xec\xdd\x71\xa6\x56\x4f\x14\xd8\xe8\x6e\xf4\xdf\x5f\x83\x03\x98\x55\x08\x5a\x34\x08\xa6\x04\x5f\x21\x88\xc2\xab\x1b\x04\x87\xf6\x06\x2d\x48\xe1\x45\x2e\x1c\x42\x2e\x8a\x05\x6a\x99\x0d\xe0\xf0\x46\xa8\x5a\xe4\x75\xbf\xe6\x26\x90\x9b\xda\xcb\x7c\x08\x72\xa5\x45\x63\xe8\x09\x6b\xe1\xbc\x2a\x86\xd0\x18\x3d\x37\x32\xcf\x8e\x23\xa7\x44\x9c\x65\x0f\xca\x2e\x4c\xd3\x76\xfe\x31\x99\xb5\x29\x44\x3d\x84\xca\x17\x46\x4b\x63\x87\xe0\xea\xce\x36\x43\x68\x73\x37\x84\xb9\x55\x12\xf5\x5c\x69\x1c\x42\x23\x74\x47\x94\x62\xe9\x46\xb9\xf0\x45\x95\x4d\x83\x80\xc8\xe3\x3b\x9a\xe0\x0d\x6a\x0f\x4b\xab\x3c\xda\x24\xfa\xa5\x7b\x35\x7e\x50\xa5\xf9\xf0\x09\xb6\x18\xc2\x42\x94\x0b\x91\x9d\x10\xf7\x4f\xcc\xdc\x4d\x20\x03\x18\x25\xdb\xd0\x63\x6d\xe6\x59\xf6\xce\xcc\xe7\x68\x27\x19\xc0\x00\xe8\x59\xe9\x39\xd4\x78\x83\xb5\x9b\x80\xc4\xbc\x9b\x0f\x41\xe9\xd2\x0c\x01\xad\x35\x36\x03\x78\x47\x2f\x27\xbc\xc8\x9b\x98\x3d\xf1\x72\xe0\x0d\xf8\x4a\x39\x68\x85\xaf\xc6\x70\x56\x02\x36\xad\x5f\x0d\xc3\x4b\x61\x91\xcf\xe9\x51\x13\xa1\xf3\x12\xad\x1d\x67\x00\x1f\x3a\xdf\x76\xfe\x37\x55\xe3\x04\x76\x76\xb2\xec\x8a\x03\x23\x68\xf4\xc6\x38\xbf\x69\xb5\xdf\x3a\xad\xb1\x8e\xb1\x43\x9b\x89\xe0\x5c\x34\xc9\xd2\x95\x71\x3e\xe3\x9d\x17\xc6\x7a\xe8\x1c\x4a\x28\x8d\x85\x37\xb3\xd9\x05\x79\xbd\xe9\xb4\x2a\x84\x57\x46\x83\xd0\x92\x59\x2e\x31\x07\x29\x5c\x95\x1b\x61\x25\xb3\x9c\xcd\x2e\x68\xf7\x04\xfe\x67\x6f\x6f\xef\x3e\x6e\x97\x17\xd3\x6d\x66\xb4\xed\xf2\x62\x1a\x76\xfd\xba\xf7\x6b\xdc\x75\x89\x7f\x74\xca\x92\xff\x9c\x2a\x40\x74\xbe\x42\xed\x93\x7c\x62\x44\xf2\x63\x1e\x1c\x5e\x9c\x39\xe8\x1c\x99\x5f\x40\x2b\x9c\x5b\x9a\xa0\xce\x80\x0c\x49\xa2\x29\xce\x16\x08\xae\xb3\x48\x06\x6c\xad\x69\xd1\xd6\x2b\xb0\xe8\xbc\x55\x85\x07\x51\x14\xe8\xa2\x17\x28\xc6\x75\xa9\xe6\x50\xaa\x1a\x99\xcb\x4b\x1c\xcf\xc7\x50\x54\x8d\x91\xf0\xdf\x7b\x7b\x50\xb2\x29\xc7\x81\x6c\xbc\x6a\xea\x57\xe1\xa4\x51\xf4\x04\x44\x5e\xec\xff\xfc\x3a\x9c\xe4\x4c\x17\x75\x27\x11\x04\xec\x4c\x45\x51\xe1\x68\x6a\xb4\xb7\xa6\x9e\x80\x36\x23\xe7\x8d\xc5\x9d\x60\xe3\x0a\x85\x44\x0b\x4a\xc3\x29\xfa\xdd\x77\xca\x79\xd2\xaf\x35\xda\xa1\x63\x4e\xac\x79\x88\xfa\x42\x14\x15\x9d\x37\x5f\x81\xd2\x1e\x6d\x83\x52\x09\xbb\x62\x8b\xa8\x02\x1d\x9d\xfe\x58\x39\x4a\x01\xe2\xcd\x82\x27\xe0\x6d\x87\xd1\xbc\xe4\x86\x5a\x31\x2b\xa3\x35\x16\x6c\x57\xaf\x1a\x34\x9d\x8f\xa6\xd3\xa0\x85\x36\x0e\x29\x85\x5d\x74\xd3\x94\xf7\xcc\x02\xdd\x84\x8c\x91\x7e\x30\x80\xd7\x7b\x10\xa9\x83\x10\xca\xdb\x46\x7c\x56\x4d\xd7\x80\xee\x9a\x1c\x2d\xc7\xa2\x6a\xd0\x81\xaf\x84\x07\x01\x16\xff\xe8\xd0\x79\x58\xaa\xba\x86\x1c\xc1\xa2\xb7\x2a\x86\x4a\x29\x54\xdd\xd9\x70\x96\x01\x90\x4c\xc8\xd1\x2f\x11\x75\x24\x73\x50\x9a\xba\x36\x4b\x07\x42\x03\x7e\x6e\x8d\xa6\x18\x11\x35\x27\xbd\x29\x4b\x70\x5e\x58\xcf\x61\xe1\xe1\x97\x5e\x37\xe2\xd6\xb5\x64\xcd\x7d\x68\x94\xee\x3c\x6e\x9e\xed\xbd\xf8\x7c\x19\xb8\x4f\x60\x7f\x2f\x4b\xf5\xc7\x15\x15\xca\xae\x26\xff\xb8\x75\x34\x53\xb0\xbc\xe7\x0a\x76\xb7\x2e\x8e\x21\xbb\x4a\x5b\x52\x3e\x2e\xc1\x94\x31\x85\x6d\xa7\x41\x6c\x32\xf5\x68\xfb\x74\xb8\xcf\xf6\x89\xd9\xa5\xa0\xd2\xb8\xbf\x69\xf6\xfd\x78\xb2\x5e\x4a\x23\xf4\x0a\xbc\x70\x0b\x0e\xe8\x24\x84\x02\xcb\x68\xdc\x16\x95\xd8\x4e\xab\x4e\x2f\xf8\xc0\x89\x49\x6d\xf4\x9c\xb6\x2f\x85\xf2\xbd\xdd\xbb\x56\x0a\x8f\x0e\x72\x2c\x8d\x25\xe7\xda\x45\xc8\x3a\x6d\x24\x82\x44\x21\x1f\xd2\xff\xdc\x48\xbc\x50\x7a\xfe\x40\xe8\x6c\x78\xe2\x1e\xf1\x64\xea\x28\x83\xcb\x9f\xb0\x7e\x78\x57\x07\x72\xc5\x93\xb4\x38\xd3\x6a\x1d\xc0\xaf\xf7\xb6\xd4\xf8\x25\xaa\xe1\xb2\x8c\x48\x27\xa9\x86\xc4\x62\x1c\x75\x38\x3b\xee\xe3\x55\x74\xde\x34\x82\x0a\x53\x5d\xaf\x60\x8e\x9a\x6c\x8b\x2c\xff\xec\x38\xd4\xe4\xc8\xa2\xd7\xaf\x12\x64\x3f\xd4\xa0\x64\x8d\x7c\x34\x3a\x2b\x52\x30\x09\xcd\x64\x31\x0d\x87\xa0\x62\x62\xb8\xaa\xf3\x20\xcd\x32\x46\xc7\x68\x1f\x1a\x14\x9a\x92\x08\x2d\x52\x40\x6a\xd3\xe7\x2e\xec\xa5\x97\x61\x01\x54\xc3\xc5\xc1\x63\xbd\x02\x51\x7a\x0c\x51\x5b\x2a\xeb\x3c\x07\x09\xf1\xec\xed\x31\xda\x0f\x0a\x1f\xb2\xa9\x82\xf4\xed\x33\x7a\xbb\x22\x27\x48\xf4\x58\x78\x58\x52\x1a\x5b\x74\xa6\xb3\x05\x86\x46\x25\xfa\xde\xeb\x0d\x28\x3f\x06\x66\x78\x8c\xa5\xd2\xe4\xa7\xcb\x9e\x58\x85\xd3\xb2\xa0\x50\x4a\xbb\x10\x98\x60\x6e\xd0\x12\x46\x70\xa1\x27\xe6\x58\x89\x1b\x65\xb8\x69\xf5\xdb\xc9\x37\xc4\x78\x7a\xf1\xd1\xad\x65\x8e\xd3\x6a\xdb\xb9\x09\x70\x2f\xe1\x72\x77\xf8\x7e\x4d\x33\xe4\x12\x7b\x94\x48\x2f\x45\x73\x9a\x4f\x60\x6f\xdc\x53\x1f\x2b\xb7\x00\xd7\x8a\x02\x1f\xdc\x44\x24\x1b\xbb\x06\xf0\x1b\xfb\x71\x39\xe2\xfe\x0f\xbe\xa3\xb3\x8e\xbf\xcd\x7b\xb7\xd2\x05\x2c\x95\xaf\xee\x6f\xc9\xf7\xc5\xec\x47\xce\xb9\x90\xf7\xbf\x6c\x07\x6b\x5f\x6d\x3f\x19\xbb\x48\x75\x86\xd0\x80\x83\xc2\x22\x05\x22\xc8\xce\x92\xd5\x5b\x6b\xa8\xc1\xd1\x63\x0a\xdd\x04\x28\xd8\x0d\xca\x81\x54\x16\x0b\x6f\xec\x8a\x84\x12\xc3\x63\x65\x27\x30\xde\x0d\xcd\x6e\xb4\x34\x76\x31\x92\xca\xfe\x6b\xc7\x45\x42\x0a\xc2\x2d\x08\xc7\xf4\xd5\x23\x76\xd9\x67\x3b\x3d\xed\x7c\x1f\xfb\x4c\x2f\xec\xa5\xf3\xd2\x74\x7e\x17\xad\x7d\x05\x4e\x7d\x09\x1e\xcc\x57\x51\x81\xbc\x2b\x4b\x82\x8d\xdb\x85\x8d\x24\x1e\xf1\x9b\x2b\xf5\x25\xd5\x59\x2a\x4f\x7b\xf0\xf6\x28\x08\x3a\x37\xb6\x09\x89\x40\x00\x88\xed\x0e\x12\x6b\x24\xbe\xca\x3b\x5e\x22\x33\xf7\xe6\x8c\x49\x87\x9f\xb1\xe8\x7c\x6f\xa6\x19\x99\xdc\xb4\x1c\xee\x32\x34\xea\xd8\x14\x37\xa3\xfd\x1d\x8a\x1b\xec\x7d\x51\x8a\xda\x61\x96\x0d\x46\xcf\xfb\xcb\x06\x90\xf0\x3f\x75\x52\xb9\x6b\x2c\x30\xfa\x85\x08\x7f\x77\xdf\x08\x2d\x6b\xb4\xee\xf9\x45\x67\x47\xa6\xf6\xc7\x47\x93\x88\x9f\x28\x2f\x42\x70\xf4\xb3\x4d\x04\x61\xf4\xee\x9e\x68\x8c\xff\xc7\x34\xb2\x1c\x33\xa6\x4f\xcc\x8e\x84\x43\x86\xbf\xde\x50\xbf\xe6\x42\x9b\x50\x3f\x78\xb6\x37\x15\x3e\x7a\x48\xa4\x93\x08\xec\x42\x05\xfc\x74\x05\x16\xe7\xca\x68\xae\x3a\xf4\xc0\xf5\x3c\xbd\x3b\x0c\x88\x71\x81\x2b\x38\x3b\xce\x00\xde\xe2\x6a\xeb\xfd\x15\x16\x16\x7d\x22\x7b\x8b\x2b\xea\xb6\xbc\x16\xda\xc2\x49\x98\x3b\xe2\xc9\x2d\x96\xea\xf3\xa6\xaa\x4a\x4b\xfc\x8c\x0e\x5e\x52\x40\x0f\xc3\xac\xe3\x86\xdc\x41\x1c\xa1\xcd\x33\x7a\x1f\xb6\x6d\xa9\xfd\xf1\xf2\x5d\x02\xfc\x71\xb2\x71\x28\x6c\x51\x6d\xa4\xd9\xc7\xcb\x77\x13\xa8\xbc\x6f\x27\xbb\xbb\x3d\xf2\x9f\xfc\xfa\x33\x01\xf6\x01\x9c\x1a\x33\xaf\x11\xa6\xb5\xe9\x24\xc7\x05\x43\xd4\x90\x57\xc9\x29\xe3\xac\x7f\x41\xfa\x5f\x58\xf3\x3b\x16\xbe\x3f\x7e\xf2\xa3\x28\x0a\xd3\x11\xc2\xb4\x28\x03\x32\x73\xec\xce\x90\x01\x1f\x38\xf8\x45\xcd\xd3\x4e\x6b\x9c\x53\x5c\x66\x37\x89\xef\xef\xb2\x52\xb9\x82\x3a\x04\x06\xc4\x53\x5a\xd3\x84\xf3\xea\x1b\x65\x8d\x6e\x50\x33\x82\x9d\xae\x19\xf5\x03\x12\x40\xf6\x9e\xc6\xbc\x14\x24\x87\x52\x5a\x07\x95\xa9\xa5\x0b\x93\xa5\x94\x16\x9d\x63\x64\x99\x46\x0c\x94\xd1\x76\x5c\x1d\x78\x47\xe8\x3d\xa3\x8d\xb9\x89\x7b\x42\x0a\x59\xe5\xb6\x43\x98\xc3\x90\x31\x23\x55\x7e\xa5\x21\xea\x10\xc0\x0c\x59\x37\x38\x90\x77\x30\x72\xef\xc7\xf1\x0d\xcf\xce\x52\x3f\x8f\xaa\x36\x6c\xdb\x08\xa8\xef\x40\xa5\x38\x18\x11\xd0\xe4\x09\x42\xc2\xb2\x42\x1d\xcc\xc5\x8d\x3f\x81\x7e\x02\x6f\x5a\x02\xcf\x54\x04\xa5\x09\x18\xd3\x6c\xc4\x7d\xb8\x6f\xd1\x8e\x5a\x87\xd1\xe4\xa9\x30\x88\xac\x55\xf9\x82\xd6\x0c\xc3\xd0\x24\xea\x1a\x1a\xb1\x82\xbc\x36\xc5\x82\x14\x41\xd2\x81\xb4\x22\x31\x41\xb1\xf5\xb0\x91\x26\x9a\x1c\x01\x1d\xe5\xa3\x72\x55\x00\x4e\x8f\x83\x33\x0e\x74\x87\x96\x0d\x4b\xfa\xa7\xc9\x8b\x47\x6b\x1b\xc2\x61\x2b\xea\xa2\x37\x95\x56\x3c\x20\x6c\xcf\x93\xcc\x4f\x12\x36\x36\x7a\xdb\x73\x92\x50\x0b\x4a\x1a\xb3\x68\xfd\x78\x5d\x94\xb0\x66\x5d\x93\x16\x31\xba\xd6\x13\x20\xa5\xf8\x5b\x51\x2e\xc4\x84\xf3\x9e\xe3\x27\x85\x0d\x93\xce\x4c\xab\x8a\xde\xc1\x3f\xa2\xa8\xc7\x8b\x14\x38\x8a\x57\x20\x3f\xa0\x7a\xbf\x99\x4d\xf9\x7e\x87\x4e\x36\xc3\xa6\xad\xb9\x4f\xff\x83\xcf\xd9\x69\x45\x87\x46\x38\x80\x1b\xa1\x55\x5d\x0b\x5e\x9e\xa3\x47\x7d\x03\x07\x30\xa3\x61\x94\x56\x42\x67\x64\xc4\x78\x00\xb7\xb7\xe3\x93\xfe\xff\xd7\xaf\x4c\x20\xec\xbc\xa3\xac\x76\x70\x90\x3a\x2e\xcd\x4f\xa3\x51\x9c\xd3\x6f\x6f\xc7\x53\x7e\xfa\xfa\x15\x46\x23\xaa\x54\x23\x25\x69\x75\x26\xdc\xe2\x4c\x46\x2e\x04\x0a\x98\x7f\xec\xa7\x5f\xbf\xee\x86\xcb\xa9\x11\x17\xd7\x51\x6d\xe6\x41\x1d\x6b\x8d\xbd\x4b\x19\xdb\x4e\xb8\x79\x61\x32\xc3\x57\x2f\x0f\xd3\x99\xce\x33\x9d\xab\x4c\x57\xcb\x6b\x6f\x85\x76\x25\xda\xeb\x92\xe1\xd9\x01\xfc\xfd\xe4\x8a\xdf\x53\x62\x5e\x7b\xb3\x26\xe8\x19\x7f\x38\xbf\x3e\xf9\xdb\xd9\xec\xfa\xc3\xe5\xf5\xc9\xff\x9f\x4d\x67\x4c\x7e\x7b\xab\x4a\xd0\x08\x63\x42\xb8\xb0\x07\xa3\x78\xba\xdb\xdb\xd6\x2a\xed\x4b\xd8\x89\x23\xf5\x75\x41\x04\x07\xf0\x93\xdc\x09\xc4\x3d\xe1\x08\x50\xcb\xfe\x5f\x64\xc7\x28\x98\xe0\xec\x77\x38\x36\xd8\x10\x9e\x39\x80\x9f\xc6\x7b\x25\x9c\x1e\xed\xc4\x6d\xdf\xe7\x1c\xa0\xf2\x23\xac\x25\x41\xee\x4d\xc6\x61\xd7\x37\x9c\xf9\xef\x1f\x1d\x76\x98\x65\x17\x47\x57\xf7\xc5\xdd\xe0\xbf\x72\xa5\x77\x73\xe1\xaa\xf0\xf7\xe2\xe8\x0a\x46\xe7\xe4\x26\x9e\xfe\x92\x7e\x61\xdd\x3c\xe6\xbe\x40\x86\x8f\x45\xc3\xe3\x6e\x09\x8c\xea\xd0\xc1\x0f\xf6\x27\x6d\xab\x0f\x9e\xc1\x37\x89\x6d\x83\xcd\x01\x59\x6f\x9e\x3f\x83\x57\x12\x53\x8a\xd5\x35\xd7\xef\xb9\xe4\x4e\xda\xfe\x9b\x69\x9a\x9d\x5a\x25\x4f\xf8\x66\xf8\x29\x9e\x7d\x71\xaf\x5f\x5f\x3c\xc5\xab\x2f\x9e\xe0\x53\x22\xea\xfd\xf5\x54\x2f\xbf\x80\x51\x8b\xd0\xb4\xea\x39\x12\x2f\x68\x50\x5d\xdf\x24\xef\x9e\x3e\x87\x73\x23\xd3\x92\x86\xa2\x9e\xeb\x5f\xe0\xdc\xab\xba\xb3\xcd\xfd\x7e\xdd\xdd\x76\xec\xd5\xd1\xe1\x6c\xfa\x06\x46\xa3\xdf\x4d\x3e\xe2\x26\xff\x8d\x97\x7b\x12\x1d\x2e\xba\xf6\xef\x2c\x87\x2a\xfe\x98\x87\x7b\xf2\x58\x74\x1f\x09\x9b\x27\xf8\xbf\xe7\x48\xe5\x77\xd4\xa2\x65\x5b\x3c\x4b\x30\xf4\xac\x1b\x6c\xb8\x52\x3e\x4b\x05\x5e\xb3\xf5\x4d\xbb\x66\xfb\x17\xc4\x03\xcf\x49\x47\xc2\x17\x15\x48\x74\x85\x55\x39\xba\x8d\xeb\xf7\x74\x19\x94\xb0\x1b\x0d\x55\x81\xfa\xee\x55\x6b\x96\xf8\x04\x50\xff\xbf\x26\x0f\xb7\x4d\xbc\xbd\x10\x9a\x31\xa6\xf2\x15\xf2\x2d\x22\x7f\x12\x89\x2c\x1b\xf1\xc5\xe8\xfe\x4e\x09\xce\xe9\xdd\xcb\xc3\xcb\xf3\x57\x84\xed\xb6\xf8\x4c\x60\x27\xc6\x03\xc5\xa4\xc4\x72\x27\xc9\xfa\x3f\xea\x46\x7f\x4e\x0c\xb3\xd8\x96\xc0\x3d\x6e\xe7\xce\x24\x9a\x26\x3b\xd7\x62\xa1\x4a\x85\x12\x7e\x37\x79\x68\x87\xe1\x9b\x8c\x89\xf7\x3e\x4c\x45\xef\xe4\xda\x10\xea\x9b\x41\x76\x3d\xb2\x6e\x0e\xa6\x3f\x00\x89\x5e\x79\x63\xc5\x1c\x7f\x00\x00\x1d\xfc\x89\xe1\xf1\xa1\xd1\x31\x1b\xc0\x3b\x1a\xec\xb8\xfd\x81\x5b\x39\x8f\xcd\x38\xe3\xa5\x78\x90\x10\x67\x9f\x2a\xe5\xb1\x56\x8e\x87\x30\x1e\x05\x37\x2e\x7d\x5a\xe1\x2b\x07\xcb\x4a\x15\x55\xba\xe8\x52\x0e\x04\xcd\x58\x28\xe3\x70\x8c\x2e\x8c\x94\x61\xf1\x58\xad\x27\x84\xf1\x2e\x69\xf1\x66\x36\xbb\x88\x12\xfb\xaf\x0e\xde\xf0\x45\x70\x6d\x84\x84\xb6\xcb\x6b\x55\x40\x40\x94\x71\x74\x59\x62\x0e\x37\x4a\x80\x80\xd3\x93\x59\xfa\xbc\x32\xce\x36\x58\x4d\xb6\xa6\x49\xca\xae\xca\xfb\xf6\xa5\x7b\xb5\xb9\xc3\x3d\x74\x1f\x77\xdf\x70\x76\xe7\xd3\x4f\x08\xf7\xab\xd7\x93\xf5\x37\x28\x99\x2e\xaf\x9e\xf9\xb3\xd0\x9d\x8f\x35\xcf\x75\x37\x43\xb3\x53\x28\x41\xc8\x03\x3a\x39\x20\x7d\x48\x66\x1d\xae\x5e\x43\x6b\xcd\x8d\x92\x68\x1d\xb8\xae\xa8\x40\x38\x78\xaf\xb4\x32\xe9\x02\x6d\x8a\x6d\x95\x0d\xe0\x14\x35\x5a\x55\x90\x31\x06\xec\xd9\xb5\x41\xf8\x63\x1c\x2d\x02\x9c\x68\xd9\x1a\xa5\x83\xf4\xb0\x94\x54\x0e\xff\x36\x95\x0b\x17\x34\x1b\xce\xbc\xcf\xc6\xff\xb9\x57\x30\xd9\xd5\x52\x95\xfe\x7e\xbd\x69\x9a\x3e\x7f\x60\x9a\x06\x38\xec\x7c\xc5\x77\x57\x61\x7e\x46\x2d\xb4\xdf\xa0\x0e\x0b\xf1\xab\x4b\xaa\x74\xfd\xfb\x7f\x06\x00\x00\xff\xff\xe7\x11\x76\x38\x4c\x21\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 8524, mode: os.FileMode(420), modTime: time.Unix(1515441439, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcf\x4a\xc3\x40\x18\xc4\xef\x79\x8a\x31\xb5\xc7\xdd\xe4\x05\x3c\x35\x52\xbc\x78\x10\xc1\xa3\x24\xcd\xb7\x76\x49\xb2\x1b\xf6\x8f\x8a\xcb\xf7\xee\xb2\xdb\x22\x14\x6a\x6f\xc3\xf0\x9b\xdf\x61\x36\x77\xcd\xa0\x4d\x33\xf4\xfe\x58\x6d\xee\x21\x9e\x91\x92\x7c\xed\xfd\xf4\x34\x32\x97\xc6\xe6\xe6\xcd\xba\xa9\xd3\x8e\xb9\x51\xd1\x18\x9a\x85\x0f\xa3\x8d\xa1\x00\xf4\x1f\x40\xce\x55\x29\x69\x05\x43\x90\xbb\x35\x7a\xb4\x10\xcc\x55\x4a\xab\xd3\x26\x28\xd4\x79\xbe\x12\x96\x55\x63\x3b\xd6\x27\xa8\x00\x02\x64\xc6\x92\xce\xf3\x97\x7e\xd9\x0f\x68\xe5\x35\xc3\x8c\xe3\xfb\xe7\x42\xcb\xc3\x56\xb6\x6a\x5f\x9f\xe1\xeb\x9e\x4e\xfb\xe9\xa6\x48\x79\xfd\x43\x7f\xa6\x13\x7e\xa1\xaa\x52\x92\x8f\xdf\x74\x88\xa1\x1f\x66\x62\xc6\x97\x75\x13\x39\xb8\x68\x20\xc4\xc1\x1a\xa5\x3f\xf2\x23\xbb\x92\x98\x21\x44\xc8\x7f\x76\x17\xcf\xfe\x06\x00\x00\xff\xff\x43\xce\xa0\xb4\x78\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 376, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x11\xd2\x5d\x3a\x97\x17\xc8\xe6\x42\x84\xd8\x5c\x24\x1a\xf5\x67\x15\x85\x64\x12\xac\x38\x63\x18\x7b\x42\xab\xc8\xef\x5e\x05\x10\x15\x55\xe9\xee\xd8\xe7\x3b\x9f\x46\xc8\x0c\xc8\x1e\x21\x85\xa1\x24\x63\x6d\xa9\x5a\x0c\x48\x03\xa4\x90\xb3\xa0\xc2\x77\xac\x24\x94\x3b\x3b\x21\xe3\x98\x64\xb7\x77\x8c\xaa\xe4\x56\x7a\xa4\xe0\x21\x85\x93\xe3\x0e\x19\x58\x08\xb4\xae\x1c\x35\xa6\x9d\xf8\xc5\x39\xc5\x08\x5a\x87\xd2\x77\xeb\xe5\xf4\x99\x4f\xa9\x8e\x51\x59\xd7\x5e\xb4\x2f\x8e\xbb\xa5\xe1\x18\xff\x56\x8e\x6a\xc7\x1a\x07\xa4\xa0\xad\x6b\x15\x32\x3b\xfe\x4e\x35\x42\x84\x56\xfb\x50\x23\xb3\x72\x12\x0e\x12\x1e\x33\x4e\x82\xf2\x7b\x27\xb6\x2e\x02\x97\xe4\x1b\xe4\xa2\x31\x16\xa7\xbb\xdf\xb2\x27\x75\xda\x23\x15\xc1\x7d\x95\x37\xe1\xe6\x7f\x91\xbd\xae\xf3\x62\xb3\x2d\xb2\xe7\xf5\x22\x57\xe3\x68\x1a\x20\x84\x64\x71\x10\x0f\x73\xd0\x31\xaa\x71\x3c\xb0\xa1\xd0\xc0\x8c\xf1\x28\xe8\x43\x51\x4d\x65\x0a\x7f\xea\xd9\x05\x3c\x43\x1a\x90\xea\x73\xba\x2a\xb6\x65\xbf\xda\xc1\x3c\x79\x64\xe9\xb1\x77\xfc\x31\x79\x92\x79\x03\xab\x7f\xb3\xeb\xe4\x67\xdb\xd2\xf8\xee\x57\x5d\x6d\x7c\x77\x27\xbb\x2c\xee\x6c\xea\x28\x28\xa8\x3e\x03\x00\x00\xff\xff\xbb\x66\xa4\x8a\x17\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 535, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\x4d\x4b\xc4\x30\x10\xc6\xf1\x7b\x3f\xc5\xd8\x65\x8f\x49\xeb\x55\xe8\xc5\xad\x88\x17\x11\x15\x3c\x37\x9b\xc9\x1a\xda\x4e\x4a\x5e\x50\x08\xf3\xdd\xa5\x2f\x20\x0b\xd6\xdb\x30\xfc\xf9\x1d\x9e\xc3\x4d\xa5\x2c\x55\xaa\x0b\x9f\xc5\xe1\xe5\xfe\x0d\xc4\x33\xe4\x2c\xdf\xbb\xd0\x3f\x69\xe6\xed\xe7\xe6\xdf\x87\xf3\x7d\x6b\x3d\x73\x65\x12\x11\x0e\x22\x44\xed\x52\xdc\x12\xdc\x4b\xd0\xfb\x22\x67\x6b\x80\x10\xe4\x69\x4a\x01\x6a\x10\xcc\x45\xce\x93\xb7\x14\x0d\x94\x2b\x30\x00\x39\x8d\xa1\xb9\xbd\x9b\x26\x6a\x8e\xba\x5c\xeb\xa5\x14\x80\xa4\x97\x6b\x73\x5e\xbb\xf1\x51\x41\x2d\xf7\xa8\x11\xc7\xe6\x28\x6b\x73\x51\xe5\x16\xff\xed\xb4\x36\xf4\xff\x42\xc6\x0e\xf8\x2b\xad\xf9\x15\x55\xe4\x2c\x1f\xbe\xf1\x9c\x62\xa7\x06\x64\x86\x2f\xe7\x7b\xf4\xe0\x13\x81\x10\x67\x47\xc6\x5e\xe6\x69\x4e\xcb\xc5\x0c\x42\xc4\x79\xdc\xf6\x6a\xe6\x9f\x00\x00\x00\xff\xff\xd8\xa6\xd9\x67\x87\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 391, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x6a\xeb\x30\x10\x45\xf7\xfe\x8a\x79\x0e\x59\xca\xf6\xfb\x84\xc6\x2e\x69\xb7\x6d\xa0\x6b\x39\x1e\xb7\xaa\xe3\x91\x18\x49\xb4\x20\xe6\xdf\x8b\x9c\x40\x1c\x68\xe8\xee\x22\x1d\x1d\x34\x73\x37\xff\xea\xde\x50\xdd\x6b\xff\x51\x6c\x5e\x77\x0f\x87\xf6\x09\x94\xfa\xb4\xbd\x22\x3d\x23\xa4\x54\x1d\xb4\x9f\x9e\x07\x91\xd5\x35\x05\xed\x27\x0f\xff\x57\x47\xc8\x6c\x39\xe3\x6f\x96\xa7\xce\xb0\x48\x3d\x46\x22\x3c\x29\x1f\x06\x64\x5e\xa1\x36\x06\x17\xc3\x3d\xd6\xc6\x50\xa4\x64\x46\x20\x84\xaa\x75\xd1\x43\x03\x4a\xa4\x48\xc9\xb1\xa1\x30\x42\x79\x35\x1d\x5d\xf4\xca\x21\xab\xfc\x1f\xd8\x0e\xe5\xf9\xc5\x42\x2b\x40\x1a\x96\x74\x71\xbd\xe8\x79\xdf\x43\x53\xdd\xd7\xcd\x38\xc3\xb6\x6a\xc6\xfd\xae\xbc\xe0\xbf\x9b\x3a\xe3\xa7\x3f\x54\x61\x76\x57\xd5\x99\xbf\x71\x15\x29\x55\x8f\xdf\x78\x8c\x41\xf7\x27\x14\x81\x2f\xcb\x13\x32\x70\xa4\x3c\x97\xa5\xd1\xbc\xe7\x0d\xb5\x4b\x12\xc9\xca\xdc\x43\x77\xd3\xc8\x4f\x00\x00\x00\xff\xff\x46\x53\xad\xe9\xbd\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 445, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
