// Code generated by go-bindata. DO NOT EDIT.
// sources:
// config/kubernetes-pvc.yaml (309B)
// config/gridengine-template.txt (346B)
// config/pbs-template.txt (361B)
// config/slurm-template.txt (415B)
// config/kubernetes-pv.yaml (560B)
// config/kubernetes-executor-template.yaml (1.232kB)
// config/default-config.yaml (11.655kB)
// config/htcondor-template.txt (505B)
// config/kubernetes-template.yaml (1.483kB)

package config

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configKubernetesPvcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\x6a\xf3\x30\x10\x84\xef\x7a\x8a\x81\xff\xec\xfc\xe4\xaa\x6b\x28\xa5\x87\x84\x50\x8a\x73\xde\xca\xd3\x22\x6c\x4b\xaa\x56\x32\x2d\x26\xef\x5e\x6c\x6c\x4a\x8e\xb3\x3b\xf3\xc1\xf7\x0f\xb7\x98\x7b\xe6\xff\x4f\xdf\x74\xb5\xc4\x8c\x6b\x7b\x32\x92\x7c\xcb\xac\x3e\x06\x8b\xe9\x68\x7a\x1f\x3a\x8b\xeb\x72\xd1\xc2\x50\xda\x38\xd4\x91\xa7\x41\xfc\x68\x46\x16\xe9\xa4\x88\x35\x40\x90\x91\x16\x1f\x35\x04\x0e\x4d\x9a\x5c\x33\xcf\x87\x37\xd1\xfe\xa5\xbb\xdf\xb7\xb7\x26\x71\xb4\x98\x67\x1c\x2e\x7b\xc4\xfa\x1d\xe4\x9d\x83\x2e\x18\x40\x52\xda\x39\x6b\x2e\x2b\x64\x99\xfd\xf1\x34\xd1\x2d\x6d\x71\x8e\xaa\xe7\xd8\x71\x1b\x37\x78\xa5\x74\xb7\xec\x0b\xcf\x12\x7e\x0c\x90\xa9\xb1\x66\xb7\x17\x32\xbf\x2a\xb5\x6c\x09\xd0\x12\xb3\x7c\xd2\xe2\xf8\xec\x0d\x30\xad\x76\x97\x47\x97\x07\x95\xdf\x00\x00\x00\xff\xff\x01\x27\x69\xed\x35\x01\x00\x00")

func configKubernetesPvcYamlBytes() ([]byte, error) {
	return bindataRead(
		_configKubernetesPvcYaml,
		"config/kubernetes-pvc.yaml",
	)
}

func configKubernetesPvcYaml() (*asset, error) {
	bytes, err := configKubernetesPvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/kubernetes-pvc.yaml", size: 309, mode: os.FileMode(0644), modTime: time.Unix(1732590327, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe9, 0xc, 0x1f, 0x92, 0xa1, 0xb3, 0x7, 0x8, 0xb0, 0x29, 0x2f, 0x8e, 0x77, 0x9d, 0x10, 0x18, 0xc6, 0xcd, 0x90, 0xbf, 0xdf, 0x92, 0xf6, 0xf5, 0x81, 0x70, 0x47, 0xb6, 0x35, 0x85, 0x1a, 0x9d}}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\xc4\x30\x14\x85\xf7\x79\x8a\x6b\xc7\x59\x26\xed\x0b\xb8\xb2\x30\xb8\x71\x21\x82\x4b\x69\xc9\x0d\x13\x32\xf9\xe1\x26\x51\x30\xe4\xdd\xa5\x69\x11\x0a\x75\x76\x97\xc3\x77\x3e\xb8\xe7\xf4\xd0\xcf\xda\xf5\xf3\x14\xaf\xec\xf4\x08\xfc\x15\x4a\x11\xef\x53\x34\x2f\xb2\xd6\x96\xf8\x25\xf9\xf0\x64\x46\x4d\xb5\xf6\x2a\x3b\x87\x37\x1e\x93\xf4\x39\x35\x00\xff\x03\x90\x88\x95\xa2\x15\x38\x04\xf1\x1c\x72\x84\x01\x78\xad\xac\x94\x40\xda\x25\x05\xdd\x52\x0f\x08\x36\x68\x38\xcb\x6e\x85\x1a\xc0\x01\x9d\x6c\xd7\x56\x7f\x9b\xec\x65\x86\x41\x1c\x19\x6e\x70\xfd\xfc\xb2\x68\x9f\xce\x62\x50\x97\x6e\x83\x8f\x3d\xa3\x8e\xe6\xae\x48\x45\xfd\x83\x7f\xa6\x15\xdf\xa9\xd8\xfa\x20\x7c\x7b\x32\x48\x40\xd9\x01\xe7\x69\x59\x6c\xdc\x6d\xf7\x1b\x00\x00\xff\xff\xcf\x92\x30\x7f\x5a\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 346, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0xf2, 0xbf, 0x61, 0x66, 0xfc, 0x3e, 0xf3, 0xf9, 0x1f, 0x77, 0x7b, 0xa2, 0xfa, 0x90, 0x1d, 0xf1, 0x81, 0x31, 0xca, 0xc2, 0x64, 0x2, 0x29, 0x41, 0x39, 0xe9, 0xac, 0x46, 0x4, 0x46, 0x43}}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xc1\x4a\xc4\x30\x10\xc6\xf1\x7b\x9f\x62\xec\xb2\xc7\xb4\xf5\x2a\xf4\xa2\x05\xf1\x22\xa2\x82\xe7\x86\x4c\x34\xa4\x9d\x84\x49\x82\x87\x90\x77\x97\xdd\x04\x64\xc1\xf5\x16\x86\x3f\x3f\xc8\x77\xb8\x19\xa5\xa1\x51\xae\xe1\xab\x3b\xbc\xdc\xbf\x81\x78\x86\x9c\x87\xf7\x35\xd8\x27\x55\x4a\xbb\xb9\xd3\xed\xc3\xb1\x5d\x0c\x97\x32\xea\x44\x84\x9b\x08\x51\xb9\x14\x5b\x82\xd7\x12\x64\xee\x72\x36\x1a\x08\x61\x78\xf0\x29\xc0\x04\xa2\x94\x2e\x67\xcf\x86\xa2\x86\xbe\x02\x1b\x90\x53\x18\xe6\xdb\x3b\xef\x69\x3e\xaa\xbe\xd6\xe7\x52\x00\x92\x3a\xbf\x9a\xf3\xba\xee\x8f\x12\xa6\xe1\x1a\xb5\xe3\x3e\x1f\x87\x49\x7f\xca\xbe\xc5\x7f\x3b\x8b\x09\xf6\x5f\x48\x9b\x0d\x7f\xa5\x9a\x5f\x50\x5d\xfd\x29\x7c\x3b\xb6\xc8\xc0\x89\x40\x88\x78\x9a\x6f\xb9\x18\xf2\x27\x00\x00\xff\xff\x94\x91\x42\x0b\x69\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 361, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0x79, 0x28, 0x19, 0xf9, 0xa3, 0x7b, 0xf0, 0x79, 0x32, 0xc3, 0xcd, 0x53, 0x5d, 0x65, 0xb0, 0xc4, 0xdb, 0x64, 0x16, 0x86, 0xa3, 0x9f, 0x80, 0x59, 0xed, 0x48, 0xa6, 0xb1, 0x14, 0xc4, 0x5f}}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\x0d\x74\xbb\x6e\x85\x9d\x9d\x45\x61\x9e\x67\xd9\x48\x36\x3b\x18\xbf\xfb\x48\x53\x68\x0a\x0b\xbb\x19\xeb\xfb\x3f\xa4\x7f\xf7\xd0\x0e\x86\xda\x41\xcb\x67\xb5\x7b\x3b\x3c\x9d\x8f\xcf\xa0\xd4\x97\x1f\x14\x69\x87\x90\x73\x73\xd6\x62\x5f\xc6\x52\x56\x63\x8a\x5a\xac\xc0\xe3\xea\x0b\x99\x3d\xcf\xf8\xbb\x67\xdb\x1b\x2e\xa5\x9d\x12\x11\x7e\x2b\x89\x23\x32\xaf\x50\x9f\x62\x48\x71\x8b\xf5\x29\x56\x39\x9b\x09\x08\xa1\x39\x86\x24\xd0\x81\x2a\xa5\xca\x39\xb0\xa1\x38\x41\x7d\x33\x7d\x84\x24\x2a\x20\xab\x79\x1f\xd8\x8f\xf5\x92\xb8\xd0\x0a\x90\xc6\xcb\xeb\xea\x7a\xd5\xee\x34\x40\xd7\x6c\xeb\x1c\x3a\xd8\x37\xdd\x74\x3a\xd4\x57\xfc\x6f\x53\x6f\xc4\xfe\xa3\x8a\x2e\xdc\x54\x0b\x7f\xe7\xaa\x96\x83\xe1\xc7\xb3\x45\x06\x4e\x34\x87\xe6\xa6\xfb\xbb\xce\x7f\x03\x00\x00\xff\xff\x71\x9e\x5b\xbd\x9f\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 415, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbc, 0x36, 0xd7, 0x29, 0x50, 0x7c, 0xe3, 0x2b, 0x54, 0x30, 0x8d, 0x8, 0x41, 0x58, 0xaa, 0xa0, 0x48, 0x6f, 0x0, 0xf2, 0x68, 0xed, 0xbe, 0x7e, 0x9e, 0xb0, 0xe4, 0x7f, 0x86, 0x7d, 0xdf, 0x2d}}
	return a, nil
}

var _configKubernetesPvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x91\x41\xab\xdb\x30\x0c\xc7\xef\xfe\x14\x82\x9d\x93\xed\x31\x1e\x03\xc3\x3b\x6c\x30\xb6\x1d\xda\x95\x30\xda\xb3\x6a\xab\x45\xc4\xb1\x8d\xad\xa4\x2b\xa1\xdf\x7d\xd8\x69\xc6\x6b\x6f\x96\xf4\xd3\x5f\xfa\x5b\x1f\xe0\x10\x52\x4f\xe9\xe3\xf7\xbf\x64\x46\x09\x09\x76\x7b\x85\x91\xf7\x94\x32\x07\xaf\x61\x7a\x51\x3d\x7b\xab\x61\x57\x32\x59\xc8\xcb\x3e\xb8\x71\x20\x35\x90\xa0\x45\x41\xad\x00\x3c\x0e\xa4\xe1\x34\x7a\x4f\xae\x89\x53\x33\xcf\xed\x1f\xcc\xfd\x2f\x7b\xbb\x29\x00\x87\x47\x72\xb9\x70\x00\x18\xe3\x0a\xd6\x58\x2a\xa6\xe1\x7d\x47\x8e\x64\x0a\x6d\x30\xa2\x61\xb9\x2e\x9d\x59\x42\xc2\x33\x69\x78\xf9\xc1\x0a\x00\x8d\xa1\x9c\x37\xc1\xd2\x5d\xb9\x81\x8e\xd0\x1e\x12\x0b\x6d\xd0\x5f\x15\x40\x7c\x5a\xb9\x23\xe3\x90\x87\x5d\x70\x6c\xae\x1a\x3a\x12\x64\xaf\x00\x86\x30\x7a\xf9\x1d\x85\x83\xff\xaf\x85\xce\x85\x4b\x63\xc9\x91\xd0\x43\x2a\x4c\x94\x2e\x65\xc8\x3d\x9b\xe8\xcc\xc1\xbf\xcd\x73\xdb\xd5\x57\x75\x5c\x0a\x27\x76\xd4\x0c\xc1\xd2\xdb\xa7\x2f\xaf\xaf\xc5\x4e\xe6\x45\xdd\x26\x9e\x28\x69\xc8\x9f\x5b\x93\xb9\xc5\x4b\x6e\x4d\x18\x6a\x69\xaa\x8b\xfe\x44\x6f\x1d\x15\xa0\x31\x99\x9f\x7e\x73\x85\xbe\x8a\x24\x3e\x8e\xb2\xfa\x07\x38\x8e\xa6\x27\xd9\xd6\x5b\xcc\x73\xfb\xad\x86\xb5\xa7\xfa\xee\xe8\xb4\x90\xe5\x5a\x39\xa2\x59\xb0\xed\x1a\xdd\xd5\x9f\x6e\x69\x1e\xc6\xff\x0b\x00\x00\xff\xff\x33\x84\x08\xef\x30\x02\x00\x00")

func configKubernetesPvYamlBytes() ([]byte, error) {
	return bindataRead(
		_configKubernetesPvYaml,
		"config/kubernetes-pv.yaml",
	)
}

func configKubernetesPvYaml() (*asset, error) {
	bytes, err := configKubernetesPvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/kubernetes-pv.yaml", size: 560, mode: os.FileMode(0644), modTime: time.Unix(1732649398, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa9, 0x15, 0x2e, 0x42, 0x94, 0x68, 0xc1, 0xf2, 0x27, 0xfe, 0xb7, 0xa7, 0xe8, 0x8d, 0x53, 0x1a, 0x1b, 0x36, 0xb0, 0x5c, 0xc, 0x59, 0xb4, 0x7d, 0x16, 0x9c, 0x2b, 0x72, 0xfc, 0x17, 0x7c, 0x20}}
	return a, nil
}

var _configKubernetesExecutorTemplateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xcd\x4f\xdb\x4e\x10\xbd\xfb\xaf\x18\x39\xfc\x6e\xd8\x98\xcb\xef\x60\xa9\x07\x14\x10\x1f\x2a\x01\xb5\x88\x1e\xaa\x1e\xc6\x9b\x49\xb2\xcd\x7e\x75\x67\x1d\x40\x56\xfe\xf7\x6a\xfd\x55\x07\x28\xf5\x69\xb2\xef\xf9\xbd\x37\x93\x59\xcf\xe0\x01\x79\x0b\x17\xcf\x24\xea\x60\x7d\x82\x4e\x3e\x92\x67\x69\x4d\x09\x15\x06\xb1\x39\xd9\x9d\x26\x5b\x69\x96\x25\xdc\xd8\x2a\xd1\x14\x70\x89\x01\xcb\x04\xc0\xa0\xa6\x12\x9a\x26\x8f\x0a\xd7\xcb\xfd\x3e\x6b\x9a\xfc\xc6\x56\xb1\xec\x61\x76\x28\x3a\xce\x62\xf8\xd5\x62\x0a\x2b\x52\x1c\x45\x00\xd0\xb9\x12\x56\xb5\x31\xa4\x32\x1a\x62\x44\xe0\xa7\xad\xb2\x0f\x3d\xd8\x91\x88\x1a\x15\x8a\xad\x5d\xad\x3e\x4b\x2d\x43\x09\x45\x02\x20\xac\x76\x8a\x82\xb4\x86\x4b\x38\x4d\x00\x02\x69\xa7\x30\x50\x67\x39\xbc\x18\x1f\x4f\x1c\xd0\x87\x7b\xab\xa4\x78\x29\x61\x41\x3b\xf2\x3d\xc4\xe4\x77\x52\xd0\x99\x10\xb6\x36\x61\xd1\x46\xe9\x83\x32\xf6\x1c\x61\x4d\x40\x69\xc8\xf3\x20\x98\xf5\x83\xe9\x99\x4f\xd6\x6f\xc9\x67\x93\x16\x7a\x1e\x80\xd4\xb8\xee\xba\xbb\x8e\xd5\x6b\xe4\xbe\x56\x6a\x88\x75\xa6\x9e\xf0\x85\x47\x5c\x58\xad\x31\xfe\x27\xdf\xd3\x93\x4a\x9a\x13\xde\xa4\xc7\x90\x66\x22\xfd\x31\x52\xd0\xaf\xb9\xd5\x9e\x77\xdc\x89\x7a\x8c\x24\xcd\xfa\x5c\xfa\x96\xf0\xcd\xfa\xed\x52\xfa\x09\xc1\x13\xdb\xda\x0b\x1a\x7b\xea\x0e\x7f\xd5\xc4\xe1\xe0\x0c\x40\xb8\x3a\x8a\xc8\x15\x18\x82\x7c\xee\x6a\x86\x02\xb2\xfd\x3e\x1a\xbb\x9a\x63\x01\xa4\x98\x20\x56\xe9\x69\x51\xe8\x34\x56\x74\x10\x28\x3e\x9a\xb4\xf5\x2f\x13\xad\x2f\xa8\x2f\x2b\x28\xf2\x5e\xce\x79\x69\xc2\x0a\xd2\xff\xf2\x62\x75\x99\xf6\x70\x2b\xa5\x98\x3a\xf1\xff\x6f\xff\xa2\x4d\x6e\x43\x9a\x3c\xaa\x8c\x83\xf5\xfd\xd0\x7b\x9b\x73\xc9\xdb\x8f\x7c\x3a\xfc\xd0\xa8\x28\xde\x73\x1a\x8b\x9d\x55\xb5\xa6\xdb\xb8\x34\x93\x69\xcd\x66\x33\x38\xbf\x83\xc5\xdd\x03\xcc\xaf\xce\x16\x97\x17\xf0\x70\x75\xfd\x75\x84\x9b\xc6\xa3\x59\x13\x1c\xc9\xe5\xf3\x31\x1c\xc9\x40\x1a\xca\x4f\x90\x3f\xb6\x62\x3c\xf1\x79\xb5\x60\x7d\x4b\x59\xd3\x1c\xbd\x5d\x31\x00\x1d\x63\xdc\x63\xd8\xc4\x9e\x5b\xd9\x7c\x3e\xec\x6c\x3c\x3e\x20\x73\x5d\x8d\xd4\x51\xec\x5f\xaf\x0d\x73\x48\xa6\xdd\x73\x09\xef\xdf\x87\x3f\x71\xdf\xa6\x75\xf1\xcb\xc3\x81\x4c\xe8\xba\x9e\x2b\x94\x7a\xba\x6f\x22\x1e\x1c\x5c\x44\xb7\x13\x07\x52\xbf\x03\x00\x00\xff\xff\x00\x13\xe6\xe4\xd0\x04\x00\x00")

func configKubernetesExecutorTemplateYamlBytes() ([]byte, error) {
	return bindataRead(
		_configKubernetesExecutorTemplateYaml,
		"config/kubernetes-executor-template.yaml",
	)
}

func configKubernetesExecutorTemplateYaml() (*asset, error) {
	bytes, err := configKubernetesExecutorTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/kubernetes-executor-template.yaml", size: 1232, mode: os.FileMode(0644), modTime: time.Unix(1733362467, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x28, 0xc4, 0x2b, 0x17, 0x62, 0x5d, 0x51, 0xe4, 0x35, 0x84, 0xde, 0x2a, 0x3, 0x35, 0x7d, 0x71, 0x79, 0x5a, 0xe0, 0xbd, 0x90, 0xcd, 0x65, 0x9d, 0xe8, 0x11, 0x72, 0x90, 0x35, 0xe7, 0x36, 0x7a}}
	return a, nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3a\x5d\x73\xdc\x38\x72\xef\xfc\x15\x1d\xcd\x5e\xc5\x5b\x35\x5f\xda\xad\xbd\xe4\x58\xa5\x07\x7d\xad\xad\x58\xf6\x2a\x9a\x71\x9c\x3c\xb9\x40\xa2\x39\xc4\x0e\x09\x70\x01\x50\xe3\xb1\xe3\xff\x9e\xea\x06\xf8\x31\x92\xbc\xf6\xdd\xc9\x55\x9b\xba\xd3\x8b\x86\x40\xa3\xd1\xe8\xef\x6e\x60\x02\xeb\x12\x41\x8b\x1a\xc1\x14\xe0\x4b\x04\x91\x7b\x75\x87\xe0\xd0\xde\xa1\x05\x29\xbc\xc8\x84\x43\xc8\x44\xbe\x45\x2d\x93\x09\x9c\xde\x09\x55\x89\xac\xea\xc7\x5c\x0a\x99\xa9\xbc\xcc\xa6\x90\x09\xb9\x41\x3b\xe5\x65\xce\x1b\x8b\x53\x90\x7b\x2d\x6a\x43\x93\x58\x09\xe7\x55\x3e\x85\xda\xe8\x8d\x91\x59\x72\x11\x91\x77\xeb\x93\xe4\xb3\xe4\xe4\xa6\x6e\x5a\xff\x25\x32\x2a\x93\x8b\x6a\x0a\xa5\xcf\x8d\x96\xc6\x4e\xc1\x55\xad\xad\xa7\xd0\x64\x6e\x0a\x1b\xab\x24\xea\x8d\xd2\x38\x85\x5a\xe8\x96\x20\xc5\xce\xcd\x32\xe1\xf3\x72\x0a\xdb\x36\x43\xab\xd1\xa3\x4b\xce\xc3\x66\x11\xdf\xef\x50\x85\x77\xa8\x3d\xec\xac\xf2\x68\x3b\x32\x9e\xb9\xef\xe7\x9f\x25\x6f\x33\xfd\xdb\x58\x35\x85\xad\x28\xb6\x22\xb9\xa4\x0d\xdf\xf2\x7e\x2e\x4d\x00\x66\x1d\xe7\xe8\x67\x65\x36\x49\x72\x6d\x36\x1b\xb4\x34\x37\x01\xfa\xad\xf4\x06\x2a\xbc\xc3\xca\xa5\x20\x31\x6b\x37\x53\x50\xba\x30\x53\x40\x6b\x8d\x4d\x00\xae\x69\x32\xe5\x41\x5e\xc4\xd8\x09\x97\x03\x6f\xc0\x97\xca\x41\x23\x7c\x39\x87\xab\x02\xb0\x6e\xfc\x7e\x1a\x26\x85\x45\x3e\xb9\x47\x4d\x80\xce\x4b\xb4\x76\x9e\x00\xfc\xd2\xfa\xa6\xf5\x3f\xab\x0a\x53\x38\x3a\x4a\x92\x15\x6b\x52\xa0\xe8\x85\x71\x7e\xcc\xc7\x9f\x5b\xad\xb1\x8a\xca\x46\x8b\x09\xe0\xb5\xa8\x3b\xde\x97\xc6\xf9\x84\x57\xde\x18\xeb\xa1\x75\x28\xa1\x30\x16\x5e\xac\xd7\x37\xa4\x13\x75\xab\x55\x2e\xbc\x32\x1a\x84\x96\x8c\x72\x87\x19\x48\xe1\xca\xcc\x08\x2b\x19\xe5\x7a\x7d\x43\xab\x53\xf8\xf7\xe5\x72\xf9\x18\xb6\xdb\x9b\xf3\x43\x64\xb4\xec\xf6\xe6\x3c\xac\xfa\xcb\xf2\x2f\x71\xd5\x2d\xfe\xd6\x2a\x4b\x12\x75\x2a\x07\xd1\xfa\x12\xb5\xef\xf6\x27\x44\xb4\x7f\x34\x9c\xd3\x9b\x2b\x07\xad\x23\xf6\x0b\x68\x84\x73\x3b\x13\xc8\x99\x10\x23\x69\x6b\xd2\xc2\x2d\x82\x6b\x2d\x12\x03\x1b\x6b\x1a\xb4\xd5\x1e\x2c\x3a\x6f\x55\xee\x41\xe4\x39\xba\x28\x05\xb2\x00\x5d\xa8\x0d\x14\xaa\x42\xc6\xf2\x0c\xe7\x9b\x39\xe4\x65\x6d\x24\xfc\x79\xb9\x84\x82\x59\x39\x0f\x60\xf3\x7d\x5d\x7d\xcf\x60\x67\x44\xeb\x69\xeb\xcb\x20\x00\xd2\x93\x37\x0e\x6d\x4a\x24\xd8\xe3\x38\x06\x70\x13\x29\x4c\x41\x64\xf9\xf1\x0f\x3f\x3e\x02\xfc\xc3\x23\xc0\x85\x31\x99\xb0\x81\x3b\x57\x3a\xaf\x5a\x89\x20\xe0\xe8\x5c\xe4\x25\xce\xce\x8d\xf6\xd6\x54\x29\x68\x33\x63\x0d\x3f\x0a\x72\x2b\x51\x48\xb4\xa0\x34\x3c\x47\xbf\xb8\x56\xce\xd3\x99\x1b\xa3\x1d\x3a\xc6\xc4\xdc\x08\xb6\x95\x8b\xbc\x24\x1e\x66\x7b\x50\xda\xa3\xad\x51\x2a\x61\xf7\xcc\x65\x95\xa3\x23\x8e\x5e\x28\x47\x86\x46\xb8\x79\xe3\x14\xbc\x6d\x31\x49\x6e\x6f\xce\xcf\x2b\x85\xda\x87\xa3\x93\x94\xa3\x70\x84\x94\x16\x1d\x6d\x16\x94\xf3\x34\x7c\x8f\x94\x2e\x1d\xa4\x7e\x6e\x51\x92\x9c\x45\xe5\x58\xc8\x67\xff\x8f\xa4\x1f\xa4\x17\x26\x83\xe2\xdf\x97\x33\x8f\xe6\x46\x6b\xcc\xf9\x20\x5e\xd5\x68\x5a\x4f\xb4\xae\xc3\xcf\x14\xfe\xbc\x74\x01\x8e\xdc\x60\x2d\xde\xab\xba\xad\x41\xb7\x75\x86\x96\x0d\x59\xd5\xe8\xc0\x97\xc2\x83\x00\x8b\xbf\xb5\xe8\x3c\xec\x54\x55\x41\x86\x60\xd1\x5b\x15\xed\xac\x10\xaa\x6a\x6d\x10\xda\x84\xd1\x43\x86\x7e\x87\xa8\x23\x18\x31\xb8\xaa\xcc\xce\x81\xd0\x80\xef\x1b\xa3\x03\xe3\xd9\x87\x9a\xa2\x00\xe7\x85\xf5\xcc\x55\x0f\x3f\x81\x43\xf2\xf3\x41\x67\xda\x86\x58\x75\x0c\xb5\xd2\xad\x27\x1e\xbd\x12\xef\x6f\x03\xd2\x14\x8e\x97\x9d\x13\x77\x79\x89\xb2\xad\x48\xfd\xdc\xe0\x00\x88\xc3\xaf\x38\x24\xdc\x0f\x34\xf3\x64\xd5\xad\xe8\x3c\xd8\x0e\x4c\x11\x9d\x9e\x6d\x35\x88\x31\x4e\x8f\xb6\x77\x20\xdd\xc2\x5b\x41\xa1\xe4\xd8\xf5\xcb\x6b\xa1\xf7\xe0\x85\xdb\xb2\x74\xbb\xd5\x64\x0f\x46\xe3\xe3\x38\xce\xcb\x56\x6f\xf9\x1c\x1d\x92\xca\xe8\x0d\x2d\xdf\x09\xe5\x7b\x2e\xb6\x8d\x14\x1e\x1d\x64\x58\x18\x4b\xa2\xb2\xdb\xa0\x82\xda\x48\x04\x89\x82\x75\xf0\xb5\x91\x78\xa3\xf4\xa6\x97\xef\x71\xfd\x38\x5a\x62\x4d\x5c\xcb\x1e\x5e\x58\x3f\xbd\x8f\x9b\x58\xf7\x00\xfb\x95\x56\xbe\xc7\xfe\x53\x9d\x24\x34\x98\x76\xea\x1f\xa3\x48\xc4\x7c\x75\xd1\xeb\x8a\x68\xbd\xa9\x05\xd9\x54\x55\xed\x61\x83\x9a\x38\x81\x8c\xf5\xea\x22\x04\x93\x88\xa2\xdf\xb5\x14\x74\x5a\xd4\xa0\x64\x85\x4c\x30\x9d\x00\x49\xa4\x42\x33\x58\x54\xe8\x29\xa8\xa8\x94\xae\x6c\x3d\x48\xb3\xd3\x41\x0d\x67\xc7\x50\xa3\xd0\xa4\xc0\x68\x91\xd4\x42\x9b\xde\x0a\x60\xd9\x4d\x86\x01\x50\x35\x7b\x20\x8f\xd5\x1e\x44\xe1\x31\xe8\x4e\xa1\xac\xf3\x2c\xd2\x03\xbb\x99\x1d\x47\xbb\x39\x65\xae\x84\xed\x0f\x0f\xe9\xed\x9e\x78\x2b\xd1\x63\xee\x61\x47\x36\x64\xd1\x99\xd6\xe6\x18\x42\xac\xe8\xf3\x08\x6f\x40\xf9\x40\xf3\x05\x16\x4a\x13\xf7\x6f\x7b\x58\x15\x4e\xcb\xfb\x04\x2f\xd0\x06\x35\x02\x73\x87\x96\x52\x1f\x17\x82\x79\x86\xa5\xb8\x53\x86\xa3\x6d\xbf\x9c\x64\xc3\xbe\xee\xe6\x8d\x1b\xb6\x9c\x77\xa3\x4d\xeb\x52\x60\x77\xc8\x8e\xf4\xf4\xd5\x00\x33\x65\x3f\x7e\xd6\x81\xde\x8a\xfa\x79\x96\xc2\x72\xde\x43\x5f\x28\xb7\x05\xd7\x88\x1c\x3f\xbb\x88\x40\x46\xab\x26\xf0\x33\xcb\x71\x37\xe3\xc4\x05\x7c\x4b\x67\x9d\x3f\x34\x3f\xb7\xd7\x39\xec\x94\x2f\x1f\xcf\x25\xde\xb0\x35\x04\xf3\xfb\xc9\x25\xc9\x5b\x63\xb7\x9d\x19\x53\x7a\xe2\x20\xb7\x48\x0a\x06\xb2\xb5\xc4\xcd\xc6\x1a\xf2\xb9\xf4\xb3\x53\xc9\x2e\xc3\x61\xf6\x2a\x07\x52\x59\xcc\xbd\xb1\x7b\xda\x80\x10\x5e\x28\x9b\xc2\x7c\x11\x5c\xec\x6c\x67\xec\x76\x26\x95\xfd\xab\x8e\xd1\x98\xaa\x62\xd5\xcd\x85\xce\xe9\x04\x6a\xa3\x45\x45\xfe\xe2\xc6\x54\x95\xd2\x9b\xe1\x08\x7f\x0d\x73\x50\x4b\xca\xca\x4c\xeb\x17\x68\x2d\x6b\x27\x65\x6e\xbd\x93\x88\x91\xe5\x01\xdb\x26\xb0\x42\xef\x83\x6d\x2b\x06\x5b\x06\x76\x58\x74\x6d\xe5\xa3\xa6\x39\xd2\x7a\xac\x24\x29\x14\xc1\x06\xac\x92\xdc\xa1\xd2\x9b\x2a\xd8\x1d\x63\x1b\xcc\x04\xdf\x63\xde\x7a\x63\x01\xdf\x2b\xcf\x51\xe0\xda\x6c\xee\x4b\x89\x96\xbc\x12\xef\x21\xdb\x47\x22\x39\x75\x60\xfe\x8c\x4e\x13\xd5\xbd\x3b\x54\xc4\xb5\x16\xaa\x5a\xa9\x0f\xe4\x6e\x97\xcb\xe5\x12\x26\x70\xbc\x84\x97\x67\x01\xe9\x6b\x63\xeb\x60\x73\x94\x25\xb2\x2e\x80\xc4\x8a\x32\x7e\x50\xde\xf1\x10\x9d\xa4\x17\x71\xa4\x3c\x50\xdd\x33\x79\x4d\x4c\x31\x0d\x9b\x96\x0c\x99\x47\x0c\x7e\x63\xcb\xba\x46\x71\x87\xbd\x7e\x14\xa2\x72\x18\xa8\xb8\x56\xb5\xf2\xc1\x7f\xf5\x01\x34\x37\x3a\x6f\xad\xa5\x7c\x87\xfc\x52\x65\x84\x74\x8b\xb6\xe1\xff\x21\x92\xdd\x08\x2b\xaa\x0a\xab\xb5\x15\xda\x15\x94\xfc\x87\x98\x36\x7b\xda\xbf\x64\x02\x5d\x4d\x46\x21\x58\x2e\x8c\x05\x2e\x39\x20\xd6\x1c\x8b\x17\x42\xcb\x0a\xad\x7b\xfa\xad\x93\x33\x53\xf9\x8b\xb3\x34\xa6\x29\x64\xd4\x41\x41\xfb\x12\x34\x26\x3f\x34\xf7\x88\xc9\xc5\xef\x39\x95\x91\x17\x5c\x48\x75\xc8\xce\x84\x43\x2e\x3a\xbc\xa1\x90\xcf\xaa\xd4\x95\x5a\xe0\x59\x80\xe4\xb5\xe9\x47\x07\x7a\x90\x33\x9d\xbe\x5d\x81\xc5\x8d\x32\x9a\x5d\x26\xfd\xe0\x60\xd4\xcd\x9d\x86\x4c\x6d\x8b\x7b\xb8\xba\x48\x00\x5e\xe2\xfe\x60\x7e\x85\xb9\x45\xdf\x81\xbd\xc4\x3d\xe7\x9d\x34\x16\x62\xda\x65\x28\xf6\xe2\xc9\x2d\x16\xea\xfd\x98\x54\xa5\x25\xbe\x47\x07\xcf\x48\xd9\xa7\xa1\xe6\x74\x53\x0e\x7f\x8e\xb2\xbc\x2b\x9a\x0f\xcb\x0e\xc8\x7e\x73\x7b\xdd\x95\x59\xb1\x9c\x74\x28\x6c\x5e\x8e\x3d\xe4\xed\x75\x0a\xa5\xf7\x4d\xba\x58\x8c\x52\xdf\x1f\x96\x9c\x2f\x3d\x37\x86\x0c\xf9\xbc\x32\xad\x64\xbd\x08\x96\xc8\x36\xd7\x09\x65\x9e\xf4\x13\x44\xff\x8d\x35\xbf\x62\xee\xfb\xe3\x77\x72\x14\x79\x6e\x5a\x4a\xe7\xc7\xb9\xb4\x0a\x11\x66\x02\xbf\xb0\x35\x89\x8a\x6b\xcc\xc6\x38\xa7\x38\x46\x8c\x81\x1f\x4f\x11\xa4\x72\x39\x85\x37\x94\x8c\xa7\xb0\xa6\x0e\xe7\xd5\x77\xca\x1a\x5d\xa3\xe6\x80\x39\xca\xe0\x87\xb2\xf4\x15\x55\xd6\x9d\x8a\x50\x01\xe0\xa0\x34\xe4\xcf\xb8\xbe\x0f\x05\x01\xba\x51\x62\x8f\x32\x72\x8e\x3d\x17\xaf\x08\x61\x73\xd6\x55\xe9\x63\x2e\x86\x38\xdd\xa9\xae\x72\x87\xaa\xcc\xea\xc8\xe9\x27\x85\x2f\xa5\x21\x52\x33\xf2\x77\xc1\x2d\xd3\x0a\xae\x71\xfa\x56\xc9\x48\xc2\xeb\x2e\x29\x89\x44\xd7\xcc\xe3\x98\x91\xdf\xcb\xe2\x62\x61\x42\x49\x2b\xd7\x5a\x12\x76\x25\xea\xc0\x36\xce\x5e\xba\x1a\x80\xf2\x45\x2d\x81\x6b\x1a\xca\xc5\x29\xb3\xa6\xda\x84\x93\x89\x3e\xcf\x70\x14\x27\x8d\x26\x89\x85\x92\x6d\x20\xe5\x03\x5a\x33\x0d\x45\x8b\xa8\x2a\xa8\xc5\x1e\xb2\xca\xe4\x5b\x22\x04\x89\x06\xa2\x8a\xb6\x09\x84\x0d\xb5\x47\x57\xfb\x65\x08\xe8\xc8\x2e\x95\x2b\x43\xf6\x37\xce\x25\xbb\xb2\x86\x59\x48\x94\x76\x25\x0d\xb7\x30\x6c\x50\x80\xfc\x5e\xcd\x46\x63\x4a\x2b\xae\x25\x0e\x2b\x37\xc6\x27\x29\xf1\x36\xfa\x50\x46\x92\x92\x2c\x94\x54\x7a\xd2\xf8\xc5\xe0\x86\xb0\x62\xaa\x3a\x2a\xa2\xb6\x0f\xa5\x15\xa9\xd7\x4b\x51\x6c\x45\xda\x57\x98\xbd\xaa\x30\xe8\xda\x34\x2a\xef\x45\xf9\x2d\xdc\x78\x6c\x61\xc1\x59\x6c\x3e\x7d\x03\x7f\xfd\x62\x7d\xce\x5d\xb6\x60\x41\xeb\xd6\x6a\xa0\x12\x8d\xdd\x83\xf3\xc2\x53\xed\x47\x91\x4d\x55\x68\xe7\xf0\xb6\x44\x0d\xa8\xc9\xc9\xca\x69\x97\x74\x0c\x4d\x17\x74\x43\x22\xf7\xe2\xe6\x9c\x51\x0e\x75\x95\x37\x50\x28\x2d\xbb\xa2\x89\x2b\x4d\x8b\xe0\x7c\x9b\x6f\x49\x23\x05\xfc\xd6\x62\x4b\x06\xca\xfb\x52\x86\x61\xad\xb1\x94\x8e\x68\x19\xcb\xc3\x98\xf4\x74\x49\x43\x80\x24\xbf\x64\x25\x25\x2c\xfb\x51\x27\xe1\xb6\xa7\x3b\xb6\x12\x42\xf3\x27\x0e\x52\xaa\x42\x7a\x5e\x0e\xd9\x56\xf9\xa0\x41\xc9\xdf\xc2\xa2\x0b\x1b\xb1\xdd\x84\x43\xff\xab\xeb\x9b\x98\x51\xdf\x7d\x69\x1c\x31\xab\x31\xd6\x0f\xfa\x36\x00\x1d\xec\x4c\x81\x9f\x8c\x60\x8d\x75\x53\x09\x8f\xbd\x43\x1b\x86\x52\xf8\x5f\x56\xb6\x56\x2b\xd2\x3c\x84\x13\xb8\x13\x5a\x55\x95\xe0\xe1\x0d\x7a\xd4\x77\x70\x02\xeb\x70\x34\x88\x19\x0e\x17\x19\x27\xf0\xf1\xe3\xfc\xb2\xff\xfe\xf4\x89\x01\x84\xdd\xb4\xe4\x4c\x1d\x9c\x74\x99\x13\x95\xbe\xb3\x59\x6c\x4b\x7c\xfc\x38\x3f\xe7\x5f\x9f\x3e\xc1\x6c\x46\xfc\x9d\x29\x49\xa3\x6b\xe1\xb6\x57\x32\x62\xa1\xe4\x93\xf1\xc7\xbc\xe8\xd3\xa7\x45\xe8\xd3\xce\x38\xa6\xcd\x2a\xb3\x09\xe4\x90\xec\xee\x43\xc6\x68\x1f\xda\x8c\x0c\x66\xb8\xcf\xf8\x79\x38\xd3\x7a\x86\x73\xa5\x69\x2b\xf9\xce\xc7\xd4\xe9\x5d\xc1\xa9\xff\x09\xfc\xcf\xe5\x8a\xe7\xc9\x0f\xbe\xf3\x66\x00\xe8\x11\xff\xf2\xfa\xdd\xe5\x7f\x5f\xad\xdf\xfd\x72\xfb\xee\xf2\xbf\xae\xce\xd7\x0c\xfe\xf1\xa3\x2a\x40\x23\xcc\xa9\x2a\x82\x25\xcc\xe2\xe9\x3e\x7e\x6c\xac\xd2\xbe\x80\xa3\xd8\x02\x79\x97\x13\xc0\x09\xfc\x49\x1e\x05\xe0\x1e\x70\x06\xa8\x65\xff\x15\xd1\x71\xe5\x44\x25\xd0\xef\x60\xac\xb1\xa6\xbc\xf4\x04\xfe\x34\x5f\x16\xf0\xfc\xec\x28\x2e\xfb\x7d\xcc\xa1\xbc\xfa\x02\x6a\x49\x65\xda\x18\x71\x58\xf5\x00\x33\x7f\xb2\xb5\x25\xc9\xcd\xd9\xea\x9f\xc6\xff\x07\x35\xfe\xc9\xbf\x64\x4a\x2f\x32\xe1\xca\xf0\x79\x73\xb6\x82\xd9\xeb\x07\x36\x19\xc6\xcd\x97\x6c\x28\x80\xe1\x97\x4c\xf2\xcb\xb6\x11\x10\x55\x21\x7b\x3d\x39\x4e\x9b\x46\x9f\x3c\x81\x81\x74\x68\x6b\xac\x4f\x48\x85\x37\xd9\x13\x98\x46\x87\x94\x1c\xc6\x80\xf5\xf7\xec\xe2\x9e\xef\xfc\x4a\x5f\x79\x75\x71\x20\x96\xe4\xb9\x55\xf2\x92\x2f\xaa\xd2\xbf\x4d\xd6\xdf\x3d\x2a\xe9\xef\xbe\x46\xce\xdf\x7d\x85\x94\x09\xa8\x97\xe0\xd7\xca\xfd\x3b\x98\x35\x08\x75\xa3\x9e\xc2\x1f\x06\x0a\xca\x77\x77\x9d\xbc\x9f\x3f\x85\xb8\x23\xd2\xc2\xa9\x0f\xd8\x63\xfd\xf6\xe2\x5e\x55\xad\xad\xff\xe9\x47\xff\xb0\x7e\x74\x71\x68\x5c\xab\xb3\xd3\xf5\xf9\x0b\x98\xcd\x7e\x35\xd9\x8c\x8b\x90\x07\x96\xd6\x83\xe8\xc0\xeb\xe3\x7b\xc3\x21\xc1\xf9\x92\x95\xf5\xe0\x31\x1f\xf9\x82\xe9\x7e\x85\x0d\xf6\x18\x29\x33\x99\x35\x68\x59\x1f\x9f\xc4\x20\x7b\xd4\x35\xd6\x9c\x44\x3c\x49\x72\x32\xa0\xf5\x75\x33\xa0\xfd\xf6\x36\xc9\x8d\x9b\x33\xe1\xf3\x12\x24\xba\xdc\xaa\x2c\xaa\xfd\x61\x6b\xbd\x2b\x2d\x4f\xdf\xae\x20\x40\x3f\xb8\x3e\xea\xf0\x3c\xa9\x81\xf7\xfb\x75\xda\x7f\xdf\xb0\x35\x17\xda\x7c\x63\x13\xec\x77\xb0\xdd\x3f\xbc\xdd\x8e\x0f\xf7\xa8\xd5\x4e\xe0\x3f\x4c\x16\xae\x40\x58\x0a\xb9\xd0\xdc\x33\x50\xbe\x44\xbe\xb0\xe2\x07\x06\x51\x32\xb5\xf8\x60\x74\x7f\xd1\x01\xaf\x69\xee\xd9\xe9\xed\xeb\xef\xe9\xc8\x07\x78\x52\x38\x8a\x56\x45\x96\x2d\xb1\x38\xea\xf6\xfa\x4f\xf2\x8b\x7f\xdf\x36\x8c\xe2\x70\x07\xf6\xb6\x47\xf7\x3a\x8c\x5d\xc7\xce\x35\x98\xab\x42\xa1\x84\x5f\x4d\x16\x1c\x73\x78\xe1\x60\xe2\xa5\x05\x43\xd1\x9c\x1c\x18\xa1\x1e\x34\x28\x87\x56\xe4\xb8\xe1\x38\x81\x97\xfd\x63\x97\xaf\xd2\xef\x11\xf8\x03\x05\x1f\xe6\xd2\xfe\x8e\xb8\x6f\xf4\x73\x8b\xcb\x9b\x38\x10\xa2\x86\x9b\x8f\x1e\xc7\x74\x90\x2e\x05\x69\xf2\x2d\xda\x83\x87\x38\x00\x97\x71\x3e\x85\xa3\x61\xfc\x08\x9e\xd2\x98\x5e\x8e\xf7\x7b\xd4\x9a\xfe\xd1\xc3\xe4\x81\xbe\x90\x6a\x87\xeb\x3c\x6f\xc0\x35\x62\xa7\x49\x0d\x5d\x6c\x64\x26\x30\x00\xa4\x70\x24\xb1\x10\x6d\xe5\x8f\xee\x23\x59\x85\xe7\x1b\xa7\xb1\x2d\x3c\xea\x76\x47\xb5\x8e\x8d\xb3\x01\x66\xb0\x1d\x27\x8e\xe2\x25\x91\x0b\xcf\xae\xc8\xef\x92\x25\xf8\x18\xba\xe7\xb0\x42\x0c\x7d\x6d\x97\x2e\x16\x83\xde\xcc\x95\x59\x48\x93\xbb\x85\xc5\x02\x2d\xea\x1c\x17\xfd\x25\xf3\x08\x6c\x26\x1a\xb5\xb8\x3b\x9e\x1f\xff\xdb\x62\x42\x86\x7a\x77\x1c\xde\x88\x1d\x64\x07\xb1\xc1\x3d\xce\x20\xba\x3e\x6c\x33\xba\xbc\xa8\x03\x91\x07\xe4\x3d\x96\x78\x84\x97\x26\x87\xf7\xb6\xc5\x7d\xdb\xeb\x8c\x65\x9e\x74\x9e\xa9\x47\x3a\xbc\x65\xe8\xaf\xab\x7a\xfd\xe3\x7e\x75\x67\x48\x0f\x4e\x70\x7f\xe2\x73\x27\xe9\x6d\x7a\x7c\x8e\xc7\x16\x47\x1f\xf3\xd4\xfd\xc6\x09\xac\xbc\xb1\x62\x83\xdf\xa0\x95\x39\xf9\x3b\x2e\x1e\x3e\x77\xed\x90\x4c\xe0\xda\xe4\x22\x94\x8f\xe0\xf6\xce\x63\x3d\x4f\x78\x28\x1e\x24\xf8\xcb\xb7\xa5\xf2\x58\x29\xc7\x8d\x7b\xbe\x3e\x18\xdd\x40\x92\x00\x1c\xec\x4a\x95\x97\x9d\x03\x53\x0e\x44\x55\x99\x5d\x70\xac\xe1\x95\x10\x5f\x48\x84\xc1\x0b\x35\xf4\x9a\xe7\x0b\xa2\xe2\xc5\x7a\x7d\x13\x77\xec\x1f\xbd\x78\xd3\xdf\x34\x42\xd3\x66\x95\xca\x21\xb4\xc5\x62\x13\x7c\x87\x19\xdc\x29\x01\x02\x9e\x5f\xae\xbb\x37\x3d\xf3\x64\x84\x2a\x3d\xb8\x81\x20\xc5\x23\x7b\x7b\xe6\xbe\x1f\xaf\x70\x07\xcd\xfb\x1f\x97\x2e\x49\x42\xa4\x5c\xfd\x98\x0e\x2e\x50\x76\x17\xa4\x4f\xfc\xc4\xe8\xde\x0b\xa0\xa7\xba\xae\x1b\xec\x14\xf9\xae\x86\xf8\xda\xbd\xf1\x64\x1a\x56\x3f\x42\x63\xcd\x9d\x92\x68\x1d\xb8\x36\x2f\x41\x38\x78\xa5\xb4\x32\xdd\x9d\xea\x39\x36\x65\x32\x81\xe7\xe4\x7c\x54\x4e\xcc\x08\x8f\xed\x06\x86\x70\x28\x08\xaf\xed\x2e\xb5\x6c\x8c\xd2\x61\xf7\x30\xd4\x91\x1c\xbe\xc6\xc4\x85\x3b\xbb\x91\x8c\x1e\xe3\xf1\x1f\xf8\x56\x6e\xb5\x53\x85\x7f\x9c\xee\x37\x0e\xed\xeb\xcf\x5c\xb7\x00\x9c\xb6\xbe\xe4\xeb\xcc\x58\xc5\x69\xa1\xfd\x08\x3a\x0c\xc4\x57\x44\x5d\x92\x34\x9a\x9f\xc0\x4f\xcb\x25\xbc\x3a\x23\xba\xca\x56\x6f\x57\xea\x03\x9e\xed\x29\xa9\xa1\x89\xf0\x97\x24\x3f\x1f\xa8\xff\x43\x12\x87\x17\x55\x4b\x17\x29\x4e\xe1\x48\x68\xa3\xf7\xb5\x69\xdd\x3d\xb2\x47\xe3\xff\x17\x00\x00\xff\xff\x5f\x13\xa0\xc8\x87\x2d\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 11655, mode: os.FileMode(0644), modTime: time.Unix(1732326201, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x61, 0x5a, 0x7d, 0xb0, 0x9b, 0x9d, 0x13, 0x7, 0x49, 0xd0, 0x4c, 0xab, 0xc2, 0xe5, 0x37, 0xfa, 0x4a, 0x5a, 0x9a, 0x68, 0x89, 0x2b, 0x4b, 0x3e, 0xf3, 0x73, 0x35, 0x82, 0xe8, 0xf1, 0xbf, 0x3c}}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x11\xd2\x5d\x26\x97\x17\xc8\xa6\x80\x10\x9b\x22\xd1\xa8\x3f\x2b\xcb\xe0\x49\xb0\xe2\x8c\x61\xec\x09\xad\xa2\xbc\x7b\x15\x40\xad\xa8\x4a\x77\x47\x3e\xdf\xf9\x3c\x42\xae\x43\x8e\x08\x05\x74\x86\x9c\xf7\x46\xd5\x98\x90\x3a\x28\xa0\x64\x41\x85\xef\xb8\x93\x64\xb6\x7e\x44\x2a\x21\x42\xaf\x0c\xd7\xd2\x22\xa5\x08\x05\x9c\x02\x37\xc8\xc0\x42\x90\x65\xc9\xc4\x66\x35\x87\xbe\xcf\xcb\x31\xd9\x61\x50\x3e\xd4\x50\x8c\x2f\x2f\x81\x9b\xb9\xe3\x61\xf8\xbf\x0b\x64\x03\x67\xd8\x21\xa5\xcc\x87\x5a\x21\x73\xe0\x9f\xd4\xe5\xaf\x2c\x26\x8b\xcc\x2a\x48\x3a\x48\xba\xcf\x04\x49\x2a\xee\x83\x78\xab\x13\x1b\x8a\x15\xb2\xae\x9c\xc7\xf1\xc4\xb7\xc5\x93\x3a\xed\x91\x74\x0a\xdf\xe5\x97\x70\xfd\xa8\x17\xaf\xab\x52\xaf\x37\x7a\xf1\xbc\x9a\x95\xaa\xef\x5d\x05\x84\x90\xcf\x0e\x12\x61\x0a\xd9\x30\xa8\xbe\x3f\xb0\xa3\x54\xc1\x84\xf1\x28\x18\x93\xde\x8d\x65\x01\xff\xec\xe4\x02\x9e\xa1\x0c\x90\xec\x39\x5d\x15\x1b\xd3\x2e\xb7\x30\xcd\xef\x59\x5a\x6c\x03\x7f\x8c\x9e\x7c\x5a\xc1\xf2\x61\x72\x9d\xfc\x6e\x9b\xbb\xd8\xfc\xa9\xb3\x2e\x36\x37\xb2\xcb\xe2\xc6\xa6\x8e\x82\x82\xea\x33\x00\x00\xff\xff\x61\xe0\x01\xde\xf9\x01\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 505, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0x3, 0xc3, 0xc4, 0x14, 0xdf, 0x97, 0x3b, 0x68, 0xaf, 0x9e, 0xee, 0x13, 0x1, 0xbd, 0x3, 0x61, 0x3c, 0x95, 0x4b, 0x8f, 0x27, 0xcf, 0x52, 0x2d, 0x11, 0x2d, 0x67, 0x54, 0xd2, 0x1, 0x79}}
	return a, nil
}

var _configKubernetesTemplateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xc9\x6e\xdb\x30\x10\xbd\xeb\x2b\x06\x2e\x7a\xa4\xa5\x5c\x7a\xe0\x2d\x48\xd0\x20\x45\x13\x04\x45\x91\x9e\x47\xf4\x28\x26\xcc\x2d\x5c\x1c\x18\x86\xff\xbd\xa0\x28\xa7\x94\x63\x07\x28\x4f\xd4\x2c\xef\xbd\x59\xc4\x2f\xf0\x3d\x19\x43\x0a\xfe\x58\xbf\x21\xdf\xa0\x93\xcf\xe4\x83\xb4\x86\x43\x8f\x51\xac\xdb\xed\x55\xb3\x91\x66\xc5\xe1\x87\xed\x1b\x4d\x11\x57\x18\x91\x37\x00\x06\x35\x71\xd8\xef\x97\xbf\x31\x6c\xee\x57\x87\xc3\x64\x0b\x0e\x45\x71\x3c\x1e\xbf\x46\x9f\xc2\x9e\x54\xc8\x99\x00\xe8\x1c\x87\x61\x64\x66\x6f\x85\x39\x9b\x23\x86\x0d\x93\xab\x39\x6a\x70\x24\x38\x34\x00\x3d\x8a\x8d\x1d\x86\x9f\x52\xcb\xc8\xa1\x6b\x00\x84\xd5\x4e\x51\x94\xd6\x04\x0e\x57\x0d\x40\x24\xed\x14\x46\x2a\x2c\xb5\xda\x7c\x6a\x05\x9f\xa8\xb8\xa8\x24\x3b\x46\x35\x53\x58\x20\xbf\x95\x82\xae\x85\xb0\xc9\xc4\xc7\xb1\x1f\x13\x5c\xc0\x29\xc6\x53\x88\xe8\xe3\x93\x55\x52\xec\x38\x3c\xd2\xf6\x9d\x45\x58\x13\x51\x1a\xf2\x61\x2c\xaf\x1c\x36\xf5\x75\x26\x8b\x9d\xaa\x28\x47\x6a\x7c\x21\x0e\xaf\x09\x77\x4b\x69\x5b\xbb\x0e\x89\xe5\x96\xb0\x5e\xda\xb6\x00\xf0\x15\x6d\x49\x59\xa7\xc9\xc4\xd3\xcc\xa7\xa4\xd4\x51\xd7\xb5\x7a\xc3\x5d\xa8\x22\xd0\xbf\x54\x9d\x2a\xca\x16\x45\xcd\xe2\xd4\xec\x93\xf9\x60\x63\x4c\x58\x33\xc8\x97\x0f\x8e\x96\xa2\x68\x8b\xaf\x9d\x15\xb9\xdc\xa1\x56\x67\x70\xf2\x28\xee\x6f\x4f\x1d\xe7\x3b\xe2\x29\xd8\xe4\x05\x9d\x48\xf7\xf4\x9a\x28\xc4\x13\x2b\x80\x70\x29\x4f\x58\x0e\x60\x08\x96\x37\x2e\x05\xe8\x80\x1d\x0e\xfb\xfd\xf8\x91\x2f\x40\x2a\x10\xe4\xdb\xe2\xaa\xeb\xf4\x22\xdf\xc8\xcc\x59\x61\xdc\x35\x6d\xfd\xae\x42\xfb\x85\xfa\xae\x87\x6e\x39\x01\x3a\x2f\x4d\x1c\x60\xf1\x75\xd9\x0d\x77\x8b\xc9\x3d\x82\xa9\x40\x05\xfe\xdb\xc3\x45\x74\x72\x6b\xd2\xe4\x51\xb1\x10\xad\x1f\xa7\xfe\x4e\x74\x2b\xc3\xe6\x33\xa6\xe2\x9f\x53\x75\xdd\x79\xae\xad\x55\x49\xd3\x43\x5e\xe7\x59\xb3\x8e\x5b\x59\xe6\xc6\x4a\xd8\x4c\xa3\xce\x39\x4f\x18\xd7\x1c\xaa\x09\x57\x21\x67\xd0\x8e\xff\x4a\x29\xe9\xc2\x92\xcf\xa1\xad\x8b\xd3\xd6\xd4\xcb\xc3\x56\xd2\xb7\x97\xd2\x43\xea\x4b\x72\x1d\xd0\xd4\xf5\xfe\xfb\xff\x3e\xaf\xb3\x58\x1f\xd0\xd5\xad\x99\x95\x32\x55\xdd\xfc\x77\x9d\x2e\x3f\xba\x21\x92\x89\xcf\x23\xe7\x8d\x42\xa9\x6b\x1a\x91\x0d\xb3\x27\xc6\x6d\xc5\x0c\xea\x6f\x00\x00\x00\xff\xff\x08\x8f\xc3\x13\xcb\x05\x00\x00")

func configKubernetesTemplateYamlBytes() ([]byte, error) {
	return bindataRead(
		_configKubernetesTemplateYaml,
		"config/kubernetes-template.yaml",
	)
}

func configKubernetesTemplateYaml() (*asset, error) {
	bytes, err := configKubernetesTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/kubernetes-template.yaml", size: 1483, mode: os.FileMode(0644), modTime: time.Unix(1732239949, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2c, 0x8c, 0x8e, 0x18, 0x35, 0xe0, 0x7c, 0x96, 0x55, 0x8e, 0x9a, 0x5a, 0x33, 0xde, 0x4f, 0x66, 0x80, 0xae, 0x95, 0xb, 0x6a, 0x60, 0xf3, 0xb4, 0x8d, 0xd9, 0xa9, 0xf4, 0x6b, 0x90, 0xbc, 0x91}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/kubernetes-pvc.yaml":               configKubernetesPvcYaml,
	"config/gridengine-template.txt":           configGridengineTemplateTxt,
	"config/pbs-template.txt":                  configPbsTemplateTxt,
	"config/slurm-template.txt":                configSlurmTemplateTxt,
	"config/kubernetes-pv.yaml":                configKubernetesPvYaml,
	"config/kubernetes-executor-template.yaml": configKubernetesExecutorTemplateYaml,
	"config/default-config.yaml":               configDefaultConfigYaml,
	"config/htcondor-template.txt":             configHtcondorTemplateTxt,
	"config/kubernetes-template.yaml":          configKubernetesTemplateYaml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":               {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt":           {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":             {configHtcondorTemplateTxt, map[string]*bintree{}},
		"kubernetes-executor-template.yaml": {configKubernetesExecutorTemplateYaml, map[string]*bintree{}},
		"kubernetes-pv.yaml":                {configKubernetesPvYaml, map[string]*bintree{}},
		"kubernetes-pvc.yaml":               {configKubernetesPvcYaml, map[string]*bintree{}},
		"kubernetes-template.yaml":          {configKubernetesTemplateYaml, map[string]*bintree{}},
		"pbs-template.txt":                  {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":                {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
