// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scheduler.proto

/*
Package builtin is a generated protocol buffer package.

It is generated from these files:
	scheduler.proto

It has these top-level messages:
	Resources
	Node
	GetNodeRequest
	ListNodesRequest
	ListNodesResponse
	Control
	DrainNodeRequest
	DrainNodeResponse
*/
package builtin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tes "github.com/ohsu-comp-bio/funnel/tes"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeState int32

const (
	NodeState_UNINITIALIZED NodeState = 0
	NodeState_ALIVE         NodeState = 1
	NodeState_DEAD          NodeState = 2
	NodeState_GONE          NodeState = 3
	NodeState_INITIALIZING  NodeState = 4
	NodeState_DRAIN         NodeState = 5
)

var NodeState_name = map[int32]string{
	0: "UNINITIALIZED",
	1: "ALIVE",
	2: "DEAD",
	3: "GONE",
	4: "INITIALIZING",
	5: "DRAIN",
}
var NodeState_value = map[string]int32{
	"UNINITIALIZED": 0,
	"ALIVE":         1,
	"DEAD":          2,
	"GONE":          3,
	"INITIALIZING":  4,
	"DRAIN":         5,
}

func (x NodeState) String() string {
	return proto.EnumName(NodeState_name, int32(x))
}
func (NodeState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ControlType int32

const (
	ControlType_UNKNOWN     ControlType = 0
	ControlType_CREATE_TASK ControlType = 1
	ControlType_DRAIN_NODE  ControlType = 2
)

var ControlType_name = map[int32]string{
	0: "UNKNOWN",
	1: "CREATE_TASK",
	2: "DRAIN_NODE",
}
var ControlType_value = map[string]int32{
	"UNKNOWN":     0,
	"CREATE_TASK": 1,
	"DRAIN_NODE":  2,
}

func (x ControlType) String() string {
	return proto.EnumName(ControlType_name, int32(x))
}
func (ControlType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Resources struct {
	Cpus uint32 `protobuf:"varint,1,opt,name=cpus" json:"cpus,omitempty"`
	// In GB
	RamGb float64 `protobuf:"fixed64,2,opt,name=ram_gb,json=ramGb" json:"ram_gb,omitempty"`
	// In GB
	DiskGb float64 `protobuf:"fixed64,3,opt,name=disk_gb,json=diskGb" json:"disk_gb,omitempty"`
}

func (m *Resources) Reset()                    { *m = Resources{} }
func (m *Resources) String() string            { return proto.CompactTextString(m) }
func (*Resources) ProtoMessage()               {}
func (*Resources) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Resources) GetCpus() uint32 {
	if m != nil {
		return m.Cpus
	}
	return 0
}

func (m *Resources) GetRamGb() float64 {
	if m != nil {
		return m.RamGb
	}
	return 0
}

func (m *Resources) GetDiskGb() float64 {
	if m != nil {
		return m.DiskGb
	}
	return 0
}

type Node struct {
	Id          string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Resources   *Resources        `protobuf:"bytes,5,opt,name=resources" json:"resources,omitempty"`
	Available   *Resources        `protobuf:"bytes,6,opt,name=available" json:"available,omitempty"`
	State       NodeState         `protobuf:"varint,8,opt,name=state,enum=scheduler.NodeState" json:"state,omitempty"`
	Preemptible bool              `protobuf:"varint,9,opt,name=preemptible" json:"preemptible,omitempty"`
	Zone        string            `protobuf:"bytes,11,opt,name=zone" json:"zone,omitempty"`
	Hostname    string            `protobuf:"bytes,13,opt,name=hostname" json:"hostname,omitempty"`
	Metadata    map[string]string `protobuf:"bytes,15,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TaskIds     []string          `protobuf:"bytes,16,rep,name=task_ids,json=taskIds" json:"task_ids,omitempty"`
	LastPing    int64             `protobuf:"varint,17,opt,name=last_ping,json=lastPing" json:"last_ping,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Node) GetAvailable() *Resources {
	if m != nil {
		return m.Available
	}
	return nil
}

func (m *Node) GetState() NodeState {
	if m != nil {
		return m.State
	}
	return NodeState_UNINITIALIZED
}

func (m *Node) GetPreemptible() bool {
	if m != nil {
		return m.Preemptible
	}
	return false
}

func (m *Node) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *Node) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Node) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Node) GetTaskIds() []string {
	if m != nil {
		return m.TaskIds
	}
	return nil
}

func (m *Node) GetLastPing() int64 {
	if m != nil {
		return m.LastPing
	}
	return 0
}

type GetNodeRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetNodeRequest) Reset()                    { *m = GetNodeRequest{} }
func (m *GetNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNodeRequest) ProtoMessage()               {}
func (*GetNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetNodeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListNodesRequest struct {
}

func (m *ListNodesRequest) Reset()                    { *m = ListNodesRequest{} }
func (m *ListNodesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListNodesRequest) ProtoMessage()               {}
func (*ListNodesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ListNodesResponse struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *ListNodesResponse) Reset()                    { *m = ListNodesResponse{} }
func (m *ListNodesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListNodesResponse) ProtoMessage()               {}
func (*ListNodesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListNodesResponse) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type Control struct {
	Type ControlType `protobuf:"varint,1,opt,name=type,enum=scheduler.ControlType" json:"type,omitempty"`
	Task *tes.Task   `protobuf:"bytes,2,opt,name=task" json:"task,omitempty"`
}

func (m *Control) Reset()                    { *m = Control{} }
func (m *Control) String() string            { return proto.CompactTextString(m) }
func (*Control) ProtoMessage()               {}
func (*Control) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Control) GetType() ControlType {
	if m != nil {
		return m.Type
	}
	return ControlType_UNKNOWN
}

func (m *Control) GetTask() *tes.Task {
	if m != nil {
		return m.Task
	}
	return nil
}

type DrainNodeRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DrainNodeRequest) Reset()                    { *m = DrainNodeRequest{} }
func (m *DrainNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*DrainNodeRequest) ProtoMessage()               {}
func (*DrainNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DrainNodeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DrainNodeResponse struct {
}

func (m *DrainNodeResponse) Reset()                    { *m = DrainNodeResponse{} }
func (m *DrainNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*DrainNodeResponse) ProtoMessage()               {}
func (*DrainNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*Resources)(nil), "scheduler.Resources")
	proto.RegisterType((*Node)(nil), "scheduler.Node")
	proto.RegisterType((*GetNodeRequest)(nil), "scheduler.GetNodeRequest")
	proto.RegisterType((*ListNodesRequest)(nil), "scheduler.ListNodesRequest")
	proto.RegisterType((*ListNodesResponse)(nil), "scheduler.ListNodesResponse")
	proto.RegisterType((*Control)(nil), "scheduler.Control")
	proto.RegisterType((*DrainNodeRequest)(nil), "scheduler.DrainNodeRequest")
	proto.RegisterType((*DrainNodeResponse)(nil), "scheduler.DrainNodeResponse")
	proto.RegisterEnum("scheduler.NodeState", NodeState_name, NodeState_value)
	proto.RegisterEnum("scheduler.ControlType", ControlType_name, ControlType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SchedulerService service

type SchedulerServiceClient interface {
	NodeChat(ctx context.Context, opts ...grpc.CallOption) (SchedulerService_NodeChatClient, error)
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*Node, error)
	DrainNode(ctx context.Context, in *DrainNodeRequest, opts ...grpc.CallOption) (*DrainNodeResponse, error)
}

type schedulerServiceClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerServiceClient(cc *grpc.ClientConn) SchedulerServiceClient {
	return &schedulerServiceClient{cc}
}

func (c *schedulerServiceClient) NodeChat(ctx context.Context, opts ...grpc.CallOption) (SchedulerService_NodeChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SchedulerService_serviceDesc.Streams[0], c.cc, "/scheduler.SchedulerService/NodeChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerServiceNodeChatClient{stream}
	return x, nil
}

type SchedulerService_NodeChatClient interface {
	Send(*Node) error
	Recv() (*Control, error)
	grpc.ClientStream
}

type schedulerServiceNodeChatClient struct {
	grpc.ClientStream
}

func (x *schedulerServiceNodeChatClient) Send(m *Node) error {
	return x.ClientStream.SendMsg(m)
}

func (x *schedulerServiceNodeChatClient) Recv() (*Control, error) {
	m := new(Control)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schedulerServiceClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	out := new(ListNodesResponse)
	err := grpc.Invoke(ctx, "/scheduler.SchedulerService/ListNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/scheduler.SchedulerService/GetNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) DrainNode(ctx context.Context, in *DrainNodeRequest, opts ...grpc.CallOption) (*DrainNodeResponse, error) {
	out := new(DrainNodeResponse)
	err := grpc.Invoke(ctx, "/scheduler.SchedulerService/DrainNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SchedulerService service

type SchedulerServiceServer interface {
	NodeChat(SchedulerService_NodeChatServer) error
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	GetNode(context.Context, *GetNodeRequest) (*Node, error)
	DrainNode(context.Context, *DrainNodeRequest) (*DrainNodeResponse, error)
}

func RegisterSchedulerServiceServer(s *grpc.Server, srv SchedulerServiceServer) {
	s.RegisterService(&_SchedulerService_serviceDesc, srv)
}

func _SchedulerService_NodeChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SchedulerServiceServer).NodeChat(&schedulerServiceNodeChatServer{stream})
}

type SchedulerService_NodeChatServer interface {
	Send(*Control) error
	Recv() (*Node, error)
	grpc.ServerStream
}

type schedulerServiceNodeChatServer struct {
	grpc.ServerStream
}

func (x *schedulerServiceNodeChatServer) Send(m *Control) error {
	return x.ServerStream.SendMsg(m)
}

func (x *schedulerServiceNodeChatServer) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SchedulerService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.SchedulerService/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.SchedulerService/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_DrainNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrainNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).DrainNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.SchedulerService/DrainNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).DrainNode(ctx, req.(*DrainNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchedulerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.SchedulerService",
	HandlerType: (*SchedulerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNodes",
			Handler:    _SchedulerService_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _SchedulerService_GetNode_Handler,
		},
		{
			MethodName: "DrainNode",
			Handler:    _SchedulerService_DrainNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NodeChat",
			Handler:       _SchedulerService_NodeChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "scheduler.proto",
}

func init() { proto.RegisterFile("scheduler.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 745 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x5f, 0x6f, 0xe3, 0x44,
	0x10, 0xaf, 0xf3, 0xa7, 0x89, 0xc7, 0x24, 0xdd, 0x0c, 0xa5, 0xf8, 0x72, 0x3d, 0xc9, 0xb2, 0x84,
	0x64, 0xf5, 0xa1, 0x81, 0x20, 0x24, 0xe8, 0x3d, 0x85, 0xc6, 0x8a, 0xac, 0xeb, 0xb9, 0x68, 0x9b,
	0x03, 0xd1, 0x97, 0x68, 0x53, 0xaf, 0xd2, 0x55, 0x1d, 0xdb, 0x78, 0x37, 0x95, 0x0a, 0xe2, 0x85,
	0xaf, 0xc0, 0xd7, 0xe0, 0xdb, 0xf0, 0xc4, 0x3b, 0x1f, 0x04, 0xed, 0x26, 0xe7, 0x4b, 0x72, 0xa8,
	0x6f, 0x3b, 0xbf, 0xf9, 0xcd, 0xf8, 0x37, 0xf3, 0x1b, 0x19, 0x8e, 0xe4, 0xdd, 0x3d, 0x4f, 0x56,
	0x29, 0x2f, 0xcf, 0x8b, 0x32, 0x57, 0x39, 0xda, 0x15, 0xd0, 0xef, 0x28, 0x2e, 0x07, 0x8a, 0xcb,
	0x75, 0xa6, 0x7f, 0xba, 0xc8, 0xf3, 0x45, 0xca, 0x07, 0xac, 0x10, 0x03, 0x96, 0x65, 0xb9, 0x62,
	0x4a, 0xe4, 0xd9, 0x26, 0xeb, 0x5f, 0x83, 0x4d, 0xb9, 0xcc, 0x57, 0xe5, 0x1d, 0x97, 0x88, 0xd0,
	0xb8, 0x2b, 0x56, 0xd2, 0xb5, 0x3c, 0x2b, 0xe8, 0x50, 0xf3, 0xc6, 0xcf, 0xe0, 0xb0, 0x64, 0xcb,
	0xd9, 0x62, 0xee, 0xd6, 0x3c, 0x2b, 0xb0, 0x68, 0xb3, 0x64, 0xcb, 0xc9, 0x1c, 0x3f, 0x87, 0x56,
	0x22, 0xe4, 0x83, 0xc6, 0xeb, 0x06, 0x3f, 0xd4, 0xe1, 0x64, 0xee, 0xff, 0x55, 0x87, 0x46, 0x9c,
	0x27, 0x1c, 0xbb, 0x50, 0x13, 0x89, 0x69, 0x65, 0xd3, 0x9a, 0x48, 0x70, 0x08, 0x76, 0xf9, 0xfe,
	0x4b, 0x6e, 0xd3, 0xb3, 0x02, 0x67, 0x78, 0x7c, 0xfe, 0x61, 0x8c, 0x4a, 0x05, 0xfd, 0x40, 0xd3,
	0x35, 0xec, 0x91, 0x89, 0x94, 0xcd, 0x53, 0xee, 0x1e, 0x3e, 0x57, 0x53, 0xd1, 0xf0, 0x0c, 0x9a,
	0x52, 0x31, 0xc5, 0xdd, 0xb6, 0x67, 0x05, 0xdd, 0x1d, 0xbe, 0xd6, 0x75, 0xa3, 0x73, 0x74, 0x4d,
	0x41, 0x0f, 0x9c, 0xa2, 0xe4, 0x7c, 0x59, 0x28, 0xa1, 0xbf, 0x60, 0x7b, 0x56, 0xd0, 0xa6, 0xdb,
	0x90, 0x5e, 0xc9, 0xaf, 0x79, 0xc6, 0x5d, 0xc7, 0xcc, 0x61, 0xde, 0xd8, 0x87, 0xf6, 0x7d, 0x2e,
	0x55, 0xc6, 0x96, 0xdc, 0xed, 0x18, 0xbc, 0x8a, 0xf1, 0x3b, 0x68, 0x2f, 0xb9, 0x62, 0x09, 0x53,
	0xcc, 0x3d, 0xf2, 0xea, 0x81, 0x33, 0x7c, 0xb5, 0x27, 0xe0, 0xfc, 0xed, 0x26, 0x1f, 0x66, 0xaa,
	0x7c, 0xa2, 0x15, 0x1d, 0x5f, 0x40, 0x5b, 0x31, 0xf9, 0x30, 0x13, 0x89, 0x74, 0x89, 0x57, 0x0f,
	0x6c, 0xda, 0xd2, 0x71, 0x94, 0x48, 0x7c, 0x09, 0x76, 0xca, 0xa4, 0x9a, 0x15, 0x22, 0x5b, 0xb8,
	0x3d, 0xcf, 0x0a, 0xea, 0xb4, 0xad, 0x81, 0x1f, 0x44, 0xb6, 0xe8, 0xbf, 0x86, 0xce, 0x4e, 0x4b,
	0x24, 0x50, 0x7f, 0xe0, 0x4f, 0x9b, 0xd5, 0xeb, 0x27, 0x1e, 0x43, 0xf3, 0x91, 0xa5, 0x2b, 0x6e,
	0x3c, 0xb4, 0xe9, 0x3a, 0xb8, 0xa8, 0x7d, 0x6b, 0xf9, 0x1e, 0x74, 0x27, 0x5c, 0x69, 0x5d, 0x94,
	0xff, 0xb2, 0xe2, 0x52, 0xed, 0xfb, 0xe6, 0x23, 0x90, 0x2b, 0x21, 0x0d, 0x45, 0x6e, 0x38, 0xfe,
	0x05, 0xf4, 0xb6, 0x30, 0x59, 0xe4, 0x99, 0xe4, 0xf8, 0x05, 0x34, 0x33, 0x0d, 0xb8, 0x96, 0x99,
	0xfb, 0x68, 0x6f, 0x6e, 0xba, 0xce, 0xfa, 0x53, 0x68, 0x5d, 0xe6, 0x99, 0x2a, 0xf3, 0x14, 0xcf,
	0xa0, 0xa1, 0x9e, 0x0a, 0x6e, 0x3e, 0xd6, 0x1d, 0x9e, 0x6c, 0x15, 0x6c, 0x18, 0xd3, 0xa7, 0x82,
	0x53, 0xc3, 0xc1, 0x57, 0xd0, 0xd0, 0xdb, 0x30, 0x13, 0x38, 0x43, 0xfb, 0x5c, 0x1f, 0xf8, 0x94,
	0xc9, 0x07, 0x6a, 0x60, 0xdf, 0x07, 0x32, 0x2e, 0x99, 0xc8, 0x9e, 0x9b, 0xe4, 0x53, 0xe8, 0x6d,
	0x71, 0xd6, 0xaa, 0xcf, 0x6e, 0xc1, 0xae, 0xce, 0x02, 0x7b, 0xd0, 0x79, 0x17, 0x47, 0x71, 0x34,
	0x8d, 0x46, 0x57, 0xd1, 0x6d, 0x38, 0x26, 0x07, 0x68, 0x43, 0x73, 0x74, 0x15, 0xfd, 0x18, 0x12,
	0x0b, 0xdb, 0xd0, 0x18, 0x87, 0xa3, 0x31, 0xa9, 0xe9, 0xd7, 0xe4, 0x3a, 0x0e, 0x49, 0x1d, 0x09,
	0x7c, 0x52, 0xf1, 0xa3, 0x78, 0x42, 0x1a, 0xba, 0x60, 0x4c, 0x47, 0x51, 0x4c, 0x9a, 0x67, 0xaf,
	0xc1, 0xd9, 0x1a, 0x04, 0x1d, 0x68, 0xbd, 0x8b, 0xdf, 0xc4, 0xd7, 0x3f, 0xc5, 0xe4, 0x00, 0x8f,
	0xc0, 0xb9, 0xa4, 0xe1, 0x68, 0x1a, 0xce, 0xa6, 0xa3, 0x9b, 0x37, 0xc4, 0xc2, 0x2e, 0x80, 0xa9,
	0x9b, 0xc5, 0xd7, 0xe3, 0x90, 0xd4, 0x86, 0xff, 0xd4, 0x80, 0xdc, 0xbc, 0x5f, 0xc8, 0x0d, 0x2f,
	0x1f, 0xc5, 0x1d, 0xc7, 0x6f, 0xa0, 0xad, 0xd5, 0x5e, 0xde, 0x33, 0x85, 0xfb, 0x0b, 0xee, 0xe3,
	0xc7, 0x0b, 0xf4, 0x0f, 0x02, 0xeb, 0x4b, 0x0b, 0x7f, 0x06, 0xbb, 0xf2, 0x0b, 0x5f, 0x6e, 0xd1,
	0xf6, 0x9d, 0xed, 0x9f, 0xfe, 0x7f, 0x72, 0xbd, 0x2c, 0xbf, 0xf7, 0xc7, 0xdf, 0xff, 0xfe, 0x59,
	0x73, 0xd0, 0x1e, 0x3c, 0x7e, 0x35, 0x30, 0x76, 0xe2, 0x5b, 0x68, 0x6d, 0x0e, 0x08, 0x5f, 0x6c,
	0xd5, 0xee, 0x1e, 0x55, 0x7f, 0x5f, 0xab, 0x7f, 0x62, 0x3a, 0x11, 0xec, 0x56, 0x9d, 0x06, 0xbf,
	0x89, 0xe4, 0x77, 0x4c, 0xc0, 0xae, 0x3c, 0xda, 0x51, 0xba, 0xef, 0xee, 0x8e, 0xd2, 0x8f, 0x6c,
	0xf5, 0x4f, 0x4d, 0xff, 0x13, 0xff, 0x78, 0xb7, 0xff, 0x45, 0xa2, 0x99, 0xdf, 0xdb, 0xb7, 0xad,
	0xf9, 0x4a, 0xa4, 0x4a, 0x64, 0xf3, 0x43, 0xf3, 0x1f, 0xfc, 0xfa, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x2e, 0x2e, 0x75, 0x20, 0x52, 0x05, 0x00, 0x00,
}
