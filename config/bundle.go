// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x19\x5d\x6f\xe3\xb8\xf1\xdd\xbf\x62\x9a\x6c\xd1\x5d\xc0\x72\x9c\x3b\x5c\xd1\x33\x90\x87\xc4\xc9\x65\xd3\x4b\xb2\xae\xed\x34\xed\x53\x40\x89\x23\x89\x17\x89\xd4\x91\x54\xbc\xde\x34\xff\xbd\x18\x92\x92\x6c\xc7\xf9\xb8\x5e\xb0\xe8\x01\x1b\x20\x80\x4c\xce\x17\x67\x86\xf3\xc5\x19\xea\x3b\xd4\xa3\x1e\xc0\x2e\x7c\x54\xc6\x4a\x56\x22\xa8\x14\x6c\x8e\xf0\x53\x2d\x25\x16\x60\x1c\xc8\xa0\x07\x0e\xe0\x92\x95\x38\x82\x42\x25\xac\xc8\x95\xb1\x3d\x87\x39\x51\xda\x42\x6d\x90\x43\xaa\x34\x7c\x9c\xcf\x27\x90\xa8\xb2\xac\xa5\x48\x98\x15\x4a\x02\x93\xdc\x91\x5c\x60\x0c\x9c\x99\x3c\x56\x4c\x73\x47\x72\x3e\x9f\x10\xf6\x08\xfe\x36\x1c\x0e\xb7\x51\x9b\x4e\xc6\xeb\xc4\x08\x6d\x3a\x19\x7b\xac\x1f\x87\x3f\x06\xac\x29\xfe\x5a\x0b\x8d\x10\x33\x23\x12\x60\xb5\xcd\x51\xda\x86\x3f\x11\x22\xfe\xfe\x2c\x70\x38\x39\x33\x50\x1b\x21\x33\x60\x50\x31\x63\x16\xca\x8b\xb3\x0b\x67\xa9\x63\xdd\x87\x92\xdd\x22\x98\x5a\x23\x58\x05\x95\x56\x15\xea\x62\x09\x1a\x8d\xd5\x22\xb1\xc0\x92\x04\x8d\xa1\x3d\xa2\x9b\x28\x99\x8a\x0c\x52\x51\xa0\xa3\xf2\x1e\x07\xd9\x00\x92\xbc\x54\x1c\xfe\x3a\x1c\x42\xea\x54\x39\xf0\x60\x83\x65\x59\x7c\xf0\x27\x0d\xac\x47\xc0\xe2\x64\xff\xbb\xef\xfd\x49\xce\x64\x52\xd4\x1c\x81\xc1\xce\x98\x25\x39\x46\x63\x25\xad\x56\xc5\x08\xa4\x8a\x8c\x55\x1a\x77\xbc\x8e\x73\x64\x1c\x35\x08\x09\xa7\x68\xf7\xce\x85\xb1\x24\x5f\xa5\xa4\x41\xe3\x28\x39\xc9\xf1\x0e\xa5\x85\x84\x25\x39\x9d\x37\x5e\x82\x90\x16\x75\x89\x5c\x30\xbd\x74\x1a\x11\x09\x1a\x3a\xfd\xb1\x30\x2c\x2e\x90\x68\x3b\xc6\x23\xb0\xba\x46\x2f\xd4\xb9\x28\x85\xf5\x3a\x14\x5f\xbc\x8b\x30\x73\x0b\xf8\x19\x93\xda\x2a\x0d\x85\xca\x0c\xbc\x37\x96\xab\xda\xee\xa1\xd6\x1f\xfa\x24\x57\xbc\xb4\x9e\xf4\x05\xfb\x7c\x12\x40\xcf\x55\x36\x13\x5f\x70\x04\xfb\xc3\xe1\x70\x08\xbb\xb0\x3f\x84\x9f\x8f\x3c\x97\x79\x8e\xb0\xea\x82\x2c\xb1\xe2\xae\x35\x1b\x67\x96\xc5\xcc\x90\x8d\x93\x5b\x94\xdc\xa1\x1c\xde\x31\x51\x90\xd8\xcd\xaa\x19\x41\xac\x0a\xcb\xe3\x3e\xf0\xa5\x64\xa5\xa2\x2f\x2c\x98\xb1\x22\xe9\x43\xa9\x64\xa6\x78\x4c\xa7\x0d\xd4\x1a\xf0\x95\x25\x43\x17\x02\xe0\x48\x15\xf6\xf8\xc8\x7f\x7b\x73\xd9\xbc\xb1\x78\x2b\x4b\xb0\x39\xfd\xd1\xfe\x08\x06\x7b\xde\xda\xd1\x42\xe9\xdb\x88\x0b\x1d\x7e\x0f\x78\xdc\xeb\x79\x42\xc7\x4e\xae\x86\xf4\xae\xfb\x3f\x62\x06\xdd\xd1\xad\x22\x0f\x74\x2e\xdb\xc8\x0f\x96\x0e\x68\x5a\xe8\x39\xfd\x6c\x10\x46\xb0\xe3\x19\xec\xb4\xfb\x87\xd7\xb3\x8e\xb4\x53\xd2\xf5\x0c\x34\x66\x42\xc9\x95\xe5\xa9\x5b\x18\xc1\xce\xce\x23\xd8\x43\xef\xdd\xb7\xb8\x84\xb3\xe3\x95\xdd\x9f\x71\xb9\x15\x7e\x86\x89\x46\xdb\xa0\xfd\x8c\xcb\x15\x08\xbf\xe7\xd0\xc2\xea\x89\x37\xc6\xea\xe9\x27\x1a\x53\xf1\x79\xf5\xec\x42\x72\xfc\x8c\x06\xde\x93\x9f\xf5\xc1\x79\xb1\xe9\x83\x54\x1c\xcd\x87\x16\xf3\x8c\xa0\x3c\xf2\x16\x3d\xec\xc2\xd5\xf4\xbc\xf1\xa5\xe0\x02\x06\x99\x4e\xf2\x95\xa8\xe6\x41\xaf\xa6\xe7\x23\xc8\xad\xad\x46\x7b\x7b\x6d\x74\x1b\xfd\xf8\x9d\x0f\x4a\x04\x73\x41\x9e\xb3\x6e\xb3\x43\xce\xb5\x81\x5c\x15\xdc\x78\x77\xe5\x5c\xa3\x31\x68\x56\x02\x0e\xf2\xc0\xcb\x74\xcc\x1c\xde\xaa\x85\x22\xd8\x69\x99\xae\x8a\xdf\x38\x24\x08\xb3\xee\x75\xce\x53\x5c\x8c\x5c\x08\x9b\x0b\xd9\x48\x47\x1a\x74\x21\x22\x84\x1c\x87\xd1\x31\xee\x7c\xfe\x91\xae\xae\x0c\xea\xe0\x4e\xdd\x62\x17\xa0\xbc\xf5\xce\x55\x96\xf9\x74\xe1\x62\x82\xca\x32\x8a\x29\x05\xde\x61\x61\x46\xc0\x31\xae\x33\xba\xf7\xa9\xea\x03\x6a\xad\xb4\x03\x3c\xa7\xed\x91\x5b\x0e\x88\xd7\x5a\x58\xf4\x21\xc3\x5d\x27\x61\xa0\x62\x36\x1f\x50\xf4\xc5\xb2\xb2\xcb\xbe\xdf\x64\x1a\x61\xa1\x85\xb5\x28\xfd\xc1\x38\xea\x60\xb3\x4f\xb5\xad\x6a\xfb\x93\x28\xbc\xc0\x3d\x1f\x3b\x4c\x92\x23\xaf\x0b\x0a\x8a\xa6\x4b\x21\xa4\xb9\x0b\x26\x6b\x56\x50\x26\xa9\x6a\xdb\xc6\x8a\x01\xf4\x66\x0d\x4a\x93\x04\x17\xa0\xd2\xc0\x50\xd7\x12\xd8\x2a\x51\x8b\xba\xcd\x41\x14\xa8\x41\x32\xa9\x0c\x26\x4a\x72\x67\xde\x86\xd8\x94\xd9\x26\xc0\x0d\x9b\x28\x07\x1e\xae\xe5\x52\x32\xb9\x74\x41\xd4\x29\xa1\x61\x42\x51\x53\x49\x5c\x67\xd5\x90\x1d\xe7\xb5\xbc\x25\xba\x2d\x91\x42\xc9\x8c\xd0\x17\x4c\x58\x88\xd1\x2e\x10\x25\xd4\x15\x67\x16\x0d\xc4\x98\x92\x27\x94\x4c\xdf\xfa\x54\x47\x97\x07\x38\x32\xfe\x94\xfc\x97\x8a\xe3\x44\xc8\x6c\x2e\x4a\x54\xb5\x1d\x51\xf2\x5a\x3b\x43\x29\x64\x6d\x71\x3b\x7b\x52\x75\xe0\xe1\x8c\xc5\xb4\xed\x6f\xca\x40\xa6\x78\x95\x14\x67\x52\xd8\x56\x8a\xef\x87\x6b\x62\xfc\x10\xc4\x30\x01\xb6\xf1\xc7\xce\x7b\x82\x18\x67\xc7\xb0\x10\x45\x01\x31\x52\x41\xa0\x4a\x46\x05\x41\x51\x2c\x21\x43\x49\xea\x45\xee\x9d\xe9\xec\x78\x35\x3c\x91\x53\x19\x48\x34\x12\x00\xf0\x5a\x93\xe0\x95\x56\x14\xdb\xe8\xb3\x21\xd9\x78\xa6\x90\xde\x85\xb9\xd0\x98\x58\xa5\x97\x9e\xe8\xb5\xd2\xb7\xc7\x42\x6f\x49\x08\x9d\xb8\xad\x3a\x72\x46\xe6\x22\x62\xbc\xf0\xf1\x8f\x54\x8b\xe4\xbb\x4c\x3a\x30\xeb\x95\xd1\x07\x61\xbd\x04\x26\xaf\x2d\x70\xb5\x90\xcd\xf5\x8e\xf6\xa1\x44\x26\x5d\xa4\xd0\x2e\x64\x48\xd5\xa0\x0d\x60\xd8\x6c\xfa\x05\x10\xa5\x2b\x01\x2c\x16\x4b\x60\xa9\x45\x7f\x4d\x52\xa1\x8d\x75\x5e\xe9\xa9\xb6\x26\x88\xf6\x1b\xf5\x1c\x3a\x9d\x7b\x19\xd6\xb5\x6a\xf5\x92\x2c\xcf\xd1\x62\x62\x61\x91\x33\x57\x8f\xa8\x5a\x27\xe8\xef\x32\x6b\x73\xb5\x55\x20\xec\x00\x9a\x7c\x88\xa9\x90\xa4\xda\x69\x0b\x2e\xfc\xa9\x1d\x2b\x5f\x36\xd5\xfe\x3e\x80\xba\x43\xad\x05\x47\xe3\xb5\x1e\x63\xce\xee\x84\x0a\x61\xa1\x25\xd0\x65\xed\xf1\xe4\xca\x74\x9c\x07\xdd\x7a\x55\x9b\x11\x84\xf0\xee\x2a\xc8\xc3\x8b\x0e\xce\x95\x2f\xa7\x47\x1d\xf8\x94\x95\xa7\xf1\x08\x86\x83\x15\x8c\x63\x61\x6e\xc1\x54\x2c\xc1\x67\x10\x09\xe8\x11\xe6\x4f\xce\xc2\x8b\xc8\x85\x4e\xb0\x35\x9d\xbe\x43\x59\x0b\x42\x66\x29\x13\x17\xe5\xb7\x17\xe5\xc1\x97\x1e\x5d\x22\xfa\xbb\x72\x81\xc0\x07\xa3\x1f\xd6\x6f\x50\x80\xec\x8e\x37\x19\xb7\xae\x41\xee\xe7\x63\xc8\x9e\x63\x4e\xd6\x7d\x1d\xab\xd6\x5d\xb6\x87\xbe\x00\xbb\x9a\x45\x7e\x53\x26\xd9\x96\x4d\xde\x2c\xa3\x6c\xcb\x2a\xbd\x27\x4b\xd2\x8d\x44\xd2\xdb\x5e\x88\xba\xa4\xde\x87\xdc\xd2\xf1\x95\xee\x83\x29\x6a\x5d\xf6\xa1\x8a\x4d\x1f\x32\xf2\x62\x99\x09\x89\xd4\x6d\x50\x7a\xea\x03\x5b\x98\x28\x66\x36\xc9\x7b\x47\x9e\x48\xa0\x41\x92\xb4\x99\xaa\x61\x10\x2e\x46\x03\xea\x7c\xfe\xe3\x7c\xec\x58\x79\xed\xce\xb1\xac\x0a\x67\xfe\xff\x84\x33\xd6\x52\x50\x2d\x82\x70\x00\x77\x4c\x8a\xa2\x60\x61\x23\x43\x8b\xf2\x0e\x0e\x60\x4e\x35\xbf\x5f\xf3\xd5\xbd\x3b\xd3\x01\xdc\xdf\x0f\x4e\xda\xdf\x0f\x0f\x01\x84\xe9\xac\x2e\xa9\x34\x83\x03\xa0\xf8\x86\xda\x65\xcd\x28\x0a\x2d\xd1\xfd\xfd\x60\xec\xbe\x1e\x1e\x20\x8a\x28\xb0\x44\x82\xd3\xea\x9c\x99\xdb\x33\xde\xd2\x29\x54\xe6\x79\x84\xb0\xf9\xf0\xb0\xe7\x75\x16\xb9\xca\x2f\x2a\x54\xd6\x08\x45\xee\xb0\x09\x1b\x22\xac\xb7\x67\x00\x54\xce\x98\x4f\x43\xaa\xda\x06\x48\x93\xab\xba\xe0\x37\x56\x33\x69\x52\xd4\x37\xa9\xcb\x00\x07\xf0\xef\x93\x59\x80\x58\xe4\x28\x6f\xac\xea\x40\x5a\xe2\x9f\x2e\x6f\x4e\xfe\x75\x36\xbf\xf9\x34\xbd\x39\xf9\xe7\xd9\x78\x1e\x10\xee\xef\x45\x0a\x12\x61\x40\x61\x06\x86\x10\xb5\x27\xbd\xbf\xaf\xb4\x90\x36\x85\x1d\x8d\xbf\xd6\x68\xec\x4d\x42\x20\x07\xf0\x67\xbe\xe3\xc1\x57\x40\x23\x40\xc9\x57\x7e\x07\xa2\x2e\x18\x51\x44\x79\x96\x6e\x89\xa5\xd2\x4b\xa2\x3c\x18\xa6\x70\x7a\xb4\x13\x10\x5f\xa6\xef\x63\xd6\x8b\x0c\x38\xc5\xbf\x55\xf2\x1e\x6f\x0b\xfd\xb0\xf0\x6b\x8d\xbe\xa1\x9c\x1c\xcd\x9e\xf2\xd0\xdd\x3f\xc5\x42\xee\xc5\xcc\xe4\xcd\xc2\xe4\x68\x06\xd1\x25\x99\xd1\x55\x06\x9d\xbc\x7e\x47\xbd\x6c\x60\x0f\x88\x2f\xfb\xcc\x6b\xcc\xe6\x89\x15\xbe\x15\x39\xd8\x1f\x55\x95\x3c\x78\x33\xdb\x35\xc4\x4b\x2c\x0f\x48\xaf\x59\xfc\x66\x56\x6b\x48\x93\x77\x77\xb4\x5f\x32\xd9\xc6\xb5\xff\x1f\x2f\x79\x0f\xe0\x54\x0b\x7e\xe2\xc2\xdd\xeb\x2d\xff\xee\x09\xbb\xbf\x7b\x9d\xd5\xdf\xbd\xca\xe6\x04\xd6\x5a\xf3\xb7\xf8\xc1\x3b\x88\x2a\x84\xb2\x12\x6f\x77\x75\xbd\x2c\xf9\xcd\x5d\x63\xff\xd3\xb7\x33\x7f\x20\x9d\x1a\xf1\x05\x5b\xda\x5f\xc7\xfc\x40\x95\xde\xec\xfc\x6a\x7a\xf1\xb4\xed\xf7\x36\x8d\x3f\x3b\x3a\x9c\x8f\x3f\x42\x14\xfd\xa2\xe2\xc8\xa5\xe0\x2d\x9e\xd0\x02\x49\xdf\x4a\xed\x3f\xda\xf0\xf9\xe2\x65\x2f\x68\x11\x42\x68\x7f\xd1\xbd\x5e\xe5\x23\x2d\x55\x0a\xf2\x51\x85\xda\xe9\xe7\x0d\x1d\xa6\x65\x50\x62\xe9\x22\xf1\x1b\xc6\xf9\x8e\xb8\x2d\xab\x8e\xf8\x57\x0b\x19\xbb\x70\x44\xb5\x10\x70\x34\x89\x16\x31\x9a\x95\x61\x6b\xd3\x0e\x34\x0d\xfe\xe1\xf5\x2c\x40\x6f\xf6\xf8\x3d\xf0\x1b\x4d\x9b\xf8\x77\x15\xfb\x86\xc3\xe1\x27\x4c\x52\x33\x87\x82\xba\x26\x6a\x1c\x5d\xad\x17\x68\x96\xec\x8b\x92\x6d\x53\x01\x97\xb4\xf7\xfe\x70\x7a\xf9\xc1\x97\x8c\x6b\x94\xda\x99\x8a\xf3\x57\x8e\xe9\x4e\xc7\xef\x1f\x94\xf7\x7e\x2f\x2b\x47\x64\x9d\x8b\xcb\xa7\x0d\x9f\x6e\xc8\xd7\xd4\xaa\xa6\xc2\x44\xa4\x02\x39\xfc\xa2\x62\x9f\x7c\xfd\x28\x5e\x85\xf6\xd6\x41\xd1\x1e\xef\x14\x22\x64\xe8\xa4\xd6\xa6\x83\x63\x8d\x1c\xa5\x15\xac\x68\x5b\xab\xd5\x61\xe0\xfa\x98\xaf\x77\xed\x2c\xee\x27\x2a\x6f\xd2\x4e\x3f\xd3\x4c\xb7\x4c\xdc\xe0\x8b\x65\x08\x66\x69\x2c\x96\xae\x35\xd9\x0d\x63\x65\x61\xfc\x44\xa8\x76\x8d\xaa\x41\xbb\xd1\xba\xc6\x4b\xaf\xb0\xa6\xc4\xee\x43\x5c\x5b\x58\xaa\x1a\x4a\x91\xe5\x16\x24\x22\x77\x62\x39\x7a\x22\xa5\xad\xbf\x68\xf4\x53\x0e\x3f\x5c\x09\x5e\xee\x2b\xf9\xc2\x49\x3d\xf3\x02\x75\xf3\xb2\x84\xf9\xf4\x1b\x44\xf4\xa6\x75\xcb\x5d\xbf\x7a\x9d\x0b\x8b\x85\x30\x96\xac\xe8\x8a\xff\x4e\x15\xae\xa9\x31\xb0\xc8\x45\x92\x37\xad\xa0\x30\xc0\x8a\x42\x2d\xd0\xd9\xd5\xbf\x4b\x34\x1d\xcd\xa1\xdf\x38\x16\xda\x74\xed\x56\x04\x83\x3d\x7f\x55\xbd\xd3\xcd\xbe\x6f\xf6\xc2\x03\x00\x1f\x41\xca\x0a\x83\xad\x48\xd4\x03\x95\xec\xb3\x28\xeb\x12\x64\x5d\xc6\xa8\x9d\x87\x89\xd2\xdd\x48\x66\x81\x41\x28\x09\x5b\x6b\x6a\xb4\x5a\x84\xf9\x5b\xca\x44\x51\x6b\x6c\xa5\xba\x60\x9f\xa7\x6e\xdb\x84\x59\x16\x3c\x33\x78\xde\xf4\xb3\xe7\x06\xce\xdb\x86\xcd\xa7\x28\x51\x8b\xa4\x39\xe4\xae\x53\x40\x77\x50\xdb\x74\x3b\x7e\x10\x7b\x22\x79\xa5\x84\xb4\x1b\x53\xee\xc7\x73\xef\x4d\x46\xa7\xb3\x97\x94\xd8\xbc\x1e\xb0\x24\x51\xb5\xb4\x74\x23\x9a\x1b\xe5\x7c\xa2\xeb\xb0\x3f\x55\x74\x11\x59\xe1\xba\xd7\x4a\x19\x23\xdc\x5c\x61\x15\x61\xfb\x58\x8b\x0b\x93\xa8\x3b\xd4\xc8\x5b\x5a\xa9\x56\xa5\x1f\x7f\xcb\x3b\xa1\x95\xa4\x5e\xad\xf5\x0e\x2f\x49\xd7\xee\x42\x33\x97\xfa\x1d\x4c\x9f\x63\x39\x5b\x88\xd4\x3e\xaf\xa7\x2b\x83\xfa\x72\x75\x0c\xbd\x31\x84\x0e\x92\xd7\x36\x77\x13\xfb\x76\x65\x8e\x92\x49\xbb\x81\xe9\x17\xc3\x74\xcf\x2f\xf9\xb0\xd6\xc2\xf5\x9e\x1b\xc6\x6c\x0e\x62\xa8\xe5\x76\xd9\x9b\x9a\xd5\x66\xc8\x1a\xde\x83\x1e\xcd\x65\xb6\x0d\x4a\x5e\x31\x8f\x71\x98\x17\xe1\xae\xb5\xcc\x56\x1f\xd6\xdc\x03\x5c\xf7\xba\x46\x02\xc4\x75\x9a\xa2\xde\x9c\xff\xba\xc4\xe7\x76\x7e\xeb\x7b\x9b\xe3\xab\xfd\xeb\xe2\x4a\x16\xdd\x3e\xe3\xd0\x55\xf2\xc2\x4b\x1b\xa5\xf4\xa9\xa3\xe6\xa0\xd7\x56\xcc\xe8\xdb\xa3\xd8\xb7\x47\xb1\x3f\xf4\xa3\xd8\x93\xd7\xc8\xbf\xbc\x53\x5d\xf3\xea\x7b\x54\xa8\xec\x85\xcb\x74\xe8\x68\x9f\x10\x69\x37\xf4\xd4\x66\xe4\xc7\xe8\x51\xb8\x5b\xf4\xe5\xa7\x65\x6b\x40\x41\x7c\x3f\x28\xf5\x8e\xe3\x46\xe9\x90\x4d\x27\x63\x5f\xf1\x4d\xc6\x5d\x15\xf2\xf5\xe6\xc1\xbb\x30\xd7\x4c\x1a\x6a\x07\x1b\xb9\xa8\x46\xf5\x06\xb3\x39\x0a\x4d\x15\xbf\x25\x55\x0a\xd9\x46\x89\xc1\xb7\xa8\xf1\x2d\x6a\xfc\x61\xa3\x86\xbf\x23\xff\xcf\x0f\xea\xff\x0d\x00\x00\xff\xff\xac\x99\x34\x09\x19\x26\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 9753, mode: os.FileMode(420), modTime: time.Unix(1511987589, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\x03\x31\x14\x85\xf7\xf3\x14\xd7\xa9\x5d\x26\x33\x2f\xe0\xaa\x95\xe2\xc6\x85\x08\x2e\x25\xd3\xdc\xd8\x4b\x66\x92\x21\x3f\x2a\x86\xfb\xee\x32\x69\x11\x0a\x63\x77\x87\xc3\x77\xbe\xc5\xd9\xdc\x75\x03\xb9\x6e\x50\xf1\xd4\x6c\xee\x41\x3c\x43\x29\xf2\x55\x45\xfb\xa4\x99\x6b\xe3\x97\xe6\xcd\x07\xbb\xa7\xc0\xdc\x99\xec\x1c\x8e\x22\x26\xed\x73\xaa\x00\xfe\x07\x60\x08\x4d\x29\x64\xc0\x21\xc8\xdd\x9c\x23\xf4\x20\x98\x9b\x52\xe6\x40\x2e\x19\x68\x97\xf9\x8c\x30\xcd\x04\x5b\xdd\x9e\xa1\x0a\x08\x40\xa7\x6b\xba\xcc\x5f\xd4\x74\x18\xa0\x97\x6b\x86\x11\x4e\xef\x9f\x13\x4e\x0f\x5b\xd9\x9b\x43\x7b\x81\xd7\x3d\x7b\x8a\xf6\xa6\xc8\x44\xfa\xc1\x3f\xd3\x19\xbf\x52\x35\xa5\xc8\xc7\x6f\x3c\xe6\xa4\x86\x11\x99\xe1\xcb\x07\x8b\x01\x42\x76\x20\xc4\xd1\x3b\x43\x1f\xcb\x23\xbb\x9a\x98\x41\x88\xa4\xa2\x15\xa4\xaf\xae\xfd\x0d\x00\x00\xff\xff\x24\x76\x8a\x2a\x79\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 377, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xcd\x6e\xe2\x30\x10\xc0\xf1\xbb\x9f\x62\x84\xb4\x47\x67\x79\x81\x5c\x16\x22\xc4\x65\x91\x68\xd4\x8f\x53\x64\xe2\x49\xb0\xe2\x8c\x61\x6c\x87\x56\x91\xdf\xbd\x0a\x20\x2a\xaa\xd2\xdb\x24\xf3\x9f\x9f\x1c\xc9\x0c\xc8\x1e\x21\x87\x41\x91\xb1\x56\x89\x16\x03\xd2\x00\x39\x94\x1c\x51\xe0\x3b\xd6\x31\xa8\x9d\x9d\x92\x71\xcc\x8a\xdb\x77\x4a\x42\x71\x1b\x7b\xa4\xe0\x21\x87\x93\xe3\x0e\x19\x38\x12\x48\x59\x3b\x6a\x4c\x3b\xf5\x8b\xf3\x94\x12\x48\x19\x94\xef\xa4\xd1\xd3\xdf\x52\xf9\x6e\xad\x53\x12\xd6\xb5\x17\xf7\xc5\x71\xb7\x34\x9c\xd2\xdf\xda\x91\x76\x2c\x71\x40\x0a\xd2\xba\x56\x20\xb3\xe3\xef\x55\x13\x89\xd0\x4a\x1f\x34\x32\x0b\x17\xc3\x21\x86\xc7\x8d\x8b\x41\xf8\xbd\x8b\x56\x57\x81\x15\xf9\x06\xb9\x6a\x8c\xc5\xe9\xe1\x6f\xc5\x93\x38\xed\x91\xaa\xe0\xbe\x96\x37\x70\xf3\xbf\x2a\x5e\xd7\x65\xb5\xd9\x56\xc5\xf3\x7a\x51\x8a\x71\x34\x0d\x10\x42\xb6\x38\x44\x0f\x73\x90\x29\x89\x71\x3c\xb0\xa1\xd0\xc0\x8c\xf1\x18\xd1\x87\xaa\x9e\x96\x39\xfc\xd1\xb3\x4b\x78\x8e\x24\x20\xe9\xf3\x74\x25\xb6\xaa\x5f\xed\x60\x9e\x3d\x52\x7a\xec\x1d\x7f\x4c\x4e\x36\x6f\x60\xf5\x6f\x76\x3d\xf9\x59\x5b\x1a\xdf\xfd\xca\x69\xe3\xbb\x3b\xec\x72\x71\xa7\x89\x63\xc4\x88\xe2\x33\x00\x00\xff\xff\x5f\xc0\xd7\xf8\x18\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 536, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xcf\x4a\x03\x31\x10\xc7\xf1\xfb\x3e\xc5\xd8\xd2\x63\xb2\xeb\x55\xd8\x8b\xad\x88\x17\x11\x15\x3c\x27\xcd\xa4\x86\xec\x4e\x96\xfc\x41\x21\xcc\xbb\x4b\x77\x17\xa4\x60\xbd\x0d\xc3\x97\xcf\xe1\xb7\xbd\x69\xb5\xa3\x56\xab\xf4\xd9\x6c\x5f\xee\xdf\x40\x3c\x43\xad\xf2\x5d\x25\xff\x64\x98\xd7\x5f\x38\xff\x3e\x42\xf4\x07\x17\x99\x5b\x5b\x88\x70\x10\x29\x9b\x50\xf2\x9a\xe0\xb5\x04\x63\x6c\x6a\x75\x16\x08\x41\xee\xa7\x92\xa0\x03\xc1\xdc\xd4\x3a\x45\x47\xd9\xc2\x66\x01\x06\xa0\x60\x30\xf5\xb7\x77\xd3\x44\xfd\xce\x6c\x96\x7a\x2e\x05\x20\x99\xf9\x5a\x9d\x57\x35\x3e\x6a\xe8\xe4\x35\x6a\xc4\xb1\xdf\xc9\xce\x9e\xf4\x66\x8d\xff\x76\x0e\x2e\xf9\x7f\x21\xeb\x06\xfc\x95\x96\xfc\x82\x6a\x6a\x95\x0f\xdf\x78\x2c\x59\xe9\x01\x99\xe1\x2b\x44\x8f\x11\x62\x21\x10\xe2\x18\xc8\xba\xd3\x79\x9a\xfd\x7c\x31\x83\x10\x59\x25\x2f\x9c\xb9\xd8\xf9\x27\x00\x00\xff\xff\x80\x45\x84\x4d\x88\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 392, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcf\x6a\xc3\x30\x0c\x87\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\xe9\xe8\x76\xdd\x0a\x3b\x3b\x8d\xb2\x79\x6e\x64\x23\xdb\x6c\x60\xf4\xee\x23\x69\xa1\x29\xac\xf4\xf6\xc3\xfe\xf4\xa1\x3f\xab\x87\xba\x33\x54\x77\x3a\x7c\x15\xab\xf7\xcd\xd3\xbe\x7d\x01\xa5\xbe\x5d\xa7\x48\x8f\x08\x39\x57\x7b\x1d\xec\x6b\x2f\xb2\xf8\xa6\xa8\x83\x0d\xf0\xb8\x78\x42\x66\xc7\x13\xfe\xe1\xd8\x6e\x0d\x8b\xd4\x43\x22\xc2\xa3\x0a\xb1\x47\xe6\x05\xea\x52\xf4\x29\xde\x62\x5d\x8a\x45\xce\x66\x00\x42\xa8\x5a\x9f\x02\x34\xa0\x44\x8a\x9c\x3d\x1b\x8a\x03\x94\x17\xd3\xc1\xa7\xa0\x3c\xb2\x9a\xfa\x81\x75\x5f\x9e\x2a\x66\x5a\x01\x52\x3f\xa7\xb3\xeb\x4d\x8f\xbb\x0e\x9a\xea\xb6\x6e\xc4\x11\xd6\x55\x33\xec\x36\xe5\x19\xff\xdf\xb4\x35\xc1\xde\x51\xc5\xd1\x5f\x54\x27\xfe\xca\x55\xe4\x5c\x3d\xff\xe2\x21\x45\xdd\x1d\x51\x04\x7e\x1c\x5b\x64\xe0\x44\xd3\x5c\x8e\x06\xf3\x39\x6d\xa8\x9d\x93\xc8\xa4\xd4\xc1\x2a\xd3\x5f\x9d\xe4\x2f\x00\x00\xff\xff\x36\x8f\xbd\x5a\xbe\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 446, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
