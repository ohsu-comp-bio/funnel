// Code generated by go-bindata.
// sources:
// config/gridengine-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// config/default-config.yaml
// config/htcondor-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\xc4\x30\x14\x85\xf7\x79\x8a\x6b\xc7\x59\x26\xed\x0b\xb8\xb2\x30\xb8\x71\x21\x82\x4b\x69\xc9\x0d\x13\x32\xf9\xe1\x26\x51\x30\xe4\xdd\xa5\x69\x11\x0a\x75\x76\x97\xc3\x77\x3e\xb8\xe7\xf4\xd0\xcf\xda\xf5\xf3\x14\xaf\xec\xf4\x08\xfc\x15\x4a\x11\xef\x53\x34\x2f\xb2\xd6\x96\xf8\x25\xf9\xf0\x64\x46\x4d\xb5\xf6\x2a\x3b\x87\x37\x1e\x93\xf4\x39\x35\x00\xff\x03\x90\x88\x95\xa2\x15\x38\x04\xf1\x1c\x72\x84\x01\x78\xad\xac\x94\x40\xda\x25\x05\xdd\x52\x0f\x08\x36\x68\x38\xcb\x6e\x85\x1a\xc0\x01\x9d\x6c\xd7\x56\x7f\x9b\xec\x65\x86\x41\x1c\x19\x6e\x70\xfd\xfc\xb2\x68\x9f\xce\x62\x50\x97\x6e\x83\x8f\x3d\xa3\x8e\xe6\xae\x48\x45\xfd\x83\x7f\xa6\x15\xdf\xa9\xd8\xfa\x20\x7c\x7b\x32\x48\x40\xd9\x01\xe7\x69\x59\x6c\xdc\x6d\xf7\x1b\x00\x00\xff\xff\xcf\x92\x30\x7f\x5a\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 346, mode: os.FileMode(420), modTime: time.Unix(1527178560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xc1\x4a\xc4\x30\x10\xc6\xf1\x7b\x9f\x62\xec\xb2\xc7\xb4\xf5\x2a\xf4\xa2\x05\xf1\x22\xa2\x82\xe7\x86\x4c\x34\xa4\x9d\x84\x49\x82\x87\x90\x77\x97\xdd\x04\x64\xc1\xf5\x16\x86\x3f\x3f\xc8\x77\xb8\x19\xa5\xa1\x51\xae\xe1\xab\x3b\xbc\xdc\xbf\x81\x78\x86\x9c\x87\xf7\x35\xd8\x27\x55\x4a\xbb\xb9\xd3\xed\xc3\xb1\x5d\x0c\x97\x32\xea\x44\x84\x9b\x08\x51\xb9\x14\x5b\x82\xd7\x12\x64\xee\x72\x36\x1a\x08\x61\x78\xf0\x29\xc0\x04\xa2\x94\x2e\x67\xcf\x86\xa2\x86\xbe\x02\x1b\x90\x53\x18\xe6\xdb\x3b\xef\x69\x3e\xaa\xbe\xd6\xe7\x52\x00\x92\x3a\xbf\x9a\xf3\xba\xee\x8f\x12\xa6\xe1\x1a\xb5\xe3\x3e\x1f\x87\x49\x7f\xca\xbe\xc5\x7f\x3b\x8b\x09\xf6\x5f\x48\x9b\x0d\x7f\xa5\x9a\x5f\x50\x5d\xfd\x29\x7c\x3b\xb6\xc8\xc0\x89\x40\x88\x78\x9a\x6f\xb9\x18\xf2\x27\x00\x00\xff\xff\x94\x91\x42\x0b\x69\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 361, mode: os.FileMode(420), modTime: time.Unix(1527178525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\x0d\x74\xbb\x6e\x85\x9d\x9d\x45\x61\x9e\x67\xd9\x48\x36\x3b\x18\xbf\xfb\x48\x53\x68\x0a\x0b\xbb\x19\xeb\xfb\x3f\xa4\x7f\xf7\xd0\x0e\x86\xda\x41\xcb\x67\xb5\x7b\x3b\x3c\x9d\x8f\xcf\xa0\xd4\x97\x1f\x14\x69\x87\x90\x73\x73\xd6\x62\x5f\xc6\x52\x56\x63\x8a\x5a\xac\xc0\xe3\xea\x0b\x99\x3d\xcf\xf8\xbb\x67\xdb\x1b\x2e\xa5\x9d\x12\x11\x7e\x2b\x89\x23\x32\xaf\x50\x9f\x62\x48\x71\x8b\xf5\x29\x56\x39\x9b\x09\x08\xa1\x39\x86\x24\xd0\x81\x2a\xa5\xca\x39\xb0\xa1\x38\x41\x7d\x33\x7d\x84\x24\x2a\x20\xab\x79\x1f\xd8\x8f\xf5\x92\xb8\xd0\x0a\x90\xc6\xcb\xeb\xea\x7a\xd5\xee\x34\x40\xd7\x6c\xeb\x1c\x3a\xd8\x37\xdd\x74\x3a\xd4\x57\xfc\x6f\x53\x6f\xc4\xfe\xa3\x8a\x2e\xdc\x54\x0b\x7f\xe7\xaa\x96\x83\xe1\xc7\xb3\x45\x06\x4e\x34\x87\xe6\xa6\xfb\xbb\xce\x7f\x03\x00\x00\xff\xff\x71\x9e\x5b\xbd\x9f\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 415, mode: os.FileMode(420), modTime: time.Unix(1527178517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x53\x1b\xbb\x92\x7f\x9f\x4f\xd1\x8b\x73\x6b\x93\x2a\xdb\x98\x9b\xca\xad\x3d\xae\xe2\x01\x0c\x87\xb0\x21\x84\xc5\xce\x66\xf7\x89\xd2\x8c\xda\x1e\x1d\x6b\xa4\x39\x92\x06\xe3\xb0\xf9\xee\x5b\xdd\xd2\x8c\x6d\x20\x7f\xee\xbd\xa4\x2a\x0f\x37\x4f\x58\xd3\x6a\xb5\xba\xfb\xd7\xff\x94\x1e\xcc\x4a\x04\x23\x2a\x04\x3b\x87\x50\x22\x88\x22\xa8\x5b\x04\x8f\xee\x16\x1d\x48\x11\x44\x2e\x3c\x42\x2e\x8a\x25\x1a\x99\xf5\xe0\xe8\x56\x28\x2d\x72\xdd\xad\xf9\x31\xe4\x56\x07\x99\xf7\x21\x17\x72\x81\xae\xcf\xdb\x7c\xb0\x0e\xfb\x20\xd7\x46\x54\x96\x3e\xa2\x16\x3e\xa8\xa2\x0f\x95\x35\x0b\x2b\xf3\xec\x24\x31\x6f\xf7\x67\xd9\x57\xc5\x29\x6c\x55\x37\xe1\x7b\x62\x68\x5b\x08\xdd\x87\x32\x14\xd6\x48\xeb\xfa\xe0\x75\xe3\xaa\x3e\xd4\xb9\xef\xc3\xc2\x29\x89\x66\xa1\x0c\xf6\xa1\x12\xa6\x21\x4a\xb1\xf2\x83\x5c\x84\xa2\xcc\x26\xf1\x80\xc4\xe3\x1b\x92\xe0\x2d\x9a\x00\x2b\xa7\x02\xba\xf6\xe8\x97\xfe\xd5\xf0\xab\x22\x2d\xfa\xff\x98\x7a\xfa\xb0\x14\xf3\xa5\xc8\x4e\xe9\xc0\x4f\x7c\x9e\x1f\x43\x06\x30\x68\xd5\x45\x7f\x6a\xbb\xc8\xb2\x0b\xbb\x58\xa0\x1b\x67\x00\x3d\xa0\xbf\x95\x59\x80\xc6\x5b\xd4\x7e\x0c\x12\xf3\x66\xd1\x07\x65\xe6\xb6\x0f\xe8\x9c\x75\x19\xc0\x05\x7d\x1c\xf3\x22\x6f\x62\xf6\xc4\xcb\x43\xb0\x10\x4a\xe5\xa1\x16\xa1\x1c\xc2\xf9\x1c\xb0\xaa\xc3\xba\x1f\x3f\x0a\x87\x7c\xf5\x80\x86\x08\x7d\x90\xe8\xdc\x30\x03\xf8\xd0\x84\xba\x09\xbf\x2b\x8d\x63\xd8\xdb\xcb\xb2\x29\xbb\x4f\x94\xe8\xad\xf5\x61\x5b\x91\xbf\x37\xc6\xa0\x4e\x1e\x46\x9b\x89\xe0\x52\x54\xad\xf2\x4b\xeb\x43\xc6\x3b\xaf\xac\x0b\xd0\x78\x94\x30\xb7\x0e\xde\xce\x66\x57\xe4\x08\x55\x63\x54\x21\x82\xb2\x06\x84\x91\xcc\x72\x85\x39\x48\xe1\xcb\xdc\x0a\x27\x99\xe5\x6c\x76\x45\xbb\xc7\xf0\x1f\xa3\xd1\xe8\x29\x6e\xd7\x57\x93\x5d\x66\xb4\xed\xfa\x6a\x12\x77\xfd\x36\xfa\x2d\xed\xba\xc6\x3f\x1b\xe5\xc8\xa4\x5e\x15\x20\x9a\x50\xa2\x09\xed\xf9\xc4\x88\xce\x4f\x68\x39\xba\x3a\xf7\xd0\x78\x52\xbf\x80\x5a\x78\xbf\xb2\x51\x9c\x1e\x29\x92\x8e\x26\xd7\x5b\x22\xf8\xc6\x21\x29\xb0\x76\xb6\x46\xa7\xd7\xe0\xd0\x07\xa7\x8a\x00\xa2\x28\xd0\x27\x2b\x90\xdb\x9b\xb9\x5a\xc0\x5c\x69\x64\x2e\x2f\x71\xb8\x18\x42\x51\x56\x56\xc2\xdf\x46\x23\x98\xb3\x2a\x87\x91\x6c\xb8\xae\xf4\x2b\x26\xfb\xe8\xd1\x8d\xd3\xc7\x78\xf5\x24\xcb\x18\x44\x5e\x1c\xfc\xf5\x75\xbc\xda\xb9\x29\x74\x23\x11\x04\xec\x4d\x44\x51\xe2\x60\x62\x4d\x70\x56\x8f\xc1\xd8\x01\xfb\xe7\x5e\x54\x7a\x89\x42\xa2\x03\x65\xe0\x0c\xc3\xfe\x85\xf2\x81\x04\xae\xad\xf1\xe8\x99\x13\x5f\x25\x22\xa3\x10\x45\x49\x0a\xc8\xd7\xa0\x4c\x40\x57\xa1\x54\xc2\xad\x59\x45\xaa\x40\x4f\xea\x38\x51\x9e\x60\x42\xbc\xf9\xe0\x31\x04\xd7\x60\xd2\x37\xd9\x45\x2b\x66\x65\x8d\xc1\x82\x15\x1d\x54\x85\xb6\x09\xc9\x46\x13\xfe\x3e\x8b\x6b\x63\xf8\xdb\xc8\xc7\xbd\x04\xd9\x4a\xdc\xa9\xaa\xa9\xc0\x34\x55\x8e\x8e\x7d\x4e\x55\xe8\x21\x94\x22\x80\x00\x87\x7f\x36\xe8\x03\xac\x94\xd6\x90\x23\x38\x0c\x4e\x25\x97\x98\x0b\xa5\x1b\x17\x45\xec\x01\xb1\x87\x1c\xc3\x0a\xd1\x24\x32\x0f\x73\xab\xb5\x5d\x79\x10\x06\xf0\xae\xb6\x86\x7c\x41\x68\xc6\xbb\x9d\xcf\xc1\x07\xe1\x02\x9b\x3f\xc0\x1b\xf0\x48\x71\x28\x6a\xa8\xa9\x49\x49\x07\x50\x29\xd3\x04\xdc\xbe\xc6\x7b\x71\x77\x1d\xb9\x8f\xe1\x60\x94\xb5\xa1\xc7\x17\x25\xca\x46\x93\xda\xfd\xc6\x6b\xc9\x29\xde\x73\xf0\x7a\x18\x12\x87\x90\x4d\xdb\x2d\x2d\xee\x56\x60\xe7\x09\xaa\xae\x31\x20\xb6\x99\x06\x74\x9d\xdb\xb7\x1b\xaf\x05\x45\xc0\x03\xdf\x6d\xaf\x84\x59\x43\x10\x7e\xc9\x1e\xd9\xee\x26\x47\xb0\x06\x9f\xe6\x31\x29\x1b\xb3\xe4\x9b\xb4\x4c\xb4\x35\x0b\xda\xbe\x12\x2a\x74\x0a\x6d\x6a\x29\x02\x7a\xc8\x71\x6e\x1d\x59\xcd\x2d\x23\x6c\x8c\x95\x08\x12\x05\xe3\xe6\xd2\x4a\xbc\x52\x66\xd1\x99\xfa\xa0\x7a\x9a\x2d\xe9\x26\xed\xe5\xb8\x24\x5c\xe8\x3f\xe4\x4d\xba\x7b\xc4\xfd\xdc\xa8\x8d\x23\xbd\xa9\xb2\x8c\x16\xc7\x2d\x64\x53\xec\x4b\x9c\xcf\x4f\x3a\xb7\x11\x4d\xb0\x95\xa0\x38\xa0\xf5\x1a\x16\x68\x48\x13\xc8\x5c\xcf\x4f\x62\x08\x4c\x2c\xba\x53\x4b\x41\xb7\x45\x03\x4a\x6a\x64\x81\xe9\x06\x48\x36\x15\x86\xc9\x92\x93\xf7\x41\x25\xff\xf4\x65\x13\x40\xda\x95\x89\x1e\x39\x38\x80\x0a\x85\x21\x5f\x46\x87\xe4\x17\xc6\x76\xc8\x80\x51\xfb\x31\x2e\x80\xaa\x18\x7a\x01\xf5\x1a\xc4\x3c\x60\x74\x9e\xb9\x72\x3e\xb0\x49\x89\x67\x77\xf3\xc1\x41\x82\xd0\x11\x6b\x25\x1e\xbf\x7b\xc9\xe0\xd6\xa4\x5b\x89\x01\x8b\x00\x2b\x82\x93\x43\x6f\x1b\x57\x60\x4c\x0c\xa2\x4b\x7f\xc1\x82\x0a\x43\x60\x86\x27\x38\x57\x86\xd4\x7f\xdd\x11\xab\x78\x5d\x3e\x28\x86\xae\x26\xfa\x11\xd8\x5b\x74\x94\xa6\x7d\xcc\x41\x39\x96\xe2\x56\x59\x4e\x12\xdd\x76\x32\x0e\x31\x9e\x5c\x7d\xf4\x9b\x33\x87\xed\x6a\xdd\xf8\x31\x70\xec\xe6\x68\x72\xf4\x7e\x43\xd3\xe7\x08\x76\xdc\x92\x5e\x8b\xea\x2c\x1f\xc3\x68\xd8\x51\x9f\x28\xbf\x04\x5f\x8b\x02\xbf\xba\x89\x48\xb6\x76\xf5\xe0\x77\x36\xe4\x6a\xc0\xf9\x16\x42\x43\x77\x1d\x3e\xc6\x9f\x5f\x9b\x02\x56\x2a\x94\x4f\xa7\xc0\x8f\x0c\x87\x88\xbf\x37\x3e\xcb\x3e\x59\xb7\x6c\x71\x4c\x59\xd5\x43\xe1\x90\x3c\x0c\x64\xe3\x48\x9b\xb5\xb3\x94\x28\xe8\xcf\xd6\x27\xdb\xc4\xcc\xea\x55\x1e\xa4\x72\x58\x04\xeb\xd6\x74\x00\x31\x3c\x51\x6e\x0c\xc3\xfd\x98\x17\x06\x2b\xeb\x96\x03\xa9\xdc\xdf\x75\x8d\xda\x6a\xcd\xbe\x5b\x08\x53\xd0\x0d\xd4\xc2\x08\x4d\x01\xe3\xca\x6a\xad\xcc\x62\x73\x85\xbf\x47\x39\x68\x24\x15\x13\xb6\x09\xfb\xe8\x1c\xbb\x27\x15\x1c\x5d\x94\x48\xe9\xf0\x91\xda\x7a\x30\xc5\x10\x22\xb8\x15\x93\x8d\xa2\x3a\x1c\xfa\x46\x87\xe4\x69\x9e\xdc\x1e\xb5\x24\x87\x22\xda\xc8\x55\x52\x3c\x54\x66\xa1\x23\xf0\x98\xdb\x06\x27\x78\x87\x45\x13\xac\x03\xbc\x53\x81\x33\xc2\x85\x5d\x3c\xb4\x12\x6d\x79\x2f\xee\x20\x5f\x27\x21\x39\x69\xb2\x7e\xb6\x6e\x93\xdc\xbd\xbd\x54\xe2\x35\x13\x4a\x4f\xd5\x67\x8a\xb7\xa3\xd1\x68\x04\x3d\x38\x18\xc1\xbb\xe3\xc8\xf4\xd2\xba\x2a\x82\x8e\x8a\x1b\xf6\x05\x90\xa8\x91\x8e\x51\xc1\xf3\x12\xdd\xa4\x33\x71\x92\x3c\x4a\xdd\x29\x79\x46\x4a\xb1\x35\x43\x4b\xc6\x9c\x9b\x12\xe1\x36\xb2\x2e\x50\xdc\x62\xe7\x1f\x73\xa1\x3d\x66\x59\x6f\xf0\xbc\xff\xb2\x1e\xb4\xe5\x3e\x65\x4f\xb9\x6f\x1d\x70\x65\x0b\xa9\xb4\xdd\x7f\x2b\x8c\xd4\xe8\xfc\xf3\x1f\x9d\x1d\x5b\x1d\x4e\x8e\xc7\xa9\x14\x22\x0c\x46\x7f\xea\xba\x9b\x54\x60\xd1\xb7\x27\x10\x92\x7e\x0f\xa9\x43\x39\xe1\x7a\xbd\x65\x76\x2c\x3c\x72\x69\x1b\x2c\xe5\x68\xb6\x7c\x5b\xd1\x43\x60\x7d\x53\x94\xa5\x3f\x5a\xd2\x9d\xba\xec\xe8\xd3\x14\x1c\x2e\x94\x35\x1c\xe1\xe8\x0f\x4e\x1e\xed\xb7\xa3\x58\x0d\x2e\x71\x0d\xe7\x27\x19\xc0\x3b\x5c\xef\x7c\x9f\x62\xe1\x30\xb4\x64\xef\x70\x4d\x89\x98\xd7\x62\x0e\x3a\x8d\x3d\x45\xba\xb9\xc3\xb9\xba\xdb\x16\x55\x19\x89\x77\xe8\xe1\x25\xf9\x66\x3f\xb6\x36\xbe\xcf\xe9\xca\x53\x25\x79\x4e\xdf\xe3\xb6\x1d\xb1\x3f\x5e\x5f\xb4\xc5\x7c\xea\x5a\x3c\x0a\x57\x94\xdb\x01\xed\xfa\x62\x0c\x65\x08\xf5\x78\x7f\xbf\xab\xea\xc7\xbf\xfd\x95\x8a\xf1\x1e\x9c\x59\x4b\xb8\x9b\x68\xdb\x48\xf6\x8b\x08\x1c\x86\x48\x6b\x94\x61\xd6\x7d\x20\xf9\xaf\x9c\xfd\x03\x8b\xd0\x5d\xbf\xb5\xa3\x28\x0a\xdb\x50\xb1\xe8\x50\xc6\x6a\xcc\xb3\x39\x23\x02\x3e\xb0\xf3\x0b\xcd\x9d\x4c\x6d\xbd\x57\x1c\xd2\xb7\x89\x9f\x4e\xe9\x52\xf9\x82\xb2\x11\x4a\xe6\x33\x77\xb6\x8a\xf7\x35\xb7\xca\x59\x53\xa1\xe1\x62\x74\xb2\x61\xd4\x35\x3f\x00\xd9\x7b\x6a\xe1\x5a\x27\x39\x92\xd2\x79\x28\x2d\x05\x20\x6e\x24\xa5\x74\xe8\x3d\x57\x93\x6d\xfb\x80\x32\xe9\x8e\x43\x0d\xef\x88\x79\x6e\xb0\xd5\x13\x71\xfe\x69\x5d\x56\xf9\x5d\x17\x66\x37\xe4\x3a\x91\xb2\x8c\x32\x90\x64\xd8\x0a\x4b\x31\x7a\xd2\x0e\x2e\xc2\xbb\xee\x7b\xcb\xb2\xb3\xb6\x78\x48\xa2\x56\xac\xdb\x54\x44\x3f\xa8\xb6\x52\xd3\x43\xc5\x25\x37\x03\x12\x56\x25\x9a\xa8\x2e\xae\x32\xda\xfa\x9d\xea\x3a\x23\x81\xfb\x25\x2a\x9f\xa9\x18\xa6\xbe\x87\x73\x7e\x57\x0e\x78\x4a\x67\xd6\x90\xa5\x62\x4f\xb1\x11\xe5\x33\x3a\xdb\x8f\x0d\x91\xd0\x1a\x2a\xb1\x86\x5c\xdb\x62\x49\x82\x20\xc9\x40\x52\xd1\x31\x51\xb0\x4d\xdf\xd0\x36\x27\x39\x02\x7a\xc2\xa3\xf2\x65\xac\xd2\xb6\x6b\xbe\xb6\x65\x62\x15\x92\xa4\x6d\xbb\xc4\x0d\xb2\x8b\x86\xdf\xf1\xaf\x64\x37\x65\x14\x97\xff\xbb\x5d\x21\xf3\x93\x54\x20\x5b\xb3\x6b\x23\x49\xb5\x10\x4a\xea\x8d\x68\xfd\x64\x13\x7e\x50\xb3\x54\xad\x14\xc9\x8f\x36\x6d\x1b\x81\xf9\x9d\x98\x2f\xc5\x98\x11\xce\x9e\xd2\x3a\x08\x93\xce\x6c\xad\x8a\xce\x94\x3f\x23\x7c\xa7\x09\x09\x1c\xa7\xd9\xc6\x4f\x88\xd3\x6f\x67\x13\x1e\xdc\x44\xdc\xcc\x1a\x67\x80\xba\x2a\x0e\x0b\x3e\x88\x40\xed\x5a\x61\x4d\xa1\x34\xba\x21\x7c\x2a\xd1\x00\x1a\x0a\xae\xb2\xdf\xd6\x06\x9b\x96\x1e\xfd\xa6\xde\x7a\x7b\x35\x61\x96\x9b\xfe\x27\x58\x98\x2b\x23\xdb\xe6\x86\x9b\x43\x87\xe0\x43\x53\x2c\xc9\x23\x05\xfc\xd9\x60\x43\xb0\xe4\x73\xa9\x10\x70\xce\x3a\xaa\x1a\x8c\x4c\x1d\x5d\xaa\x4d\xda\xdc\x1e\x29\x29\x1e\x39\x49\x75\xc5\x7a\xab\xd5\xbd\xee\xe4\x4e\xbd\x6e\x1c\x2d\xa4\x45\xaa\x28\xc8\xcf\xcb\x4d\x51\x54\x3e\x9a\x79\xf1\x6f\xe1\xd0\xc7\x83\x18\x37\xf1\xd2\xff\xee\xbb\xb9\x58\xf2\xf7\x50\x5a\x4f\xca\xaa\xad\x0b\x1b\x7f\xdb\x10\xed\x9c\x3c\x86\xd7\x23\x02\xc1\x0c\xab\x5a\xf3\xef\xff\x63\xcf\x6a\x8c\x22\x37\x43\x38\x84\x5b\x61\x94\xd6\x82\x97\x17\x18\xd0\xdc\xc2\x21\xcc\xe2\x3d\x20\x55\x1d\x5c\xf9\x1f\xc2\xfd\xfd\xf0\xb4\xfb\xfd\xe5\x0b\x13\x08\xb7\x68\x28\x62\x7a\x38\x6c\xab\x19\xea\x47\x07\x83\x34\xdf\xb8\xbf\x1f\x4e\xf8\xaf\x2f\x5f\x60\x30\x20\x65\x0e\x94\xa4\xd5\x99\xf0\xcb\x73\x99\xb8\x50\x41\xc8\xfc\x53\xad\xf2\xe5\xcb\x7e\x9c\xf3\x0d\x38\x71\x0d\xb4\x5d\x44\x71\xc8\x50\x0f\x29\x53\x4a\x8f\x13\x2b\x26\xb3\x3c\xb2\xfa\x3a\x9d\x6d\x02\xd3\xf9\xd2\x36\x5a\xde\x04\x27\x8c\x9f\xa3\xbb\x99\x73\x39\x7e\x08\xff\x7b\x3a\xe5\xef\x14\xf4\x6e\x82\xdd\x10\x74\x8c\x3f\x5c\xde\x9c\xfe\xcf\xf9\xec\xe6\xc3\xf5\xcd\xe9\x7f\x9f\x4f\x66\x4c\x7e\x7f\xaf\xe6\x60\x10\x86\xd4\xa9\xc0\x08\x06\xe9\x76\xf7\xf7\xb5\x53\x26\xcc\x61\x2f\x8d\x28\x6e\x0a\x22\x38\x84\xbf\xc8\xbd\x48\xdc\x11\x0e\x00\x8d\xec\x7e\x25\x76\xdc\xcd\x50\x5b\xf2\x0d\x8e\x15\x56\x54\x2b\x1e\xc2\x5f\x86\xa3\x39\x9c\x1d\xef\xa5\x6d\xdf\xe6\x1c\x5b\x9e\xef\xb0\x96\xd4\x3a\x6d\x33\x8e\xbb\x1e\x71\xe6\x9f\x0c\xad\x2c\xbb\x3a\x9e\xfe\x0b\xe9\xbf\x02\xd2\x7b\xff\x96\x2b\xb3\x9f\x0b\x5f\xc6\x9f\x57\xc7\x53\x18\x5c\x3e\x02\x60\x5c\xb7\xdf\x03\x4c\x24\xc3\xef\xe1\xef\xfb\x40\x88\x8c\x74\xac\x47\x0f\x0f\xc6\x75\x6d\x0e\x9f\x01\x0d\x2d\xdb\x0a\xab\x43\xf2\xd7\x45\xfe\x0c\x38\x68\x99\x52\x74\xd8\x70\xfd\x16\x08\x1e\x04\xca\x1f\x0c\x8c\xe7\x27\x3b\x66\xc9\xce\x9c\x92\xa7\xfc\xaa\x31\xfe\x01\xc3\xbe\x78\xd2\xac\x2f\x7e\xc4\xa8\x2f\x7e\xc0\xa4\x44\xd4\x99\xeb\x47\x8d\xfc\x02\x06\x35\x42\x55\xab\xe7\x88\x74\x51\x82\xf2\xe6\xb6\x35\xee\xd9\x73\xd8\x36\x31\x9d\x7b\xf5\x19\x3b\xae\x3f\xdf\xb6\x53\xdd\xb8\xea\x5f\x11\xf2\xd7\x88\x90\xfb\xbb\x48\x9a\x1e\x1f\xcd\x26\x6f\x61\x30\xf8\xc3\xe6\x03\x6e\x1c\x1e\xc1\xaa\x23\x31\x51\xb1\x07\x0f\x96\x63\x9d\xf2\x3d\x48\x75\xe4\xa9\xac\xf8\x0e\x4e\x7f\x00\x70\x1d\x47\x2a\x30\x06\x35\x3a\x76\xbe\x67\x41\x5f\xc7\xba\xc2\x8a\x6b\x81\x67\xa9\x31\x36\x6c\x43\x55\x6f\xd8\xfe\x7c\x00\xf2\x90\xe5\x58\x84\xa2\x04\x89\xbe\x70\x2a\x4f\x3e\xbe\x3b\xb5\x6e\xdb\xc1\xa3\x4f\x53\x88\xd4\x0f\xdf\x66\xb2\x96\xcf\xb3\xa2\xb9\x3b\xaf\x75\xf5\x87\x28\x36\xdc\x1c\xf3\x6b\x48\x04\xeb\x06\xa8\xbf\x3c\x48\xb7\x2f\xf7\x24\x44\x7b\xf0\x9f\x36\x8f\xaf\x0b\x6c\x85\x42\x18\xee\xf3\x55\x28\x91\x1f\x83\xf8\xc9\x39\x59\xa6\x12\x9f\xad\xe9\xde\x10\xe0\x92\xbe\xbd\x3c\xba\xbe\x7c\x45\x57\xde\xe1\x33\x86\xbd\x84\x2a\x42\xb6\xc4\xf9\x5e\x7b\xd6\x7f\x51\x10\xfc\xe7\x8e\x61\x16\xbb\x27\x70\x68\xdd\x7b\x30\x0d\x6c\xa7\x6b\xbe\xc6\x42\xcd\x15\x4a\xf8\xc3\xe6\x31\x0a\xc7\x37\x6f\x9b\xde\x03\x98\x8a\xbe\xc9\x8d\x22\xd4\xa3\x61\xe2\x66\x6c\xb8\x3d\x1c\xfc\x09\x33\x82\x69\xb0\x4e\x2c\xf0\x27\x8c\x06\x7a\xff\xc4\x00\xef\x6b\xe3\xbb\xac\x07\x17\xb6\x10\xb1\x68\x03\xbf\xf6\x01\xab\x61\xc6\x4b\xe9\x22\x11\xae\x9f\x4a\x15\x50\x2b\xcf\x83\x30\x1e\xc7\x6d\x0d\xde\x6b\x11\x4a\x0f\xab\x52\x15\x65\x8b\x54\xe5\x41\x68\x6d\x57\x28\xd3\x80\x12\x7d\x1c\xeb\xc5\xc5\x13\xb5\x99\xdd\x0c\xf7\x49\x8a\xb7\xb3\xd9\x55\x3a\xb1\x7b\xed\x0d\x96\x5f\xfe\xb4\x15\x12\xea\x26\xd7\xaa\x80\xd8\x79\xa6\xa1\xd2\x0a\x73\xb8\x55\x02\x04\x9c\x9d\xce\xda\x67\xed\x61\xb6\xc5\x6a\xbc\x33\xd1\xa3\x20\x55\x86\x50\xbf\xf4\xaf\xb6\x77\xf8\x9d\x61\xd8\xeb\x91\xcf\xb2\xe8\xc5\xd3\xd7\xe3\x4d\x34\x90\xed\xbb\xc0\x33\xbf\xb2\x3f\x78\xfb\x7e\xae\xb1\x77\x0f\x26\x29\x40\x23\xcf\x3e\x49\xaf\xed\x7f\xc9\x61\x19\xa6\xaf\xa1\x76\xf6\x56\x49\x74\x1e\x7c\x53\x94\x20\x3c\xbc\x57\x46\xd9\xf6\x6d\x62\x82\x75\x99\xf5\xe0\x0c\x0d\x3a\x55\x90\x32\x7a\x6c\xb0\x8d\x42\x38\x2a\xd2\x22\xc0\xa9\x91\xb5\x55\x26\x9e\x1e\x97\x5a\x91\xe3\xaf\x6d\xe1\xe2\xec\x7b\xcb\x46\x4f\xe9\xf8\xd7\x9d\x6e\x67\xd3\x95\x9a\x87\xa7\xe5\xfe\xe8\xd1\x5d\x7e\x65\x7c\x09\x70\xd4\x84\x92\x9f\x05\xe2\xc0\x12\x8d\x30\x61\x8b\x3a\x2e\xa4\xd7\xf3\x36\x80\x6d\x7d\xef\xc1\x9b\xd1\x08\xde\x1f\x93\x5c\x65\x63\x96\x53\xf5\x19\x8f\xd7\x81\x5c\xe7\xcd\x28\xfd\xcb\xfe\x3f\x00\x00\xff\xff\xb1\x1e\xc3\x7c\xd0\x26\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 9936, mode: os.FileMode(420), modTime: time.Unix(1527113923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x11\xd2\x5d\x26\x97\x17\xc8\xa6\x80\x10\x9b\x22\xd1\xa8\x3f\x2b\xcb\xe0\x49\xb0\xe2\x8c\x61\xec\x09\xad\xa2\xbc\x7b\x15\x40\xad\xa8\x4a\x77\x47\x3e\xdf\xf9\x3c\x42\xae\x43\x8e\x08\x05\x74\x86\x9c\xf7\x46\xd5\x98\x90\x3a\x28\xa0\x64\x41\x85\xef\xb8\x93\x64\xb6\x7e\x44\x2a\x21\x42\xaf\x0c\xd7\xd2\x22\xa5\x08\x05\x9c\x02\x37\xc8\xc0\x42\x90\x65\xc9\xc4\x66\x35\x87\xbe\xcf\xcb\x31\xd9\x61\x50\x3e\xd4\x50\x8c\x2f\x2f\x81\x9b\xb9\xe3\x61\xf8\xbf\x0b\x64\x03\x67\xd8\x21\xa5\xcc\x87\x5a\x21\x73\xe0\x9f\xd4\xe5\xaf\x2c\x26\x8b\xcc\x2a\x48\x3a\x48\xba\xcf\x04\x49\x2a\xee\x83\x78\xab\x13\x1b\x8a\x15\xb2\xae\x9c\xc7\xf1\xc4\xb7\xc5\x93\x3a\xed\x91\x74\x0a\xdf\xe5\x97\x70\xfd\xa8\x17\xaf\xab\x52\xaf\x37\x7a\xf1\xbc\x9a\x95\xaa\xef\x5d\x05\x84\x90\xcf\x0e\x12\x61\x0a\xd9\x30\xa8\xbe\x3f\xb0\xa3\x54\xc1\x84\xf1\x28\x18\x93\xde\x8d\x65\x01\xff\xec\xe4\x02\x9e\xa1\x0c\x90\xec\x39\x5d\x15\x1b\xd3\x2e\xb7\x30\xcd\xef\x59\x5a\x6c\x03\x7f\x8c\x9e\x7c\x5a\xc1\xf2\x61\x72\x9d\xfc\x6e\x9b\xbb\xd8\xfc\xa9\xb3\x2e\x36\x37\xb2\xcb\xe2\xc6\xa6\x8e\x82\x82\xea\x33\x00\x00\xff\xff\x61\xe0\x01\xde\xf9\x01\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 505, mode: os.FileMode(420), modTime: time.Unix(1527178544, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
