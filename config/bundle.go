// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x39\x6d\x6f\x1b\xb9\xd1\xdf\xf5\x2b\xe6\xb1\xf3\xa0\x09\xa0\x95\x95\x3b\x5c\xd1\x13\xe0\x0f\xb6\xec\x24\xee\x39\x89\x2a\xc9\x75\xfb\xc9\xe0\x2e\x67\xb5\x3c\xef\x92\x3a\x92\x6b\x45\x71\xf3\xdf\x8b\x19\x72\x77\x25\x5b\x8e\x7d\xad\x11\xf4\x80\x18\x30\xb0\x22\xe7\x8d\x33\xc3\x79\xe3\x0c\xed\x0d\xda\x51\x0f\x60\x1f\xde\x19\xe7\xb5\xa8\x10\x4c\x0e\xbe\x40\x78\x53\x6b\x8d\x25\x38\x06\x19\xf4\x80\x01\x3e\x88\x0a\x47\x50\x9a\x4c\x94\x85\x71\xbe\xc7\x98\x13\x63\x3d\xd4\x0e\x25\xe4\xc6\xc2\xbb\xf9\x7c\x02\x99\xa9\xaa\x5a\xab\x4c\x78\x65\x34\x08\x2d\x99\xe4\x0a\x53\x90\xc2\x15\xa9\x11\x56\x32\xc9\xf9\x7c\x42\xd8\x23\xf8\xcb\x70\x38\xdc\x45\x6d\x3a\x19\x6f\x13\x23\xb4\xe9\x64\x1c\xb0\x7e\x1e\xfe\x1c\xb1\xa6\xf8\x5b\xad\x2c\x42\x2a\x9c\xca\x40\xd4\xbe\x40\xed\x1b\xfe\x44\x88\xf8\x87\xb3\xc0\xd1\xe4\xcc\x41\xed\x94\x5e\x80\x80\xa5\x70\x6e\x65\x82\x38\xfb\x70\x96\x33\xeb\x3e\x54\xe2\x1a\xc1\xd5\x16\xc1\x1b\x58\x5a\xb3\x44\x5b\xae\xc1\xa2\xf3\x56\x65\x1e\x44\x96\xa1\x73\xb4\x47\x74\x33\xa3\x73\xb5\x80\x5c\x95\xc8\x54\x5e\xe2\x60\x31\x80\xac\xa8\x8c\x84\x3f\x0f\x87\x90\xb3\x2a\x07\x01\x6c\xb0\xae\xca\x57\xe1\xa4\x91\xf5\x08\x44\x9a\xbd\xfe\xe1\xc7\x70\x92\x33\x9d\x95\xb5\x44\x10\xb0\x37\x16\x59\x81\xc9\xd8\x68\x6f\x4d\x39\x02\x6d\x12\xe7\x8d\xc5\xbd\xa0\xe3\x02\x85\x44\x0b\x4a\xc3\x5b\xf4\x07\xe7\xca\x79\x92\x6f\x69\xb4\x43\xc7\x94\x58\x72\xbc\x41\xed\x21\x13\x59\x41\xe7\x4d\xd7\xa0\xb4\x47\x5b\xa1\x54\xc2\xae\x59\x23\x2a\x43\x47\xa7\x3f\x51\x4e\xa4\x25\x12\x6d\x66\x3c\x02\x6f\x6b\x0c\x42\x9d\xab\x4a\xf9\xa0\x43\xf5\x39\xb8\x88\x70\xd7\x80\x9f\x30\xab\xbd\xb1\x50\x9a\x85\x83\x97\xce\x4b\x53\xfb\x03\xb4\xf6\x55\x9f\xe4\x4a\xd7\x3e\x90\x7e\x2f\x3e\x9d\x46\xd0\x73\xb3\x98\xa9\xcf\x38\x82\xd7\xc3\xe1\x70\x08\xfb\xf0\x7a\x08\xbf\x1c\x07\x2e\xf3\x02\x61\xd3\x05\x45\xe6\xd5\x4d\x6b\x36\x29\xbc\x48\x85\x23\x1b\x67\xd7\xa8\x25\xa3\x1c\xdd\x08\x55\x92\xd8\xcd\xaa\x1b\x41\x6a\x4a\x2f\xd3\x3e\xc8\xb5\x16\x95\xa1\x2f\x2c\x85\xf3\x2a\xeb\x43\x65\xf4\xc2\xc8\x94\x4e\x1b\xa9\x35\xe0\x1b\x4b\x8e\x2e\x04\xc0\xb1\x29\xfd\xc9\x71\xf8\x0e\xe6\xf2\x45\x63\xf1\x56\x96\x68\x73\xfa\xa3\xfd\x11\x0c\x0e\x82\xb5\x93\x95\xb1\xd7\x89\x54\x36\xfe\x1e\xc8\xb4\xd7\x0b\x84\x4e\x58\xae\x86\xf4\x3e\xff\x1f\x0b\x87\x7c\x74\x6f\xc8\x03\xd9\x65\x1b\xf9\xc1\xd3\x01\x5d\x0b\x3d\xa7\x9f\x0d\xc2\x08\xf6\x02\x83\xbd\x76\xff\xe8\x72\xd6\x91\x66\x25\x5d\xce\xc0\xe2\x42\x19\xbd\xb1\x3c\xe5\x85\x11\xec\xed\xdd\x83\x3d\x0a\xde\x7d\x8d\x6b\x38\x3b\xd9\xd8\xfd\x05\xd7\x3b\xe1\x67\x98\x59\xf4\x0d\xda\x2f\xb8\xde\x80\x08\x7b\x8c\x16\x57\x4f\x83\x31\x36\x4f\x3f\xb1\x98\xab\x4f\x9b\x67\x57\x5a\xe2\x27\x74\xf0\x92\xfc\xac\x0f\xec\xc5\xae\x0f\xda\x48\x74\xaf\x5a\xcc\x33\x82\x0a\xc8\x3b\xf4\xb0\x0f\x17\xd3\xf3\xc6\x97\xa2\x0b\x38\x14\x36\x2b\x36\xa2\x5a\x00\xbd\x98\x9e\x8f\xa0\xf0\x7e\x39\x3a\x38\x68\xa3\xdb\xe8\xe7\x1f\x42\x50\x22\x98\xf7\xe4\x39\xdb\x36\x3b\x92\xd2\x3a\x28\x4c\x29\x5d\x70\x57\x29\x2d\x3a\x87\x6e\x23\xe0\xa0\x8c\xbc\x5c\xc7\x8c\xf1\x36\x2d\x94\xc0\x5e\xcb\x74\x53\xfc\xc6\x21\x41\xb9\x6d\xaf\x63\x4f\xe1\x18\xb9\x52\xbe\x50\xba\x91\x8e\x34\xc8\x21\x22\x86\x1c\xc6\xe8\x18\x77\x3e\x7f\x4f\x57\x17\x0e\x6d\x74\xa7\x6e\xb1\x0b\x50\xc1\x7a\xe7\x66\xb1\x08\xe9\x82\x63\x82\x59\x2c\x28\xa6\x94\x78\x83\xa5\x1b\x81\xc4\xb4\x5e\xd0\xbd\xcf\x4d\x1f\xd0\x5a\x63\x19\xf0\x9c\xb6\x47\xbc\x1c\x11\x2f\xad\xf2\x18\x42\x06\x5f\x27\xe5\x60\x29\x7c\x31\xa0\xe8\x8b\xd5\xd2\xaf\xfb\x61\x53\x58\x84\x95\x55\xde\xa3\x0e\x07\x93\x68\xa3\xcd\x3e\xd6\x7e\x59\xfb\x37\xaa\x0c\x02\xf7\x42\xec\x70\x59\x81\xb2\x2e\x29\x28\xba\x2e\x85\x90\xe6\xde\x0b\x5d\x8b\x92\x32\xc9\xb2\xf6\x6d\xac\x18\x40\x6f\xd6\xa0\x34\x49\x70\x05\x26\x8f\x0c\x6d\xad\x41\x6c\x12\xf5\x68\xdb\x1c\x44\x81\x1a\xb4\xd0\xc6\x61\x66\xb4\x64\xf3\x36\xc4\xa6\xc2\x37\x01\x6e\xd8\x44\x39\x08\x70\x2d\x97\x4a\xe8\x35\x07\x51\x56\x42\xc3\x84\xa2\xa6\xd1\xb8\xcd\xaa\x21\x3b\x2e\x6a\x7d\x4d\x74\x5b\x22\xa5\xd1\x0b\x42\x5f\x09\xe5\x21\x45\xbf\x42\xd4\x50\x2f\xa5\xf0\xe8\x20\xc5\x9c\x3c\xa1\x12\xf6\x3a\xa4\x3a\xba\x3c\x20\x51\xc8\x87\xe4\xff\x60\x24\x4e\x94\x5e\xcc\x55\x85\xa6\xf6\x23\x4a\x5e\x5b\x67\xa8\x94\xae\x3d\xee\x66\x4f\xaa\x8e\x3c\xd8\x58\xc2\xfa\xfe\x5d\x19\xc8\x14\x4f\x92\xe2\x4c\x2b\xdf\x4a\xf1\xe3\x70\x4b\x8c\x9f\xa2\x18\x2e\xc2\x36\xfe\xd8\x79\x4f\x14\xe3\xec\x04\x56\xaa\x2c\x21\x45\x2a\x08\x4c\x25\xa8\x20\x28\xcb\x35\x2c\x50\x93\x7a\x51\x06\x67\x3a\x3b\xd9\x0c\x4f\xe4\x54\x0e\x32\x8b\x04\x00\xb2\xb6\x24\xf8\xd2\x1a\x8a\x6d\xf4\xd9\x90\x6c\x3c\x53\xe9\xe0\xc2\x52\x59\xcc\xbc\xb1\xeb\x40\xf4\xd2\xd8\xeb\x13\x65\x77\x24\x84\x4e\xdc\x56\x1d\x85\x20\x73\x11\x31\x59\x86\xf8\x47\xaa\x45\xf2\x5d\xa1\x19\xcc\x07\x65\xf4\x41\xf9\x20\x81\x2b\x6a\x0f\xd2\xac\x74\x73\xbd\x93\xd7\x50\xa1\xd0\x1c\x29\x2c\x87\x0c\x6d\x1a\xb4\x01\x0c\x9b\xcd\xb0\x00\xaa\xe2\x12\xc0\x63\xb9\x06\x91\x7b\x0c\xd7\x24\x57\xd6\x79\xf6\xca\x40\xb5\x35\x41\xf2\xba\x51\xcf\x11\xeb\x3c\xc8\xb0\xad\x55\x6f\xd7\x64\x79\x89\x1e\x33\x0f\xab\x42\x70\x3d\x62\x6a\x9b\x61\xb8\xcb\xa2\xcd\xd5\xde\x80\xf2\x03\x68\xf2\x21\xe6\x4a\x93\x6a\xa7\x2d\xb8\x0a\xa7\x66\x56\xa1\x6c\xaa\xc3\x7d\x00\x73\x83\xd6\x2a\x89\x2e\x68\x3d\xc5\x42\xdc\x28\x13\xc3\x42\x4b\xa0\xcb\xda\xe3\xc9\x85\xeb\x38\x0f\xba\xf5\x65\xed\x46\x10\xc3\x3b\x57\x90\x47\xef\x3b\x38\x2e\x5f\xde\x1e\x77\xe0\x53\x51\xbd\x4d\x47\x30\x1c\x6c\x60\x9c\x28\x77\x0d\x6e\x29\x32\xfc\x0a\x22\x01\xdd\xc3\x7c\xc3\x16\x5e\x25\x1c\x3a\xc1\xd7\x74\xfa\x0e\x65\x2b\x08\xb9\xb5\xce\x38\xca\xef\x2e\xca\xa3\x2f\xdd\xbb\x44\xf4\x77\xc1\x81\x20\x04\xa3\x9f\xb6\x6f\x50\x84\xec\x8e\x37\x19\xb7\xae\x41\xee\x17\x62\xc8\x01\x33\x27\xeb\x3e\x8d\x55\xeb\x2e\xbb\x43\x5f\x84\xdd\xcc\x22\xbf\x2b\x93\xec\xca\x26\xcf\x96\x51\x76\x65\x95\xde\x83\x25\xe9\x9d\x44\xd2\xdb\x5d\x88\x72\x52\xef\x43\xe1\xe9\xf8\xc6\xf6\xc1\x95\xb5\xad\xfa\xb0\x4c\x5d\x1f\x16\xe4\xc5\x7a\xa1\x34\x52\xb7\x41\xe9\xa9\x0f\x62\xe5\x92\x54\xf8\xac\xe8\x1d\x07\x22\x91\x06\x49\xd2\x66\xaa\x86\x41\xbc\x18\x0d\x28\xfb\xfc\xbb\xf9\x98\x59\x05\xed\xce\xb1\x5a\x96\x6c\xfe\x7f\xc5\x33\xd6\x5a\x51\x2d\x82\x70\x08\x37\x42\xab\xb2\x14\x71\x63\x81\x1e\xf5\x0d\x1c\xc2\x9c\x6a\xfe\xb0\x16\xaa\x7b\x3e\xd3\x21\xdc\xde\x0e\x4e\xdb\xdf\x5f\xbe\x44\x10\x61\x17\x75\x45\xa5\x19\x1c\x02\xc5\x37\xb4\x9c\x35\x93\x24\xb6\x44\xb7\xb7\x83\x31\x7f\x7d\xf9\x02\x49\x42\x81\x25\x51\x92\x56\xe7\xc2\x5d\x9f\xc9\x96\x4e\x69\x16\x81\x47\x0c\x9b\x5f\xbe\x1c\x04\x9d\x25\x5c\xf9\x25\xa5\x59\x34\x42\x91\x3b\xdc\x85\x8d\x11\x36\xd8\x33\x02\x1a\x36\xe6\xc3\x90\xa6\xf6\x11\xd2\x15\xa6\x2e\xe5\x95\xb7\x42\xbb\x1c\xed\x55\xce\x19\xe0\x10\xfe\x79\x3a\x8b\x10\xab\x02\xf5\x95\x37\x1d\x48\x4b\xfc\xe3\x87\xab\xd3\x7f\x9c\xcd\xaf\x3e\x4e\xaf\x4e\xff\x7e\x36\x9e\x47\x84\xdb\x5b\x95\x83\x46\x18\x50\x98\x81\x21\x24\xed\x49\x6f\x6f\x97\x56\x69\x9f\xc3\x9e\xc5\xdf\x6a\x74\xfe\x2a\x23\x90\x43\xf8\x7f\xb9\x17\xc0\x37\x40\x13\x40\x2d\x37\x7e\x47\xa2\x1c\x8c\x28\xa2\x7c\x95\x6e\x85\x95\xb1\x6b\xa2\x3c\x18\xe6\xf0\xf6\x78\x2f\x22\x3e\x4e\x3f\xc4\xac\x47\x19\x48\x8a\x7f\x9b\xe4\x03\xde\x0e\xfa\x71\xe1\xb7\x1a\x43\x43\x39\x39\x9e\x3d\xe4\xa1\xfb\xff\x97\x2a\x7d\x90\x0a\x57\x34\x0b\x93\xe3\x19\x24\x1f\xc8\x8c\x5c\x19\x74\xf2\x86\x1d\xf3\xb8\x81\x03\x20\x3e\xee\x33\x4f\x31\x5b\x20\x56\x86\x56\xe4\xf0\xf5\x68\xb9\xd4\x87\xcf\x66\xbb\x86\x78\x85\xd5\x21\xe9\x75\x91\x3e\x9b\xd5\x1a\xd2\xe4\xdd\x1d\xed\xc7\x4c\x76\xe7\xda\xff\x87\x97\xbc\x07\xf0\xd6\x2a\x79\xca\xe1\xee\xe9\x96\x7f\xf1\x80\xdd\x5f\x3c\xcd\xea\x2f\x9e\x64\x73\x02\x6b\xad\xf9\x7b\xfc\xe0\x05\x24\x4b\x84\x6a\xa9\x9e\xef\xea\x06\x59\x8a\xab\x9b\xc6\xfe\x6f\x9f\xcf\xfc\x91\x74\xee\xd4\x67\x6c\x69\x7f\x1b\xf3\x03\x55\x7a\xb3\xf3\x8b\xe9\xfb\x87\x6d\x7f\x70\xd7\xf8\xb3\xe3\xa3\xf9\xf8\x1d\x24\xc9\xaf\x26\x4d\x38\x05\xef\xf0\x84\x16\x48\x87\x56\xea\xf5\xbd\x8d\x90\x2f\x1e\xf7\x82\x16\x21\x86\xf6\x47\xdd\xeb\x49\x3e\xd2\x52\xa5\x20\x9f\x2c\xd1\xb2\x7e\x9e\xd1\x61\x5a\x06\x15\x56\x1c\x89\x9f\x31\xce\x77\xc4\x7d\xb5\xec\x88\x7f\xb3\x90\xb1\x0f\xc7\x54\x0b\x81\x44\x97\x59\x95\xa2\xdb\x18\xb6\x36\xed\x40\xd3\xe0\x1f\x5d\xce\x22\xf4\xdd\x1e\xbf\x07\x61\xa3\x69\x13\xff\x6a\xd2\xd0\x70\x30\x7e\x26\x34\x35\x73\xa8\xa8\x6b\xa2\xc6\x91\x6b\xbd\x48\xb3\x12\x9f\x8d\x6e\x9b\x0a\xf8\x40\x7b\x2f\x8f\xa6\x1f\x5e\x85\x92\x71\x8b\x52\x3b\x53\x61\x7f\x95\x98\xef\x75\xfc\xfe\x46\x79\xef\xbf\x65\xc5\x44\xb6\xb9\x70\x3e\x6d\xf8\x74\x43\xbe\xa6\x56\x75\x4b\xcc\x54\xae\x50\xc2\xaf\x26\x0d\xc9\x37\x8c\xe2\x4d\x6c\x6f\x19\x8a\xf6\x64\xa7\x10\xa5\x63\x27\xb5\x35\x1d\x1c\x5b\x94\xa8\xbd\x12\x65\xdb\x5a\x6d\x0e\x03\xb7\xc7\x7c\xbd\x4b\xb6\x78\x98\xa8\x3c\x4b\x3b\xfd\x95\x66\xba\x65\xc2\x83\x2f\xb1\x40\x70\x6b\xe7\xb1\xe2\xd6\x64\x3f\x8e\x95\x95\x0b\x13\xa1\x9a\x1b\x55\x87\xfe\x4e\xeb\x9a\xae\x83\xc2\x9a\x12\xbb\x0f\x69\xed\x61\x6d\x6a\xa8\xd4\xa2\xf0\xa0\x11\x25\x8b\xc5\xf4\x54\x4e\x5b\x7f\xb2\x18\xa6\x1c\x61\xb8\x12\xbd\x3c\x54\xf2\x25\x4b\x3d\x0b\x02\x75\xf3\xb2\x4c\x84\xf4\x1b\x45\x0c\xa6\xe5\xe5\xae\x5f\xbd\x2c\x94\xc7\x52\x39\x4f\x56\xe4\xe2\xbf\x53\x05\x37\x35\x0e\x56\x85\xca\x8a\xa6\x15\x54\x0e\x44\x59\x9a\x15\xb2\x5d\xc3\xbb\x44\xd3\xd1\x1c\x85\x8d\x13\x65\x5d\xd7\x6e\x25\x30\x38\x68\x9a\xf9\xd9\x8f\xdd\x18\xf2\xde\xd4\x98\x5a\x9f\x4a\x7c\x52\x55\x5d\x81\xae\xab\x14\x2d\x3b\x96\xaa\xf8\x22\x0a\x0f\x02\x62\x25\xd8\x1a\xd1\xa2\xb7\x2a\x8e\xdd\x72\xa1\xca\xda\xe2\xc6\xdc\x93\xdf\x01\xa6\x0c\xe2\xe2\x18\xeb\x5b\xce\x9d\xdf\xde\x39\x5f\x33\xcf\x17\x59\x66\x6a\xed\xc9\x47\x1b\x1f\x67\x2b\x0d\xb6\xa0\x3f\x2e\xe9\x7a\x88\x92\x7b\xca\xa5\x71\x4e\x71\xb7\xbf\x89\xb4\x7b\xd8\x24\x95\xcb\xcc\x0d\x5a\x94\x5b\xf4\x72\x6b\xaa\x30\x98\xd6\x37\xca\x1a\x4d\x5d\x54\xc7\x31\xa1\x43\x91\x54\xdc\x8c\x6e\x1f\x7c\x27\xf5\x6d\xe9\xbf\x4a\x1b\xe0\x8d\x35\xd5\xa9\xbe\xe9\x1e\x78\xd8\x17\x56\x2a\xf7\x1d\xab\x0b\x87\x96\x5f\xfb\xda\x95\x76\x1a\xdc\xb9\x4c\xed\x8b\x8b\xe9\x79\xb7\x30\x47\x2d\xb4\xdf\x46\x0b\x6b\x67\x27\xdd\x4a\x88\x2d\x01\xaa\xf7\xb5\x71\xc8\xdd\x51\x08\x35\xbd\x9c\x3f\xa9\x5d\x6c\xc6\x9c\xf1\x45\xe6\xde\x64\x64\xd7\xa8\xe2\x09\x13\x11\xc6\x7c\x1f\xdd\xbe\x65\xb6\xf9\xb4\xc5\x4f\x60\xdd\xfb\x16\x09\x90\xd6\x79\x4e\x8d\xf9\xf6\x04\x96\x53\x0f\xef\xfc\xde\x17\x2f\xe6\x6b\xc3\xfb\xde\x46\x1e\xdb\x3d\x65\xb0\xcb\xec\x91\xb7\x2e\x4a\xaa\x53\xa6\xc6\xd0\x5b\x2b\x6e\xf4\xfd\x59\xea\xfb\xb3\xd4\x1f\xfa\x59\xea\xc1\x6b\x14\xde\xbe\xa9\xb2\x78\xf2\x3d\x2a\xcd\xe2\x91\xcb\x74\xc4\xb4\x4f\x89\x34\x8f\x1d\xad\x1b\x85\x41\x76\x12\xef\x16\x7d\x85\x79\xd5\x16\x50\x14\x3f\x8c\x2a\x83\xe3\xf0\x30\x1b\x16\xd3\xc9\x38\xd4\x5c\x93\x71\x57\x07\x7c\xbb\x89\xec\x3e\xcc\xad\xd0\x8e\x1a\xb2\x46\x2e\xaa\x12\x83\xc1\x7c\x81\xca\x52\xcd\xed\x49\x95\x4a\xb7\x51\x62\xf0\x3d\x6a\x7c\x8f\x1a\x7f\xd8\xa8\x11\xee\xc8\xff\xf2\x93\xf6\xbf\x03\x00\x00\xff\xff\x99\xec\xc8\xd3\x9b\x25\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 9627, mode: os.FileMode(420), modTime: time.Unix(1510945157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\x03\x31\x14\x85\xf7\xf3\x14\xd7\xa9\x5d\x26\x33\x2f\xe0\xaa\x95\xe2\xc6\x85\x08\x2e\x25\xd3\xdc\xd8\x4b\x66\x92\x21\x3f\x2a\x86\xfb\xee\x32\x69\x11\x0a\x63\x77\x87\xc3\x77\xbe\xc5\xd9\xdc\x75\x03\xb9\x6e\x50\xf1\xd4\x6c\xee\x41\x3c\x43\x29\xf2\x55\x45\xfb\xa4\x99\x6b\xe3\x97\xe6\xcd\x07\xbb\xa7\xc0\xdc\x99\xec\x1c\x8e\x22\x26\xed\x73\xaa\x00\xfe\x07\x60\x08\x4d\x29\x64\xc0\x21\xc8\xdd\x9c\x23\xf4\x20\x98\x9b\x52\xe6\x40\x2e\x19\x68\x97\xf9\x8c\x30\xcd\x04\x5b\xdd\x9e\xa1\x0a\x08\x40\xa7\x6b\xba\xcc\x5f\xd4\x74\x18\xa0\x97\x6b\x86\x11\x4e\xef\x9f\x13\x4e\x0f\x5b\xd9\x9b\x43\x7b\x81\xd7\x3d\x7b\x8a\xf6\xa6\xc8\x44\xfa\xc1\x3f\xd3\x19\xbf\x52\x35\xa5\xc8\xc7\x6f\x3c\xe6\xa4\x86\x11\x99\xe1\xcb\x07\x8b\x01\x42\x76\x20\xc4\xd1\x3b\x43\x1f\xcb\x23\xbb\x9a\x98\x41\x88\xa4\xa2\x15\xa4\xaf\xae\xfd\x0d\x00\x00\xff\xff\x24\x76\x8a\x2a\x79\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 377, mode: os.FileMode(420), modTime: time.Unix(1510422945, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xcd\x6e\xe2\x30\x10\xc0\xf1\xbb\x9f\x62\x84\xb4\x47\x67\x79\x81\x5c\x16\x22\xc4\x65\x91\x68\xd4\x8f\x53\x64\xe2\x49\xb0\xe2\x8c\x61\x6c\x87\x56\x91\xdf\xbd\x0a\x20\x2a\xaa\xd2\xdb\x24\xf3\x9f\x9f\x1c\xc9\x0c\xc8\x1e\x21\x87\x41\x91\xb1\x56\x89\x16\x03\xd2\x00\x39\x94\x1c\x51\xe0\x3b\xd6\x31\xa8\x9d\x9d\x92\x71\xcc\x8a\xdb\x77\x4a\x42\x71\x1b\x7b\xa4\xe0\x21\x87\x93\xe3\x0e\x19\x38\x12\x48\x59\x3b\x6a\x4c\x3b\xf5\x8b\xf3\x94\x12\x48\x19\x94\xef\xa4\xd1\xd3\xdf\x52\xf9\x6e\xad\x53\x12\xd6\xb5\x17\xf7\xc5\x71\xb7\x34\x9c\xd2\xdf\xda\x91\x76\x2c\x71\x40\x0a\xd2\xba\x56\x20\xb3\xe3\xef\x55\x13\x89\xd0\x4a\x1f\x34\x32\x0b\x17\xc3\x21\x86\xc7\x8d\x8b\x41\xf8\xbd\x8b\x56\x57\x81\x15\xf9\x06\xb9\x6a\x8c\xc5\xe9\xe1\x6f\xc5\x93\x38\xed\x91\xaa\xe0\xbe\x96\x37\x70\xf3\xbf\x2a\x5e\xd7\x65\xb5\xd9\x56\xc5\xf3\x7a\x51\x8a\x71\x34\x0d\x10\x42\xb6\x38\x44\x0f\x73\x90\x29\x89\x71\x3c\xb0\xa1\xd0\xc0\x8c\xf1\x18\xd1\x87\xaa\x9e\x96\x39\xfc\xd1\xb3\x4b\x78\x8e\x24\x20\xe9\xf3\x74\x25\xb6\xaa\x5f\xed\x60\x9e\x3d\x52\x7a\xec\x1d\x7f\x4c\x4e\x36\x6f\x60\xf5\x6f\x76\x3d\xf9\x59\x5b\x1a\xdf\xfd\xca\x69\xe3\xbb\x3b\xec\x72\x71\xa7\x89\x63\xc4\x88\xe2\x33\x00\x00\xff\xff\x5f\xc0\xd7\xf8\x18\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 536, mode: os.FileMode(420), modTime: time.Unix(1510422945, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xcf\x4a\x03\x31\x10\xc7\xf1\xfb\x3e\xc5\xd8\xd2\x63\xb2\xeb\x55\xd8\x8b\xad\x88\x17\x11\x15\x3c\x27\xcd\xa4\x86\xec\x4e\x96\xfc\x41\x21\xcc\xbb\x4b\x77\x17\xa4\x60\xbd\x0d\xc3\x97\xcf\xe1\xb7\xbd\x69\xb5\xa3\x56\xab\xf4\xd9\x6c\x5f\xee\xdf\x40\x3c\x43\xad\xf2\x5d\x25\xff\x64\x98\xd7\x5f\x38\xff\x3e\x42\xf4\x07\x17\x99\x5b\x5b\x88\x70\x10\x29\x9b\x50\xf2\x9a\xe0\xb5\x04\x63\x6c\x6a\x75\x16\x08\x41\xee\xa7\x92\xa0\x03\xc1\xdc\xd4\x3a\x45\x47\xd9\xc2\x66\x01\x06\xa0\x60\x30\xf5\xb7\x77\xd3\x44\xfd\xce\x6c\x96\x7a\x2e\x05\x20\x99\xf9\x5a\x9d\x57\x35\x3e\x6a\xe8\xe4\x35\x6a\xc4\xb1\xdf\xc9\xce\x9e\xf4\x66\x8d\xff\x76\x0e\x2e\xf9\x7f\x21\xeb\x06\xfc\x95\x96\xfc\x82\x6a\x6a\x95\x0f\xdf\x78\x2c\x59\xe9\x01\x99\xe1\x2b\x44\x8f\x11\x62\x21\x10\xe2\x18\xc8\xba\xd3\x79\x9a\xfd\x7c\x31\x83\x10\x59\x25\x2f\x9c\xb9\xd8\xf9\x27\x00\x00\xff\xff\x80\x45\x84\x4d\x88\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 392, mode: os.FileMode(420), modTime: time.Unix(1510422945, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcf\x6a\xc3\x30\x0c\x87\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\xe9\xe8\x76\xdd\x0a\x3b\x3b\x8d\xb2\x79\x6e\x64\x23\xdb\x6c\x60\xf4\xee\x23\x69\xa1\x29\xac\xf4\xf6\xc3\xfe\xf4\xa1\x3f\xab\x87\xba\x33\x54\x77\x3a\x7c\x15\xab\xf7\xcd\xd3\xbe\x7d\x01\xa5\xbe\x5d\xa7\x48\x8f\x08\x39\x57\x7b\x1d\xec\x6b\x2f\xb2\xf8\xa6\xa8\x83\x0d\xf0\xb8\x78\x42\x66\xc7\x13\xfe\xe1\xd8\x6e\x0d\x8b\xd4\x43\x22\xc2\xa3\x0a\xb1\x47\xe6\x05\xea\x52\xf4\x29\xde\x62\x5d\x8a\x45\xce\x66\x00\x42\xa8\x5a\x9f\x02\x34\xa0\x44\x8a\x9c\x3d\x1b\x8a\x03\x94\x17\xd3\xc1\xa7\xa0\x3c\xb2\x9a\xfa\x81\x75\x5f\x9e\x2a\x66\x5a\x01\x52\x3f\xa7\xb3\xeb\x4d\x8f\xbb\x0e\x9a\xea\xb6\x6e\xc4\x11\xd6\x55\x33\xec\x36\xe5\x19\xff\xdf\xb4\x35\xc1\xde\x51\xc5\xd1\x5f\x54\x27\xfe\xca\x55\xe4\x5c\x3d\xff\xe2\x21\x45\xdd\x1d\x51\x04\x7e\x1c\x5b\x64\xe0\x44\xd3\x5c\x8e\x06\xf3\x39\x6d\xa8\x9d\x93\xc8\xa4\xd4\xc1\x2a\xd3\x5f\x9d\xe4\x2f\x00\x00\xff\xff\x36\x8f\xbd\x5a\xbe\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 446, mode: os.FileMode(420), modTime: time.Unix(1510422945, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
