// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xe1\x73\xdb\x38\xae\xff\xae\xbf\x02\x2f\xe9\xce\xb4\x33\xb6\x93\x6c\x67\xdf\xbc\xf5\x4c\x3e\x24\x4e\x36\xcd\x6b\x9b\xe6\x25\xee\xeb\xdd\xa7\x0c\x25\x42\x16\xd7\x12\xa9\x25\x29\xbb\x6e\xae\xff\xfb\x0d\x40\x52\xb6\xd3\xa4\xc9\xdd\xa6\x3b\xe7\x4f\x32\x05\x02\x20\x00\x02\x3f\x40\xbb\x30\xad\x10\xb4\x68\x10\x4c\x09\xbe\x42\x10\x85\x57\x0b\x04\x87\x76\x81\x16\xa4\xf0\x22\x17\x0e\x21\x17\xc5\x1c\xb5\xcc\x76\xe1\x68\x21\x54\x2d\xf2\xba\x5f\x73\x63\xc8\x4d\xed\x65\x3e\x00\xb9\xd2\xa2\x31\xf4\x84\xb5\x70\x5e\x15\x03\x68\x8c\x9e\x19\x99\x67\x27\x91\x53\x22\xce\xb2\x07\x65\x17\xa6\x69\x3b\xff\x98\xcc\xda\x14\xa2\x1e\x40\xe5\x0b\xa3\xa5\xb1\x03\x70\x75\x67\x9b\x01\xb4\xb9\x1b\xc0\xcc\x2a\x89\x7a\xa6\x34\x0e\xa0\x11\xba\x23\x4a\xb1\x74\xc3\x5c\xf8\xa2\xca\x26\x41\x40\xe4\xf1\x1d\x4d\x70\x81\xda\xc3\xd2\x2a\x8f\x36\x89\x7e\xe9\x5e\x8d\x1e\x54\x69\x36\x78\x82\x2d\x06\x30\x17\xe5\x5c\x64\xa7\xc4\xfd\x13\x33\x77\x63\xc8\x00\x86\xc9\x36\xf4\x58\x9b\x59\x96\xbd\x33\xb3\x19\xda\x71\x06\xb0\x0b\xf4\xac\xf4\x0c\x6a\x5c\x60\xed\xc6\x20\x31\xef\x66\x03\x50\xba\x34\x03\x40\x6b\x8d\xcd\x00\xde\xd1\xcb\x31\x2f\xf2\x26\x66\x4f\xbc\x1c\x78\x03\xbe\x52\x0e\x5a\xe1\xab\x11\x9c\x97\x80\x4d\xeb\x57\x83\xf0\x52\x58\xe4\x73\x7a\xd4\x44\xe8\xbc\x44\x6b\x47\x19\xc0\x87\xce\xb7\x9d\xff\x4d\xd5\x38\x86\x9d\x9d\x2c\xbb\xe6\xc0\x08\x1a\xbd\x31\xce\x6f\x5a\xed\xb7\x4e\x6b\xac\x63\xec\xd0\x66\x22\xb8\x10\x4d\xb2\x74\x65\x9c\xcf\x78\xe7\xa5\xb1\x1e\x3a\x87\x12\x4a\x63\xe1\xcd\x74\x7a\x49\x5e\x6f\x3a\xad\x0a\xe1\x95\xd1\x20\xb4\x64\x96\x4b\xcc\x41\x0a\x57\xe5\x46\x58\xc9\x2c\xa7\xd3\x4b\xda\x3d\x86\xff\xd9\xdf\xdf\xbf\x8f\xdb\xd5\xe5\x64\x9b\x19\x6d\xbb\xba\x9c\x84\x5d\xbf\xee\xff\x1a\x77\x5d\xe1\x1f\x9d\xb2\xe4\x3f\xa7\x0a\x10\x9d\xaf\x50\xfb\x24\x9f\x18\x91\xfc\x78\x0f\x8e\x2e\xcf\x1d\x74\x8e\xcc\x2f\xa0\x15\xce\x2d\x4d\x50\x67\x97\x0c\x49\xa2\x29\xce\xe6\x08\xae\xb3\x48\x06\x6c\xad\x69\xd1\xd6\x2b\xb0\xe8\xbc\x55\x85\x07\x51\x14\xe8\xa2\x17\x28\xc6\x75\xa9\x66\x50\xaa\x1a\x99\xcb\x4b\x1c\xcd\x46\x50\x54\x8d\x91\xf0\xdf\xfb\xfb\x50\xb2\x29\x47\x81\x6c\xb4\x6a\xea\x57\xe1\xa4\x51\xf4\x18\x44\x5e\x1c\xfc\xfc\x3a\x9c\xe4\x5c\x17\x75\x27\x11\x04\xec\x4c\x44\x51\xe1\x70\x62\xb4\xb7\xa6\x1e\x83\x36\x43\xe7\x8d\xc5\x9d\x60\xe3\x0a\x85\x44\x0b\x4a\xc3\x19\xfa\xbd\x77\xca\x79\xd2\xaf\x35\xda\xa1\x63\x4e\xac\x79\x88\xfa\x42\x14\x15\x9d\x37\x5f\x81\xd2\x1e\x6d\x83\x52\x09\xbb\x62\x8b\xa8\x02\x1d\x9d\xfe\x44\x39\xba\x02\xc4\x9b\x05\x8f\xc1\xdb\x0e\xa3\x79\xc9\x0d\xb5\x62\x56\x46\x6b\x2c\xd8\xae\x5e\x35\x68\x3a\x1f\x4d\xa7\x41\x0b\x6d\x1c\xd2\x15\x76\xd1\x4d\x13\xde\x33\x0d\x74\x63\x32\x46\xfa\xc1\x2e\xbc\xde\x87\x48\x9d\xa5\x6b\xeb\x8a\x0a\x65\x57\xd3\xb1\xdc\x3a\x08\xc8\xc6\xef\xf9\xe2\xdf\x4d\x27\x23\xc8\xae\xd3\x96\x14\xc6\x4b\x30\x65\x8c\x7c\xdb\x69\x10\x9b\x4c\x3d\xda\x3e\x8a\xee\x53\x39\x31\xbb\x12\x94\x51\x0e\x36\xb5\x3d\x88\xca\xf6\x52\x1a\xa1\x57\xe0\x85\x9b\x73\x1c\x24\x21\xe4\x0f\xa3\x71\x5b\x54\x62\x3b\xa9\x3a\x3d\x27\xbe\x3d\x93\xda\xe8\x19\x6d\x5f\x0a\xe5\x21\x47\xbf\x44\xd4\xd0\xb5\x52\x78\x74\x90\x63\x69\x2c\x42\x23\xec\x3c\x04\xab\x36\x12\x41\xa2\x90\x0f\xe9\x7f\x61\x24\x5e\x2a\x3d\x7b\xc0\xe2\x07\xd0\x28\xdd\x79\xbc\x5f\x3c\x99\x3a\xca\xe0\xac\x21\xac\x1f\xdc\xd5\x81\x5c\xf1\x24\x2d\xce\xb5\x5a\xfb\xfd\xf5\xfe\x96\x1a\xbf\x44\x35\x5c\x96\x11\xe9\x38\x5d\xbd\x98\xc3\xa2\x0e\xe7\x27\xb0\x54\x75\x0d\x39\xd2\x7d\x36\x8d\xa0\xfb\x5c\xd7\x2b\x98\xa1\x26\xdb\x22\xcb\x3f\x3f\x09\xa9\x2c\xb2\xe8\xf5\xab\x04\xd9\x0f\x35\x28\x59\x23\x1f\x8d\xce\x8a\x14\x4c\x42\x33\x59\x8c\xde\x01\x28\x1f\x04\xb9\xaa\xf3\x20\xcd\x32\x46\xc7\xf0\x00\x1a\x14\xda\x11\xb1\x45\x0a\x48\x6d\xfa\x90\x87\xfd\xf4\x32\x2c\x80\x6a\xf8\x4e\x79\xac\x57\x20\x4a\x8f\x21\x6a\x4b\x65\x9d\xe7\x20\x21\x9e\xbd\x3d\x86\x07\x41\xe1\x23\x36\x55\x90\xbe\x7d\x46\x6f\x57\xe4\x04\x89\x1e\x0b\x0f\xcb\x4a\xf0\xe5\x36\x9d\x2d\x30\xe4\x77\xd1\x97\x2c\x6f\x40\xf9\x11\x30\xc3\x13\x2c\x95\x26\x3f\x5d\xf5\xc4\x2a\x9c\x96\x05\x85\x0c\xd4\x85\xc0\x04\xb3\x40\x4b\xa5\xd5\x85\x52\x92\x63\x25\x16\xca\x70\xae\xef\xb7\x93\x6f\x88\xf1\xe4\xf2\xa3\x5b\xcb\x1c\xa5\xd5\xb6\x73\x63\xe0\x14\xcc\x59\xe2\xe8\xfd\x9a\x66\xc0\x99\xe9\x38\x91\x5e\x89\xe6\x2c\x1f\xc3\xfe\xa8\xa7\x3e\x51\x6e\x0e\xae\x15\x05\x3e\xb8\x89\x48\x36\x76\xed\xc2\x6f\xec\xc7\xe5\x90\xcb\x26\xf8\x8e\xce\x3a\xfa\xf6\xde\xbb\x95\x2e\x60\xa9\x7c\x75\x7f\x25\xbb\x2f\x66\x3f\xf2\x9d\x0b\xf7\xfe\x97\xed\x60\xed\x93\xd4\x27\x63\xe7\x29\xcf\x50\x11\x75\x50\x58\xa4\x40\x04\xd9\x59\xb2\x7a\x6b\x0d\xd5\x05\x7a\x4c\xa1\x9b\xea\x30\xbb\x41\x39\x90\xca\x62\xe1\x8d\x5d\x91\x50\x62\x78\xa2\xec\x18\x46\x7b\xa1\x46\x0c\x97\xc6\xce\x87\x52\xd9\x7f\xed\xb8\x48\x05\x56\xb8\x39\x95\xff\x3e\x7b\xc4\xe2\xf4\x6c\xa7\xa7\x9d\xef\xc5\x67\xd5\x74\xcd\x5a\xd8\x4b\xe7\xa5\xe9\xfc\x1e\x5a\xfb\x0a\x9c\xfa\x12\x3c\x98\xaf\xa2\x02\x79\x57\x96\x84\xb6\xb6\x13\x1b\x49\x3c\xe6\x37\xd7\xea\x4b\xca\xb3\x94\x9e\xf6\xe1\xed\x71\x10\x74\x61\x6c\x13\x2e\x02\xe1\x06\xb6\x3b\x48\xac\x91\xf8\x2a\xef\x78\x89\xcc\xdc\x9b\x33\x5e\x3a\xfc\x8c\x45\xe7\x7b\x33\x4d\xc9\xe4\xa6\xe5\x70\x97\xa1\xbe\x51\xb4\x0b\xbf\x15\xed\xef\x50\x2c\xb0\xf7\x45\x29\x6a\x87\x59\xb6\x3b\x7c\xde\x5f\xb6\x0b\x09\x36\x3b\x42\x44\x7b\xc6\x02\x83\x46\x88\xa8\x71\xef\x8d\xd0\xb2\x46\xeb\x9e\x5f\x74\x76\x6c\x6a\x7f\x72\x3c\x8e\xb0\x83\xee\x45\x08\x8e\xbe\x25\x88\xd8\x85\xde\xdd\x13\x8d\xf1\xff\x88\x90\xfe\x09\x43\xe1\xc4\xec\x58\x38\x64\xd4\xe8\x0d\xd5\x6b\x4e\xb4\x09\x2c\x83\x67\x7b\x53\xe2\xa3\x87\x44\x3a\x8e\x78\x28\x64\xc0\x4f\xd7\x60\x71\xa6\x8c\xe6\xac\x43\x0f\x9c\xcf\xd3\xbb\xa3\x00\xb4\xe6\xb8\x82\xf3\x93\x0c\xe0\x2d\xae\xb6\xde\x5f\x63\x61\xd1\x27\xb2\xb7\xb8\xa2\x6a\xcb\x6b\xa1\x2c\x9c\x06\xb8\x1e\x4f\x6e\xb1\x54\x9f\x37\x55\x55\x5a\xe2\x67\x74\xf0\x92\x02\x7a\x10\x5a\x04\x37\xe0\x0a\xe2\x08\xa4\x9d\xd3\xfb\xb0\x6d\x4b\xed\x8f\x57\xef\x12\x4e\x8e\x0d\x81\x43\x61\x8b\x6a\xe3\x9a\x7d\xbc\x7a\x37\x86\xca\xfb\x76\xbc\xb7\xd7\x03\xe6\xf1\xaf\x3f\x13\xce\xdd\x85\x33\x63\x66\x35\xc2\xa4\x36\x9d\xe4\xb8\x60\x64\x17\xee\x55\x72\xca\x28\xeb\x5f\x90\xfe\x97\xd6\xfc\x8e\x85\xef\x8f\x9f\xfc\x28\x8a\xc2\x74\x04\xcc\x2c\x4a\x02\xbd\xa2\x76\xec\xce\x70\x03\x3e\x70\xf0\x8b\x9a\x9b\x84\xd6\x38\xa7\x38\xcd\x6e\x12\xdf\x5f\x65\xa5\x72\x05\x55\x08\x0c\x88\xa7\xb4\xa6\x09\xe7\xd5\x0b\x65\x8d\x6e\x50\x33\xf0\x9b\xac\x19\xf5\x7d\x05\x40\xf6\x9e\xba\xa3\x14\x24\x47\x52\x5a\x07\x95\xa9\xa5\x0b\x0d\x99\x94\x16\x1d\xdd\x83\x35\x32\x47\x19\x6d\xc7\xd9\x81\x77\x84\xda\x33\xdc\x68\x37\xb8\x26\xa4\x90\x55\x6e\x3b\x84\x39\x0c\x19\x33\x52\xe6\x57\x1a\xa2\x0e\x01\xcc\x90\x75\x83\x03\x79\x07\x03\xde\xbe\x8b\xdd\xf0\xec\x34\xd5\xf3\xa8\x6a\xc3\xb6\x25\x5f\xab\x10\xe5\x1b\x50\x29\xf6\x13\x04\x34\x19\x78\x4b\x58\x56\xa8\x83\xb9\xb8\xf0\x27\xac\x4c\xe0\x4d\x4b\xe0\x56\xa4\xae\xcd\x12\xba\x16\xa8\xa5\xe0\x3a\xdc\x97\x68\x47\xa5\xc3\x68\xf2\x54\xc0\xef\x6b\x55\xbe\xa0\x35\x83\xd0\x6b\x88\xba\x86\x46\xac\x20\xaf\x4d\x31\x27\x45\x90\x74\x20\xad\x48\x4c\x50\x6c\x8d\xd1\x53\x23\x90\x23\xa0\xa3\xfb\xa8\x5c\x15\x80\xd3\xe3\xe0\x8c\x03\xdd\xa1\x65\xc3\x92\xfe\xa9\x61\xe1\x8e\xd4\x86\x70\xd8\x8a\xba\xe8\x4d\xa5\x15\x2d\xdc\x69\xc3\x98\x9f\x24\x6c\x6c\xf4\xb6\xe7\x24\xa1\x16\x94\xd4\x9d\xd0\xfa\xc9\x3a\x29\x61\xcd\xba\x26\x2d\x62\x74\xad\x1b\x27\xba\xe2\x6f\xa9\xff\x1e\xf3\xbd\xe7\xf8\x49\x61\xc3\xa4\x53\xd3\xaa\xa2\x77\xf0\x8f\x48\xea\x71\xfe\x00\xc7\x71\x72\xf0\x03\xb2\xf7\x9b\xe9\x84\xc7\x22\x74\xb2\x29\x36\x6d\xcd\x75\xfa\x1f\x7c\xce\x4e\x2b\x3a\x34\xc2\x21\x2c\x84\x56\x75\x2d\x78\x79\x86\x1e\xf5\x02\x0e\x61\x4a\x3d\x1c\xad\x84\xca\xc8\x88\xf1\x10\x6e\x6f\x47\xa7\xfd\xff\xaf\x5f\x99\x40\xd8\x59\x47\xb7\xda\xc1\x61\xaa\xb8\xd4\x3f\x0d\x87\xb1\xbd\xbd\xbd\x1d\x4d\xf8\xe9\xeb\x57\x18\x0e\x29\x53\x0d\x95\xa4\xd5\xa9\x70\xf3\x73\x19\xb9\x10\x28\x60\xfe\xb1\x9e\x7e\xfd\xba\x17\x66\x3a\x43\x4e\xae\xc3\xda\xcc\x82\x3a\xd6\x1a\x7b\x97\x32\x96\x9d\x30\xb0\x60\x32\xc3\x13\x8b\x87\xe9\x4c\xe7\x99\xce\x55\xa6\xab\xe5\x8d\xb7\x42\xbb\x12\xed\x4d\xc9\xf0\xec\x10\xfe\x7e\x7a\xcd\xef\xe9\x62\xde\x78\xb3\x26\xe8\x19\x7f\xb8\xb8\x39\xfd\xdb\xf9\xf4\xe6\xc3\xd5\xcd\xe9\xff\x9f\x4f\xa6\x4c\x7e\x7b\xab\x4a\xd0\x08\x23\x42\xb8\xb0\x0f\xc3\x78\xba\xdb\xdb\xd6\x2a\xed\x4b\xd8\xb1\xf8\x47\x87\xce\xdf\x14\x44\x70\x08\x3f\xc9\x9d\x40\xdc\x13\x0e\x01\xb5\xec\xff\x45\x76\x8c\x82\x09\xce\x7e\x87\x63\x83\x0d\xe1\x99\x43\xf8\x69\xb4\x5f\xc2\xd9\xf1\x4e\xdc\xf6\x7d\xce\x01\x2a\x3f\xc2\x5a\x12\xe4\xde\x64\x1c\x76\x7d\xc3\x99\xff\xfe\xd1\x21\xb5\xff\x97\xc7\xd7\xf7\xc5\xdd\xee\x7f\xe5\x4a\xef\xe5\xc2\x55\xe1\xef\xe5\xf1\x35\x0c\x2f\xc8\x4d\xdc\xfd\x25\xfd\xc2\xba\x79\xcc\x7d\x81\x0c\x1f\x8b\x86\xc7\xdd\x12\x18\xd5\xa1\x82\x1f\x1e\x8c\xdb\x56\x1f\x3e\x83\x6f\x12\xdb\x06\x9b\x43\xb2\xde\x2c\x7f\x06\xaf\x24\xa6\x14\xab\x6b\xae\xdf\x73\xc9\x9d\x6b\xfb\x6f\x5e\xd3\xec\xcc\x2a\x79\xca\x03\xd5\xa7\x78\xf6\xc5\xbd\x7e\x7d\xf1\x14\xaf\xbe\x78\x82\x4f\x89\xa8\xf7\xd7\x53\xbd\xfc\x02\x86\x2d\x42\xd3\xaa\xe7\xb8\x78\x41\x83\xea\x66\x91\xbc\x7b\xf6\x1c\xce\x8d\x4c\x4b\x6a\x8a\x7a\xae\x7f\x81\x73\xaf\xeb\xce\x36\xf7\xfb\x75\x6f\xdb\xb1\xd7\xc7\x47\xd3\xc9\x1b\x18\x0e\x7f\x37\xf9\x90\x8b\xfc\x37\x5e\xee\x49\x74\x18\x74\x1d\xdc\x59\x0e\x59\xfc\x31\x0f\xf7\xe4\x31\xe9\x3e\x12\x36\x4f\xf0\x7f\xcf\x91\xd2\xef\xb0\x45\xcb\xb6\x78\x96\x60\xe8\x59\x37\xd8\x70\xa6\x7c\x96\x0c\xbc\x66\xeb\x9b\x76\xcd\xf6\x2f\x88\x07\xee\x93\x8e\x85\x2f\x2a\x90\xe8\x0a\xab\x72\x74\x1b\x53\xeb\x34\x0c\x4a\xd8\x8d\x9a\xaa\x40\x7d\x77\xd4\x9a\x25\x3e\x01\xd4\xff\xaf\xc9\xc3\xb4\x89\xb7\x17\x42\x33\xc6\x54\xbe\x42\x9e\x22\xf2\x97\x84\xc8\xb2\x11\x5f\x8c\xee\x67\x4a\x70\x41\xef\x5e\x1e\x5d\x5d\xbc\x22\x6c\xb7\xc5\x67\x0c\x3b\x31\x1e\x28\x26\x25\x96\x3b\x49\xd6\xff\x51\x35\xfa\x73\x62\x98\xc5\xb6\x04\xae\x71\x3b\x77\x3a\xd1\xd4\xd9\xb9\x16\x0b\x55\x2a\x94\xf0\xbb\xc9\x43\x39\x0c\x9f\x32\x4c\x9c\xfb\x30\x15\xbd\x93\x6b\x43\xa8\x6f\x1a\xd9\x75\xcb\xba\xd9\x98\xfe\x00\x24\x7a\xed\x8d\x15\x33\xfc\x01\x00\x74\xf7\x4f\x34\x8f\x0f\xb5\x8e\xd9\x2e\xbc\xa3\xc6\x8e\xcb\x1f\xb8\x95\xf3\xd8\x8c\x32\x5e\x8a\x07\x09\x71\xf6\xa9\x52\x1e\x6b\xe5\xb8\x09\xe3\x56\x70\x63\xe8\xd3\x0a\x5f\x39\x58\x56\xaa\xa8\xd2\xa0\x4b\x39\x10\xd4\x63\xa1\x8c\xcd\x31\xba\xd0\x52\x86\xc5\x13\xb5\xee\x10\x46\x7b\xa4\xc5\x9b\xe9\xf4\x32\x4a\xec\xbf\x3a\x78\xc3\x83\xe0\xda\x08\x09\x6d\x97\xd7\xaa\x80\x80\x28\x63\xeb\xb2\xc4\x1c\x16\x4a\x80\x80\xb3\xd3\x29\x44\x78\x35\xca\x36\x58\x8d\xb7\xba\x49\xba\x5d\x95\xf7\xed\x4b\xf7\x6a\x73\x87\x7b\x68\x1e\x77\x5f\x73\x76\xe7\x8b\x49\x08\xf7\xeb\xd7\xe3\xf5\xa7\x1b\x99\x86\x57\x61\xf4\x85\xd0\xc4\x71\x9d\xee\x9a\x1c\x6d\xea\x62\xe3\x04\x4c\x24\x2d\x7a\x1f\x5a\xf4\x56\xc5\x6f\x2e\xa5\x50\x75\x67\xc3\xac\xee\xbd\xf8\x7c\xc5\xaf\x5c\xff\xed\xe2\x39\x66\x33\xd4\x3b\x85\x14\x84\xdc\xa0\x93\x03\xd2\xf7\x57\xd6\xe1\xfa\x35\xb4\xd6\x2c\x94\x44\xeb\xc0\x75\x45\x05\xc2\xc1\x7b\xa5\x95\x49\x03\xb4\x09\xb6\x55\xb6\x0b\x67\xa8\xd1\xaa\x82\x8c\xb1\xcb\x9e\x5d\x1b\x84\xbf\x61\xd1\x22\xc0\xa9\x96\xad\x51\x3a\x48\x0f\x4b\x49\xe5\xf0\x6f\x53\xb9\x30\xa0\xd9\x70\xe6\x7d\x36\xfe\xcf\x1d\xc1\x64\xd7\x4b\x55\xfa\xfb\xf5\xa6\x6e\xfa\xe2\x81\x6e\x1a\xe0\xa8\xf3\x15\xcf\xae\x42\xff\x8c\x5a\x68\xbf\x41\x1d\x16\xe2\x57\x97\x94\xe9\xfa\xf7\xff\x0c\x00\x00\xff\xff\x77\x70\xb7\xd5\x83\x20\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 8323, mode: os.FileMode(420), modTime: time.Unix(1515102681, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcf\x4a\xc3\x40\x18\xc4\xef\x79\x8a\x31\xb5\xc7\xdd\xe4\x05\x3c\x35\x52\xbc\x78\x10\xc1\xa3\x24\xcd\xb7\x76\x49\xb2\x1b\xf6\x8f\x8a\xcb\xf7\xee\xb2\xdb\x22\x14\x6a\x6f\xc3\xf0\x9b\xdf\x61\x36\x77\xcd\xa0\x4d\x33\xf4\xfe\x58\x6d\xee\x21\x9e\x91\x92\x7c\xed\xfd\xf4\x34\x32\x97\xc6\xe6\xe6\xcd\xba\xa9\xd3\x8e\xb9\x51\xd1\x18\x9a\x85\x0f\xa3\x8d\xa1\x00\xf4\x1f\x40\xce\x55\x29\x69\x05\x43\x90\xbb\x35\x7a\xb4\x10\xcc\x55\x4a\xab\xd3\x26\x28\xd4\x79\xbe\x12\x96\x55\x63\x3b\xd6\x27\xa8\x00\x02\x64\xc6\x92\xce\xf3\x97\x7e\xd9\x0f\x68\xe5\x35\xc3\x8c\xe3\xfb\xe7\x42\xcb\xc3\x56\xb6\x6a\x5f\x9f\xe1\xeb\x9e\x4e\xfb\xe9\xa6\x48\x79\xfd\x43\x7f\xa6\x13\x7e\xa1\xaa\x52\x92\x8f\xdf\x74\x88\xa1\x1f\x66\x62\xc6\x97\x75\x13\x39\xb8\x68\x20\xc4\xc1\x1a\xa5\x3f\xf2\x23\xbb\x92\x98\x21\x44\xc8\x7f\x76\x17\xcf\xfe\x06\x00\x00\xff\xff\x43\xce\xa0\xb4\x78\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 376, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x11\xd2\x5d\x3a\x97\x17\xc8\xe6\x42\x84\xd8\x5c\x24\x1a\xf5\x67\x15\x85\x64\x12\xac\x38\x63\x18\x7b\x42\xab\xc8\xef\x5e\x05\x10\x15\x55\xe9\xee\xd8\xe7\x3b\x9f\x46\xc8\x0c\xc8\x1e\x21\x85\xa1\x24\x63\x6d\xa9\x5a\x0c\x48\x03\xa4\x90\xb3\xa0\xc2\x77\xac\x24\x94\x3b\x3b\x21\xe3\x98\x64\xb7\x77\x8c\xaa\xe4\x56\x7a\xa4\xe0\x21\x85\x93\xe3\x0e\x19\x58\x08\xb4\xae\x1c\x35\xa6\x9d\xf8\xc5\x39\xc5\x08\x5a\x87\xd2\x77\xeb\xe5\xf4\x99\x4f\xa9\x8e\x51\x59\xd7\x5e\xb4\x2f\x8e\xbb\xa5\xe1\x18\xff\x56\x8e\x6a\xc7\x1a\x07\xa4\xa0\xad\x6b\x15\x32\x3b\xfe\x4e\x35\x42\x84\x56\xfb\x50\x23\xb3\x72\x12\x0e\x12\x1e\x33\x4e\x82\xf2\x7b\x27\xb6\x2e\x02\x97\xe4\x1b\xe4\xa2\x31\x16\xa7\xbb\xdf\xb2\x27\x75\xda\x23\x15\xc1\x7d\x95\x37\xe1\xe6\x7f\x91\xbd\xae\xf3\x62\xb3\x2d\xb2\xe7\xf5\x22\x57\xe3\x68\x1a\x20\x84\x64\x71\x10\x0f\x73\xd0\x31\xaa\x71\x3c\xb0\xa1\xd0\xc0\x8c\xf1\x28\xe8\x43\x51\x4d\x65\x0a\x7f\xea\xd9\x05\x3c\x43\x1a\x90\xea\x73\xba\x2a\xb6\x65\xbf\xda\xc1\x3c\x79\x64\xe9\xb1\x77\xfc\x31\x79\x92\x79\x03\xab\x7f\xb3\xeb\xe4\x67\xdb\xd2\xf8\xee\x57\x5d\x6d\x7c\x77\x27\xbb\x2c\xee\x6c\xea\x28\x28\xa8\x3e\x03\x00\x00\xff\xff\xbb\x66\xa4\x8a\x17\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 535, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\x4d\x4b\xc4\x30\x10\xc6\xf1\x7b\x3f\xc5\xd8\x65\x8f\x49\xeb\x55\xe8\xc5\xad\x88\x17\x11\x15\x3c\x37\x9b\xc9\x1a\xda\x4e\x4a\x5e\x50\x08\xf3\xdd\xa5\x2f\x20\x0b\xd6\xdb\x30\xfc\xf9\x1d\x9e\xc3\x4d\xa5\x2c\x55\xaa\x0b\x9f\xc5\xe1\xe5\xfe\x0d\xc4\x33\xe4\x2c\xdf\xbb\xd0\x3f\x69\xe6\xed\xe7\xe6\xdf\x87\xf3\x7d\x6b\x3d\x73\x65\x12\x11\x0e\x22\x44\xed\x52\xdc\x12\xdc\x4b\xd0\xfb\x22\x67\x6b\x80\x10\xe4\x69\x4a\x01\x6a\x10\xcc\x45\xce\x93\xb7\x14\x0d\x94\x2b\x30\x00\x39\x8d\xa1\xb9\xbd\x9b\x26\x6a\x8e\xba\x5c\xeb\xa5\x14\x80\xa4\x97\x6b\x73\x5e\xbb\xf1\x51\x41\x2d\xf7\xa8\x11\xc7\xe6\x28\x6b\x73\x51\xe5\x16\xff\xed\xb4\x36\xf4\xff\x42\xc6\x0e\xf8\x2b\xad\xf9\x15\x55\xe4\x2c\x1f\xbe\xf1\x9c\x62\xa7\x06\x64\x86\x2f\xe7\x7b\xf4\xe0\x13\x81\x10\x67\x47\xc6\x5e\xe6\x69\x4e\xcb\xc5\x0c\x42\xc4\x79\xdc\xf6\x6a\xe6\x9f\x00\x00\x00\xff\xff\xd8\xa6\xd9\x67\x87\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 391, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x6a\xeb\x30\x10\x45\xf7\xfe\x8a\x79\x0e\x59\xca\xf6\xfb\x84\xc6\x2e\x69\xb7\x6d\xa0\x6b\x39\x1e\xb7\xaa\xe3\x91\x18\x49\xb4\x20\xe6\xdf\x8b\x9c\x40\x1c\x68\xe8\xee\x22\x1d\x1d\x34\x73\x37\xff\xea\xde\x50\xdd\x6b\xff\x51\x6c\x5e\x77\x0f\x87\xf6\x09\x94\xfa\xb4\xbd\x22\x3d\x23\xa4\x54\x1d\xb4\x9f\x9e\x07\x91\xd5\x35\x05\xed\x27\x0f\xff\x57\x47\xc8\x6c\x39\xe3\x6f\x96\xa7\xce\xb0\x48\x3d\x46\x22\x3c\x29\x1f\x06\x64\x5e\xa1\x36\x06\x17\xc3\x3d\xd6\xc6\x50\xa4\x64\x46\x20\x84\xaa\x75\xd1\x43\x03\x4a\xa4\x48\xc9\xb1\xa1\x30\x42\x79\x35\x1d\x5d\xf4\xca\x21\xab\xfc\x1f\xd8\x0e\xe5\xf9\xc5\x42\x2b\x40\x1a\x96\x74\x71\xbd\xe8\x79\xdf\x43\x53\xdd\xd7\xcd\x38\xc3\xb6\x6a\xc6\xfd\xae\xbc\xe0\xbf\x9b\x3a\xe3\xa7\x3f\x54\x61\x76\x57\xd5\x99\xbf\x71\x15\x29\x55\x8f\xdf\x78\x8c\x41\xf7\x27\x14\x81\x2f\xcb\x13\x32\x70\xa4\x3c\x97\xa5\xd1\xbc\xe7\x0d\xb5\x4b\x12\xc9\xca\xdc\x43\x77\xd3\xc8\x4f\x00\x00\x00\xff\xff\x46\x53\xad\xe9\xbd\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 445, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
