package mocks

import context "golang.org/x/net/context"
import funnel "github.com/ohsu-comp-bio/funnel/proto/funnel"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() {
	_m.Called()
}

// GetWorker provides a mock function with given fields: ctx, in, opts
func (_m *Client) GetWorker(ctx context.Context, in *funnel.GetWorkerRequest, opts ...grpc.CallOption) (*funnel.Worker, error) {
	ret := _m.Called(ctx, in, opts)

	var r0 *funnel.Worker
	if rf, ok := ret.Get(0).(func(context.Context, *funnel.GetWorkerRequest, ...grpc.CallOption) *funnel.Worker); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*funnel.Worker)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *funnel.GetWorkerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkers provides a mock function with given fields: ctx, in, opts
func (_m *Client) ListWorkers(ctx context.Context, in *funnel.ListWorkersRequest, opts ...grpc.CallOption) (*funnel.ListWorkersResponse, error) {
	ret := _m.Called(ctx, in, opts)

	var r0 *funnel.ListWorkersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *funnel.ListWorkersRequest, ...grpc.CallOption) *funnel.ListWorkersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*funnel.ListWorkersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *funnel.ListWorkersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExecutorLogs provides a mock function with given fields: ctx, in, opts
func (_m *Client) UpdateExecutorLogs(ctx context.Context, in *funnel.UpdateExecutorLogsRequest, opts ...grpc.CallOption) (*funnel.UpdateExecutorLogsResponse, error) {
	ret := _m.Called(ctx, in, opts)

	var r0 *funnel.UpdateExecutorLogsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *funnel.UpdateExecutorLogsRequest, ...grpc.CallOption) *funnel.UpdateExecutorLogsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*funnel.UpdateExecutorLogsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *funnel.UpdateExecutorLogsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTaskLogs provides a mock function with given fields: ctx, in, opts
func (_m *Client) UpdateTaskLogs(ctx context.Context, in *funnel.UpdateTaskLogsRequest, opts ...grpc.CallOption) (*funnel.UpdateTaskLogsResponse, error) {
	ret := _m.Called(ctx, in, opts)

	var r0 *funnel.UpdateTaskLogsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *funnel.UpdateTaskLogsRequest, ...grpc.CallOption) *funnel.UpdateTaskLogsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*funnel.UpdateTaskLogsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *funnel.UpdateTaskLogsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTaskState provides a mock function with given fields: ctx, in, opts
func (_m *Client) UpdateTaskState(ctx context.Context, in *funnel.UpdateTaskStateRequest, opts ...grpc.CallOption) (*funnel.UpdateTaskStateResponse, error) {
	ret := _m.Called(ctx, in, opts)

	var r0 *funnel.UpdateTaskStateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *funnel.UpdateTaskStateRequest, ...grpc.CallOption) *funnel.UpdateTaskStateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*funnel.UpdateTaskStateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *funnel.UpdateTaskStateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorker provides a mock function with given fields: ctx, in, opts
func (_m *Client) UpdateWorker(ctx context.Context, in *funnel.Worker, opts ...grpc.CallOption) (*funnel.UpdateWorkerResponse, error) {
	ret := _m.Called(ctx, in, opts)

	var r0 *funnel.UpdateWorkerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *funnel.Worker, ...grpc.CallOption) *funnel.UpdateWorkerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*funnel.UpdateWorkerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *funnel.Worker, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
