// Code generated by protoc-gen-go. DO NOT EDIT.
// source: events.proto

/*
Package events is a generated protocol buffer package.

It is generated from these files:
	events.proto

It has these top-level messages:
	Event
	SystemLog
	WriteEventResponse
*/
package events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tes "github.com/ohsu-comp-bio/funnel/proto/tes"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_UNKNOWN             Type = 0
	Type_STATE               Type = 1
	Type_START_TIME          Type = 2
	Type_END_TIME            Type = 3
	Type_OUTPUTS             Type = 4
	Type_METADATA            Type = 5
	Type_EXECUTOR_START_TIME Type = 6
	Type_EXECUTOR_END_TIME   Type = 7
	Type_EXIT_CODE           Type = 8
	Type_HOST_IP             Type = 9
	Type_PORTS               Type = 10
	Type_STDOUT              Type = 11
	Type_STDERR              Type = 12
	Type_SYSLOG              Type = 13
)

var Type_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "STATE",
	2:  "START_TIME",
	3:  "END_TIME",
	4:  "OUTPUTS",
	5:  "METADATA",
	6:  "EXECUTOR_START_TIME",
	7:  "EXECUTOR_END_TIME",
	8:  "EXIT_CODE",
	9:  "HOST_IP",
	10: "PORTS",
	11: "STDOUT",
	12: "STDERR",
	13: "SYSLOG",
}
var Type_value = map[string]int32{
	"UNKNOWN":             0,
	"STATE":               1,
	"START_TIME":          2,
	"END_TIME":            3,
	"OUTPUTS":             4,
	"METADATA":            5,
	"EXECUTOR_START_TIME": 6,
	"EXECUTOR_END_TIME":   7,
	"EXIT_CODE":           8,
	"HOST_IP":             9,
	"PORTS":               10,
	"STDOUT":              11,
	"STDERR":              12,
	"SYSLOG":              13,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Event struct {
	// Event type
	Type Type `protobuf:"varint,1,opt,name=type,enum=events.Type" json:"type,omitempty"`
	// Task ID
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// Task attempt ID
	Attempt uint32 `protobuf:"varint,3,opt,name=attempt" json:"attempt,omitempty"`
	// Event timestamp
	Timestamp *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
	// Task event fields:
	// Only one field is set per event type.
	State     tes.State                   `protobuf:"varint,5,opt,name=state,enum=tes.State" json:"state,omitempty"`
	StartTime *google_protobuf1.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime   *google_protobuf1.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Outputs   []*tes.OutputFileLog        `protobuf:"bytes,8,rep,name=outputs" json:"outputs,omitempty"`
	Metadata  map[string]string           `protobuf:"bytes,9,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Executor events:
	// index is always set for executor events.
	Index uint32 `protobuf:"varint,10,opt,name=index" json:"index,omitempty"`
	// Only one field is set per executor event type.
	ExecutorStartTime *google_protobuf1.Timestamp `protobuf:"bytes,11,opt,name=executor_start_time,json=executorStartTime" json:"executor_start_time,omitempty"`
	ExecutorEndTime   *google_protobuf1.Timestamp `protobuf:"bytes,12,opt,name=executor_end_time,json=executorEndTime" json:"executor_end_time,omitempty"`
	ExitCode          int32                       `protobuf:"varint,13,opt,name=exit_code,json=exitCode" json:"exit_code,omitempty"`
	HostIp            string                      `protobuf:"bytes,14,opt,name=host_ip,json=hostIp" json:"host_ip,omitempty"`
	Ports             []*tes.Ports                `protobuf:"bytes,15,rep,name=ports" json:"ports,omitempty"`
	Stdout            string                      `protobuf:"bytes,16,opt,name=stdout" json:"stdout,omitempty"`
	Stderr            string                      `protobuf:"bytes,17,opt,name=stderr" json:"stderr,omitempty"`
	// System events:
	SystemLog *SystemLog `protobuf:"bytes,18,opt,name=system_log,json=systemLog" json:"system_log,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_UNKNOWN
}

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetAttempt() uint32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *Event) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Event) GetState() tes.State {
	if m != nil {
		return m.State
	}
	return tes.State_UNKNOWN
}

func (m *Event) GetStartTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Event) GetEndTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Event) GetOutputs() []*tes.OutputFileLog {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *Event) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Event) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Event) GetExecutorStartTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ExecutorStartTime
	}
	return nil
}

func (m *Event) GetExecutorEndTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ExecutorEndTime
	}
	return nil
}

func (m *Event) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *Event) GetHostIp() string {
	if m != nil {
		return m.HostIp
	}
	return ""
}

func (m *Event) GetPorts() []*tes.Ports {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *Event) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *Event) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

func (m *Event) GetSystemLog() *SystemLog {
	if m != nil {
		return m.SystemLog
	}
	return nil
}

type SystemLog struct {
	Msg    string            `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	Level  string            `protobuf:"bytes,2,opt,name=level" json:"level,omitempty"`
	Fields map[string]string `protobuf:"bytes,3,rep,name=fields" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SystemLog) Reset()                    { *m = SystemLog{} }
func (m *SystemLog) String() string            { return proto.CompactTextString(m) }
func (*SystemLog) ProtoMessage()               {}
func (*SystemLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SystemLog) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SystemLog) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *SystemLog) GetFields() map[string]string {
	if m != nil {
		return m.Fields
	}
	return nil
}

type WriteEventResponse struct {
}

func (m *WriteEventResponse) Reset()                    { *m = WriteEventResponse{} }
func (m *WriteEventResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteEventResponse) ProtoMessage()               {}
func (*WriteEventResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Event)(nil), "events.Event")
	proto.RegisterType((*SystemLog)(nil), "events.SystemLog")
	proto.RegisterType((*WriteEventResponse)(nil), "events.WriteEventResponse")
	proto.RegisterEnum("events.Type", Type_name, Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventService service

type EventServiceClient interface {
	WriteEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*WriteEventResponse, error)
}

type eventServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventServiceClient(cc *grpc.ClientConn) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) WriteEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*WriteEventResponse, error) {
	out := new(WriteEventResponse)
	err := grpc.Invoke(ctx, "/events.EventService/WriteEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventService service

type EventServiceServer interface {
	WriteEvent(context.Context, *Event) (*WriteEventResponse, error)
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_WriteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).WriteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.EventService/WriteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).WriteEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "events.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteEvent",
			Handler:    _EventService_WriteEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "events.proto",
}

func init() { proto.RegisterFile("events.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 722 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x6f, 0xe3, 0x36,
	0x10, 0x5d, 0xf9, 0x43, 0xb6, 0xc6, 0x1f, 0x91, 0xb9, 0xdb, 0x2e, 0xe1, 0x6d, 0x01, 0x21, 0x27,
	0xa3, 0x28, 0xbc, 0x85, 0x8b, 0xa0, 0x49, 0x7b, 0x32, 0x62, 0xa5, 0x75, 0x9b, 0x58, 0x06, 0x45,
	0x23, 0xe9, 0x49, 0x50, 0x22, 0xc6, 0x15, 0x6a, 0x8b, 0x82, 0x48, 0x1b, 0xf1, 0x0f, 0xea, 0xa1,
	0x7f, 0xa7, 0xbf, 0xa8, 0x20, 0xf5, 0x91, 0x04, 0x39, 0x18, 0x7b, 0xe3, 0x7b, 0x33, 0x6f, 0x34,
	0xf3, 0x38, 0x14, 0x74, 0xd9, 0x9e, 0x25, 0x52, 0x8c, 0xd3, 0x8c, 0x4b, 0x8e, 0xcc, 0x1c, 0x0d,
	0x2d, 0xc9, 0x0a, 0x6a, 0x78, 0x22, 0xe3, 0x2d, 0x13, 0x32, 0xdc, 0xa6, 0x05, 0xf1, 0xcd, 0x9a,
	0xf3, 0xf5, 0x86, 0x7d, 0x0e, 0xd3, 0xf8, 0x73, 0x98, 0x24, 0x5c, 0x86, 0x32, 0xe6, 0x49, 0x91,
	0x7e, 0xfa, 0xaf, 0x09, 0x4d, 0x57, 0x15, 0x41, 0x0e, 0x34, 0xe4, 0x21, 0x65, 0xd8, 0x70, 0x8c,
	0x51, 0x7f, 0xd2, 0x1d, 0x17, 0x1f, 0xa2, 0x87, 0x94, 0x11, 0x1d, 0x41, 0x7d, 0xa8, 0xc5, 0x11,
	0xae, 0x39, 0xc6, 0xc8, 0x22, 0xb5, 0x38, 0x42, 0x18, 0x5a, 0xa1, 0x94, 0x6c, 0x9b, 0x4a, 0x5c,
	0x77, 0x8c, 0x51, 0x8f, 0x94, 0x10, 0x9d, 0x83, 0x55, 0xb5, 0x81, 0x1b, 0x8e, 0x31, 0xea, 0x4c,
	0x86, 0xe3, 0xbc, 0x8f, 0xfc, 0xbb, 0xf7, 0xbb, 0xc7, 0x31, 0x2d, 0x33, 0xc8, 0x73, 0x32, 0x72,
	0xa0, 0x29, 0x64, 0x28, 0x19, 0x6e, 0xea, 0x36, 0x60, 0xac, 0x26, 0xf3, 0x15, 0x43, 0xf2, 0x00,
	0xba, 0x00, 0x10, 0x32, 0xcc, 0x64, 0xa0, 0x44, 0xd8, 0x3c, 0x5e, 0x5c, 0x67, 0x2b, 0x8c, 0xce,
	0xa0, 0xcd, 0x92, 0x28, 0x17, 0xb6, 0x8e, 0x0a, 0x5b, 0x2c, 0x89, 0xb4, 0xec, 0x7b, 0x68, 0xf1,
	0x9d, 0x4c, 0x77, 0x52, 0xe0, 0xb6, 0x53, 0x1f, 0x75, 0x26, 0x48, 0x77, 0xe5, 0x69, 0xee, 0x2a,
	0xde, 0xb0, 0x6b, 0xbe, 0x26, 0x65, 0x0a, 0xfa, 0x09, 0xda, 0x5b, 0x26, 0xc3, 0x28, 0x94, 0x21,
	0xb6, 0x74, 0xfa, 0xa7, 0xd2, 0x4b, 0x6d, 0xf4, 0xf8, 0xa6, 0x88, 0xba, 0x89, 0xcc, 0x0e, 0xa4,
	0x4a, 0x46, 0x1f, 0xa0, 0x19, 0x27, 0x11, 0x7b, 0xc2, 0xa0, 0xcd, 0xcc, 0x01, 0xfa, 0x1d, 0xde,
	0xb3, 0x27, 0xf6, 0xb0, 0x93, 0x3c, 0x0b, 0x5e, 0xcc, 0xdd, 0x39, 0xda, 0xfe, 0xa0, 0x94, 0xf9,
	0xd5, 0xfc, 0x57, 0x50, 0x91, 0x41, 0x65, 0x44, 0xf7, 0x68, 0xa5, 0x93, 0x52, 0xe4, 0x16, 0x86,
	0x7c, 0x02, 0x8b, 0x3d, 0xc5, 0x32, 0x78, 0xe0, 0x11, 0xc3, 0x3d, 0xc7, 0x18, 0x35, 0x49, 0x5b,
	0x11, 0x97, 0x3c, 0x62, 0xe8, 0x23, 0xb4, 0xfe, 0xe2, 0x42, 0x06, 0x71, 0x8a, 0xfb, 0x7a, 0x55,
	0x4c, 0x05, 0xe7, 0xfa, 0x6a, 0x53, 0x9e, 0x49, 0x81, 0x4f, 0xb4, 0x2b, 0xf9, 0xd5, 0x2e, 0x15,
	0x43, 0xf2, 0x00, 0xfa, 0x1a, 0x4c, 0x21, 0x23, 0xbe, 0x93, 0xd8, 0xce, 0x95, 0x39, 0x2a, 0x78,
	0x96, 0x65, 0x78, 0x50, 0xf1, 0x2c, 0xcb, 0xd0, 0x0f, 0x00, 0xe2, 0x20, 0x24, 0xdb, 0x06, 0x1b,
	0xbe, 0xc6, 0x48, 0x0f, 0x32, 0x28, 0xcd, 0xf6, 0x75, 0x44, 0x5d, 0x8d, 0x25, 0xca, 0xe3, 0xf0,
	0x17, 0xe8, 0xbd, 0xb2, 0x1f, 0xd9, 0x50, 0xff, 0x9b, 0x1d, 0xf4, 0xd2, 0x5b, 0x44, 0x1d, 0xd5,
	0x35, 0xec, 0xc3, 0xcd, 0x8e, 0x15, 0x8b, 0x9e, 0x83, 0x9f, 0x6b, 0xe7, 0xc6, 0xe9, 0x3f, 0x06,
	0x58, 0x55, 0x55, 0xa5, 0xdc, 0x8a, 0x75, 0xa9, 0xdc, 0x8a, 0xb5, 0x52, 0x6e, 0xd8, 0x9e, 0x6d,
	0x4a, 0xa5, 0x06, 0xe8, 0x0c, 0xcc, 0xc7, 0x98, 0x6d, 0x22, 0x81, 0xeb, 0x7a, 0xee, 0x6f, 0xdf,
	0x34, 0x38, 0xbe, 0xd2, 0xf1, 0x7c, 0x1f, 0x8a, 0xe4, 0xe1, 0x05, 0x74, 0x5e, 0xd0, 0x5f, 0xd4,
	0xe7, 0x07, 0x40, 0xb7, 0x59, 0x2c, 0x99, 0x5e, 0x37, 0xc2, 0x44, 0xca, 0x13, 0xc1, 0xbe, 0xfb,
	0xcf, 0x80, 0x86, 0x7a, 0xcc, 0xa8, 0x03, 0xad, 0xd5, 0xe2, 0x8f, 0x85, 0x77, 0xbb, 0xb0, 0xdf,
	0x21, 0x0b, 0x9a, 0x3e, 0x9d, 0x52, 0xd7, 0x36, 0x50, 0x1f, 0xc0, 0xa7, 0x53, 0x42, 0x03, 0x3a,
	0xbf, 0x71, 0xed, 0x1a, 0xea, 0x42, 0xdb, 0x5d, 0xcc, 0x72, 0x54, 0x57, 0x2a, 0x6f, 0x45, 0x97,
	0x2b, 0xea, 0xdb, 0x0d, 0x15, 0xba, 0x71, 0xe9, 0x74, 0x36, 0xa5, 0x53, 0xbb, 0x89, 0x3e, 0xc2,
	0x7b, 0xf7, 0xce, 0xbd, 0x5c, 0x51, 0x8f, 0x04, 0x2f, 0x2a, 0x98, 0xe8, 0x2b, 0x18, 0x54, 0x81,
	0xaa, 0x54, 0x0b, 0xf5, 0xc0, 0x72, 0xef, 0xe6, 0x34, 0xb8, 0xf4, 0x66, 0xae, 0xdd, 0x56, 0x95,
	0x7f, 0xf3, 0x7c, 0x1a, 0xcc, 0x97, 0xb6, 0xa5, 0xfa, 0x59, 0x7a, 0x84, 0xfa, 0x36, 0x20, 0x00,
	0xd3, 0xa7, 0x33, 0x6f, 0x45, 0xed, 0x4e, 0x71, 0x76, 0x09, 0xb1, 0xbb, 0xfa, 0xfc, 0xa7, 0x7f,
	0xed, 0xfd, 0x6a, 0xf7, 0x26, 0x73, 0xe8, 0xea, 0x29, 0x7d, 0x96, 0xed, 0xe3, 0x07, 0xfd, 0x73,
	0x78, 0x1e, 0x1d, 0xf5, 0x5e, 0x3d, 0xbc, 0xe1, 0xb0, 0x84, 0x6f, 0xdd, 0x39, 0x7d, 0x77, 0x6f,
	0xea, 0xcd, 0xff, 0xf1, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8c, 0xa4, 0x81, 0x87, 0x62, 0x05,
	0x00, 0x00,
}
