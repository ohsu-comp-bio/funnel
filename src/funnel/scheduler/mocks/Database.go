package mocks

import context "golang.org/x/net/context"
import funnel "funnel/proto/funnel"
import mock "github.com/stretchr/testify/mock"

import tes "funnel/proto/tes"

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// AssignJob provides a mock function with given fields: _a0, _a1
func (_m *Database) AssignJob(_a0 *tes.Job, _a1 *funnel.Worker) {
	_m.Called(_a0, _a1)
}

// CheckWorkers provides a mock function with given fields:
func (_m *Database) CheckWorkers() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWorkers provides a mock function with given fields: _a0, _a1
func (_m *Database) GetWorkers(_a0 context.Context, _a1 *funnel.GetWorkersRequest) (*funnel.GetWorkersResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *funnel.GetWorkersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *funnel.GetWorkersRequest) *funnel.GetWorkersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*funnel.GetWorkersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *funnel.GetWorkersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadQueue provides a mock function with given fields: n
func (_m *Database) ReadQueue(n int) []*tes.Job {
	ret := _m.Called(n)

	var r0 []*tes.Job
	if rf, ok := ret.Get(0).(func(int) []*tes.Job); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*tes.Job)
		}
	}

	return r0
}

// UpdateWorker provides a mock function with given fields: _a0, _a1
func (_m *Database) UpdateWorker(_a0 context.Context, _a1 *funnel.Worker) (*funnel.UpdateWorkerResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *funnel.UpdateWorkerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *funnel.Worker) *funnel.UpdateWorkerResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*funnel.UpdateWorkerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *funnel.Worker) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
