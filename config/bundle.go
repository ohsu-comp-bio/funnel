// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xeb\x6f\x23\xb7\x11\xff\xae\xbf\x62\x6a\x5f\xd1\x3b\x40\x2b\xcb\x09\x52\x34\x02\xfc\xc1\xaf\xf8\xdc\xdc\xf9\x54\x49\xee\xb5\x9f\x0c\xee\x72\x56\xcb\x78\x97\xdc\x90\x5c\xe9\x14\xd7\xff\x7b\x31\x7c\xec\x4a\xb2\xfc\x48\x63\x04\x29\x70\x07\x1c\x60\x91\xc3\x99\xe1\xcc\x70\x1e\xbf\x9d\xa2\x5e\xa0\x1e\xf5\x00\xf6\xe1\xbd\x32\x56\xb2\x0a\x41\xe5\x60\x0b\x84\x1f\x1a\x29\xb1\x04\xe3\x48\x06\x3d\x70\x04\x57\xac\xc2\x11\x94\x2a\x63\x65\xa1\x8c\xed\xb9\x93\x63\xa5\x2d\x34\x06\x39\xe4\x4a\xc3\xfb\xd9\x6c\x0c\x99\xaa\xaa\x46\x8a\x8c\x59\xa1\x24\x30\xc9\x1d\xcb\x25\xa6\xc0\x99\x29\x52\xc5\x34\x77\x2c\x67\xb3\x31\x9d\x1e\xc1\xdf\x86\xc3\xe1\x2e\x6e\x93\xf1\xe9\x26\x33\x3a\x36\x19\x9f\xfa\x53\xdf\x0f\xbf\x0f\xa7\x26\xf8\x73\x23\x34\x42\xca\x8c\xc8\x80\x35\xb6\x40\x69\xa3\x7c\x62\x44\xf2\xfd\x5d\xe0\x78\x7c\x69\xa0\x31\x42\xce\x81\x41\xcd\x8c\x59\x2a\xaf\xce\x3e\x5c\xe6\x4e\x74\x1f\x2a\x76\x8b\x60\x1a\x8d\x60\x15\xd4\x5a\xd5\xa8\xcb\x15\x68\x34\x56\x8b\xcc\x02\xcb\x32\x34\x86\xf6\x88\x6f\xa6\x64\x2e\xe6\x90\x8b\x12\x1d\x97\xb7\x38\x98\x0f\x20\x2b\x2a\xc5\xe1\xaf\xc3\x21\xe4\xce\x94\x03\x4f\x36\x58\x55\xe5\x3b\x7f\xd3\x20\x7a\x04\x2c\xcd\x0e\xbf\xf9\xd6\xdf\xe4\x52\x66\x65\xc3\x11\x18\xec\x9d\xb2\xac\xc0\xe4\x54\x49\xab\x55\x39\x02\xa9\x12\x63\x95\xc6\x3d\x6f\xe3\x02\x19\x47\x0d\x42\xc2\x05\xda\x83\x0f\xc2\x58\xd2\xaf\x56\xd2\xa0\x71\x9c\x9c\xe6\xb8\x40\x69\x21\x63\x59\x41\xf7\x4d\x57\x20\xa4\x45\x5d\x21\x17\x4c\xaf\x9c\x45\x44\x86\x86\x6e\x7f\x26\x0c\x4b\x4b\x24\xde\x4e\xf0\x08\xac\x6e\xd0\x2b\x35\x2b\x10\xd6\x83\x83\x65\x56\x2c\x5a\x83\x72\x66\x59\xca\x0c\x59\x3f\xbb\x45\xc9\xdd\x91\xe3\x05\x13\x25\x31\x8c\xab\x66\x04\xa9\x2a\x2d\x4f\xfb\xc0\x57\x92\x55\x8a\xfe\xc2\x92\x19\x2b\xb2\x3e\x54\x4a\xce\x15\x4f\x49\x8f\xc0\x2d\x92\xaf\x2d\x19\x0a\x55\x80\x13\x55\xda\xb3\x13\xff\xb7\x37\xa4\x2d\xa2\x2f\x5a\x5d\x82\x37\xe8\x1f\xed\x8f\x60\x70\xe0\xfd\x90\x2c\x95\xbe\x4d\xb8\xd0\xe1\xf7\x80\xa7\xbd\x9e\x67\x74\xe6\xf4\x8a\xac\xf7\xdd\xff\x13\x66\xd0\x5d\xdd\x2a\x8a\x0d\x17\x4c\x51\x7f\xb0\x74\x41\xd3\x52\xcf\xe8\x67\x3c\x30\x82\x3d\x2f\x60\x6f\x8d\xdb\xf1\xe7\x29\x68\x9c\x0b\x25\xdb\xc5\x89\xfb\x39\x82\xbd\x6d\xba\x63\x1f\x64\xb7\xb8\x82\xcb\xb3\x76\xef\x47\x5c\xed\xa0\x9d\x62\xa6\xd1\xc6\x23\x3f\xe2\xaa\xdd\xf7\x3b\xee\x48\x58\x3b\xf7\x36\x5f\xbf\xe4\x58\x63\x2e\xbe\xac\x5f\x51\x48\x8e\x5f\xd0\xc0\x5b\xcb\xcc\x6d\x1f\x5c\x18\x99\x3e\x48\xc5\xd1\xbc\x6b\x4f\x5e\x12\x95\x3f\xbc\xf3\xba\xd7\x93\x0f\x31\x64\x82\xa7\x0d\x32\x9d\x15\x6b\x69\xc5\x93\x5e\x4f\x3e\x8c\xa0\xb0\xb6\x1e\x1d\x1c\xb4\xe9\x65\xf4\xfd\x37\x3e\x2b\x10\xcd\x47\x0a\x90\x4d\xd7\x1c\x73\xae\x0d\x14\xaa\xe4\xc6\x47\x25\xe7\x1a\x8d\x41\xb3\xf6\xe2\x91\x07\x59\xa6\x13\xe6\xce\x75\x8c\x00\x12\xd8\x6b\x85\xae\xab\x1f\xe3\x0e\x84\xd9\x0c\x2e\x17\x10\x2e\x49\x2d\x85\x2d\x84\x8c\xda\x91\x05\xdd\x1b\x0d\x6f\xde\x9d\xe8\x04\x77\xa1\xfd\xc0\x56\xd7\x06\x75\x88\x9a\x6e\xb1\xcb\x10\xde\x7b\x1f\xd4\x7c\xee\xf3\x35\xed\xd3\x2f\x7a\xd4\x25\x2e\xb0\x34\x23\xe0\x98\x36\xf3\x3e\x08\x99\xab\x3e\xa0\xd6\x4a\x3b\xc2\x0f\xb4\x3d\x72\xcb\xe1\xe0\x67\x2d\x2c\x42\xa9\xe6\x21\x83\x09\x03\x35\xb3\xc5\x80\xd2\x1f\x56\xb5\x5d\xf5\xfd\x26\xd3\x08\x4b\x2d\xac\x45\xe9\x2f\xc6\x51\x07\x9f\x7d\x6a\x6c\xdd\xd8\x1f\x44\xe9\x15\xee\xf9\x14\x61\xb2\x02\x79\x53\x52\x56\x32\x5d\x0e\x27\xcb\x7d\x64\xb2\x61\x25\xa5\xf2\xba\xb1\x6d\x4a\x18\x40\x6f\x1a\x8f\xc4\x2a\xb4\x04\x95\x07\x81\xba\x91\xc0\xd6\x99\x5a\xd4\x6d\x11\xa0\x4c\x09\x92\x49\x65\x30\x53\x92\x3b\xf7\x46\x66\x13\x66\x71\x04\x87\xc3\xf8\x0f\xf6\xe1\x10\x3c\x5d\x2b\xa5\x62\x72\x05\x14\xdc\xce\x08\x51\x08\xa5\x53\x25\x71\x53\x54\x64\x7b\x5a\x34\xf2\x96\xf8\xb6\x4c\x4a\x25\xe7\x74\x7c\xc9\x84\x85\x14\xed\x12\x51\x42\x53\x73\x66\xd1\x40\x8a\x39\x45\x42\xc5\xf4\xad\xaf\x35\xf4\x78\x80\x23\xe3\x8f\xe9\x7f\xa5\x38\x8e\x85\x9c\xcf\x44\x85\xaa\xb1\x23\xaa\x1e\x1b\x77\xa8\x84\x6c\x2c\xee\x16\x4f\xa6\x0e\x32\x9c\xb3\x98\xb6\xfd\x6d\x1d\xc8\x15\x2f\xd2\xe2\x52\x0a\xdb\x6a\xf1\xed\x70\x43\x8d\xef\x82\x1a\x26\xd0\xc6\x78\xec\xa2\x27\xa8\x71\x79\x06\x4b\x51\x96\x90\x22\x55\x64\x55\x31\xaa\xc8\x65\xb9\x82\x39\x4a\x32\x2f\x72\x1f\x4c\x97\x67\xeb\xe9\x89\x82\xca\x40\xa6\x91\x08\x80\x37\x9a\x14\xaf\xb5\xa2\xcc\x46\x7f\x46\x96\x31\x32\x85\xf4\x21\xcc\x85\xc6\xcc\x2a\xbd\xf2\x4c\x3f\x2b\x7d\x7b\x26\xf4\x8e\xbc\xdf\xa9\xdb\x9a\xa3\x60\xe4\x2e\x62\xc6\x4b\x9f\xff\xc8\xb4\x48\xb1\xcb\xa4\x23\xb3\xde\x18\x7d\x10\xd6\x6b\x60\x8a\xc6\x02\x57\x4b\x19\x9f\x77\x72\x08\x15\x32\xe9\x32\x85\x76\x29\x43\xaa\x78\x6c\x00\xc3\xb8\xe9\x17\x40\x54\xae\x06\x5b\x2c\x57\xc0\x72\x8b\xfe\x99\xe4\x42\x1b\xeb\xa2\xd2\x73\x6d\x5d\x90\x1c\x46\xf3\x1c\x3b\x9b\x7b\x1d\x36\xad\x6a\xf5\x8a\x3c\xcf\xd1\x62\x66\x61\x59\x30\xd7\x10\xa8\x46\x67\xe8\xdf\x32\x6b\x4b\xb2\x55\x20\xec\x00\x62\xd9\xc3\x5c\x48\x32\xed\xa4\x25\x17\xfe\xd6\x4e\x94\xef\x5b\x1a\xff\x1e\x40\x2d\x50\x6b\xc1\xd1\x78\xab\xa7\x58\xb0\x85\x50\x21\x2d\xb4\x0c\xba\xe2\x7c\x3a\xbe\x36\x9d\xe4\x41\xb7\x5e\x37\x66\x04\x21\xbd\xbb\x16\xee\xf8\x63\x47\xd7\x77\x7d\xcd\x49\x47\x3e\x61\xd5\x45\x3a\x82\xe1\x60\xed\xc4\x99\x30\xb7\x60\x6a\x96\xe1\x13\x07\x89\x68\xe3\xe4\x3e\xfc\xe0\xfc\xbb\x4c\x5c\xe2\x04\xdb\xd0\xdd\xa3\x17\x37\x12\x90\x59\xc9\xcc\x65\xf8\xdd\x1d\xf1\xee\xe7\x03\x70\xed\x12\x80\x4f\x42\xdf\x6d\xbe\x9c\x40\x17\x0e\x53\x77\x1b\x03\x82\x82\xce\x67\x8e\x03\x27\x96\x7c\xfa\xbc\x90\x36\x40\x76\x27\x3b\x5f\x00\xd6\xaa\xc6\xaf\xa8\x1b\x0f\x2b\xc7\x2b\xd5\x8e\x87\xd5\xa3\xf7\x68\x87\xb9\x55\x30\x7a\xbb\xfb\x4a\x57\xbc\xfb\x50\x58\xba\xb4\xd2\x7d\x30\x65\xa3\xab\x3e\xd4\xa9\xe9\xc3\x9c\xa2\x55\xce\x85\x44\x6a\xeb\xa9\x0c\xf5\x81\x2d\x4d\x92\x32\x9b\x15\xbd\x13\xcf\x24\xf0\x20\x4d\xda\x8a\x14\x05\x84\x07\x10\x49\x5d\x6c\xbf\x9f\x9d\x3a\x51\xde\xaa\x33\xac\xea\xd2\xb9\xfb\x3f\xe1\x86\x8d\x14\xd4\x73\x20\x1c\xc1\x82\x49\x51\x96\x2c\x6c\xcc\xd1\xa2\x5c\xc0\x11\xcc\xa8\xb9\xf6\x6b\xf8\x05\xb3\xc6\xb5\x92\x70\x04\x77\x77\x83\xf3\xf6\xf7\xfd\x7d\x20\x61\x7a\xde\x54\xd4\x82\xc1\x11\x50\x1e\x43\xed\xaa\x63\x92\x84\xd9\xe3\xee\x6e\x70\xea\xfe\xba\xbf\x87\x24\xa1\x04\x92\x08\x4e\xab\x33\x66\x6e\x2f\x79\xcb\xa7\x54\x73\x2f\x23\xa4\xc7\xfb\xfb\x03\x6f\xb3\xc4\x75\x78\x49\xa9\xe6\x51\x29\x0a\x84\x6d\xda\x90\x49\xbd\x37\x03\xa1\x72\xce\x7c\x9c\x52\x35\x36\x50\x9a\x42\x35\x25\xbf\xb1\x9a\x49\x93\xa3\xbe\xc9\x5d\xa6\x3f\x82\x7f\x9f\x4f\x03\xc5\xb2\x40\x79\x63\x55\x47\xd2\x32\xff\x74\x75\x73\xfe\xaf\xcb\xd9\xcd\xa7\xc9\xcd\xf9\x3f\x2f\x4f\x67\xe1\xc0\xdd\x9d\xc8\x41\x22\x0c\x28\x9d\xc0\x10\x92\xf6\xa6\x77\x77\xb5\x16\xd2\xe6\xb0\xa7\xf1\xe7\x06\x8d\xbd\xc9\x88\xe4\x08\xfe\xcc\xf7\x3c\xf9\x1a\x69\x02\x28\xf9\xda\xef\xc0\xd4\x25\x1d\xca\x1c\x4f\xf2\xad\xb0\x52\x7a\x45\x9c\x07\xc3\x1c\x2e\x4e\xf6\xc2\xc1\xe7\xf9\xfb\xdc\xf4\xac\x00\x4e\x79\x6e\x9d\xbd\x3f\xb7\x83\x7f\x58\xf8\xb9\x41\x3f\xb9\x8d\x4f\xa6\x8f\x45\xe8\xfe\x9f\x52\x21\x0f\x52\x66\x8a\xb8\x30\x3e\x99\x42\x72\x45\x6e\x74\x1d\x40\xa7\xaf\xdf\x51\xcf\x3b\xd8\x13\xe2\xf3\x31\xf3\x12\xb7\x79\x66\xa5\x1f\x39\x8e\x0e\x47\x75\x2d\x8f\x5e\xcd\x77\x91\x79\x85\xd5\x11\xd9\x75\x9e\xbe\x9a\xd7\x22\x6b\x8a\xee\x8e\xf7\x73\x2e\xdb\x7a\xf6\xff\xe3\x23\xef\x01\x5c\x68\xc1\xcf\x5d\xba\x7b\xb9\xe7\xdf\x3c\xe2\xf7\x37\x2f\xf3\xfa\x9b\x17\xf9\x9c\xc8\x5a\x6f\xfe\x9a\x38\x78\x03\x49\x8d\x50\xd5\xe2\xf5\x9e\xae\xd7\xa5\xb8\x59\x44\xff\x5f\xbc\x9e\xfb\x03\xeb\xdc\x88\x5f\xb0\xe5\xfd\xfb\xb8\x1f\xa8\xa3\x9b\x7e\xb8\x9e\x7c\x7c\xdc\xf7\x07\xdb\xce\x9f\x9e\x1c\xcf\x4e\xdf\x43\x92\xfc\xa4\xd2\xc4\x95\xe0\x1d\x91\xd0\x12\x49\x3f\x32\x1d\x3e\xd8\xf0\xf5\xe2\xf9\x28\x68\x0f\x84\xd4\xfe\x6c\x78\xbd\x28\x46\x5a\xae\x94\xe4\x93\x1a\xb5\xb3\xcf\x2b\x06\x4c\x2b\xa0\xc2\xca\x65\xe2\x57\xcc\xf3\x1d\x73\x5b\xd5\x1d\xf3\xdf\x2d\x65\x38\x08\xe9\x84\xda\x21\xe0\x68\x32\x2d\x52\x34\x6b\xc0\x66\xec\xfc\xe3\x2c\x7f\xfc\x79\x0a\x9e\x7a\x7b\x9c\xef\x41\xcb\x29\x0e\x85\x7f\x57\xa9\x1f\x2f\x1c\x8b\x8c\x49\x1a\xdd\x50\xd0\x8c\x44\x63\xa2\xeb\xf8\x02\xdb\x8a\xfd\xa2\x64\x3b\x42\xc0\x15\xed\xbd\x3d\x9e\x5c\xbd\xf3\x6d\xe3\x06\xa7\x16\x41\x71\x51\xcb\x31\xdf\xeb\xe4\xfd\x83\xaa\xdf\x6f\x15\xe5\x98\x6c\x4a\x71\x55\x35\xca\xe9\x80\xbc\xd8\xb1\x9a\x1a\x33\x91\x0b\xe4\xf0\x93\x4a\x7d\x09\xf6\xc8\xb7\x0a\xc3\xac\xa3\xa2\x3d\xde\x19\x44\xc8\x30\x37\x6d\x60\x80\xeb\x18\xdf\x3a\x7e\xf7\xd9\x79\xd8\x23\x25\xaf\x32\x26\x3f\x31\x24\xb7\x42\x1c\xa0\xc5\xe6\x08\x66\x65\x2c\x56\x6e\xfc\xd8\x0f\xa8\xb0\x30\x1e\xe9\x69\xdc\x00\x6a\xd0\x6e\x8d\xa4\xe9\xca\x9b\x26\xb6\xd4\x7d\x48\x1b\x0b\x2b\xd5\x40\x25\xe6\x85\x05\x89\xc8\x9d\x5a\x8e\x9f\xc8\x69\xeb\x2f\x1a\x3d\x7a\xe1\x41\x93\x10\xd5\xbe\x73\x2f\x9d\xd6\x53\xaf\x50\x87\x83\x65\xcc\x97\xdb\xa0\xe2\x20\x8c\x3d\x19\x2b\xbb\xa9\xe7\x73\x21\x2c\x96\xc2\x58\xf2\x97\x6b\xf6\x3b\x53\xb8\x11\xc6\xc0\xb2\x10\x59\x11\xc7\x3c\x61\x80\x95\xa5\x5a\xa2\xf3\xa0\x07\xfc\xe3\xfc\x72\xec\x37\xce\x84\x6e\x07\x5d\x80\x04\x06\x07\xfe\x69\xfa\xf0\x9a\x7e\x1b\xf7\x02\xb2\xce\x47\x90\xb3\xd2\x60\xab\x12\xcd\x3c\x15\xfb\x22\xaa\xa6\x02\xd9\x54\x29\x6a\x17\x4b\xa2\x72\xcf\x8f\x59\x60\x10\x5a\xc0\xd6\x9b\x1a\xad\x16\x01\x57\xcb\x99\x28\x1b\x8d\xad\x56\x1f\xd9\x97\x89\xdb\x36\x01\xa3\x82\x27\xa0\xe4\xcd\x20\x7b\x1a\x46\xde\x05\x22\x5f\xa0\x44\x2d\xb2\x78\xc9\x7d\x67\x80\xee\xa2\x36\x4e\x37\x1e\x60\x3d\x97\xbc\x56\x42\xda\x0d\x74\xf3\x21\x96\xfd\x50\xd0\xc5\xf4\x39\x23\x46\xf0\x9f\x65\x99\x6a\xa4\xa5\x17\xc1\x51\x5a\xc1\x4a\xe3\x62\xa2\x43\x02\x3e\xd5\xf4\xe4\x58\xe9\x66\xd5\x5a\x19\x23\x1c\x5e\xb0\x7e\x60\x37\x5c\xc5\x85\xc9\xd4\x02\x35\xf2\x96\x57\xae\x55\xe5\x61\x6d\xb9\x10\x5a\x49\x9a\xcd\xda\xe8\xf0\x9a\x74\xe3\x2d\x44\xbc\xe9\x37\x08\x7d\x4a\xe4\x74\x29\x72\xfb\xb4\x9d\xae\x0d\xea\xab\x75\x78\x79\x0b\x5c\x0e\x9a\x37\xb6\x70\x48\x7c\xbb\x32\x43\xc9\xa4\xdd\x3a\xe9\x17\x03\x6a\xe7\x97\x7c\x02\x6b\xe9\x7a\x4f\xc1\x2c\xdb\x20\x0b\x8d\xd8\xae\x5a\xd3\x70\x1a\xc1\xd3\xf0\x39\xe7\x01\xe6\xb2\x0b\x0c\x79\x01\xde\xe2\x4e\x7e\x0c\x6f\xad\x15\xf6\xd6\x37\x1a\x07\xa8\xf5\x3b\xa0\x7e\xcd\xa1\x47\xe9\x2a\x28\x90\x36\x79\x8e\x7a\x1b\xd7\x25\x89\x27\x6e\x67\x2a\x7e\x89\x30\x33\xec\xc3\xe1\x10\x7e\x3c\x79\xf2\x73\x99\x93\xab\xfd\x67\xbb\xb5\x92\xb9\x1b\xd3\xd0\x75\xf6\xcc\x87\x32\x2a\xe1\x13\xc7\xcd\x51\x6f\xac\x98\xd1\xd7\x6f\x5a\x5f\xbf\x69\xfd\x3f\x7c\xd3\x7a\xf4\xb5\xf8\x2f\xd7\xd4\xbe\xbc\xf8\xb9\x94\x6a\xfe\xcc\x9b\x39\x76\xbc\xcf\x89\xb5\x43\x32\xb5\x19\x79\x14\x3c\x09\x4f\x88\xfe\xf2\x20\xd8\x06\x51\x50\xdf\xa3\x9f\x3e\x70\x1c\x12\x0e\xf3\xc9\xf8\xd4\xb7\x70\xe3\xd3\xae\xd9\x78\x19\xb0\xfb\x18\xb4\xbb\x86\xfb\x3f\x01\xeb\xee\xc3\x4c\x33\x69\x68\xbe\x8b\x1a\x51\xbb\xe9\x5d\x65\x0b\x14\x9a\xfa\x77\x4b\x46\x14\xb2\x4d\x03\x83\xaf\x69\xe1\x6b\x5a\xf8\xa3\xa7\x05\xff\x08\xfe\xc8\x1f\xbc\xff\x1b\x00\x00\xff\xff\xd7\x1a\x07\xcc\x3a\x25\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 9530, mode: os.FileMode(420), modTime: time.Unix(1512161830, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\x03\x31\x14\x85\xf7\xf3\x14\xd7\xa9\x5d\x26\x33\x2f\xe0\xaa\x95\xe2\xc6\x85\x08\x2e\x25\xd3\xdc\xd8\x4b\x66\x92\x21\x3f\x2a\x86\xfb\xee\x32\x69\x11\x0a\x63\x77\x87\xc3\x77\xbe\xc5\xd9\xdc\x75\x03\xb9\x6e\x50\xf1\xd4\x6c\xee\x41\x3c\x43\x29\xf2\x55\x45\xfb\xa4\x99\x6b\xe3\x97\xe6\xcd\x07\xbb\xa7\xc0\xdc\x99\xec\x1c\x8e\x22\x26\xed\x73\xaa\x00\xfe\x07\x60\x08\x4d\x29\x64\xc0\x21\xc8\xdd\x9c\x23\xf4\x20\x98\x9b\x52\xe6\x40\x2e\x19\x68\x97\xf9\x8c\x30\xcd\x04\x5b\xdd\x9e\xa1\x0a\x08\x40\xa7\x6b\xba\xcc\x5f\xd4\x74\x18\xa0\x97\x6b\x86\x11\x4e\xef\x9f\x13\x4e\x0f\x5b\xd9\x9b\x43\x7b\x81\xd7\x3d\x7b\x8a\xf6\xa6\xc8\x44\xfa\xc1\x3f\xd3\x19\xbf\x52\x35\xa5\xc8\xc7\x6f\x3c\xe6\xa4\x86\x11\x99\xe1\xcb\x07\x8b\x01\x42\x76\x20\xc4\xd1\x3b\x43\x1f\xcb\x23\xbb\x9a\x98\x41\x88\xa4\xa2\x15\xa4\xaf\xae\xfd\x0d\x00\x00\xff\xff\x24\x76\x8a\x2a\x79\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 377, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xcd\x6e\xe2\x30\x10\xc0\xf1\xbb\x9f\x62\x84\xb4\x47\x67\x79\x81\x5c\x16\x22\xc4\x65\x91\x68\xd4\x8f\x53\x64\xe2\x49\xb0\xe2\x8c\x61\x6c\x87\x56\x91\xdf\xbd\x0a\x20\x2a\xaa\xd2\xdb\x24\xf3\x9f\x9f\x1c\xc9\x0c\xc8\x1e\x21\x87\x41\x91\xb1\x56\x89\x16\x03\xd2\x00\x39\x94\x1c\x51\xe0\x3b\xd6\x31\xa8\x9d\x9d\x92\x71\xcc\x8a\xdb\x77\x4a\x42\x71\x1b\x7b\xa4\xe0\x21\x87\x93\xe3\x0e\x19\x38\x12\x48\x59\x3b\x6a\x4c\x3b\xf5\x8b\xf3\x94\x12\x48\x19\x94\xef\xa4\xd1\xd3\xdf\x52\xf9\x6e\xad\x53\x12\xd6\xb5\x17\xf7\xc5\x71\xb7\x34\x9c\xd2\xdf\xda\x91\x76\x2c\x71\x40\x0a\xd2\xba\x56\x20\xb3\xe3\xef\x55\x13\x89\xd0\x4a\x1f\x34\x32\x0b\x17\xc3\x21\x86\xc7\x8d\x8b\x41\xf8\xbd\x8b\x56\x57\x81\x15\xf9\x06\xb9\x6a\x8c\xc5\xe9\xe1\x6f\xc5\x93\x38\xed\x91\xaa\xe0\xbe\x96\x37\x70\xf3\xbf\x2a\x5e\xd7\x65\xb5\xd9\x56\xc5\xf3\x7a\x51\x8a\x71\x34\x0d\x10\x42\xb6\x38\x44\x0f\x73\x90\x29\x89\x71\x3c\xb0\xa1\xd0\xc0\x8c\xf1\x18\xd1\x87\xaa\x9e\x96\x39\xfc\xd1\xb3\x4b\x78\x8e\x24\x20\xe9\xf3\x74\x25\xb6\xaa\x5f\xed\x60\x9e\x3d\x52\x7a\xec\x1d\x7f\x4c\x4e\x36\x6f\x60\xf5\x6f\x76\x3d\xf9\x59\x5b\x1a\xdf\xfd\xca\x69\xe3\xbb\x3b\xec\x72\x71\xa7\x89\x63\xc4\x88\xe2\x33\x00\x00\xff\xff\x5f\xc0\xd7\xf8\x18\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 536, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xcf\x4a\x03\x31\x10\xc7\xf1\xfb\x3e\xc5\xd8\xd2\x63\xb2\xeb\x55\xd8\x8b\xad\x88\x17\x11\x15\x3c\x27\xcd\xa4\x86\xec\x4e\x96\xfc\x41\x21\xcc\xbb\x4b\x77\x17\xa4\x60\xbd\x0d\xc3\x97\xcf\xe1\xb7\xbd\x69\xb5\xa3\x56\xab\xf4\xd9\x6c\x5f\xee\xdf\x40\x3c\x43\xad\xf2\x5d\x25\xff\x64\x98\xd7\x5f\x38\xff\x3e\x42\xf4\x07\x17\x99\x5b\x5b\x88\x70\x10\x29\x9b\x50\xf2\x9a\xe0\xb5\x04\x63\x6c\x6a\x75\x16\x08\x41\xee\xa7\x92\xa0\x03\xc1\xdc\xd4\x3a\x45\x47\xd9\xc2\x66\x01\x06\xa0\x60\x30\xf5\xb7\x77\xd3\x44\xfd\xce\x6c\x96\x7a\x2e\x05\x20\x99\xf9\x5a\x9d\x57\x35\x3e\x6a\xe8\xe4\x35\x6a\xc4\xb1\xdf\xc9\xce\x9e\xf4\x66\x8d\xff\x76\x0e\x2e\xf9\x7f\x21\xeb\x06\xfc\x95\x96\xfc\x82\x6a\x6a\x95\x0f\xdf\x78\x2c\x59\xe9\x01\x99\xe1\x2b\x44\x8f\x11\x62\x21\x10\xe2\x18\xc8\xba\xd3\x79\x9a\xfd\x7c\x31\x83\x10\x59\x25\x2f\x9c\xb9\xd8\xf9\x27\x00\x00\xff\xff\x80\x45\x84\x4d\x88\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 392, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcf\x6a\xc3\x30\x0c\x87\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\xe9\xe8\x76\xdd\x0a\x3b\x3b\x8d\xb2\x79\x6e\x64\x23\xdb\x6c\x60\xf4\xee\x23\x69\xa1\x29\xac\xf4\xf6\xc3\xfe\xf4\xa1\x3f\xab\x87\xba\x33\x54\x77\x3a\x7c\x15\xab\xf7\xcd\xd3\xbe\x7d\x01\xa5\xbe\x5d\xa7\x48\x8f\x08\x39\x57\x7b\x1d\xec\x6b\x2f\xb2\xf8\xa6\xa8\x83\x0d\xf0\xb8\x78\x42\x66\xc7\x13\xfe\xe1\xd8\x6e\x0d\x8b\xd4\x43\x22\xc2\xa3\x0a\xb1\x47\xe6\x05\xea\x52\xf4\x29\xde\x62\x5d\x8a\x45\xce\x66\x00\x42\xa8\x5a\x9f\x02\x34\xa0\x44\x8a\x9c\x3d\x1b\x8a\x03\x94\x17\xd3\xc1\xa7\xa0\x3c\xb2\x9a\xfa\x81\x75\x5f\x9e\x2a\x66\x5a\x01\x52\x3f\xa7\xb3\xeb\x4d\x8f\xbb\x0e\x9a\xea\xb6\x6e\xc4\x11\xd6\x55\x33\xec\x36\xe5\x19\xff\xdf\xb4\x35\xc1\xde\x51\xc5\xd1\x5f\x54\x27\xfe\xca\x55\xe4\x5c\x3d\xff\xe2\x21\x45\xdd\x1d\x51\x04\x7e\x1c\x5b\x64\xe0\x44\xd3\x5c\x8e\x06\xf3\x39\x6d\xa8\x9d\x93\xc8\xa4\xd4\xc1\x2a\xd3\x5f\x9d\xe4\x2f\x00\x00\xff\xff\x36\x8f\xbd\x5a\xbe\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 446, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
