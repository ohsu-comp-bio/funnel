/*
Task Execution Service

## Executive Summary The Task Execution Service (TES) API is a standardized schema and API for describing and executing batch execution tasks. A task defines a set of input files, a set of containers and commands to run, a set of output files and some other logging and metadata.  TES servers accept task documents and execute them asynchronously on available compute resources. A TES server could be built on top of a traditional HPC queuing system, such as Grid Engine, Slurm or cloud style compute systems such as AWS Batch or Kubernetes. ## Introduction This document describes the TES API and provides details on the specific endpoints, request formats, and responses. It is intended to provide key information for developers of TES-compatible services as well as clients that will call these TES services. Use cases include:    - Deploying existing workflow engines on new infrastructure. Workflow engines   such as CWL-Tes and Cromwell have extentions for using TES. This will allow   a system engineer to deploy them onto a new infrastructure using a job scheduling   system not previously supported by the engine.    - Developing a custom workflow management system. This API provides a common   interface to asynchronous batch processing capabilities. A developer can write   new tools against this interface and expect them to work using a variety of   backend solutions that all support the same specification.   ## Standards The TES API specification is written in OpenAPI and embodies a RESTful service philosophy. It uses JSON in requests and responses and standard HTTP/HTTPS for information transport. HTTPS should be used rather than plain HTTP except for testing or internal-only purposes. ### Authentication and Authorization Is is envisaged that most TES API instances will require users to authenticate to use the endpoints. However, the decision if authentication is required should be taken by TES API implementers.  If authentication is required, we recommend that TES implementations use an OAuth2  bearer token, although they can choose other mechanisms if appropriate.  Checking that a user is authorized to submit TES requests is a responsibility of TES implementations. ### CORS If TES API implementation is to be used by another website or domain it must implement Cross Origin Resource Sharing (CORS). Please refer to https://w3id.org/ga4gh/product-approval-support/cors for more information about GA4GHâ€™s recommendations and how to implement CORS. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tes

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TesExecutor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TesExecutor{}

// TesExecutor Executor describes a command to be executed, and its environment.
type TesExecutor struct {
	// Name of the container image. The string will be passed as the image argument to the containerization run command. Examples:    - `ubuntu`    - `quay.io/aptible/ubuntu`    - `gcr.io/my-org/my-image`    - `myregistryhost:5000/fedora/httpd:version1.0`
	Image string `json:"image"`
	// A sequence of program arguments to execute, where the first argument is the program to execute (i.e. argv). Example: ``` {   \"command\" : [\"/bin/md5\", \"/data/file1\"] } ```
	Command []string `json:"command"`
	// The working directory that the command will be executed in. If not defined, the system will default to the directory set by the container image.
	Workdir *string `json:"workdir,omitempty"`
	// Path inside the container to a file which will be piped to the executor's stdin. This must be an absolute path. This mechanism could be used in conjunction with the input declaration to process a data file using a tool that expects STDIN.  For example, to get the MD5 sum of a file by reading it into the STDIN ``` {   \"command\" : [\"/bin/md5\"],   \"stdin\" : \"/data/file1\" } ```
	Stdin *string `json:"stdin,omitempty"`
	// Path inside the container to a file where the executor's stdout will be written to. Must be an absolute path. Example: ``` {   \"stdout\" : \"/tmp/stdout.log\" } ```
	Stdout *string `json:"stdout,omitempty"`
	// Path inside the container to a file where the executor's stderr will be written to. Must be an absolute path. Example: ``` {   \"stderr\" : \"/tmp/stderr.log\" } ```
	Stderr *string `json:"stderr,omitempty"`
	// Enviromental variables to set within the container. Example: ``` {   \"env\" : {     \"ENV_CONFIG_PATH\" : \"/data/config.file\",     \"BLASTDB\" : \"/data/GRC38\",     \"HMMERDB\" : \"/data/hmmer\"   } } ```
	Env *map[string]string `json:"env,omitempty"`
	// Default behavior of running an array of executors is that execution stops on the first error. If `ignore_error` is `True`, then the runner will record error exit codes, but will continue on to the next tesExecutor.
	IgnoreError *bool `json:"ignore_error,omitempty"`
}

type _TesExecutor TesExecutor

// NewTesExecutor instantiates a new TesExecutor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTesExecutor(image string, command []string) *TesExecutor {
	this := TesExecutor{}
	this.Image = image
	this.Command = command
	return &this
}

// NewTesExecutorWithDefaults instantiates a new TesExecutor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTesExecutorWithDefaults() *TesExecutor {
	this := TesExecutor{}
	return &this
}

// GetImage returns the Image field value
func (o *TesExecutor) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *TesExecutor) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *TesExecutor) SetImage(v string) {
	o.Image = v
}

// GetCommand returns the Command field value
func (o *TesExecutor) GetCommand() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
func (o *TesExecutor) GetCommandOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Command, true
}

// SetCommand sets field value
func (o *TesExecutor) SetCommand(v []string) {
	o.Command = v
}

// GetWorkdir returns the Workdir field value if set, zero value otherwise.
func (o *TesExecutor) GetWorkdir() string {
	if o == nil || IsNil(o.Workdir) {
		var ret string
		return ret
	}
	return *o.Workdir
}

// GetWorkdirOk returns a tuple with the Workdir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TesExecutor) GetWorkdirOk() (*string, bool) {
	if o == nil || IsNil(o.Workdir) {
		return nil, false
	}
	return o.Workdir, true
}

// HasWorkdir returns a boolean if a field has been set.
func (o *TesExecutor) HasWorkdir() bool {
	if o != nil && !IsNil(o.Workdir) {
		return true
	}

	return false
}

// SetWorkdir gets a reference to the given string and assigns it to the Workdir field.
func (o *TesExecutor) SetWorkdir(v string) {
	o.Workdir = &v
}

// GetStdin returns the Stdin field value if set, zero value otherwise.
func (o *TesExecutor) GetStdin() string {
	if o == nil || IsNil(o.Stdin) {
		var ret string
		return ret
	}
	return *o.Stdin
}

// GetStdinOk returns a tuple with the Stdin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TesExecutor) GetStdinOk() (*string, bool) {
	if o == nil || IsNil(o.Stdin) {
		return nil, false
	}
	return o.Stdin, true
}

// HasStdin returns a boolean if a field has been set.
func (o *TesExecutor) HasStdin() bool {
	if o != nil && !IsNil(o.Stdin) {
		return true
	}

	return false
}

// SetStdin gets a reference to the given string and assigns it to the Stdin field.
func (o *TesExecutor) SetStdin(v string) {
	o.Stdin = &v
}

// GetStdout returns the Stdout field value if set, zero value otherwise.
func (o *TesExecutor) GetStdout() string {
	if o == nil || IsNil(o.Stdout) {
		var ret string
		return ret
	}
	return *o.Stdout
}

// GetStdoutOk returns a tuple with the Stdout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TesExecutor) GetStdoutOk() (*string, bool) {
	if o == nil || IsNil(o.Stdout) {
		return nil, false
	}
	return o.Stdout, true
}

// HasStdout returns a boolean if a field has been set.
func (o *TesExecutor) HasStdout() bool {
	if o != nil && !IsNil(o.Stdout) {
		return true
	}

	return false
}

// SetStdout gets a reference to the given string and assigns it to the Stdout field.
func (o *TesExecutor) SetStdout(v string) {
	o.Stdout = &v
}

// GetStderr returns the Stderr field value if set, zero value otherwise.
func (o *TesExecutor) GetStderr() string {
	if o == nil || IsNil(o.Stderr) {
		var ret string
		return ret
	}
	return *o.Stderr
}

// GetStderrOk returns a tuple with the Stderr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TesExecutor) GetStderrOk() (*string, bool) {
	if o == nil || IsNil(o.Stderr) {
		return nil, false
	}
	return o.Stderr, true
}

// HasStderr returns a boolean if a field has been set.
func (o *TesExecutor) HasStderr() bool {
	if o != nil && !IsNil(o.Stderr) {
		return true
	}

	return false
}

// SetStderr gets a reference to the given string and assigns it to the Stderr field.
func (o *TesExecutor) SetStderr(v string) {
	o.Stderr = &v
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *TesExecutor) GetEnv() map[string]string {
	if o == nil || IsNil(o.Env) {
		var ret map[string]string
		return ret
	}
	return *o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TesExecutor) GetEnvOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Env) {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *TesExecutor) HasEnv() bool {
	if o != nil && !IsNil(o.Env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given map[string]string and assigns it to the Env field.
func (o *TesExecutor) SetEnv(v map[string]string) {
	o.Env = &v
}

// GetIgnoreError returns the IgnoreError field value if set, zero value otherwise.
func (o *TesExecutor) GetIgnoreError() bool {
	if o == nil || IsNil(o.IgnoreError) {
		var ret bool
		return ret
	}
	return *o.IgnoreError
}

// GetIgnoreErrorOk returns a tuple with the IgnoreError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TesExecutor) GetIgnoreErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreError) {
		return nil, false
	}
	return o.IgnoreError, true
}

// HasIgnoreError returns a boolean if a field has been set.
func (o *TesExecutor) HasIgnoreError() bool {
	if o != nil && !IsNil(o.IgnoreError) {
		return true
	}

	return false
}

// SetIgnoreError gets a reference to the given bool and assigns it to the IgnoreError field.
func (o *TesExecutor) SetIgnoreError(v bool) {
	o.IgnoreError = &v
}

func (o TesExecutor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TesExecutor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["image"] = o.Image
	toSerialize["command"] = o.Command
	if !IsNil(o.Workdir) {
		toSerialize["workdir"] = o.Workdir
	}
	if !IsNil(o.Stdin) {
		toSerialize["stdin"] = o.Stdin
	}
	if !IsNil(o.Stdout) {
		toSerialize["stdout"] = o.Stdout
	}
	if !IsNil(o.Stderr) {
		toSerialize["stderr"] = o.Stderr
	}
	if !IsNil(o.Env) {
		toSerialize["env"] = o.Env
	}
	if !IsNil(o.IgnoreError) {
		toSerialize["ignore_error"] = o.IgnoreError
	}
	return toSerialize, nil
}

func (o *TesExecutor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image",
		"command",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTesExecutor := _TesExecutor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTesExecutor)

	if err != nil {
		return err
	}

	*o = TesExecutor(varTesExecutor)

	return err
}

type NullableTesExecutor struct {
	value *TesExecutor
	isSet bool
}

func (v NullableTesExecutor) Get() *TesExecutor {
	return v.value
}

func (v *NullableTesExecutor) Set(val *TesExecutor) {
	v.value = val
	v.isSet = true
}

func (v NullableTesExecutor) IsSet() bool {
	return v.isSet
}

func (v *NullableTesExecutor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTesExecutor(val *TesExecutor) *NullableTesExecutor {
	return &NullableTesExecutor{value: val, isSet: true}
}

func (v NullableTesExecutor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTesExecutor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


