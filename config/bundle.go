// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x5f\x73\xdb\xb8\x11\x7f\xf7\xa7\xd8\xda\xe9\xf4\x32\x23\xd2\x72\x33\xd7\xe9\x69\xc6\x0f\xb6\xec\x38\x9e\xb3\x13\xd5\x52\x9a\xb6\x2f\x1e\x90\x5c\x92\x38\x83\x00\x83\x3f\x52\x14\xd7\xdf\xbd\xb3\x00\x48\x4a\x8e\x1d\xbb\x77\x9e\x9b\x36\x0f\x19\x0b\x58\xfc\x76\xb1\xbb\xf8\x01\xbb\x9c\xa3\x5e\xa2\x9e\xec\x00\xec\xc1\x8c\xd9\x1a\xac\x02\x5b\x23\x14\xcc\xb2\x8c\x19\x84\x92\x0b\x4c\x77\x00\x4e\x8e\x69\x7a\x02\xe9\x7e\xe9\xa4\x44\x91\xac\x94\xbe\x49\x0a\xae\xe3\xef\xb4\xc8\x76\x3c\xca\x3b\x65\xac\x64\x0d\x82\x2a\x3d\xd2\x5b\x3f\x0d\xc6\x2b\x4a\xe1\x92\x71\x29\xd6\x23\xb0\x35\x37\xc0\x0d\x38\x83\x05\x64\x6b\x60\xce\xaa\xc4\xe4\x4c\xa0\x36\x1e\xc7\x2a\xc8\x95\x2c\x79\xe5\x34\x02\x29\x43\x6d\xc8\x10\xc2\x7f\xcf\x1a\x9c\x80\x50\x39\x13\xb5\x32\x36\x28\x9e\x29\x6d\x03\x5c\xa9\x34\xbc\x5b\x2c\x66\x90\xab\xa6\x71\x92\xe7\xcc\x72\x25\x81\xc9\xc2\x5b\xb4\xc2\x0c\x0a\x66\xea\x4c\x31\x5d\x78\xc8\xc5\x62\x46\xab\x27\xf0\xd7\xf1\x78\xfc\x10\xda\xd5\x6c\xba\x0d\x46\xcb\xae\x66\xd3\xb0\xea\xa7\xf1\x4f\x71\xd5\x15\x7e\x76\x5c\x23\x64\xcc\xf0\x9c\xf6\x54\xa3\xb4\x9d\x7e\x02\x22\xfd\xc1\x15\x70\x34\x3b\xa7\xed\x73\x59\x01\x83\x96\x19\xb3\x52\xc1\x9c\x3d\x38\x2f\xbd\xea\x11\x34\xec\x06\xc1\x90\x07\xac\x82\x56\xab\x16\xb5\x58\x83\x46\x63\x35\xcf\x2d\xb0\x3c\x47\x63\xba\x98\x05\x77\xf9\x88\x79\x94\x1f\x30\xad\x52\xc8\xeb\x46\x15\xf0\x97\xf1\x18\x62\xa0\x82\x58\xba\x6e\xc4\xeb\x18\xf6\xa0\x7a\x02\x2c\xcb\x0f\xfe\xfc\x26\xec\xe4\x5c\xe6\xc2\x15\x08\x0c\x76\xa7\x2c\xaf\x31\x99\x2a\x69\xb5\x12\x13\x90\x2a\x31\x56\x69\xdc\x0d\x3e\xae\x91\x15\xa8\x81\x4b\x38\x43\xbb\x7f\xc1\x8d\x25\xfb\x5a\x25\x0d\xf6\x81\x6c\x35\x2e\x51\x5a\xc8\x59\x5e\xd3\x7e\xb3\x35\x70\x69\x51\x37\x58\x70\xa6\xd7\xde\x23\x3c\x47\x1f\xdf\x13\x6e\x58\x26\x90\xb0\xbd\xe2\x09\x58\xed\x30\x18\x75\xc1\x1b\x6e\x83\x0f\xf9\xd7\x90\x61\xcc\xdc\x00\x7e\xc1\xdc\x59\xa5\x41\xa8\xca\xc0\x0f\xc6\x16\xca\xd9\x7d\xd4\xfa\xf5\x88\xec\xca\xd6\x36\x40\x5f\xb2\x2f\xa7\x51\xf4\x42\x55\x73\xfe\x15\x27\x70\x30\x1e\x8f\xc7\xb0\x07\x07\x63\xf8\xf9\x98\xb4\x5c\xa8\xaa\x0a\x27\xc2\x6b\x54\x55\x45\x16\x0b\x5c\xa2\x30\x13\x28\x30\x73\x15\xa1\x96\x6a\x04\xa8\xb5\xd2\x5e\xf0\x82\xa6\x27\x7e\x38\x2e\xfc\xa4\xb9\xc5\x60\x90\x0f\x0f\x37\xd0\x32\x5b\xa7\x14\x5b\x6c\x5a\xbb\x1e\x85\x49\x46\xd9\xad\xb9\xb5\x28\x49\xd0\xd8\x02\xb5\x4e\x3d\xc8\x07\x67\x5b\x67\xdf\x72\x81\x13\xd8\xdd\xdd\xd9\xd9\x83\x05\xed\x3c\xaf\xb1\x70\x82\x5c\x6e\x86\x04\x25\x9f\x9c\x4d\x4f\x47\xf0\xa1\x45\x69\x2c\xcb\x6f\x46\x3e\xdf\x2f\x99\x74\x4c\x50\xee\xb6\xce\x52\x5e\xe6\x37\x28\x0b\x93\xc2\xce\xbc\xc3\x99\xc4\x63\xbb\x02\x55\x46\x2b\xb4\x93\xc0\x36\x35\x59\xd4\x7d\xda\x53\x6e\x80\x64\x52\x19\xcc\x15\x61\xed\x00\x74\x60\x57\xcc\x76\x3e\x1d\x77\x8e\x85\x20\xd7\x6b\x69\x98\x5c\xfb\xb8\x79\xcf\x74\x4a\x28\x50\x4a\xe2\xb6\xaa\x0e\x76\x5a\x3b\x79\x43\xb8\x3d\x88\x50\xb2\xa2\xe5\x2b\xc6\x2d\x64\x68\x57\x88\x12\x5c\x5b\x30\x8b\x06\x32\x2c\x95\x46\x68\x98\xbe\x09\xa7\x4b\xaa\x02\xa1\x40\x56\x3c\x66\xff\x7b\x55\xe0\x8c\xcb\x6a\xc1\x1b\x54\xce\x4e\xe8\xbc\x6c\xed\xa1\xe1\xd2\x59\x7c\x58\x3d\xf9\x3f\xea\xf0\x11\x64\xda\x8e\xee\xdb\x40\xf1\x79\x96\x15\xe7\x92\xdb\xde\x8a\x37\xe3\x2d\x33\x7e\x8c\x66\x98\x28\xdb\x25\xe9\x90\x52\xd1\x8c\xf3\x13\x58\x71\x21\x20\x43\xcf\xab\x0d\x23\x0e\x12\x62\x0d\x15\x4a\x72\x2f\x16\x21\xc3\xce\x4f\x7c\x66\x05\x14\xe2\x38\x56\x14\x9a\x18\xe5\x21\xee\xf6\x62\xe1\xbe\x38\x0a\x62\x1b\x14\x3c\xe9\x38\x70\x93\x51\xbc\x67\x06\x2a\x4c\x61\xc5\xe9\x86\xd9\xa6\xc0\x34\x2e\x0a\xc8\x0f\x91\x11\xcd\xd2\x29\x30\x90\x6b\x24\xe3\xa1\x70\x9a\x9c\xda\x6a\x45\xfc\x47\x7f\x76\xdb\xed\x8e\x12\x97\xe1\xcc\x15\x5c\x63\x6e\x95\x5e\x07\x35\x9f\x94\xbe\x39\xe1\xfa\x81\x6b\x6c\x70\x65\x1f\xaa\x9a\x51\x2a\x11\x58\x21\xd0\xef\x85\xc2\x8e\x74\xd8\x98\xf4\x62\x36\x04\x6a\x04\xdc\x06\x0b\x4c\xed\x2c\x14\x6a\x25\xbb\x5d\x25\x07\xd0\x20\x93\x86\xc4\x35\xd2\x91\x95\xaa\x5b\x96\xc2\xb8\x9b\x0c\x03\xc0\x1b\xcf\x88\x16\xc5\x1a\x58\x69\x31\x9c\xeb\x92\x6b\x63\xfd\x89\x09\xa8\x7d\x7a\x24\x07\x9d\x7b\x8e\x7c\x3e\x04\x1b\xb6\x23\x6e\xf5\x9a\xb2\xb2\x40\x8b\xb9\x85\x55\xcd\x3c\x3d\x2b\xa7\x73\x0c\xe4\xc3\x96\x8c\x0b\x62\x5c\x12\xe3\x36\x85\x08\x79\x82\x25\x97\xe4\xda\xab\x5e\x9c\x87\x5d\x7b\x55\xdd\xdd\x1c\xae\x36\xb5\x44\xad\x79\x81\x26\x78\x3d\xc3\x9a\x2d\xb9\x8a\x3c\xd6\x03\x84\x7c\x25\xf0\xe9\xec\xa3\x19\x34\xa7\xc3\x78\xeb\xcc\x04\x62\x22\xf9\xa4\x3c\xba\x1c\xe4\x3c\x9b\x9f\x1d\x0f\xe2\x57\xac\x39\xcb\x26\x30\x4e\x37\x56\x9c\x70\x73\x03\xa6\x65\x39\x7e\x67\x21\x09\x7d\xb3\xf2\xad\x8f\xf0\x2a\xf1\x5c\x0f\xd6\xd1\xee\x87\x25\x5b\x04\x69\xd6\x32\x1f\xb2\x79\xfb\x89\xd3\xaf\xf8\xf6\x80\xd3\xbf\x8f\x9e\xa4\x02\x51\xfe\xb8\x7d\xba\xa3\xe4\xb0\xbd\xd9\xb4\x4f\x0d\x4a\xbf\xc0\x6f\xfb\x5e\x39\x45\xf7\x79\xaa\xfa\x74\x79\x98\x96\xff\xa7\xaf\xbc\x78\xe7\x6d\xbe\x27\x59\x6e\xf9\x12\xef\xdf\x68\x3b\x7b\x70\xd4\x27\x72\x77\xcb\x45\x7e\x1a\x41\x6d\x69\xab\x4a\x8f\xc0\x08\xa7\x9b\x11\xb4\x99\x19\x41\x45\x19\x2b\x2b\x2e\x91\x1e\x5a\x74\x4f\x8e\xa0\xca\x71\x04\xaa\xbb\x43\x77\x8e\x03\x52\x04\x22\x73\xfa\x6b\xb3\xd3\x12\x4f\x42\x27\xea\x93\xfc\xdd\x62\xea\xf5\x05\x97\x2e\xb0\x69\x85\x8f\xf7\xbf\x63\x60\x9c\xe4\x4b\xd4\x06\xe1\x10\x96\x4c\x72\x21\x58\x9c\xa8\xd0\xa2\x5c\xc2\x21\x2c\xe8\xcd\x13\xc6\xc2\xeb\xc6\x6f\xec\x10\x6e\x6f\xd3\xd3\xfe\xf7\xdd\x5d\x14\x61\xba\x72\x0d\x4a\x6b\xe0\x30\x3e\x95\xfd\x15\x9e\x24\xf1\x49\x78\x7b\x9b\x4e\xfd\x5f\x77\x77\x90\x24\xc4\x24\x09\x2f\x68\x74\xc1\xcc\xcd\x79\xd1\xe3\x08\x55\x05\x1d\x91\x27\xef\xee\xf6\x83\xe3\x12\xff\x7e\x4b\x84\xaa\x3a\xa3\x28\x0f\xee\xcb\x46\x4a\x0d\x01\x8d\x82\xca\x47\xf4\x71\x49\xe5\x6c\x94\x34\xb5\x72\xa2\xb8\xb6\x9a\x49\x53\xa2\xbe\x2e\x3d\xe5\x1f\xc2\x3f\x4f\xe7\x51\x62\x55\xa3\xbc\xb6\x6a\x10\xe9\xc1\x3f\xbc\xbf\x3e\xfd\xc7\xf9\xe2\xfa\xc3\xd5\xf5\xe9\xdf\xcf\xa7\x8b\xb8\xe0\xf6\x96\x97\x20\x11\x52\xe2\x15\x18\x43\xd2\xef\xf4\xf6\xb6\xd5\x5c\xda\x12\x76\x35\x7e\x76\x68\xec\x75\x4e\x22\x87\xf0\xc7\x62\x37\x88\x6f\x88\x26\x80\xb2\xd8\xf8\x1d\x41\x3d\xfb\x10\x85\x7c\x17\xb7\xc1\x46\xe9\x35\x21\xa7\xe3\x12\xce\x8e\x77\xe3\xc2\xa7\xf1\x03\x49\x3d\xa9\xa0\x20\xc2\xdb\x84\x0f\xeb\x1e\xc0\x8f\x03\x9f\x1d\x86\x07\xf5\xec\x78\xfe\x58\x86\xee\xfd\x21\xe3\x72\x3f\x63\xa6\xee\x06\x66\xc7\x73\x48\xde\x53\x18\xfd\x33\x65\xb0\x37\xcc\xa8\xa7\x03\x1c\x04\xf1\xe9\x9c\x79\x4e\xd8\x02\x98\xf0\x37\xb5\x39\x3c\x98\xb4\xad\x3c\x7c\xb1\xd8\x75\xe0\x0d\x36\x87\xe4\xd7\x2a\x7b\xb1\xa8\x75\xd0\x94\xdd\x03\xf6\x53\x21\xbb\x77\xec\x7f\xe5\x21\xdf\x01\x38\xd3\xbc\x38\xf5\x9c\xf7\xfc\xc8\xbf\x7a\x24\xee\xaf\x9e\x17\xf5\x57\xcf\x8a\x39\x89\xf5\xd1\xfc\x6f\xf2\xe0\x15\x24\x2d\x42\xd3\xf2\x97\x3b\xba\xc1\x96\xfa\x7a\xd9\xc5\xff\xec\xe5\xc2\x1f\xa1\x4b\x2a\x60\x7b\xec\xdf\x27\xfc\x40\x4f\xbb\xf9\xc5\xc7\xab\xcb\xc7\x63\xbf\x7f\x3f\xf8\xf3\xe3\xa3\xc5\xf4\x1d\x24\xc9\x2f\x2a\x4b\xfc\x3d\xfc\x40\x26\xf4\x42\x32\xd4\x75\x07\xdf\x4c\x84\xfb\xe2\xe9\x2c\xe8\x17\x44\x6a\x7f\x32\xbd\x9e\x95\x23\x3d\x2a\x91\x7c\xd2\xa2\xf6\xfe\x79\xc1\x84\xe9\x15\x34\xd8\x78\x26\x7e\x41\x9e\x1f\xc0\x6d\xd3\x0e\xe0\xbf\x1f\x65\x4c\x4f\x27\x7d\x61\x17\x3a\x84\x2c\xcf\x95\x93\x96\xea\xb1\x02\xa5\xe5\x4c\x98\xbe\x51\x18\xab\xa8\x56\x19\xc3\xfd\xd3\xdb\x3f\x04\x1f\x2e\x47\x0b\x6e\x72\x2a\x1d\xba\x7a\xf4\x28\xe0\xf6\xef\xbf\x80\x76\xa6\x54\x25\x10\xa6\x42\xb9\x82\x6a\xbe\x5f\xa8\x92\x39\x3f\xf9\xad\xca\x66\x01\xe9\x31\x45\x5f\x95\xfc\xcd\xfb\xf9\x97\x92\xc3\x46\x3e\x21\xaf\x6a\xbb\x51\x04\xcd\x34\x96\xa8\x03\xe7\x51\x4d\x69\x43\xef\x00\x5c\x0b\x9f\x1d\xcf\x6f\xc4\x7a\x78\xe0\xbf\x1f\x84\x7c\xd1\x26\x34\xb2\x62\x0d\x4a\x0a\x2e\xa9\x52\x5d\x22\x70\x7a\xb3\xca\x08\xe2\x5a\x5f\x39\x74\x00\x41\xd5\xdf\x08\x75\x1e\xa6\x27\x70\x90\x8e\xe3\xf6\x36\x3b\x1a\x39\xcb\x43\x2b\x89\x8a\x73\x2a\x15\x9d\xb0\x06\x7e\x68\x7c\xe7\x0e\x41\x70\x63\x47\x60\x23\x73\x98\x11\xa0\xcd\x5f\x47\x98\xd8\xf2\xd0\x58\x6a\x34\x75\x5f\x3c\xf9\x2e\xde\x62\x71\xf1\x68\x53\x65\xe7\x93\x4f\xcd\xd0\x87\x7a\x46\x17\xe2\xc9\x1e\xc4\xaf\xe8\x40\x7c\xaf\xff\xf0\x42\xdd\x87\xef\xf4\x1e\x7a\x25\x60\xac\xd2\xac\x42\x30\x6b\x63\xb1\x09\xa6\xf9\xd9\x45\xdf\x2f\x77\x3e\xd5\x0c\xda\x7b\xc9\x97\xad\xc3\xc6\xba\x02\x65\x04\x99\xb3\xb0\x56\x0e\x1a\x4a\x3c\x90\x88\x85\x37\xcb\xe3\xf1\x92\xa6\xfe\xa4\x31\xe4\x4b\xe8\x93\x45\x8e\x08\xc5\x50\x48\xbf\x79\x30\x68\x28\x0e\x73\x16\x1e\x2f\xd1\xc4\x10\x63\x3f\x3c\x64\xf6\xa7\x9a\x5b\xa4\x54\xa1\x10\xfa\xf8\x0c\xae\xf0\x35\xa1\x81\x55\xcd\xf3\xba\x0b\x2d\x37\xc0\x84\x50\x2b\x32\x50\xc5\xae\x76\x97\xba\x47\x61\xe2\x84\xeb\xfe\xe8\x00\x24\x90\xee\x77\xbd\x8f\xf9\x9b\xce\x38\x1a\x3f\x95\x45\xab\xb8\xb4\xc3\x18\xc0\xcf\xb8\xde\xfc\x39\xc7\x5c\xa3\x9d\x74\xeb\xcf\xe6\x9b\x93\xcf\x27\xb9\xf0\xff\x87\xd6\x72\x25\x99\x48\xb7\x49\x62\x73\xd1\x53\x5c\xb1\x85\x57\x6a\xd5\xf8\x38\xa2\x5c\x72\xad\x24\x95\x75\xe9\xc6\xfe\x36\x29\x72\x6b\xe1\xd1\x83\xe8\xdb\xd6\x7f\x17\x1b\xe0\xad\x56\xcd\xa9\x5c\x6e\x76\xdc\x1f\xeb\x89\xdc\xef\x87\x50\x21\xec\xef\x54\x2a\x21\xbb\x3e\x6c\xfc\x2e\xf1\x4d\x7b\xe4\xa1\x7e\xc5\xb3\xda\x22\xcf\x6b\x89\x3c\x0e\xff\x44\x2b\x84\x96\x5e\xb2\x2f\xbc\x71\xcd\xb0\x99\xcd\xcf\x09\xfe\xb3\xc3\xf0\x4d\x81\x36\x98\xb9\x92\x48\xfc\x5e\x0b\x9a\x54\x1e\xfb\x99\xff\xb7\xaf\x0c\xff\x09\x00\x00\xff\xff\x05\x9c\x63\x30\x11\x1c\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 7185, mode: os.FileMode(420), modTime: time.Unix(1505255997, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\x03\x31\x14\x85\xf7\xf3\x14\xd7\xa9\x5d\x26\x33\x2f\xe0\xaa\x95\xe2\xc6\x85\x08\x2e\x25\xd3\xdc\xd8\x4b\x66\x92\x21\x3f\x2a\x86\xfb\xee\x32\x69\x11\x0a\x63\x77\x87\xc3\x77\xbe\xc5\xd9\xdc\x75\x03\xb9\x6e\x50\xf1\xd4\x6c\xee\x41\x3c\x43\x29\xf2\x55\x45\xfb\xa4\x99\x6b\xe3\x97\xe6\xcd\x07\xbb\xa7\xc0\xdc\x99\xec\x1c\x8e\x22\x26\xed\x73\xaa\x00\xfe\x07\x60\x08\x4d\x29\x64\xc0\x21\xc8\xdd\x9c\x23\xf4\x20\x98\x9b\x52\xe6\x40\x2e\x19\x68\x97\xf9\x8c\x30\xcd\x04\x5b\xdd\x9e\xa1\x0a\x08\x40\xa7\x6b\xba\xcc\x5f\xd4\x74\x18\xa0\x97\x6b\x86\x11\x4e\xef\x9f\x13\x4e\x0f\x5b\xd9\x9b\x43\x7b\x81\xd7\x3d\x7b\x8a\xf6\xa6\xc8\x44\xfa\xc1\x3f\xd3\x19\xbf\x52\x35\xa5\xc8\xc7\x6f\x3c\xe6\xa4\x86\x11\x99\xe1\xcb\x07\x8b\x01\x42\x76\x20\xc4\xd1\x3b\x43\x1f\xcb\x23\xbb\x9a\x98\x41\x88\xa4\xa2\x15\xa4\xaf\xae\xfd\x0d\x00\x00\xff\xff\x24\x76\x8a\x2a\x79\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 377, mode: os.FileMode(420), modTime: time.Unix(1505255997, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xcd\x6e\xe2\x30\x10\xc0\xf1\xbb\x9f\x62\x84\xb4\x47\x67\x79\x81\x5c\x16\x22\xc4\x65\x91\x68\xd4\x8f\x53\x64\xe2\x49\xb0\xe2\x8c\x61\x6c\x87\x56\x91\xdf\xbd\x0a\x20\x2a\xaa\xd2\xdb\x24\xf3\x9f\x9f\x1c\xc9\x0c\xc8\x1e\x21\x87\x41\x91\xb1\x56\x89\x16\x03\xd2\x00\x39\x94\x1c\x51\xe0\x3b\xd6\x31\xa8\x9d\x9d\x92\x71\xcc\x8a\xdb\x77\x4a\x42\x71\x1b\x7b\xa4\xe0\x21\x87\x93\xe3\x0e\x19\x38\x12\x48\x59\x3b\x6a\x4c\x3b\xf5\x8b\xf3\x94\x12\x48\x19\x94\xef\xa4\xd1\xd3\xdf\x52\xf9\x6e\xad\x53\x12\xd6\xb5\x17\xf7\xc5\x71\xb7\x34\x9c\xd2\xdf\xda\x91\x76\x2c\x71\x40\x0a\xd2\xba\x56\x20\xb3\xe3\xef\x55\x13\x89\xd0\x4a\x1f\x34\x32\x0b\x17\xc3\x21\x86\xc7\x8d\x8b\x41\xf8\xbd\x8b\x56\x57\x81\x15\xf9\x06\xb9\x6a\x8c\xc5\xe9\xe1\x6f\xc5\x93\x38\xed\x91\xaa\xe0\xbe\x96\x37\x70\xf3\xbf\x2a\x5e\xd7\x65\xb5\xd9\x56\xc5\xf3\x7a\x51\x8a\x71\x34\x0d\x10\x42\xb6\x38\x44\x0f\x73\x90\x29\x89\x71\x3c\xb0\xa1\xd0\xc0\x8c\xf1\x18\xd1\x87\xaa\x9e\x96\x39\xfc\xd1\xb3\x4b\x78\x8e\x24\x20\xe9\xf3\x74\x25\xb6\xaa\x5f\xed\x60\x9e\x3d\x52\x7a\xec\x1d\x7f\x4c\x4e\x36\x6f\x60\xf5\x6f\x76\x3d\xf9\x59\x5b\x1a\xdf\xfd\xca\x69\xe3\xbb\x3b\xec\x72\x71\xa7\x89\x63\xc4\x88\xe2\x33\x00\x00\xff\xff\x5f\xc0\xd7\xf8\x18\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 536, mode: os.FileMode(420), modTime: time.Unix(1505255997, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xcf\x4a\x03\x31\x10\xc7\xf1\xfb\x3e\xc5\xd8\xd2\x63\xb2\xeb\x55\xd8\x8b\xad\x88\x17\x11\x15\x3c\x27\xcd\xa4\x86\xec\x4e\x96\xfc\x41\x21\xcc\xbb\x4b\x77\x17\xa4\x60\xbd\x0d\xc3\x97\xcf\xe1\xb7\xbd\x69\xb5\xa3\x56\xab\xf4\xd9\x6c\x5f\xee\xdf\x40\x3c\x43\xad\xf2\x5d\x25\xff\x64\x98\xd7\x5f\x38\xff\x3e\x42\xf4\x07\x17\x99\x5b\x5b\x88\x70\x10\x29\x9b\x50\xf2\x9a\xe0\xb5\x04\x63\x6c\x6a\x75\x16\x08\x41\xee\xa7\x92\xa0\x03\xc1\xdc\xd4\x3a\x45\x47\xd9\xc2\x66\x01\x06\xa0\x60\x30\xf5\xb7\x77\xd3\x44\xfd\xce\x6c\x96\x7a\x2e\x05\x20\x99\xf9\x5a\x9d\x57\x35\x3e\x6a\xe8\xe4\x35\x6a\xc4\xb1\xdf\xc9\xce\x9e\xf4\x66\x8d\xff\x76\x0e\x2e\xf9\x7f\x21\xeb\x06\xfc\x95\x96\xfc\x82\x6a\x6a\x95\x0f\xdf\x78\x2c\x59\xe9\x01\x99\xe1\x2b\x44\x8f\x11\x62\x21\x10\xe2\x18\xc8\xba\xd3\x79\x9a\xfd\x7c\x31\x83\x10\x59\x25\x2f\x9c\xb9\xd8\xf9\x27\x00\x00\xff\xff\x80\x45\x84\x4d\x88\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 392, mode: os.FileMode(420), modTime: time.Unix(1505255997, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcf\x6a\xc3\x30\x0c\x87\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\xe9\xe8\x76\xdd\x0a\x3b\x3b\x8d\xb2\x79\x6e\x64\x23\xdb\x6c\x60\xf4\xee\x23\x69\xa1\x29\xac\xf4\xf6\xc3\xfe\xf4\xa1\x3f\xab\x87\xba\x33\x54\x77\x3a\x7c\x15\xab\xf7\xcd\xd3\xbe\x7d\x01\xa5\xbe\x5d\xa7\x48\x8f\x08\x39\x57\x7b\x1d\xec\x6b\x2f\xb2\xf8\xa6\xa8\x83\x0d\xf0\xb8\x78\x42\x66\xc7\x13\xfe\xe1\xd8\x6e\x0d\x8b\xd4\x43\x22\xc2\xa3\x0a\xb1\x47\xe6\x05\xea\x52\xf4\x29\xde\x62\x5d\x8a\x45\xce\x66\x00\x42\xa8\x5a\x9f\x02\x34\xa0\x44\x8a\x9c\x3d\x1b\x8a\x03\x94\x17\xd3\xc1\xa7\xa0\x3c\xb2\x9a\xfa\x81\x75\x5f\x9e\x2a\x66\x5a\x01\x52\x3f\xa7\xb3\xeb\x4d\x8f\xbb\x0e\x9a\xea\xb6\x6e\xc4\x11\xd6\x55\x33\xec\x36\xe5\x19\xff\xdf\xb4\x35\xc1\xde\x51\xc5\xd1\x5f\x54\x27\xfe\xca\x55\xe4\x5c\x3d\xff\xe2\x21\x45\xdd\x1d\x51\x04\x7e\x1c\x5b\x64\xe0\x44\xd3\x5c\x8e\x06\xf3\x39\x6d\xa8\x9d\x93\xc8\xa4\xd4\xc1\x2a\xd3\x5f\x9d\xe4\x2f\x00\x00\xff\xff\x36\x8f\xbd\x5a\xbe\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 446, mode: os.FileMode(420), modTime: time.Unix(1505255997, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
