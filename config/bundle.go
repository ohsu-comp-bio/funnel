// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x51\x6f\xe3\xb8\x11\x7e\xf7\xaf\x98\x26\x5b\xf4\x0e\xb0\x14\xa7\x87\x2b\x7a\x06\xf2\x90\x38\xd9\xac\x71\xd9\x5d\xd7\xf6\x76\xdb\xbe\x04\x94\x34\x96\x78\xa6\x48\x2d\x49\xd9\xa7\x4b\xf3\xdf\x8b\x21\x29\xc9\xce\x3a\x9b\x6c\x2f\xb8\x16\x6d\x80\x5d\x58\xe4\xcc\x37\xc3\x99\xe1\x90\x33\x5c\xa0\xde\xa0\x1e\x0f\x00\x8e\xe1\x8d\x32\x56\xb2\x12\x41\xad\xc0\x16\x08\xaf\x6b\x29\x51\x80\x71\x24\x31\xbc\x65\x5c\x8a\x66\x08\xb6\xe0\x06\xb8\x81\xda\x60\x06\x49\x03\xac\xb6\x2a\x32\x29\x13\xa8\x8d\xc3\xb1\x0a\x52\x25\x57\x3c\xaf\x35\xc2\x56\xe9\x35\x6a\x13\x0f\xc0\xe1\xbf\x63\x25\x8e\x41\xa8\x94\x89\x42\x19\x3b\x70\x0c\x33\xa5\xad\x87\x5b\x29\x0d\x6f\x96\xcb\x19\xa4\xaa\x2c\x6b\xc9\x53\x66\xb9\x92\xc0\x64\xe6\x34\xda\x62\x02\x19\x33\x45\xa2\x98\xce\x1c\xe4\x72\x39\x23\xee\x31\xfc\x79\x34\x1a\x1d\x42\x9b\xcf\x26\xfb\x60\xc4\x36\x9f\x4d\x3c\xd7\x0f\xa3\x1f\x02\xd7\x1c\x3f\xd5\x5c\x23\x24\xcc\xf0\x94\xd6\x54\xa0\xb4\xad\x7c\x02\x22\xf9\xde\x14\x70\x3e\x9b\xd2\xf2\xb9\xcc\x81\x41\xc5\x8c\xd9\x2a\xaf\xce\x31\x4c\x57\x4e\xf4\x10\x4a\xb6\x46\x30\x64\x01\xab\xa0\xd2\xaa\x42\x2d\x1a\xd0\x68\xac\xe6\xa9\x05\x96\xa6\x68\x0c\xcd\x11\xae\x37\x17\xac\xb8\x40\x87\xf2\x0d\xc6\x79\x0c\x69\x51\xaa\x0c\xfe\x34\x1a\xc1\xca\x79\x22\xf6\x64\x71\x53\x8a\x6f\xfd\x4a\x83\xe8\x31\xb0\x24\x3d\xfd\xe3\x77\x7e\x25\x53\x99\x8a\x3a\x43\x60\x70\x34\x61\x69\x81\xd1\x44\x49\xab\x95\x18\x83\x54\x91\xb1\x4a\xe3\x91\xb7\x71\x81\x2c\x43\x0d\x5c\xc2\x35\xda\x93\x1b\x6e\x2c\xe9\x57\x29\x69\xb0\x73\x64\xa5\x71\x83\xd2\x42\xca\xd2\x82\xd6\x9b\x34\xc0\xa5\x45\x5d\x62\xc6\x99\x6e\x9c\x45\x78\x8a\xce\xbf\x97\xdc\xb0\x44\x20\x61\x3b\xc1\x63\xb0\xba\x46\xaf\xd4\x0d\x2f\xb9\xf5\x36\xe4\xbf\xf8\x08\x63\x66\x0d\xf8\x33\xa6\xb5\x55\x1a\x84\xca\x0d\x7c\x63\x6c\xa6\x6a\x7b\x82\x5a\x7f\x3b\x24\xbd\x92\xc6\x7a\xe8\xb7\xec\xe7\xab\x40\x7a\xa3\xf2\x05\xff\x05\xc7\x70\x3a\x1a\x8d\x46\x70\x0c\xa7\x23\xf8\xf1\xc2\x4b\x59\x16\x08\xbb\x11\xcc\x52\xcb\x37\x9d\xdb\x32\x66\x59\xc2\x0c\xf9\x38\x5d\xa3\xcc\x1c\xcb\xf9\x86\x71\x41\x6a\xb7\xa3\x66\x0c\x89\x12\x36\x4b\x86\x90\x35\x92\x95\x2a\x4b\x68\x6d\x81\xb7\x9d\xdc\x19\x32\xb4\x7b\x00\x2e\x94\xb0\x97\x17\xfe\xb7\x77\x8e\x2d\x5a\xff\x76\x92\x83\x87\xe9\x8f\xe6\xc7\x10\x9f\x78\xdf\x46\xb4\x4f\xa2\x8c\xeb\xf0\x1d\x67\xc9\x60\xe0\x81\x2e\x9d\x16\x2d\xf4\xb1\xfb\x77\xc1\x0c\xba\x85\x5a\x45\xf1\xe6\x02\xb4\xd5\x16\x2c\x2d\xc7\x74\xd4\x4b\xfa\x6c\x19\xc6\x70\xe4\x05\x1c\xed\xa0\x9d\x7f\x5c\xc0\xb9\x0f\xc8\x35\x36\x30\xbd\xec\xe6\x7e\xc4\x66\x0c\x47\x0f\x69\x17\x98\x6a\xb4\x2d\xcb\x8f\xd8\x74\xf3\x7e\xe6\x00\x8b\xc6\x9c\x2b\xd9\x0d\xce\xdd\xa7\xa3\x1b\x00\xdc\xa8\x3c\xf7\x49\xc8\x85\x8a\xca\x73\x0a\x35\x81\x1b\x14\x66\x0c\x19\x26\x75\x4e\xe1\xb0\x52\x43\x40\xad\x95\x76\x84\x37\x34\x3d\x76\xc3\x81\xf1\xa3\xe6\x16\x7d\x24\x39\xbb\x73\x03\x15\xb3\x45\x4c\x9b\x12\xcb\xca\x36\x43\x3f\xc9\x28\x2d\x69\x6e\x2d\x4a\x22\x34\x36\x43\xad\x63\x07\xf2\xbe\xb6\x55\x6d\x5f\x73\x81\x5e\x37\x1f\x52\x26\x2d\x30\xab\x05\xed\x15\xd3\x67\x16\x72\xec\xf5\xe4\x6a\x08\xef\x2b\x94\xc6\xb2\x74\x3d\x74\x89\xea\x2d\x93\x35\x13\x94\x74\xaa\xda\xf6\x61\x15\xc3\x60\xd1\xe2\xb4\xf9\x76\x0b\x6a\x15\xb4\xd0\xb5\x04\xb6\x2b\xc9\xa2\xee\xf2\x15\x6d\x6a\x90\x4c\x2a\x83\xa9\x22\xac\x01\x40\x0b\x36\x67\xb6\xdd\x0c\xa3\x76\x47\x80\xa7\xeb\xa4\x94\x4c\x36\x6e\xc3\x39\xcb\xb4\x42\x68\x87\x29\x89\xfb\xa2\x5a\xd8\x49\x51\xcb\x35\xe1\x76\x20\x42\xc9\x9c\xd8\xb7\x8c\x5b\x48\xd0\x6e\x11\x25\xd4\x55\xc6\x2c\x1a\x48\x70\xa5\x34\x42\xc9\xf4\xda\xa7\x45\xa9\x32\x84\x0c\x59\xf6\x98\xfe\xef\x54\x86\x33\x2e\xf3\x25\x2f\x51\xd5\x76\x4c\x89\x6e\x6f\x0d\x25\x97\xb5\xc5\xc3\xe2\xc9\xfe\x41\x86\xf3\x20\xd3\x76\xf8\x50\x07\xf2\xcf\xb3\xb4\x98\x4a\x6e\x3b\x2d\xbe\x1b\xed\xa9\xf1\x7d\x50\xc3\x04\xda\x36\x48\xfb\x90\x0a\x6a\x4c\x2f\x61\xcb\x85\x80\x04\xdd\x81\x58\x32\x3a\x3c\x84\x68\x20\x47\x49\xe6\xc5\xcc\x47\xd8\xf4\xb2\x8d\x7a\x82\xa1\x48\x33\x90\x6a\x24\x02\xc8\x6a\x4d\x8a\x57\x5a\xd1\xc6\xa2\x9f\x2d\x64\x1b\xae\x5c\xfa\xb8\xce\xb8\xc6\xd4\x2a\xdd\x78\xd0\x8f\x4a\xaf\x2f\xb9\x3e\x90\x4e\x7a\x75\x3b\x73\x14\x8c\xdc\x45\x60\x99\xf0\x99\x83\x4c\x8b\x14\xd0\x4c\x3a\x32\xeb\x8d\x31\x04\x6e\xbd\x06\xa6\xa8\x2d\x64\x6a\x2b\xe3\x80\x17\x9d\x42\x89\x4c\x1a\x22\xd7\x48\xdb\x42\xaa\x96\x2d\x86\x51\x3b\xe9\x07\x80\x97\xee\xb8\xb0\x28\x1a\x60\x2b\x8b\x7e\xef\xac\xb8\x36\xd6\x45\xa5\x47\xed\x5c\x10\x9d\xb6\xe6\x39\x77\x36\xf7\x3a\xec\x5b\xd5\xea\x86\x3c\x9f\xa1\xc5\xd4\xc2\xb6\x60\xee\xec\x52\xb5\x4e\xd1\x6f\x70\xd6\xe5\x75\xab\x80\xdb\x18\xda\x6c\x8a\x2b\x2e\xc9\xb4\xf3\x8e\x9c\xfb\x55\x3b\x51\xed\xc5\xc5\x9f\xfb\x6a\x83\x5a\xf3\x0c\x8d\xb7\x7a\x82\x05\xdb\x70\x15\x72\x45\x07\xd0\xe7\xfc\xc9\xec\x83\xe9\x25\xc7\xfd\x78\x55\x9b\x31\x8c\x06\xdd\xc0\xfc\xfc\x6d\x4f\xe7\x8e\xba\xeb\x8b\x9e\x7c\xce\xca\xeb\x64\x0c\xa3\x78\x87\xe3\x92\x9b\x35\x98\x8a\xa5\xf8\x05\x46\x22\xfa\x8c\xf3\xb5\xf3\xf0\x36\x72\xf9\x14\x6c\x4d\xab\xef\x59\xf6\x92\x90\x69\x64\x0a\x5b\x4e\x07\xd7\x67\xf7\xbf\x8e\xe3\xf3\x4d\x44\x7f\x1f\x5c\x22\xf0\xc9\xe8\xfb\xfd\x1d\x14\x28\xfb\xe5\xcd\x26\x5d\x68\x50\xf8\xf9\x1c\x72\xe2\x84\x93\x77\x9f\x27\xaa\x0b\x97\xc3\xa9\x2f\xd0\xee\x1e\x2d\x5f\x75\xbc\x1c\x3a\x62\x5e\xec\x98\x39\x74\xd4\x0c\x1e\xbd\xbe\x3c\x38\x49\x06\x87\x2f\x2d\xee\x4e\x3d\x84\xc2\xd2\xf2\x95\x1e\x82\x11\xb5\x2e\x87\x50\x25\x66\x08\x39\x45\xb1\xcc\xb9\x44\xba\x99\xd2\xf9\x34\x84\x3c\xc5\x21\xa8\xf6\xec\x1a\x5c\x78\xa4\x00\x44\xea\x74\xc7\x55\x2b\x25\xec\x8e\x96\xd4\x05\xfe\x9b\xe5\xc4\xc9\xf3\x26\x5e\x62\x59\x09\x17\x03\xff\x0c\x0b\xad\x25\xdf\xa0\x36\x08\x67\xb0\x61\x92\x0b\xc1\xc2\x44\x8e\x16\xe5\x06\xce\x60\x49\x97\x44\x3f\xe6\xaf\x83\x6e\x61\x67\x70\x77\x17\x5f\x75\xdf\xf7\xf7\x81\x84\xe9\xbc\x2e\x51\x5a\x03\x67\xa1\xb6\x70\x47\x67\x14\x85\x3b\xf4\xdd\x5d\x3c\x71\xbf\xee\xef\x21\x8a\x28\xbb\x44\x3c\xa3\xd1\x25\x33\xeb\x69\xd6\xe1\x08\x95\x7b\x19\x21\x77\xde\xdf\x9f\x78\xc3\x45\xee\xc2\x1b\x09\x95\xb7\x4a\x51\x4c\x3c\xa4\x0d\x69\xd6\x3b\x35\x10\x2a\xe7\xd1\xc7\x29\x55\x6d\x03\xa5\x29\x54\x2d\xb2\x5b\xab\x99\x34\x2b\xd4\xb7\x2b\x77\x0c\x9c\xc1\xdf\xaf\x16\x81\x62\x5b\xa0\xbc\xb5\xaa\x27\xe9\xc0\xdf\xbf\xbb\xbd\xfa\xdb\x74\x79\xfb\x7e\x7e\x7b\xf5\xd7\xe9\x64\x19\x18\xee\xee\xf8\x0a\x24\x42\x4c\xb9\x06\x46\x10\x75\x2b\xbd\xbb\xab\x34\x97\x76\x05\x47\x1a\x3f\xd5\x68\xec\x6d\x4a\x24\x67\xf0\xfb\xec\xc8\x93\xef\x90\x46\x80\x32\xdb\xf9\x0e\xa0\x2e\x23\x51\x5a\xf9\x22\x6e\x89\xa5\xd2\x0d\x21\xc7\xa3\x15\x5c\x5f\x1c\x05\xc6\xa7\xf1\x7d\xe2\x7a\x52\x40\x46\x49\x70\x17\xde\xf3\x1d\xc0\x0f\x03\x9f\x6a\xf4\x15\xc8\xec\x62\xf1\x58\x84\x1e\xff\x2e\xe1\xf2\x24\x61\xa6\x68\x07\x66\x17\x0b\x88\xde\x91\x1b\xdd\xf5\xa0\xd7\xd7\xcf\xa8\xa7\x1d\xec\x09\xf1\xe9\x98\x79\x8e\xdb\x3c\x98\x70\xa7\xb7\x39\x3b\x1d\x57\x95\x3c\x7b\x31\xdf\xb5\xe0\x25\x96\x67\x64\xd7\x3c\x79\x31\xaf\xb5\xd0\x14\xdd\x3d\xf6\x53\x2e\x7b\xb0\xed\xff\xcd\x4d\x3e\x00\xb8\xd6\x3c\xbb\x72\x39\xef\xf9\x9e\x7f\xf5\x88\xdf\x5f\x3d\xcf\xeb\xaf\x9e\xe5\x73\x22\xeb\xbc\xf9\x35\x71\xf0\x0a\xa2\x0a\xa1\xac\xf8\xcb\x6d\x5d\xaf\x4b\x71\xbb\x69\xfd\x7f\xfd\x72\xee\x0f\xd0\x2b\xaa\xf8\x3b\xec\xdf\xc6\xfd\x40\xd7\xbd\xc5\xcd\x87\xf9\xdb\xc7\x7d\x7f\xf2\xd0\xf9\x8b\x8b\xf3\xe5\xe4\x0d\x44\xd1\x4f\x2a\x89\xdc\x39\x7c\x20\x12\x3a\x22\xe9\xeb\xa9\xd3\xcf\x26\xfc\x79\xf1\x74\x14\x74\x0c\x21\xb5\x3f\x19\x5e\xcf\x8a\x91\x0e\x95\x92\x7c\x54\xa1\x76\xf6\x79\xc1\x80\xe9\x04\x94\x58\xba\x4c\xfc\x82\x79\xbe\x07\xb7\x65\xd5\x83\xff\x76\x29\x63\x72\xd5\x16\x78\x6d\xfb\x86\xa5\xa9\xaa\xa5\xa5\x1a\x2d\x43\x69\x39\x13\xc6\x25\xb4\xb8\xaf\xac\x2a\x65\x0c\x77\xd7\x71\x77\x19\x3c\x5c\x06\x66\xdc\xa4\x54\x4e\xb4\x75\xe0\xb9\xc7\xed\xee\x7f\x1e\xed\x5a\xa9\x5c\x20\x4c\x84\xaa\x33\xaa\x03\x7f\xa2\xea\x66\x7a\xf9\x6b\x85\xcd\x3c\xd2\x63\x82\x7e\x51\xf2\x57\xaf\xe7\x1f\x4a\xf6\x0b\xf9\x88\x3c\x2f\xec\x4e\x61\x34\xd3\xb8\x42\xed\x73\x1e\xd5\x99\xd6\xd7\xec\x50\x57\xf0\xa9\xe6\xe9\x5a\x34\xfd\xa5\xff\x5d\x4f\xe4\x0a\x39\xa1\x91\x65\x0d\x28\x29\xb8\xa4\xea\x75\x83\xc0\xe9\xce\x2a\x03\x48\x5d\xb9\x6a\xa2\x05\xf0\xa2\xfe\x42\xa8\x0b\x3f\x3d\x86\xd3\x78\x14\x96\xb7\xdb\x49\x48\x59\xea\x5b\x38\x70\x3e\x9b\x52\xf9\x58\x0b\x6b\xe0\x9b\xd2\xb5\x3a\x11\x04\x37\x76\x08\x36\x64\x0e\x33\x04\xb4\xe9\xb7\x01\x26\xb4\x1a\x34\xae\x34\x9a\xa2\x2b\xa8\x5c\xdb\x73\xb9\xbc\x79\xb4\x99\x31\xf8\xe8\x42\xd3\xf7\x7f\x5e\xa4\xf8\xff\x42\xe9\xdf\x09\x01\x63\x95\x66\x39\x82\x69\x8c\xc5\xd2\x15\x52\xc7\xa1\x61\xda\xf6\xf2\x6b\xe7\x55\x83\xf6\x81\x9f\x93\xc6\x77\x6d\xdb\x5a\x60\x08\x49\x6d\xa1\x51\x35\x94\xe4\x63\x90\x88\x99\x53\xcb\xe1\xf1\x15\x4d\xfd\x41\xa3\x77\x8d\x6f\x05\x85\xed\xe8\xeb\x0e\xef\xe9\x85\x57\xa8\x6f\xf9\xa5\xcc\xdf\x13\x82\x8a\xde\x9c\x6e\xb8\x0f\xa2\x8f\x05\xb7\x48\x5e\xa1\xfa\xc8\x55\x29\xbd\x29\x5c\x09\x66\x60\x5b\xf0\xb4\x68\x0b\x57\x6e\x80\x09\xa1\xb6\xa4\xa0\x0a\x1d\xf7\x36\x4a\xce\xfd\xc4\x25\xd7\xa6\x2f\x0e\x23\x88\x4f\xda\xd6\xc3\xe2\xbb\xbe\xdf\x1a\xc1\x95\xcc\x2a\xc5\xa5\xed\xc7\x7c\x6f\x74\xe7\x33\xb4\x3e\x5b\xfe\xeb\xc5\xee\xe4\xf3\xf3\x89\xff\xff\x7d\x65\xb9\x92\x4c\xc4\xfb\xfb\x71\x97\xe9\xa9\x6d\xb9\x87\xb7\xd2\xaa\x74\x7e\x44\xb9\xe1\x5a\x49\xaa\xa0\xe2\x9d\xf5\xed\x66\xa3\x3d\xc6\xf3\x83\xe8\xfb\xda\x7f\x11\x1b\xe0\xb5\x56\xe5\x95\xdc\xf4\xaf\x01\x74\xf6\x6d\xf9\xaa\x33\xe6\x07\x83\xda\xbd\x0b\x75\xa9\x37\x3c\x6b\x0c\x3a\x1d\x8a\x0f\xf3\x9b\xf6\x73\x89\x92\x49\xbb\xcb\xe0\x47\xa6\x97\xed\xb7\xef\x2e\x7b\x8a\xc1\x97\x5a\x20\x0f\xdb\x1f\x54\xe3\xba\xe3\x92\xaa\xc3\xb6\xb5\x19\x7a\xf8\x9f\x75\x43\x0e\xb5\x27\x9e\xd1\x05\x71\x9c\x6f\xd9\xcf\xbc\xac\xcb\x5e\xd8\xee\xd3\x87\x7b\x22\xe9\xdf\x3f\x48\x81\xa4\x5e\x51\xfe\x7c\xd0\x75\x25\x89\x17\x6e\xe6\x6b\x5f\x44\x9c\x5c\xed\xdf\x7f\x42\x71\x1f\x3f\xfa\x1c\xa2\xab\x74\xef\x2d\x84\x4e\xcc\xb9\xe3\x75\x73\x7b\x23\xa6\xf7\x01\xcb\x42\xcb\xd9\x6f\x52\xd1\xf8\x48\x69\x9f\x33\x62\xe8\x5a\x72\xff\xf3\x0f\x1c\x8f\xfa\xc1\x3f\xae\x51\x82\x7f\xb6\x23\x84\xca\xf7\xbc\x71\xee\x90\xae\x08\xc8\x75\xa6\xb4\x19\x7b\xc3\x46\xc1\x39\xf4\xcb\x77\x33\xf6\x88\x82\xaa\xbe\x9b\xe5\xf4\x30\xae\xdf\x09\xf9\x7c\x36\x71\x93\xf3\xd9\x64\xfc\x1f\x68\xda\x1d\xc3\x52\x33\x69\xe8\xd0\x6d\xf5\x62\x32\x73\x67\x18\x92\xed\xb8\x86\x54\x49\x4b\x86\xe3\xb2\x0f\xa7\xff\x9b\x60\xfa\xaf\x7d\x2d\xfb\x57\x00\x00\x00\xff\xff\xb5\x97\xd5\x76\x4c\x20\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 8268, mode: os.FileMode(420), modTime: time.Unix(1507584866, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\x03\x31\x14\x85\xf7\xf3\x14\xd7\xa9\x5d\x26\x33\x2f\xe0\xaa\x95\xe2\xc6\x85\x08\x2e\x25\xd3\xdc\xd8\x4b\x66\x92\x21\x3f\x2a\x86\xfb\xee\x32\x69\x11\x0a\x63\x77\x87\xc3\x77\xbe\xc5\xd9\xdc\x75\x03\xb9\x6e\x50\xf1\xd4\x6c\xee\x41\x3c\x43\x29\xf2\x55\x45\xfb\xa4\x99\x6b\xe3\x97\xe6\xcd\x07\xbb\xa7\xc0\xdc\x99\xec\x1c\x8e\x22\x26\xed\x73\xaa\x00\xfe\x07\x60\x08\x4d\x29\x64\xc0\x21\xc8\xdd\x9c\x23\xf4\x20\x98\x9b\x52\xe6\x40\x2e\x19\x68\x97\xf9\x8c\x30\xcd\x04\x5b\xdd\x9e\xa1\x0a\x08\x40\xa7\x6b\xba\xcc\x5f\xd4\x74\x18\xa0\x97\x6b\x86\x11\x4e\xef\x9f\x13\x4e\x0f\x5b\xd9\x9b\x43\x7b\x81\xd7\x3d\x7b\x8a\xf6\xa6\xc8\x44\xfa\xc1\x3f\xd3\x19\xbf\x52\x35\xa5\xc8\xc7\x6f\x3c\xe6\xa4\x86\x11\x99\xe1\xcb\x07\x8b\x01\x42\x76\x20\xc4\xd1\x3b\x43\x1f\xcb\x23\xbb\x9a\x98\x41\x88\xa4\xa2\x15\xa4\xaf\xae\xfd\x0d\x00\x00\xff\xff\x24\x76\x8a\x2a\x79\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 377, mode: os.FileMode(420), modTime: time.Unix(1505922697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xcd\x6e\xe2\x30\x10\xc0\xf1\xbb\x9f\x62\x84\xb4\x47\x67\x79\x81\x5c\x16\x22\xc4\x65\x91\x68\xd4\x8f\x53\x64\xe2\x49\xb0\xe2\x8c\x61\x6c\x87\x56\x91\xdf\xbd\x0a\x20\x2a\xaa\xd2\xdb\x24\xf3\x9f\x9f\x1c\xc9\x0c\xc8\x1e\x21\x87\x41\x91\xb1\x56\x89\x16\x03\xd2\x00\x39\x94\x1c\x51\xe0\x3b\xd6\x31\xa8\x9d\x9d\x92\x71\xcc\x8a\xdb\x77\x4a\x42\x71\x1b\x7b\xa4\xe0\x21\x87\x93\xe3\x0e\x19\x38\x12\x48\x59\x3b\x6a\x4c\x3b\xf5\x8b\xf3\x94\x12\x48\x19\x94\xef\xa4\xd1\xd3\xdf\x52\xf9\x6e\xad\x53\x12\xd6\xb5\x17\xf7\xc5\x71\xb7\x34\x9c\xd2\xdf\xda\x91\x76\x2c\x71\x40\x0a\xd2\xba\x56\x20\xb3\xe3\xef\x55\x13\x89\xd0\x4a\x1f\x34\x32\x0b\x17\xc3\x21\x86\xc7\x8d\x8b\x41\xf8\xbd\x8b\x56\x57\x81\x15\xf9\x06\xb9\x6a\x8c\xc5\xe9\xe1\x6f\xc5\x93\x38\xed\x91\xaa\xe0\xbe\x96\x37\x70\xf3\xbf\x2a\x5e\xd7\x65\xb5\xd9\x56\xc5\xf3\x7a\x51\x8a\x71\x34\x0d\x10\x42\xb6\x38\x44\x0f\x73\x90\x29\x89\x71\x3c\xb0\xa1\xd0\xc0\x8c\xf1\x18\xd1\x87\xaa\x9e\x96\x39\xfc\xd1\xb3\x4b\x78\x8e\x24\x20\xe9\xf3\x74\x25\xb6\xaa\x5f\xed\x60\x9e\x3d\x52\x7a\xec\x1d\x7f\x4c\x4e\x36\x6f\x60\xf5\x6f\x76\x3d\xf9\x59\x5b\x1a\xdf\xfd\xca\x69\xe3\xbb\x3b\xec\x72\x71\xa7\x89\x63\xc4\x88\xe2\x33\x00\x00\xff\xff\x5f\xc0\xd7\xf8\x18\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 536, mode: os.FileMode(420), modTime: time.Unix(1505922697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xcf\x4a\x03\x31\x10\xc7\xf1\xfb\x3e\xc5\xd8\xd2\x63\xb2\xeb\x55\xd8\x8b\xad\x88\x17\x11\x15\x3c\x27\xcd\xa4\x86\xec\x4e\x96\xfc\x41\x21\xcc\xbb\x4b\x77\x17\xa4\x60\xbd\x0d\xc3\x97\xcf\xe1\xb7\xbd\x69\xb5\xa3\x56\xab\xf4\xd9\x6c\x5f\xee\xdf\x40\x3c\x43\xad\xf2\x5d\x25\xff\x64\x98\xd7\x5f\x38\xff\x3e\x42\xf4\x07\x17\x99\x5b\x5b\x88\x70\x10\x29\x9b\x50\xf2\x9a\xe0\xb5\x04\x63\x6c\x6a\x75\x16\x08\x41\xee\xa7\x92\xa0\x03\xc1\xdc\xd4\x3a\x45\x47\xd9\xc2\x66\x01\x06\xa0\x60\x30\xf5\xb7\x77\xd3\x44\xfd\xce\x6c\x96\x7a\x2e\x05\x20\x99\xf9\x5a\x9d\x57\x35\x3e\x6a\xe8\xe4\x35\x6a\xc4\xb1\xdf\xc9\xce\x9e\xf4\x66\x8d\xff\x76\x0e\x2e\xf9\x7f\x21\xeb\x06\xfc\x95\x96\xfc\x82\x6a\x6a\x95\x0f\xdf\x78\x2c\x59\xe9\x01\x99\xe1\x2b\x44\x8f\x11\x62\x21\x10\xe2\x18\xc8\xba\xd3\x79\x9a\xfd\x7c\x31\x83\x10\x59\x25\x2f\x9c\xb9\xd8\xf9\x27\x00\x00\xff\xff\x80\x45\x84\x4d\x88\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 392, mode: os.FileMode(420), modTime: time.Unix(1505922697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcf\x6a\xc3\x30\x0c\x87\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\xe9\xe8\x76\xdd\x0a\x3b\x3b\x8d\xb2\x79\x6e\x64\x23\xdb\x6c\x60\xf4\xee\x23\x69\xa1\x29\xac\xf4\xf6\xc3\xfe\xf4\xa1\x3f\xab\x87\xba\x33\x54\x77\x3a\x7c\x15\xab\xf7\xcd\xd3\xbe\x7d\x01\xa5\xbe\x5d\xa7\x48\x8f\x08\x39\x57\x7b\x1d\xec\x6b\x2f\xb2\xf8\xa6\xa8\x83\x0d\xf0\xb8\x78\x42\x66\xc7\x13\xfe\xe1\xd8\x6e\x0d\x8b\xd4\x43\x22\xc2\xa3\x0a\xb1\x47\xe6\x05\xea\x52\xf4\x29\xde\x62\x5d\x8a\x45\xce\x66\x00\x42\xa8\x5a\x9f\x02\x34\xa0\x44\x8a\x9c\x3d\x1b\x8a\x03\x94\x17\xd3\xc1\xa7\xa0\x3c\xb2\x9a\xfa\x81\x75\x5f\x9e\x2a\x66\x5a\x01\x52\x3f\xa7\xb3\xeb\x4d\x8f\xbb\x0e\x9a\xea\xb6\x6e\xc4\x11\xd6\x55\x33\xec\x36\xe5\x19\xff\xdf\xb4\x35\xc1\xde\x51\xc5\xd1\x5f\x54\x27\xfe\xca\x55\xe4\x5c\x3d\xff\xe2\x21\x45\xdd\x1d\x51\x04\x7e\x1c\x5b\x64\xe0\x44\xd3\x5c\x8e\x06\xf3\x39\x6d\xa8\x9d\x93\xc8\xa4\xd4\xc1\x2a\xd3\x5f\x9d\xe4\x2f\x00\x00\xff\xff\x36\x8f\xbd\x5a\xbe\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 446, mode: os.FileMode(420), modTime: time.Unix(1505922697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
