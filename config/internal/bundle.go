// Code generated by go-bindata. DO NOT EDIT.
// sources:
// config/gridengine-template.txt (346B)
// config/pbs-template.txt (361B)
// config/slurm-template.txt (415B)
// config/datastore/index.yaml (882B)
// config/default-config.yaml (12.672kB)
// config/htcondor-template.txt (505B)

package config

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\xc4\x30\x14\x85\xf7\x79\x8a\x6b\xc7\x59\x26\xed\x0b\xb8\xb2\x30\xb8\x71\x21\x82\x4b\x69\xc9\x0d\x13\x32\xf9\xe1\x26\x51\x30\xe4\xdd\xa5\x69\x11\x0a\x75\x76\x97\xc3\x77\x3e\xb8\xe7\xf4\xd0\xcf\xda\xf5\xf3\x14\xaf\xec\xf4\x08\xfc\x15\x4a\x11\xef\x53\x34\x2f\xb2\xd6\x96\xf8\x25\xf9\xf0\x64\x46\x4d\xb5\xf6\x2a\x3b\x87\x37\x1e\x93\xf4\x39\x35\x00\xff\x03\x90\x88\x95\xa2\x15\x38\x04\xf1\x1c\x72\x84\x01\x78\xad\xac\x94\x40\xda\x25\x05\xdd\x52\x0f\x08\x36\x68\x38\xcb\x6e\x85\x1a\xc0\x01\x9d\x6c\xd7\x56\x7f\x9b\xec\x65\x86\x41\x1c\x19\x6e\x70\xfd\xfc\xb2\x68\x9f\xce\x62\x50\x97\x6e\x83\x8f\x3d\xa3\x8e\xe6\xae\x48\x45\xfd\x83\x7f\xa6\x15\xdf\xa9\xd8\xfa\x20\x7c\x7b\x32\x48\x40\xd9\x01\xe7\x69\x59\x6c\xdc\x6d\xf7\x1b\x00\x00\xff\xff\xcf\x92\x30\x7f\x5a\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 346, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0xf2, 0xbf, 0x61, 0x66, 0xfc, 0x3e, 0xf3, 0xf9, 0x1f, 0x77, 0x7b, 0xa2, 0xfa, 0x90, 0x1d, 0xf1, 0x81, 0x31, 0xca, 0xc2, 0x64, 0x2, 0x29, 0x41, 0x39, 0xe9, 0xac, 0x46, 0x4, 0x46, 0x43}}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xc1\x4a\xc4\x30\x10\xc6\xf1\x7b\x9f\x62\xec\xb2\xc7\xb4\xf5\x2a\xf4\xa2\x05\xf1\x22\xa2\x82\xe7\x86\x4c\x34\xa4\x9d\x84\x49\x82\x87\x90\x77\x97\xdd\x04\x64\xc1\xf5\x16\x86\x3f\x3f\xc8\x77\xb8\x19\xa5\xa1\x51\xae\xe1\xab\x3b\xbc\xdc\xbf\x81\x78\x86\x9c\x87\xf7\x35\xd8\x27\x55\x4a\xbb\xb9\xd3\xed\xc3\xb1\x5d\x0c\x97\x32\xea\x44\x84\x9b\x08\x51\xb9\x14\x5b\x82\xd7\x12\x64\xee\x72\x36\x1a\x08\x61\x78\xf0\x29\xc0\x04\xa2\x94\x2e\x67\xcf\x86\xa2\x86\xbe\x02\x1b\x90\x53\x18\xe6\xdb\x3b\xef\x69\x3e\xaa\xbe\xd6\xe7\x52\x00\x92\x3a\xbf\x9a\xf3\xba\xee\x8f\x12\xa6\xe1\x1a\xb5\xe3\x3e\x1f\x87\x49\x7f\xca\xbe\xc5\x7f\x3b\x8b\x09\xf6\x5f\x48\x9b\x0d\x7f\xa5\x9a\x5f\x50\x5d\xfd\x29\x7c\x3b\xb6\xc8\xc0\x89\x40\x88\x78\x9a\x6f\xb9\x18\xf2\x27\x00\x00\xff\xff\x94\x91\x42\x0b\x69\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 361, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0x79, 0x28, 0x19, 0xf9, 0xa3, 0x7b, 0xf0, 0x79, 0x32, 0xc3, 0xcd, 0x53, 0x5d, 0x65, 0xb0, 0xc4, 0xdb, 0x64, 0x16, 0x86, 0xa3, 0x9f, 0x80, 0x59, 0xed, 0x48, 0xa6, 0xb1, 0x14, 0xc4, 0x5f}}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\x0d\x74\xbb\x6e\x85\x9d\x9d\x45\x61\x9e\x67\xd9\x48\x36\x3b\x18\xbf\xfb\x48\x53\x68\x0a\x0b\xbb\x19\xeb\xfb\x3f\xa4\x7f\xf7\xd0\x0e\x86\xda\x41\xcb\x67\xb5\x7b\x3b\x3c\x9d\x8f\xcf\xa0\xd4\x97\x1f\x14\x69\x87\x90\x73\x73\xd6\x62\x5f\xc6\x52\x56\x63\x8a\x5a\xac\xc0\xe3\xea\x0b\x99\x3d\xcf\xf8\xbb\x67\xdb\x1b\x2e\xa5\x9d\x12\x11\x7e\x2b\x89\x23\x32\xaf\x50\x9f\x62\x48\x71\x8b\xf5\x29\x56\x39\x9b\x09\x08\xa1\x39\x86\x24\xd0\x81\x2a\xa5\xca\x39\xb0\xa1\x38\x41\x7d\x33\x7d\x84\x24\x2a\x20\xab\x79\x1f\xd8\x8f\xf5\x92\xb8\xd0\x0a\x90\xc6\xcb\xeb\xea\x7a\xd5\xee\x34\x40\xd7\x6c\xeb\x1c\x3a\xd8\x37\xdd\x74\x3a\xd4\x57\xfc\x6f\x53\x6f\xc4\xfe\xa3\x8a\x2e\xdc\x54\x0b\x7f\xe7\xaa\x96\x83\xe1\xc7\xb3\x45\x06\x4e\x34\x87\xe6\xa6\xfb\xbb\xce\x7f\x03\x00\x00\xff\xff\x71\x9e\x5b\xbd\x9f\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 415, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbc, 0x36, 0xd7, 0x29, 0x50, 0x7c, 0xe3, 0x2b, 0x54, 0x30, 0x8d, 0x8, 0x41, 0x58, 0xaa, 0xa0, 0x48, 0x6f, 0x0, 0xf2, 0x68, 0xed, 0xbe, 0x7e, 0x9e, 0xb0, 0xe4, 0x7f, 0x86, 0x7d, 0xdf, 0x2d}}
	return a, nil
}

var _configDatastoreIndexYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x91\x3f\x4f\xc3\x30\x10\xc5\x77\x7f\x8a\x27\x75\x81\x21\x74\xf7\x1a\x24\x84\x84\xc4\xd0\xb0\xf7\x1a\x5f\xdd\x53\x93\xbb\xc8\x3e\x04\x7c\x7b\x94\x16\x50\x66\xd4\x76\xf3\xfb\x23\xff\x6c\xbd\x15\xba\x03\x57\x86\x68\xe2\xcf\x26\xf1\x5e\x54\x5c\x4c\x2b\x94\x39\xc1\x0d\x3b\x86\x8c\x93\x15\x3f\xcb\x47\x72\xaa\x6e\x85\x71\x27\x7b\x6c\x13\x39\xed\xa8\x72\x44\xfa\x0d\xb6\xf7\x61\x85\xb7\x2a\x9a\xf1\x64\x96\x07\x46\x3b\xd8\x7b\x42\xfb\xf2\x1c\x91\xfb\xd3\xf9\xaf\x7c\x06\x73\x45\x5f\x98\x9c\x31\x91\x1f\xd6\x6e\xeb\x93\xfd\xf0\x45\xe3\x10\xc2\x4f\x25\x86\xd0\xe0\x28\x9a\x22\x3a\xaa\xc7\x00\x4c\xc5\x26\x2e\x2e\x73\x06\x34\x50\x1a\x39\xe2\xf5\x43\xb9\x2c\xf4\xc6\xc9\x79\xa1\x3b\xca\x1b\x2f\xa2\xb9\x2e\xcc\x76\xc6\x8b\x69\x27\xe3\xdc\x05\x92\x14\xee\x67\x27\x22\x71\xed\x2f\xc4\xbe\x12\xe6\x96\x5f\xba\xd0\xb5\xb7\x5c\xe5\x4a\x2b\xfc\xef\xc9\xdf\x01\x00\x00\xff\xff\x60\x88\x85\xd9\x72\x03\x00\x00")

func configDatastoreIndexYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDatastoreIndexYaml,
		"config/datastore/index.yaml",
	)
}

func configDatastoreIndexYaml() (*asset, error) {
	bytes, err := configDatastoreIndexYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/datastore/index.yaml", size: 882, mode: os.FileMode(0644), modTime: time.Unix(1745621270, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4f, 0xc3, 0x65, 0x96, 0xdd, 0x15, 0xe8, 0xf, 0xd, 0xe4, 0xaf, 0x98, 0x9a, 0x1e, 0x52, 0x16, 0x5e, 0x75, 0xc3, 0xaf, 0x72, 0xc9, 0xf0, 0x97, 0x67, 0xeb, 0x61, 0x48, 0x1, 0xff, 0x54, 0xe1}}
	return a, nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x8f\x1b\xb7\x92\x7e\xef\x5f\x51\x3b\x93\x83\x8c\x01\xdd\x26\x59\x07\x1b\x2d\x0c\xec\xdc\x62\xcf\xf1\x4d\x3b\x92\xd7\xbb\x4f\x06\xbb\x59\x52\x33\x62\x93\x1d\x92\x3d\xb2\xec\xf5\x7f\x5f\x54\x91\xdd\x2d\x69\xc6\xb1\x93\x33\x06\xb2\xc0\xf1\x8b\x47\xec\x62\xb1\x58\xac\xcb\x57\x45\x1e\xc3\xa2\x44\x30\xa2\x42\xb0\x4b\x08\x25\x82\x28\x82\xba\x45\xf0\xe8\x6e\xd1\x81\x14\x41\xe4\xc2\x23\xe4\xa2\x58\xa3\x91\xd9\x31\x9c\xdd\x0a\xa5\x45\xae\xbb\x31\x3f\x85\xdc\xea\x20\xf3\x01\xe4\x42\xae\xd0\x0d\x78\x9a\x0f\xd6\xe1\x00\xe4\xd6\x88\xca\xd2\x47\xd4\xc2\x07\x55\x0c\xa0\xb2\x66\x65\x65\x9e\x5d\x26\xe6\xed\xfc\x2c\xfb\xac\x38\x85\xad\xea\x26\x7c\x49\x0c\x6d\x0b\xa1\x07\x50\x86\xc2\x1a\x69\xdd\x00\xbc\x6e\x5c\x35\x80\x3a\xf7\x03\x58\x39\x25\xd1\xac\x94\xc1\x01\x54\xc2\x34\x44\x29\x36\x7e\x98\x8b\x50\x94\x03\x58\x37\x39\x3a\x83\x01\x7d\x76\x11\x17\x4b\xfc\x7e\x47\x2a\xbc\x45\x13\x60\xe3\x54\x40\xd7\x8a\x71\xe2\x1f\x8d\x3e\x2b\xde\x6a\xf0\xe7\x54\x35\x80\xb5\x58\xae\x45\x76\x45\x0b\xbe\xe5\xf5\xfc\x34\x03\x18\xb6\x9a\xa3\x3f\xb5\x5d\x65\xd9\x0b\xbb\x5a\xa1\xa3\x6f\xc7\x40\x7f\x2b\xb3\x02\x8d\xb7\xa8\xfd\x14\x24\xe6\xcd\x6a\x00\xca\x2c\xed\x00\xd0\x39\xeb\x32\x80\x17\xf4\x71\xca\x83\x3c\x89\xb9\x13\x2f\x0f\xc1\x42\x28\x95\x87\x5a\x84\x72\x04\xd7\x4b\xc0\xaa\x0e\xdb\x41\xfc\x28\x1c\xf2\xce\x03\x1a\x22\xf4\x41\xa2\x73\xa3\x0c\xe0\x75\x13\xea\x26\xfc\xa2\x34\x4e\xe1\xe8\x28\xcb\xe6\x6c\x49\x51\xa2\x67\xd6\x87\x5d\x3d\xfe\xd2\x18\x83\x3a\x19\x1b\x4d\x26\x82\x57\xa2\x6a\x75\x5f\x5a\x1f\x32\x9e\x39\xb3\x2e\x40\xe3\x51\xc2\xd2\x3a\x78\xb6\x58\xcc\xc8\x26\xaa\xc6\xa8\x42\x04\x65\x0d\x08\x23\x99\xe5\x06\x73\x90\xc2\x97\xb9\x15\x4e\x32\xcb\xc5\x62\x46\xb3\xa7\xf0\x6f\x93\xc9\xe4\x3e\x6e\x37\xb3\x8b\x7d\x66\x34\xed\x66\x76\x11\x67\xfd\x3c\xf9\x39\xcd\xba\xc1\xdf\x1a\xe5\xe8\x44\xbd\x2a\x40\x34\xa1\x44\x13\xda\xf5\x89\x11\xad\x9f\x1c\xe7\x6c\x76\xed\xa1\xf1\xa4\x7e\x01\xb5\xf0\x7e\x63\xa3\x38\xc7\xa4\x48\x5a\x9a\xac\x70\x8d\xe0\x1b\x87\xa4\xc0\xda\xd9\x1a\x9d\xde\x82\x43\x1f\x9c\x2a\x02\x88\xa2\x40\x9f\x4e\x81\x3c\xc0\x2c\xd5\x0a\x96\x4a\x23\x73\x39\xc1\xd1\x6a\x04\x45\x59\x59\x09\x3f\x4d\x26\xb0\x64\x55\x8e\x22\xd9\x68\x5b\xe9\x47\x4c\x76\x4e\xb2\x9e\x35\xa1\x8c\x07\x40\x76\xf2\xc6\xa3\x9b\x82\x90\x95\x32\x69\x0c\x60\x96\x24\x9c\x82\xc5\x5f\x97\x93\x1f\x7e\xac\xec\x6f\xdd\xc7\x33\x22\x9d\x42\x70\x0d\x1e\x30\x69\x3c\xba\xd3\x7b\x98\x88\xbc\x38\xfd\xe1\xc7\x7b\x88\x7f\xb8\x87\x78\x69\x6d\x2e\xdc\xbe\x8a\xcf\x51\x38\x74\xf0\xf7\xb7\x8b\xaf\xd0\x73\x54\x6b\xb4\x33\xd8\x58\xf3\x7d\x00\x2d\x1a\x53\x94\xb0\x29\xd1\x24\xcd\x35\x2e\xce\x7f\x73\xf3\x02\x0a\x61\x8c\x0d\x90\x93\x9d\x0b\x89\xe9\x5c\x5e\x2b\xb9\xa7\xa9\x63\xa6\x4d\x96\xfa\xfa\xfa\xf2\x82\xd7\x54\x05\x1e\x70\x3c\xe1\x68\x20\x02\xfa\x48\xb5\xf7\xf5\x51\xcf\xed\xea\xbd\xa8\x6a\xf2\x8a\x32\x84\xda\x4f\xc7\x63\x8c\x03\x23\xeb\x56\x63\xab\x64\x31\x1e\x6d\x50\xeb\xe1\xda\x6c\xac\x19\xdb\x1a\x8d\x92\xc3\x3d\x66\x89\xd5\x3c\x8a\x71\xc1\x9f\xde\xdc\xbc\xe8\x97\xb8\xd0\x8a\x22\xd2\xf5\x25\xbb\x83\xc7\xc2\x61\x60\x4f\xf5\x1c\xa8\x54\x28\x79\x33\xc1\xae\xd1\x80\x32\xc1\x59\x5f\x63\xc1\xbb\x70\xf8\x5b\x83\x3e\x24\x56\x91\xd1\xb5\x9c\xee\xfd\x9e\x33\xc3\x7e\x39\x0a\x8b\xa4\xa3\x4d\x89\xae\x55\x51\x69\x1b\x2d\xc1\xa1\x54\x0e\xc9\x88\x97\x14\x1b\xb5\x5d\x29\x03\x27\x6b\xc4\x9a\x05\xa0\x88\x02\xdf\x8f\x79\xf8\xfb\x47\x89\xdf\x4d\x9a\x43\x3b\x82\x23\x52\xd2\x74\x3c\xee\xc2\xc0\x94\xbc\x37\xce\x38\xea\x04\x78\x5d\x93\xec\x82\xe2\xd7\x12\x68\x2b\x6a\xa9\xc8\xb3\x38\x6c\xf9\xc2\xd6\x08\xb7\x42\x37\x08\x55\xe3\xf9\xbc\x95\xe9\x15\x30\xed\xd6\x65\x9b\x9b\x13\xf9\xf4\xeb\x58\x8b\x46\x2a\x34\xc5\x1f\xe0\x7e\x96\x66\xf4\x0b\xbc\x50\x3e\x90\x75\x91\x5b\x50\x4c\xf4\x70\x42\xe6\xee\x9b\x7c\x58\x68\xa1\xaa\x47\xe4\xf9\x39\xc2\xca\x09\x13\x50\x46\x2f\x1c\x3a\xab\x3b\x1e\x3c\xe2\xa7\x9d\x4b\x0d\xa3\x53\x8f\x5a\x8e\x23\x6b\xf0\x3f\x76\x8c\xec\xf3\x84\x61\x63\xf7\x08\x63\x9c\x32\x85\x6e\x24\x82\x80\xa3\x0b\x51\x94\x38\xbc\xb0\x64\x31\x7a\x0a\xc6\x0e\x39\x65\x1d\xc5\x40\x5c\xa2\x90\xe8\x68\xf7\x4f\x31\x8c\x79\x5f\x0e\x7d\x6d\x8d\x47\xcf\x9c\x38\xbc\xc5\x64\x59\x88\xa2\xa4\xa0\x98\x6f\xc9\xfe\xd0\x55\x28\x95\x70\xdb\xd6\xb5\xd8\x97\x2f\x95\xa7\xcc\x49\xbc\x79\xe1\x14\x7a\x98\xd5\x25\x2e\x95\x41\x0f\x41\xf8\x75\x1b\x21\xc9\xd6\x6f\x95\x57\xb9\xd2\x2a\x6c\x89\xb5\xe5\xc3\x4b\xaa\x39\x3a\xd3\xfa\x08\x4e\x24\x2e\x45\xa3\xc3\x23\xda\xbd\xd6\xcc\x20\x66\x31\x9e\xaa\x39\x08\xe3\x2d\xba\xad\x35\x31\xcc\x1d\xbd\xde\x18\x74\x47\x30\xbc\x9f\x96\x4e\x9a\x14\xe8\x61\x53\x5a\x28\x1c\x0a\x3a\xa5\x50\x62\xb5\x33\xfb\xb5\xe3\x43\x22\x26\xf8\x3e\x10\x0c\xe8\xd8\xe6\x5b\x92\xc3\x6e\x48\x1b\xf1\x6c\x23\x37\x8f\x18\xe5\x08\xa4\xa8\x18\x99\x68\x06\x28\xdf\xad\xc9\x39\x54\x78\x6f\x0b\xc5\xab\xf6\x9e\x2d\xfc\x7a\xd4\xcf\xf1\x70\xd2\x99\xd7\x23\xd8\x90\x97\x52\xe0\x73\x58\x58\x27\x49\x5a\x9b\xf6\x96\xe3\xd2\xba\x2e\x1f\x4f\x46\xa7\xa7\xa3\x53\xe2\xb3\x10\x7e\x7d\xc6\x5a\x9e\xc2\x99\xd6\x59\x76\x33\xbb\x88\xb1\x20\xea\x96\x52\x67\x8a\xc4\x42\x4a\x87\x9e\x0e\x3c\x46\xe2\xb3\xf8\x7b\x27\x93\x4f\xfb\x54\x7a\xe1\x50\x52\x50\x17\xda\x73\x44\x3f\xff\x7f\x94\x52\x63\x36\x8b\x1f\x23\x9a\x38\xcc\x7b\x3c\x5a\x58\x63\x52\x6c\x0d\xaa\x42\xdb\x04\x56\x68\xfc\x73\x0a\x3f\x4d\x7c\xa4\xa3\x20\x5a\x89\xf7\xaa\x6a\x2a\x30\x4d\x95\xa3\xe3\x9c\xa3\x28\x22\x84\x52\x04\x10\x6d\x6c\x86\x8d\xd2\x9a\x42\x82\xc3\xe0\x54\x02\x2f\x4b\xa1\x74\xe3\x30\x25\x41\x62\x0f\x39\x86\x0d\xa2\x49\x64\xa4\x60\xb2\x33\xf2\x13\xc0\xf7\xb5\x35\x51\xf1\x0c\x4c\xed\x72\x09\x3e\x08\x17\x58\xab\x01\x1e\x53\xd2\xb0\x46\x46\xbf\x6d\x6a\x52\xd5\x29\x54\xca\x34\x81\x74\xf4\x52\xbc\xbf\x89\x4c\xa7\x70\x3a\x69\x91\xb1\x2f\x4a\x94\x8d\x8e\x26\xda\xa1\x2a\xd2\xf0\x4b\xc6\xd9\x87\xe8\x7d\x94\xcd\xdb\x19\x2d\x2c\xdc\x80\x5d\x26\x24\xe9\x1a\x03\x62\x97\x67\x40\xd7\xa1\xb2\x76\xe2\x8d\x20\x7c\x7e\xea\xbb\xe9\x95\x30\xdb\x64\xcb\x84\x46\x13\x19\xc5\x24\x6b\xf0\x7e\x1e\x17\x65\x63\xd6\xbc\x8f\x96\x89\xb6\x66\x45\xd3\x37\x42\x85\x4e\x8b\x4d\x2d\x39\xb7\x27\x17\xa9\x84\x5b\x47\x13\x34\x56\x22\x48\x14\x6c\x83\xaf\xac\xc4\x99\x32\xab\xee\x7c\x4f\xab\xfb\xd9\x92\x6a\xd2\x5c\x86\xcd\xc2\x85\xc1\x21\x6f\x52\xdd\x1d\xee\xd7\x46\x85\x8e\xfb\xe3\x2a\xcb\x68\x70\xda\x9a\x7f\x82\xe6\x89\xf3\xf5\x65\x67\x2b\xa2\x09\xb6\x12\xe4\x53\x5a\x6f\x61\x85\x86\x34\x11\x21\xcf\xf5\x65\x44\xe8\x89\x45\xb7\x6a\x29\x68\xb7\x84\x10\xa4\x46\x16\x98\x76\x80\x74\xa4\x22\x65\xb8\x28\xc7\x00\x54\x32\x4a\x5f\x36\x01\xa4\xdd\x98\x68\x86\xc3\x53\xa8\x50\x18\x0e\x58\x0e\xc9\x2c\x8c\xed\xbc\x00\x26\xed\xc7\x38\x00\xaa\xe2\x2c\x10\x50\x6f\x13\x5e\xa0\x35\x96\xca\xf9\xd0\x05\xb4\x6e\xe7\xc3\xd3\xe4\x37\x67\xac\x95\xb8\xfc\xfe\x26\x83\xdb\x92\x6e\x25\x06\x42\x20\x1b\xf2\x21\x87\xde\x36\xae\xc0\x18\xc5\x45\x57\x9c\x05\x0b\x2a\x8c\xfa\xcc\x42\xda\xbf\xe9\x68\x53\x3e\xe7\x75\xf6\x31\x9f\xbd\x45\x47\xf5\xa4\x8f\x78\x20\xc7\x52\xdc\x2a\xcb\x25\x4c\x37\x9d\xce\x86\x63\xdd\xec\x8d\xef\x97\x1c\xb5\xa3\x75\xe3\xa7\xc0\xe1\x90\x03\xe9\xd9\xcb\x9e\x66\xc0\xb9\xf4\xbc\x25\xbd\x11\xd5\xd3\x7c\x0a\x93\x51\x47\x7d\xa9\xfc\x1a\x7c\x2d\x0a\xfc\xec\x24\x22\xd9\x99\x75\x0c\xbf\xf0\x39\x6e\x86\x5c\x0d\x42\x68\x68\xaf\xa3\xbb\xee\xe7\xb7\xa6\xe8\xf3\xc9\x9d\x02\xed\x0d\x7b\x43\x74\xbf\xc7\x3e\xcb\xde\x5a\xb7\x6e\xdd\x98\x6a\x3e\xdf\x65\x42\xd9\x38\xd2\x66\xed\x2c\xc5\x5c\xfa\xb3\x35\xc9\xb6\x6c\x64\xf5\x2a\x0f\x11\xf6\x59\xb7\xa5\x05\x88\xe1\xa5\x72\x53\x18\x8d\x63\x88\x1d\x6e\xac\x5b\x0f\xa5\x72\x7f\x68\x1b\xb5\xd5\x9a\x4d\xb7\x10\xa6\xa0\x1d\xa8\x95\x11\x9a\xe2\xc5\xcc\x6a\xad\xcc\xaa\xdf\xc2\x1f\x51\x0e\x12\xac\x0e\xd2\x36\x61\x8c\xce\x45\x14\xa2\xed\xaa\x0b\x12\x29\xb3\xdc\x51\x1b\x95\x27\x21\x44\xdf\x56\x4c\x36\x89\xea\x70\xe8\x1b\x1d\x92\xa5\x79\xb2\x7a\xd4\x92\x0c\x8a\x68\x23\x57\x49\xe1\x50\x99\x95\x8e\x7e\xc7\xdc\x7a\x37\xc1\xf7\x58\x34\xc1\x3a\xc0\xf7\x2a\x70\x16\x78\x61\x57\x87\xa7\x44\x53\x5e\x8a\xf7\x90\x6f\x93\x90\x0c\xdf\x58\x3f\x3b\xbb\x69\xe1\x6b\xda\x54\xe2\xb5\x10\x4a\xcf\xd5\x07\x0a\xb7\x93\xc9\x64\x02\xc7\x70\x3a\x81\xe7\xe7\x91\xe9\x2b\xeb\xaa\xe8\x73\x54\x7a\xb3\x2d\x80\x44\x8d\xb4\x8c\x0a\x9e\x87\x68\x27\xdd\x11\x27\xc9\xa3\xd4\x9d\x92\x17\xa4\x94\x08\xda\x40\x46\xf4\x97\x92\xdf\xae\x67\xbd\x40\x71\x8b\x9d\x7d\x2c\x85\xf6\x09\x14\xbe\x50\x95\x0a\x31\x7e\x75\x09\xb4\xb0\xa6\x68\x9c\x23\xcc\x49\x71\x89\x0a\x3d\x3f\x6e\x6a\xfe\x3f\x66\xb2\x99\x70\x42\x6b\xd4\x0b\x27\x8c\x5f\xa2\x4b\x39\x6d\xa6\x9b\x55\x82\xd5\x09\x88\xca\x16\x80\x1e\x0f\x1f\xf6\x5f\x76\x0c\x6d\x0f\x8c\x51\xec\xd8\x3a\xe0\x16\x0f\xa4\x1e\xcf\xf8\x99\x30\x52\xa3\xf3\x0f\xbf\x74\x76\x6e\x75\xb8\x3c\x9f\x26\x04\x43\xfe\x1e\x6d\xb7\x6b\xf9\x25\x5c\x44\xdf\xee\xf1\xc6\xf4\x7b\x24\xf3\x2c\xbb\xe4\xc6\x55\xcb\xec\x5c\x78\x64\x80\x1a\x2c\xa1\x01\xb6\xb2\xb6\xb5\x05\x81\xcf\x96\x91\x65\xae\xb1\x25\xdd\x83\x53\x67\x6f\xe7\xe0\x70\x15\xeb\xdd\x1b\xfe\x83\xf3\x54\xfb\x2d\xe2\x51\x58\xe3\x16\xae\x2f\x33\x80\xe7\xb8\xdd\xfb\x1e\xab\xd4\x96\xec\x39\x6e\x19\x92\x72\xe5\xca\xe9\xee\x2a\x36\xd7\xd2\xce\x1d\x2e\xd5\xfb\x5d\x51\x95\x91\xf8\x9e\xaa\x31\xf2\x83\x41\xec\xf1\xf9\x01\x67\x46\x4f\x00\xf0\x9a\xbe\xc7\x69\x7b\x62\xef\x34\x0b\x52\xfb\xce\xa3\x70\x45\xb9\x1b\x3c\xa9\xb2\xbd\x53\xd8\xfe\xfc\xc3\x24\x42\x90\xb6\xe4\x1c\x31\xc4\x64\x15\x76\xcd\xae\x08\x90\xcf\xf6\x00\x32\xb3\x4c\x94\xd3\x03\x0e\x2d\x26\xfd\x32\x87\x0e\xbd\x1e\x70\xb8\x32\xb2\xb6\xca\x84\x0e\xcc\x25\xbd\xb5\xed\x07\x38\xe9\xfa\x18\xf1\xc3\xa8\xb0\xe3\x42\xdb\x46\x3e\x22\xb6\x17\xf4\xd7\xf5\xe5\x21\x57\x3a\xf1\x9f\xfe\x75\x88\xa6\xb0\xb1\x00\x59\x63\x04\xfa\x84\xfd\xad\x53\x1f\x58\xae\x7f\xe7\xa2\x1b\xc3\x60\x27\xd1\xb6\x85\xcc\xb8\x85\xfe\xa9\xc7\x11\x85\x61\x46\xb4\xee\xd9\xec\x9a\x0c\xe2\x60\xd9\xf9\x2e\xd9\x9f\x5c\x6f\x94\x75\xad\x97\x45\xac\xf0\xb3\x63\x78\x6a\x2d\x05\x66\xde\x2d\x3b\x73\x8c\xac\x1c\x43\x5b\x4f\x1a\x65\xdd\x07\x92\x6b\xe6\xec\xaf\x58\x84\xce\x66\x5b\xe7\x13\x45\x61\x1b\x2a\x91\x77\x6b\x23\x15\x11\xc3\xee\x5e\xae\x97\x50\x5b\xcf\x75\xe8\x60\x8f\xf8\x7e\xc8\x27\x95\x2f\x68\x57\x28\x99\xcf\xd2\xd9\x2a\x1a\xa9\xb9\x55\xce\x9a\x0a\x0d\x03\xa0\x9d\x8a\xac\xef\xdd\xbe\xb4\x66\xd5\xf9\x35\x15\x74\x1e\x4a\x4b\xf9\x89\x9b\xe0\xb1\xc0\x43\xbf\x53\xa8\xa1\x4c\xe6\xce\x99\x88\x67\x44\x18\x34\xdc\x69\xe8\x32\x3c\x69\xa3\x4c\xaa\x6a\xbb\xa8\xc3\x66\xcf\x45\x04\x81\x10\x65\x20\xc9\xb0\x93\xb5\x62\x72\xa5\x19\xdc\x2d\xe8\x6e\x11\x76\x9c\x71\xd1\x42\xcb\x24\x6a\xc5\x9a\x4d\x75\xd5\x01\x16\x4f\xe5\x25\x95\x1e\xdc\xb5\x90\xdc\x36\x8c\xca\x62\x0c\xda\x56\x72\x84\xfa\x8d\x04\xae\x4c\xa9\xa2\xa2\xfa\x88\x2a\x4c\x36\xa1\x0e\x2d\x7a\x42\x3b\xd6\xd0\x39\xc5\xe6\x47\x2f\xca\x07\x74\x76\x10\x4b\x4f\xa1\x35\x54\x62\x0b\xb9\xb6\xc5\x9a\x04\x41\x6e\x5e\x0a\xc5\xcb\x44\xc1\xfa\x0a\xb2\xed\xa2\xe4\x08\xe8\x29\x84\x2a\x5f\x46\x0c\xbf\x5b\x11\xb4\xc5\x69\xec\x0e\x18\xd9\x07\x01\x65\x96\xd6\xc5\x63\x2f\x0e\x2a\x6f\x1a\x53\x46\x71\x45\xb8\x5f\x7f\x33\x3f\x49\xe5\x93\x35\xfb\x67\x24\xb9\x09\x23\x21\x8f\x79\xff\xb2\xcf\x18\xa8\xe5\x5e\x54\x8a\x36\xde\x17\xc8\x64\x54\xcf\xc5\x72\x2d\xa6\x5d\x9f\xa0\x33\x10\x26\x5d\xd8\x5a\x15\xdd\x51\x7e\x8b\x8c\x9b\x6e\x77\xe0\x3c\xdd\xcb\x7c\x83\xd4\xfa\x6c\x71\xc1\x17\x50\xd1\x6f\x16\x8d\x33\x40\x85\x36\x07\x05\x1f\x44\x40\xee\xc0\x98\x42\x69\x74\x23\x78\x5b\xa2\x01\x34\x8c\x34\x06\x2d\x74\xec\xef\x23\xd0\xf7\x70\xfc\xd9\xec\x82\x59\xf6\xd5\x71\xb0\xb0\x54\x46\xb6\xa5\x2f\xf7\x0b\x1c\x82\x0f\x4d\xb1\x26\x8b\x14\xf0\x5b\x83\x0d\xb9\x25\xaf\x4b\x38\xd1\x39\xeb\x90\xa3\x67\x2a\xf2\x13\x74\x6d\xa1\x5f\xa4\xa4\x68\xe4\x24\xc1\xce\xed\x4e\x4f\xee\xa6\x93\x7b\xe7\x3e\xa0\x1b\x24\xc0\x49\x76\x5e\xf6\x98\xb9\xbc\x73\x77\xc7\xbf\x85\x43\x1f\x17\x62\xbf\x89\x9b\xfe\xde\x77\xf7\x7b\xc9\xde\x43\x69\x3d\x29\xab\xb6\x2e\xf4\xf6\xd6\x13\xed\xad\x4c\xf0\x8d\x9c\x60\x81\x55\xad\x45\xc0\x2e\x8c\xf5\x43\x53\xf8\x5f\x36\xb6\xc6\x28\xb2\x3c\x84\x27\x70\x2b\x8c\xd2\x5a\xf0\xf0\x0a\x03\x9a\x5b\x78\x02\x8b\xb8\x35\x48\x38\x95\x4b\xc5\x27\xf0\xf1\xe3\xe8\xaa\xfb\xfd\xe9\x13\x13\x08\xb7\x6a\x28\x84\x7a\x78\xd2\xe2\x5f\xd7\x18\x18\xa6\xc6\x3d\xcd\x89\x7d\xfa\x4f\x9f\x60\x38\x24\xfd\x0e\x95\xa4\xd1\x85\xf0\xeb\x6b\x99\xb8\x50\x09\xc1\xfc\x13\xba\xfd\xf4\x69\x1c\xaf\x30\x87\x0c\x3f\x86\xda\xae\xa2\x38\x74\x76\x87\x94\x09\x98\xc5\x1b\x38\x26\xb3\x7c\x05\xf7\x79\x3a\xdb\x04\xa6\x8b\xcd\xfa\x77\x21\x01\xe0\x77\x4b\x2e\xe0\x9e\xc0\xff\x5c\xcd\xf9\x3b\xc5\xc1\x77\xc1\xf6\x04\x1d\xe3\xd7\xaf\xde\x5d\xfd\xf7\xf5\xe2\xdd\xeb\x9b\x77\x57\xff\x75\x7d\xb1\x60\xf2\x8f\x1f\xd5\x12\x0c\xc2\x88\x6a\x5b\x98\xc0\x30\xed\xee\xe3\xc7\xda\x29\x13\x96\x70\x94\x1a\x59\xef\x0a\x22\x78\x02\x7f\x93\x47\x91\xb8\x23\x1c\x02\x1a\xd9\xfd\x4a\xec\xb8\xfe\xa5\x42\xf6\x77\x38\x56\x58\x51\x75\xf1\x04\xfe\x36\x9a\x2c\xe1\xe9\xf9\x51\x9a\xf6\xfb\x9c\x63\x91\xfc\x05\xd6\x92\x8a\xed\x5d\xc6\x71\xd6\x1d\xce\xfc\x93\xbd\x2d\xcb\x66\xe7\xf3\x7f\x3a\xff\x5f\xd4\xf9\x8f\xff\x25\x57\x66\x9c\x0b\x5f\xc6\x9f\xb3\xf3\x39\x0c\x5f\xdd\xf1\xc9\x38\x6e\xbf\xe4\x43\x91\x0c\xbf\xe4\x92\x5f\xf6\x8d\xc8\x48\xc7\x42\xe3\xc9\xe9\xb4\xae\xcd\x93\x07\x70\x90\x96\x6d\x85\xd5\x13\x32\xe1\x55\xfe\x00\xae\xd1\x32\xa5\x80\xd1\x73\xfd\x3d\xbf\x38\x88\x9d\x5f\x19\x2b\xaf\x2f\xf7\x8e\x25\x7b\xea\x94\xbc\xe2\x37\x1c\xd3\x3f\x77\xd6\xdf\xdd\x7b\xd2\xdf\x7d\xcd\x39\x7f\xf7\x15\xa7\x4c\x44\xdd\x09\x7e\xed\xb9\x7f\x07\xc3\x1a\xa1\xaa\xd5\x43\xc4\xc3\x28\x41\xf9\xee\xb6\x3d\xef\xa7\x0f\x71\xdc\x89\xe9\xd2\xab\x0f\xd8\x71\xfd\xf6\xc7\x3d\xd7\x8d\xab\xfe\x19\x47\xff\xb2\x71\x74\xbc\xef\x5c\xf3\xf3\xb3\xc5\xc5\x33\x18\x0e\x7f\xb5\xf9\x90\x8b\x90\x3b\x9e\xd6\x91\x98\xa8\xeb\xd3\x83\xe1\x08\x70\xbe\xe4\x65\x1d\x79\xc2\x23\x5f\x70\xdd\xaf\xf0\xc1\x8e\x23\x21\x93\x61\x8d\x8e\xed\xf1\x41\x1c\xb2\x63\x5d\x61\xc5\x20\xe2\x41\xc0\x49\xcf\x36\x54\x75\xcf\xf6\xdb\xfb\x24\xf7\xd8\xce\x45\x28\x4a\x90\xe8\x0b\xa7\xf2\x64\xf6\xfb\x17\x24\x6d\x69\x79\xf6\x76\x0e\x91\xfa\xce\x25\x60\xcb\xe7\x41\x1d\xbc\x5b\xaf\xb5\xfe\x43\xc7\x36\x5c\x68\xf3\xbd\x5b\xf4\xdf\xde\x77\xff\xf2\x7e\xbb\xbb\xb9\x7b\xbd\xf6\x18\xfe\x6e\xf3\x78\x91\xc5\xa7\x50\x08\xc3\x3d\x03\x15\x4a\xe4\x6b\x47\x7e\x7b\x97\x4e\xa6\x12\x1f\xac\xe9\xae\xab\xe0\x15\x7d\x3b\x39\xbb\x79\xc5\xed\xbb\x3d\x3e\x53\x38\x4a\x5e\x45\x9e\x2d\x71\x79\xd4\xae\xf5\x9f\x14\x17\xff\xb1\x65\x98\xc5\xfe\x0a\x1c\x6d\x8f\x0e\x9a\xc1\x6d\x73\xb5\x7b\x8b\x03\xbf\xda\x3c\x06\xe6\xf8\xf8\xaf\x7d\x84\xc1\x54\xf4\x4d\xf6\x8a\x50\x77\x7a\xc9\x7d\xd7\x78\xb7\x37\xfc\x0d\xfa\x0d\xf3\x60\x9d\x58\xe1\x37\x68\x33\x1c\xff\x03\xad\xc0\xcf\x35\x02\xb3\x63\x78\x61\x0b\x11\xa1\x1d\xf8\xad\x0f\x58\x8d\x32\x1e\x4a\x1b\x89\xee\xfa\xb6\x54\x01\x75\x7a\xc2\xc4\xad\xbd\x9d\x3b\x9e\x5a\x84\xd2\xc3\xa6\x54\x45\xd9\x7a\xaa\xf2\xf1\xb5\x4b\x7c\x74\x12\xdf\x61\x70\x8b\x30\x0e\x5e\xaa\xbe\x0f\x34\x1a\x93\x14\xcf\x16\x8b\x59\x5a\xb1\x7b\x56\x10\x6c\x77\x97\x03\x75\x93\x6b\x55\x40\x2c\x59\x53\x83\x6a\x83\x39\xdc\x2a\x01\x02\x9e\x5e\x2d\xda\x57\x13\xa3\x6c\x87\xd5\x74\xaf\x3b\x48\x41\xaa\x0c\xa1\x3e\xf1\x8f\x76\x67\xf8\xbd\xc6\xda\x8f\x13\x9f\x65\xd1\x8a\xe7\x3f\xee\xdf\x0a\xc5\x2b\xa8\x07\x7e\xc4\x71\xf0\xc6\xe2\x81\x6e\x3d\x76\x5e\x48\xce\x95\x44\xb8\x32\x85\xdb\xc6\x0b\xb7\x93\xf9\xfc\xea\x11\xf8\x78\x3f\xc9\xef\x77\xe6\x57\xdd\xdd\x75\xe3\x83\xad\xd0\xc1\xcc\xd9\x5b\x25\x51\x26\xce\xf4\xcd\xe1\xb2\x7f\xcb\x28\x6d\xe1\x47\x62\xe3\x47\x82\x35\x35\x2a\x6c\x35\x6e\x95\x36\x26\xd4\xe0\xc3\xb8\xf1\xe8\x56\x8d\x92\x38\x8e\x92\x90\x20\xbd\x1c\xed\x52\xcf\x71\xeb\x47\x65\xa8\x34\x2f\xb3\x33\xba\x03\x45\x68\xf9\xe7\x2f\xe7\x0f\x23\xcc\x1b\xaf\xcc\xea\xf9\xcb\x79\x2f\x4a\xbf\xfc\xf3\x97\xf3\x56\xd1\xdc\x3a\x8c\x29\x0e\xb9\x13\x4d\x96\xd9\x3e\xee\xe6\x53\x9c\xff\x08\x75\x54\x93\xf3\xe0\x9b\xa2\x04\xe1\xe1\xa5\x32\xca\xb6\x97\x7b\x17\x58\x97\xd9\x31\x3c\x45\x83\x4e\x15\x64\x4e\xf1\x81\xec\xc1\x45\x63\x7c\xa5\xd7\x5e\xc0\xf0\xea\x71\xa8\x95\x25\xfe\xda\x0d\x5c\xf1\x1e\x62\xc7\xca\xef\xb3\xd2\xbf\xf0\x4d\xc3\x7c\xa3\x96\xe1\x7e\xb9\xdf\x78\x74\xaf\x3e\xd3\x4c\x06\xbe\xd0\x8a\x2f\x46\x23\x46\x35\xc2\x84\x1d\xea\x38\x90\x5e\xba\xb4\x29\x60\xe7\xfb\x31\x3c\x9e\x4c\xe0\xe5\x39\xc9\x55\x36\x66\x3d\x57\x1f\xf0\x7c\x1b\xc8\xf9\x1e\x4f\xd2\xbf\x2c\xfb\x65\x2f\x80\xdc\x15\xb1\x7f\xf5\x33\xf1\x49\xe2\x29\x1c\x09\x63\xcd\xb6\xb2\x8d\x3f\x10\x7b\x67\xfc\xff\x02\x00\x00\xff\xff\xcc\x54\x24\x8a\x80\x31\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 12672, mode: os.FileMode(0644), modTime: time.Unix(1745621270, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x25, 0x61, 0xe, 0x5a, 0x91, 0xfe, 0xb, 0x95, 0x54, 0x51, 0x5e, 0x64, 0xa7, 0x3f, 0x13, 0x77, 0x8f, 0x32, 0xf7, 0xbb, 0xb4, 0xdd, 0xda, 0x4, 0x3e, 0x41, 0xb5, 0x24, 0x91, 0xf1, 0xa3, 0xb4}}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x11\xd2\x5d\x26\x97\x17\xc8\xa6\x80\x10\x9b\x22\xd1\xa8\x3f\x2b\xcb\xe0\x49\xb0\xe2\x8c\x61\xec\x09\xad\xa2\xbc\x7b\x15\x40\xad\xa8\x4a\x77\x47\x3e\xdf\xf9\x3c\x42\xae\x43\x8e\x08\x05\x74\x86\x9c\xf7\x46\xd5\x98\x90\x3a\x28\xa0\x64\x41\x85\xef\xb8\x93\x64\xb6\x7e\x44\x2a\x21\x42\xaf\x0c\xd7\xd2\x22\xa5\x08\x05\x9c\x02\x37\xc8\xc0\x42\x90\x65\xc9\xc4\x66\x35\x87\xbe\xcf\xcb\x31\xd9\x61\x50\x3e\xd4\x50\x8c\x2f\x2f\x81\x9b\xb9\xe3\x61\xf8\xbf\x0b\x64\x03\x67\xd8\x21\xa5\xcc\x87\x5a\x21\x73\xe0\x9f\xd4\xe5\xaf\x2c\x26\x8b\xcc\x2a\x48\x3a\x48\xba\xcf\x04\x49\x2a\xee\x83\x78\xab\x13\x1b\x8a\x15\xb2\xae\x9c\xc7\xf1\xc4\xb7\xc5\x93\x3a\xed\x91\x74\x0a\xdf\xe5\x97\x70\xfd\xa8\x17\xaf\xab\x52\xaf\x37\x7a\xf1\xbc\x9a\x95\xaa\xef\x5d\x05\x84\x90\xcf\x0e\x12\x61\x0a\xd9\x30\xa8\xbe\x3f\xb0\xa3\x54\xc1\x84\xf1\x28\x18\x93\xde\x8d\x65\x01\xff\xec\xe4\x02\x9e\xa1\x0c\x90\xec\x39\x5d\x15\x1b\xd3\x2e\xb7\x30\xcd\xef\x59\x5a\x6c\x03\x7f\x8c\x9e\x7c\x5a\xc1\xf2\x61\x72\x9d\xfc\x6e\x9b\xbb\xd8\xfc\xa9\xb3\x2e\x36\x37\xb2\xcb\xe2\xc6\xa6\x8e\x82\x82\xea\x33\x00\x00\xff\xff\x61\xe0\x01\xde\xf9\x01\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 505, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0x3, 0xc3, 0xc4, 0x14, 0xdf, 0x97, 0x3b, 0x68, 0xaf, 0x9e, 0xee, 0x13, 0x1, 0xbd, 0x3, 0x61, 0x3c, 0x95, 0x4b, 0x8f, 0x27, 0xcf, 0x52, 0x2d, 0x11, 0x2d, 0x67, 0x54, 0xd2, 0x1, 0x79}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
	"config/datastore/index.yaml":    configDatastoreIndexYaml,
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"datastore": {nil, map[string]*bintree{
			"index.yaml": {configDatastoreIndexYaml, map[string]*bintree{}},
		}},
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
