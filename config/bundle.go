// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x51\x73\xdb\xb8\x11\x7e\xf7\xaf\xd8\xda\xe9\x34\x99\x11\x69\xb9\x99\xeb\xf4\x34\xe3\x07\x4b\x76\x1c\xcf\x39\x89\x6a\x29\x75\xdb\x17\x0f\x48\x2e\x49\x9c\x41\x80\x01\x40\x29\x8a\x9b\xff\xde\x59\x00\x24\x25\x47\x8a\xdc\x9c\x3b\xd3\xcb\x43\xc6\x22\x76\xbf\x5d\xec\x2e\x3e\x60\x77\x86\x7a\x81\x7a\x74\x00\x70\x04\x53\x66\x4b\xb0\x0a\x6c\x89\x90\x31\xcb\x12\x66\x10\x72\x2e\x30\x3e\x00\x38\x1f\xd3\xf2\x08\xe2\xe3\xbc\x91\x12\x45\xb4\x54\xfa\x3e\xca\xb8\x0e\xbf\xe3\x2c\x39\x70\x28\x6f\x95\xb1\x92\x55\x08\x2a\x77\x48\x6f\xdc\x32\x18\x67\x28\x86\x77\x8c\x4b\xb1\x1a\x80\x2d\xb9\x01\x6e\xa0\x31\x98\x41\xb2\x02\xd6\x58\x15\x99\x94\x09\xd4\xc6\xe1\x58\x05\xa9\x92\x39\x2f\x1a\x8d\x40\xc6\x50\x1b\x72\x84\xf0\xdf\xb3\x0a\x47\x20\x54\xca\x44\xa9\x8c\xf5\x86\xa7\x4a\x5b\x0f\x97\x2b\x0d\x6f\xe7\xf3\x29\xa4\xaa\xaa\x1a\xc9\x53\x66\xb9\x92\xc0\x64\xe6\x3c\x5a\x62\x02\x19\x33\x65\xa2\x98\xce\x1c\xe4\x7c\x3e\x25\xed\x11\xfc\x75\x38\x1c\x6e\x43\xbb\x99\x4e\x36\xc1\x48\xed\x66\x3a\xf1\x5a\x3f\x0f\x7f\x0e\x5a\x37\xf8\xa9\xe1\x1a\x21\x61\x86\xa7\xb4\xa7\x12\xa5\x6d\xed\x13\x10\xd9\xf7\xa1\x80\xb3\xe9\x15\x6d\x9f\xcb\x02\x18\xd4\xcc\x98\xa5\xf2\xee\x1c\xc1\x55\xee\x4c\x0f\xa0\x62\xf7\x08\x86\x22\x60\x15\xd4\x5a\xd5\xa8\xc5\x0a\x34\x1a\xab\x79\x6a\x81\xa5\x29\x1a\xd3\xe6\xcc\x87\xcb\x65\xcc\xa1\xbc\xc4\xb8\x88\x21\x2d\x2b\x95\xc1\x5f\x86\x43\x08\x89\xf2\x62\xf1\xaa\x12\xaf\x42\xda\xbd\xe9\x11\xb0\x24\x3d\xf9\xf3\x6b\xbf\x93\x2b\x99\x8a\x26\x43\x60\x70\x38\x61\x69\x89\xd1\x44\x49\xab\x95\x18\x81\x54\x91\xb1\x4a\xe3\xa1\x8f\x71\x89\x2c\x43\x0d\x5c\xc2\x25\xda\xe3\x6b\x6e\x2c\xf9\x57\x2b\x69\xb0\x4b\x64\xad\x71\x81\xd2\x42\xca\xd2\x92\xf6\x9b\xac\x80\x4b\x8b\xba\xc2\x8c\x33\xbd\x72\x11\xe1\x29\xba\xfc\x9e\x73\xc3\x12\x81\x84\xed\x0c\x8f\xc0\xea\x06\xbd\x53\xd7\xbc\xe2\xd6\xc7\x90\x7f\xf1\x15\xc6\xcc\x3d\xe0\x67\x4c\x1b\xab\x34\x08\x55\x18\x78\x69\x6c\xa6\x1a\x7b\x8c\x5a\xbf\x1a\x90\x5f\xc9\xca\x7a\xe8\x77\xec\xf3\x45\x10\xbd\x56\xc5\x8c\x7f\xc1\x11\x9c\x0c\x87\xc3\x21\x1c\xc1\xc9\x10\x7e\x19\x93\x95\x6b\x55\x14\xfe\x44\x38\x8b\xaa\x28\xc8\x63\x81\x0b\x14\x66\x04\x19\x26\x4d\x41\xa8\xb9\x1a\x00\x6a\xad\xb4\x13\xbc\xa6\xe5\x91\xfb\x1c\x14\x6f\x35\xb7\xe8\x1d\x72\xe9\xe1\x06\x6a\x66\xcb\x98\x72\x8b\x55\x6d\x57\x03\xbf\xc8\xa8\xba\x35\xb7\x16\x25\x09\x1a\x9b\xa1\xd6\xb1\x03\xf9\xd0\xd8\xba\xb1\x6f\xb8\xc0\x11\x1c\x1e\x1e\x1c\xcc\xd2\x12\xb3\x46\xb4\xc7\xf5\xad\x5a\x82\xca\x83\x9e\x6e\x24\x30\x30\xad\x04\x70\x8b\xba\x2b\x54\xca\x26\x48\x26\x95\xc1\x54\xc9\xcc\xc5\xa2\x05\xbb\x61\xb6\x8d\xc2\xb0\x0d\x05\x78\xb9\xce\x4a\xc5\xe4\xca\x45\xda\xed\xa5\x35\x42\xa1\x55\x12\x37\x4d\xb5\xb0\x93\xb2\x91\xf7\x84\xdb\x81\x08\x25\x0b\x52\x5f\x32\x6e\x21\x41\xbb\x44\x94\xd0\xd4\x19\xb3\x68\x20\xc1\x5c\x69\x84\x8a\xe9\x7b\x7f\x1e\xa4\xca\x10\x32\x64\xd9\x2e\xff\xdf\xab\x0c\xa7\x5c\x16\x73\x5e\xa1\x6a\xec\x88\x2a\x7c\x63\x0f\x15\x97\x8d\xc5\xed\xe6\xe9\x24\x06\x1b\x2e\xe6\x4c\xdb\xc1\x63\x1f\x1c\x53\x38\xda\xd9\xeb\xc7\x95\xe4\xb6\xf3\xe3\xf5\x70\xc3\x91\x9f\x82\x23\x26\xc8\xb6\x85\xd5\x97\x01\x6b\xcd\x5c\x9d\xc3\x92\x0b\x01\x09\x3a\x36\xac\x18\x31\x87\x10\x2b\x28\x50\x52\x88\x31\xf3\x75\x71\x75\xee\xea\xc1\xe3\x10\x33\xb1\x2c\xd3\xc4\x03\xdb\x18\xd7\x89\x79\x96\x3f\xf3\x62\x6b\xc4\x39\x6a\x99\x6b\x9d\x07\x5c\x74\x7a\x02\x8b\x61\xc9\xe9\x5e\xd8\x24\xae\x38\x28\x79\xe4\x6d\x14\x42\xab\x54\xbb\x06\x52\x8d\xe4\x3c\x64\x8d\xa6\xc0\xd6\x5a\x11\x6b\xd1\x9f\xed\x76\xdb\x03\xc0\xa5\x3f\x29\x19\xd7\x98\x5a\xa5\x57\xde\xcc\xad\xd2\xf7\xe7\x5c\x6f\xb9\x7c\xfa\x60\xae\xa5\xab\x64\x54\x50\x04\x97\x09\x74\xbb\xa1\xe4\x23\x91\x2f\x93\x4e\xd0\xfa\x64\x0d\x80\x5b\xef\x83\x29\x1b\x0b\x99\x5a\xca\x76\x5f\xd1\x09\x54\xc8\xa4\x21\x71\x8d\x74\x51\x49\xd5\xaa\xc5\x30\x6c\x17\xfd\x07\xe0\x95\x63\x32\x8b\x62\x05\x2c\xb7\xe8\x79\x3e\xe7\xda\x58\x77\x6e\x3c\x6a\x57\x22\xd1\x49\x1b\xa0\x0f\x0b\xd4\x9a\x13\xcd\x2e\x18\x17\xc4\x7b\x44\x9e\xaa\xd1\x81\x0c\x01\x6e\xda\x9f\xbe\x70\x48\x69\x32\xfd\x68\x7a\x85\xb8\xff\x5e\x37\x66\x04\x21\x9f\xae\x36\xce\xde\xf5\x72\x8e\x0a\x2f\xc7\xbd\xf8\x0d\xab\x2e\x93\x11\x0c\xe3\x35\x8d\x73\x6e\xee\xc1\xd4\x2c\xc5\xef\x28\x92\xd0\x37\x9a\x6f\x5c\x98\x97\x91\x23\x4a\xb0\x8d\xe4\xb2\xe8\x55\x36\xb8\xca\xac\x64\xda\x17\xd5\xe6\xfb\xa0\xd3\xf8\xf6\xa4\xd1\xbf\x8f\x8e\x2f\x3c\x67\xfd\xb4\x79\xcc\x82\x64\xbf\xbd\xe9\xa4\xcb\x0f\xd5\x80\xa7\x9a\x63\x67\x9c\x8e\xd5\xd3\x4c\x75\x39\xdb\xce\x90\xff\xd7\xf7\xc5\xc1\x11\xcc\x4b\x84\xf5\xc7\x18\x4b\x2d\x5f\xe0\xda\x3d\x91\xb0\xf4\x1e\x65\x76\x70\x04\x67\x5d\x05\x86\x6f\x2d\x51\x0c\xe8\x61\x91\x29\x3d\x80\x22\xc5\x01\xa8\x1a\xa5\xb1\x2c\xbd\x3f\x18\x7b\xb9\x20\x46\xe6\x66\x8f\x71\xc3\x9b\xa4\x15\x75\x45\xfc\x76\x3e\x71\x78\x3e\x64\x73\xac\x6a\xe1\xf2\xf9\xef\x10\xf8\x46\xf2\x05\x6a\x83\x70\x0a\x0b\x26\xb9\x10\x2c\x2c\x14\x68\x51\x2e\xe0\x14\xe6\xf4\x20\xf0\xdf\xfc\xd5\xef\xdc\x3e\x85\x87\x87\xf8\xa2\xfb\xfd\xf5\x6b\x10\x61\xba\x68\x2a\x94\xd6\xc0\xa9\xa7\x7c\xc7\xf7\x10\x45\xe1\xbd\xf4\xf0\x30\x71\x7f\x74\x0a\x42\x15\x1e\x2c\xf0\xce\xd7\xaf\xc7\x3e\x02\x91\x7b\xc5\x44\x42\x15\xad\x75\x4a\xe8\x63\xd9\x40\x51\x3e\x33\x41\x50\xb9\xd4\xec\x96\x54\x8d\x0d\x92\xa6\x54\x8d\xc8\xee\xac\x66\xd2\xe4\xa8\xef\x72\x47\xa1\xa7\xf0\xcf\x8b\x59\x90\x58\x96\x28\xef\xac\xea\x45\x3a\xf0\x0f\xef\xef\x2e\xfe\x71\x35\xbf\xfb\x70\x73\x77\xf1\xf7\xab\xc9\x3c\x28\x3c\x3c\xf0\x1c\x24\x42\x4c\x04\x01\x43\x88\xba\x9d\x3e\x3c\xd4\x9a\x4b\x9b\xc3\xa1\xc6\x4f\x0d\x1a\x7b\x97\x92\xc8\x29\xfc\x31\x3b\xf4\xe2\x6b\xa2\x11\xa0\xcc\xd6\x7e\x07\x50\x47\x23\xc4\x05\x0e\x77\x3c\x1e\x8e\x77\x61\x57\x58\x29\xbd\x22\xf4\x78\x98\xc3\xe5\xf8\x30\x28\xef\xb7\xe1\x19\xa7\x33\xb2\xcb\x40\x46\xec\xb5\x0e\xef\xf5\xb6\xe0\x87\x0f\x9f\x1a\xf4\x4f\xcb\xe9\x78\xb6\xab\x1c\x8f\xfe\x90\x70\x79\x9c\x30\x53\xb6\x1f\xa6\xe3\x19\x44\xef\x29\x95\xee\xf2\xef\xfd\xf5\x2b\x6a\x7f\x92\xbd\x20\xee\xaf\x9b\xa7\xa4\xce\x83\x09\x57\xdb\xe6\xf4\x64\x54\xd7\xf2\xf4\x87\xf3\xb7\x0b\xbc\xc2\xea\x94\xe2\x5a\x24\xcf\x96\xb5\x16\x9a\x2a\xbc\xc7\xde\x97\xb2\x47\x67\x7c\xdf\x89\x3e\x00\xb8\xd4\x3c\xbb\x90\x05\x97\xf8\xf4\x14\xbf\xd8\x91\xe0\x17\x4f\x4b\xef\x8b\x27\x25\x97\xc4\xba\xb4\xfd\x37\x09\x7f\x01\x51\x8d\x50\xd5\xfc\xc7\xcf\xe9\x36\x4c\x01\xe5\xdd\xa2\x4d\xf4\xe5\xf3\xe5\x39\x40\xe7\xd4\xb3\x75\xd8\xcf\x9c\x67\x00\x6a\x3e\xae\x3f\xde\xbc\xdb\x9d\xe4\xe3\xc7\x59\x9e\x8d\xcf\xe6\x93\xb7\x10\x45\xbf\xaa\x24\x72\xd7\xe4\x96\x94\x77\x42\xd2\x77\x40\x27\xdf\x2c\xf8\x5b\x60\x7f\xba\x3b\x85\x40\xd8\x7b\xeb\xe8\x49\xc5\xd0\xa1\x12\x75\x47\x35\xea\xc8\xf5\xc4\xcf\x57\x19\x9d\x81\x0a\x2b\xc7\xad\xcf\xc8\xdc\x3d\xb8\xad\xea\x1e\xfc\x7f\x40\x02\x93\x8b\x51\xd7\xe7\xf8\x31\x17\x4b\x53\xd5\x48\x4b\xed\x49\x86\xd2\x72\x26\x4c\x37\xed\x0a\x4d\x45\xad\x8c\xe1\xee\x09\xec\x1e\x64\xdb\xbb\xb3\x8c\x9b\x54\x2d\x50\xb7\xed\xd9\x99\xc7\xed\xde\x61\x1e\xed\x52\xa9\x42\x20\x4c\x84\x6a\x32\x6a\x81\x7e\xc5\xd4\xc2\xd5\xf9\x6f\x35\x36\xf5\x48\xbb\x0c\x7d\x51\xf2\x37\xef\xe7\x5f\x4a\xf6\x1b\xb9\x45\x5e\x94\x76\xad\x19\x99\x6a\xcc\x51\xb7\x03\x3a\x6a\xb1\x6c\xc8\x44\x53\xc3\xa7\x86\xa7\xf7\x62\xd5\x3f\xb5\x6f\xd7\xc5\xe8\x29\xcb\x84\x46\x96\xad\x40\x49\xc1\x25\x42\xc9\x16\x08\x9c\xde\x97\x32\xc0\x34\xb5\x7b\xc5\xb7\x10\xde\xdc\xdf\x08\x77\xe6\x97\x47\x70\x12\x0f\xc3\x16\xd7\x1b\xfd\x94\xa5\x25\x52\xde\xa9\x5f\xa5\xae\xaa\x11\xd6\xc0\xcb\xca\x8d\xa0\x10\x04\x37\x76\x00\x36\xd0\x84\x19\x00\xda\xf4\x55\x80\x09\x93\x00\x8d\xb9\x46\x53\x76\x8d\x8c\x1b\x47\xcd\xe7\xd7\x3b\x67\x0d\x07\x7e\x7b\x7e\x3c\xf3\x84\xc6\x7c\x6f\x5b\xfe\x03\x4d\xf9\xf7\x5a\xf2\x67\x6a\xc8\xbf\xd3\x8e\x77\x46\xc0\x58\xa5\x59\x81\x60\x56\xc6\x62\xe5\x5d\x73\xab\xf3\x6e\xf0\xdb\xb8\x72\x33\x68\x1f\x15\x60\xb2\xf2\x1b\x6b\x9b\x89\x01\x24\x8d\x85\x95\x6a\xa0\xa2\xe2\x03\x89\x98\x39\xb7\x1c\x1e\xcf\x69\xe9\x4f\x3a\x10\x80\x1f\x1f\x85\x49\x40\xc5\xa4\x33\xe2\x26\x53\xde\xa1\xbe\x51\x4b\x99\x7f\x7b\x04\x17\x7d\x8e\xdd\xe7\xbe\xba\x6f\x4b\x6e\x91\x4a\x85\x52\xe8\xf2\xd3\x87\xc2\xf5\x67\x06\x96\x25\x4f\xcb\x36\xb5\xdc\x00\x13\x42\x2d\xc9\x41\x15\xc6\xb3\x6d\xe9\x9e\xf9\x85\x73\xae\xbb\xe3\x03\x10\x41\x7c\xdc\x0e\x03\x66\xaf\x5b\xe7\xe8\xfb\x85\xcc\x6a\xc5\xa5\xed\xbf\x01\xfc\x82\xab\xf5\x9f\x33\x4c\x35\xda\x51\xab\x7f\x39\x5b\x5f\x7c\x3a\xd1\xf9\xff\x3f\xd4\x96\x2b\xc9\x44\xbc\x49\x14\xeb\x4a\xfb\xf8\x62\x03\x2f\xd7\xaa\x72\x79\x44\xb9\xe0\x5a\x49\x6a\xc1\xe2\xb5\xfd\xad\xd3\xe4\x86\xe2\xd9\x56\xf4\x4d\xef\xbf\x8b\x0d\xf0\x46\xab\xea\x42\x2e\xd6\x47\xc7\xbb\xe6\x13\x8f\x67\x13\xd4\xb4\xba\x0b\x94\xba\xc0\x76\x3c\x19\x06\xec\xdf\x8c\x2a\xb6\xcd\x0e\x9e\x34\xa2\x78\xda\x78\x62\x37\xfc\x9e\xb1\x04\xa9\xbe\x63\x9f\x79\xd5\x54\xfd\x66\xd6\xe7\xe2\x6e\x7e\xde\x0f\xc7\x69\x83\x49\x93\x13\x91\x3f\x9a\xcc\x92\xc9\xb1\x5b\xf9\xbd\x8d\xcb\xff\x13\x00\x00\xff\xff\x0a\x31\xa0\xbb\xda\x1a\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 6874, mode: os.FileMode(420), modTime: time.Unix(1504031574, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xbd\x4e\xc3\x30\x14\x85\x77\x3f\xc5\x25\xa5\xa3\x9d\xbc\x00\x53\x8b\x2a\x96\x0e\x2c\x8c\x28\xa9\xaf\xa9\xd5\xe4\x3a\xf2\x0f\x42\x5c\xdd\x77\x47\x71\x2b\x24\xa4\xd0\xed\xe8\xe8\x3b\xdf\x70\x36\x0f\xed\xe0\xa9\x1d\xfa\x74\x56\x9b\x47\xd0\x47\x60\x36\xc7\x60\xf1\xc5\x8a\xd4\x26\x2c\xcd\x5b\x88\x97\xbd\x8f\x22\xad\x2b\x44\x38\xea\x94\x6d\x28\xb9\x02\xf8\x1f\x80\x31\x2a\x66\xef\x80\x10\xcc\x6e\x2e\x09\x3a\xd0\x22\x8a\x79\x8e\x9e\xb2\x83\x66\x99\xcf\x08\xd3\xec\x61\x6b\x9b\x2b\x54\x01\x0d\x48\xb6\xa6\xdb\xfc\xb5\x9f\x0e\x03\x74\x66\xcd\x30\xc2\xf9\xfd\x73\xc2\xe9\x69\x6b\x3a\x77\x68\x6e\xf0\xba\x67\xef\xd3\xe5\xae\xc8\x25\xff\x8d\xbf\xa6\x2b\xfe\x47\xa5\x98\xcd\xf3\x17\x9e\x4a\xee\x87\x11\x45\x80\x82\x45\x48\xb9\x8f\x19\xb4\x3e\x05\x72\xfe\x63\x79\x64\x57\x93\x88\xfa\x09\x00\x00\xff\xff\x30\x08\xbc\xe9\x63\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 355, mode: os.FileMode(420), modTime: time.Unix(1504030979, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xcf\x6e\xfa\x30\x0c\xc0\xf1\x7b\x9e\xc2\x42\xfa\x1d\xdb\x1f\x2f\xd0\xcb\xa0\x42\x5c\x86\xc4\xd0\xfe\x9c\xaa\xd2\x38\x25\x22\x75\xc0\x71\xba\x4d\x55\xde\x7d\x2a\x20\x26\xa6\xb1\x9b\x23\x7f\xfd\x51\x22\xd9\x1e\x39\x20\x14\xd0\xd7\x64\x9d\xab\x55\x8b\x82\xd4\x43\x01\x1b\x8e\xa8\xf0\x03\x9b\x28\xf5\xd6\x8d\xc9\x30\xe4\xe5\xf5\x9d\x92\xaa\xb9\x8d\x1d\x92\x04\x28\x80\xbc\x46\x08\x52\xb3\x40\x96\x35\x9e\x8c\x6d\xc7\x7e\x76\x9a\x52\x52\xce\xb7\x67\xe1\xc5\xf3\x7e\x6e\x39\xa5\xff\x8d\x27\xed\x39\xc3\x1e\x49\x32\xe7\x5b\x85\xcc\x9e\x7f\x56\x26\x12\xa1\xcb\x82\x68\x64\x56\x3e\xca\x21\xca\xfd\xc6\x47\x51\x61\xe7\xa3\xd3\x95\x70\x4d\xc1\x20\x57\xc6\x3a\x1c\xbf\xf8\x56\x3e\xa9\xf7\x1d\x52\x25\xfe\x7b\x79\x05\x57\x8f\x55\xf9\xba\xdc\x54\xab\x75\x55\x3e\x2f\x67\x1b\x35\x0c\xd6\x00\x21\xe4\xb3\x43\x0c\x30\x85\x2c\x25\x35\x0c\x07\xb6\x24\x06\x26\x8c\xc7\x88\x41\xaa\x66\x5c\x16\xf0\x4f\x4f\xce\xe1\x29\xca\x00\x49\x9f\xa6\x0b\xb1\xae\xbb\xc5\x16\xa6\xf9\x3d\xa5\xc3\xce\xf3\xe7\xe8\xe4\x53\x03\x8b\x87\xc9\xe5\xe4\x77\x6d\x6e\xc3\xfe\x4f\x4e\xdb\xb0\xbf\xc1\xce\x17\x37\x9a\x3a\x46\x8c\xa8\xbe\x02\x00\x00\xff\xff\xe4\xa8\xee\x31\x02\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 514, mode: os.FileMode(420), modTime: time.Unix(1504031023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xc1\x4a\xc4\x30\x10\xc6\xf1\x7b\x9e\x62\xec\xb2\xc7\xa4\xf5\x2a\xf4\xe2\xae\x88\x97\x45\xf4\xe0\xb9\xd9\x4c\xd6\xb0\xed\xa4\x24\x29\x08\xc3\xbc\xbb\x6c\x5b\x10\xc1\x7a\x1b\x3e\xfe\xfc\x20\xd9\xdd\xd5\x36\x50\x6d\xbb\xfc\xa9\x76\xaf\x8f\xef\xa0\x4f\xc0\x6c\x4e\xd1\xe1\x8b\x13\x59\xb7\x78\xdb\x3e\x62\xba\x1e\x43\x12\xa9\xfd\x44\x84\xbd\xce\xc5\xc5\xa9\xac\x09\x6e\x25\x98\x92\x62\x0e\x1e\x08\xc1\x1c\xc6\x29\x43\x03\x5a\x44\x31\x8f\x29\x50\xf1\x50\x2d\x40\x0f\x14\x1d\xe6\xf6\xfe\x61\x1c\xa9\xdd\xbb\x6a\xa9\xe7\x52\x03\x92\x9b\xaf\xd5\x79\xeb\x86\x67\x0b\x8d\xd9\xa2\x06\x1c\xda\xbd\x69\xfc\xc5\x56\x6b\xfc\xb7\x73\x0c\xf9\xfa\x2f\xe4\x43\x8f\x3f\xd2\x92\xff\xa2\x14\xb3\x79\xfa\xc2\xf3\x54\x3a\xdb\xa3\xc8\xfc\x0a\xc8\xa5\x4b\x05\xb4\x3e\x47\xf2\xe1\x72\xfb\x9a\xc3\x7c\x89\xa8\xef\x00\x00\x00\xff\xff\x5b\x97\x19\x4c\x72\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 370, mode: os.FileMode(420), modTime: time.Unix(1504031004, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcd\x6a\xeb\x40\x0c\x46\xf7\x7e\x0a\x5d\x87\x2c\xc7\xf6\x7d\x84\xc6\x29\x69\x37\x5d\xb4\x85\xae\xc7\x19\xb9\x9d\x3a\xf3\x83\x46\x03\x85\x41\xef\x5e\xec\x04\xe2\x42\x43\x77\x1f\xd2\xd1\x41\xd2\xe6\x5f\x3b\x58\xdf\x0e\x3a\x7d\x54\x9b\x97\xdd\xdd\x6b\xff\x00\x4a\x7d\x86\x41\x79\xed\x10\x4a\x69\x9e\x82\xc1\x47\x23\xb2\x6a\x7b\xd6\x69\x4a\xf0\x7f\x55\x42\xa2\x40\x33\xfe\x16\x68\xda\x5b\x12\x69\xc7\xec\x3d\x9e\x54\x62\x83\x44\x2b\x34\x64\x8e\x99\x6f\xb1\x21\x73\x55\x8a\x1d\xc1\x23\x34\x7d\xcc\x09\x3a\x50\x22\x55\x29\x91\xac\xe7\x11\xea\xab\xe9\x18\x73\x52\x11\x49\xcd\xfb\xc0\xd6\xd4\xe7\x89\x85\x56\x80\xde\x2c\xe9\xe2\x7a\xd6\xee\x30\x40\xd7\xdc\xd6\x39\x74\xb0\x6d\xba\xf1\xb0\xab\x2f\xf8\xef\xa6\xbd\x4d\xd3\x1f\x2a\x76\xf1\xaa\x3a\xf3\x3f\x5c\x55\x29\xcd\xfd\x17\x1e\x33\xeb\xe1\x84\x22\xe0\x83\x41\x48\xac\x89\xe7\xbb\x82\x1f\xed\xfb\xfc\xa1\x7e\x49\x22\xd5\x77\x00\x00\x00\xff\xff\x65\xd8\x5a\xa1\xa8\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 424, mode: os.FileMode(420), modTime: time.Unix(1504030960, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
