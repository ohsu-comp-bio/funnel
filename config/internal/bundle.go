// Code generated by go-bindata. DO NOT EDIT.
// sources:
// config/gridengine-template.txt (346B)
// config/pbs-template.txt (361B)
// config/slurm-template.txt (415B)
// config/kubernetes-executor-template.yaml (1.146kB)
// config/default-config.yaml (11.633kB)
// config/htcondor-template.txt (505B)
// config/kubernetes-template.yaml (1.371kB)

package config

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\xc4\x30\x14\x85\xf7\x79\x8a\x6b\xc7\x59\x26\xed\x0b\xb8\xb2\x30\xb8\x71\x21\x82\x4b\x69\xc9\x0d\x13\x32\xf9\xe1\x26\x51\x30\xe4\xdd\xa5\x69\x11\x0a\x75\x76\x97\xc3\x77\x3e\xb8\xe7\xf4\xd0\xcf\xda\xf5\xf3\x14\xaf\xec\xf4\x08\xfc\x15\x4a\x11\xef\x53\x34\x2f\xb2\xd6\x96\xf8\x25\xf9\xf0\x64\x46\x4d\xb5\xf6\x2a\x3b\x87\x37\x1e\x93\xf4\x39\x35\x00\xff\x03\x90\x88\x95\xa2\x15\x38\x04\xf1\x1c\x72\x84\x01\x78\xad\xac\x94\x40\xda\x25\x05\xdd\x52\x0f\x08\x36\x68\x38\xcb\x6e\x85\x1a\xc0\x01\x9d\x6c\xd7\x56\x7f\x9b\xec\x65\x86\x41\x1c\x19\x6e\x70\xfd\xfc\xb2\x68\x9f\xce\x62\x50\x97\x6e\x83\x8f\x3d\xa3\x8e\xe6\xae\x48\x45\xfd\x83\x7f\xa6\x15\xdf\xa9\xd8\xfa\x20\x7c\x7b\x32\x48\x40\xd9\x01\xe7\x69\x59\x6c\xdc\x6d\xf7\x1b\x00\x00\xff\xff\xcf\x92\x30\x7f\x5a\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 346, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0xf2, 0xbf, 0x61, 0x66, 0xfc, 0x3e, 0xf3, 0xf9, 0x1f, 0x77, 0x7b, 0xa2, 0xfa, 0x90, 0x1d, 0xf1, 0x81, 0x31, 0xca, 0xc2, 0x64, 0x2, 0x29, 0x41, 0x39, 0xe9, 0xac, 0x46, 0x4, 0x46, 0x43}}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xc1\x4a\xc4\x30\x10\xc6\xf1\x7b\x9f\x62\xec\xb2\xc7\xb4\xf5\x2a\xf4\xa2\x05\xf1\x22\xa2\x82\xe7\x86\x4c\x34\xa4\x9d\x84\x49\x82\x87\x90\x77\x97\xdd\x04\x64\xc1\xf5\x16\x86\x3f\x3f\xc8\x77\xb8\x19\xa5\xa1\x51\xae\xe1\xab\x3b\xbc\xdc\xbf\x81\x78\x86\x9c\x87\xf7\x35\xd8\x27\x55\x4a\xbb\xb9\xd3\xed\xc3\xb1\x5d\x0c\x97\x32\xea\x44\x84\x9b\x08\x51\xb9\x14\x5b\x82\xd7\x12\x64\xee\x72\x36\x1a\x08\x61\x78\xf0\x29\xc0\x04\xa2\x94\x2e\x67\xcf\x86\xa2\x86\xbe\x02\x1b\x90\x53\x18\xe6\xdb\x3b\xef\x69\x3e\xaa\xbe\xd6\xe7\x52\x00\x92\x3a\xbf\x9a\xf3\xba\xee\x8f\x12\xa6\xe1\x1a\xb5\xe3\x3e\x1f\x87\x49\x7f\xca\xbe\xc5\x7f\x3b\x8b\x09\xf6\x5f\x48\x9b\x0d\x7f\xa5\x9a\x5f\x50\x5d\xfd\x29\x7c\x3b\xb6\xc8\xc0\x89\x40\x88\x78\x9a\x6f\xb9\x18\xf2\x27\x00\x00\xff\xff\x94\x91\x42\x0b\x69\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 361, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0x79, 0x28, 0x19, 0xf9, 0xa3, 0x7b, 0xf0, 0x79, 0x32, 0xc3, 0xcd, 0x53, 0x5d, 0x65, 0xb0, 0xc4, 0xdb, 0x64, 0x16, 0x86, 0xa3, 0x9f, 0x80, 0x59, 0xed, 0x48, 0xa6, 0xb1, 0x14, 0xc4, 0x5f}}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\x0d\x74\xbb\x6e\x85\x9d\x9d\x45\x61\x9e\x67\xd9\x48\x36\x3b\x18\xbf\xfb\x48\x53\x68\x0a\x0b\xbb\x19\xeb\xfb\x3f\xa4\x7f\xf7\xd0\x0e\x86\xda\x41\xcb\x67\xb5\x7b\x3b\x3c\x9d\x8f\xcf\xa0\xd4\x97\x1f\x14\x69\x87\x90\x73\x73\xd6\x62\x5f\xc6\x52\x56\x63\x8a\x5a\xac\xc0\xe3\xea\x0b\x99\x3d\xcf\xf8\xbb\x67\xdb\x1b\x2e\xa5\x9d\x12\x11\x7e\x2b\x89\x23\x32\xaf\x50\x9f\x62\x48\x71\x8b\xf5\x29\x56\x39\x9b\x09\x08\xa1\x39\x86\x24\xd0\x81\x2a\xa5\xca\x39\xb0\xa1\x38\x41\x7d\x33\x7d\x84\x24\x2a\x20\xab\x79\x1f\xd8\x8f\xf5\x92\xb8\xd0\x0a\x90\xc6\xcb\xeb\xea\x7a\xd5\xee\x34\x40\xd7\x6c\xeb\x1c\x3a\xd8\x37\xdd\x74\x3a\xd4\x57\xfc\x6f\x53\x6f\xc4\xfe\xa3\x8a\x2e\xdc\x54\x0b\x7f\xe7\xaa\x96\x83\xe1\xc7\xb3\x45\x06\x4e\x34\x87\xe6\xa6\xfb\xbb\xce\x7f\x03\x00\x00\xff\xff\x71\x9e\x5b\xbd\x9f\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 415, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbc, 0x36, 0xd7, 0x29, 0x50, 0x7c, 0xe3, 0x2b, 0x54, 0x30, 0x8d, 0x8, 0x41, 0x58, 0xaa, 0xa0, 0x48, 0x6f, 0x0, 0xf2, 0x68, 0xed, 0xbe, 0x7e, 0x9e, 0xb0, 0xe4, 0x7f, 0x86, 0x7d, 0xdf, 0x2d}}
	return a, nil
}

var _configKubernetesExecutorTemplateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x4d\x6f\x9b\x40\x10\xbd\xf3\x2b\x46\x24\xbd\x05\x42\x2e\x3d\x20\xf5\x60\xd9\x95\xe3\xa8\x21\x56\x63\xa5\x87\xaa\x87\x65\x3d\xd8\x5b\xf6\xab\x3b\x8b\x53\x0b\xf9\xbf\x57\x0b\x18\xe1\x54\x4d\xf7\x34\x9e\x37\xf3\xe6\xbd\xf1\x08\x66\xc5\x0b\x3a\x12\x46\xe7\x50\x32\xcf\xf7\xb7\x87\xbb\xa8\x16\x7a\x9b\xc3\x83\x29\x23\x85\x9e\x6d\x99\x67\x79\x04\xa0\x99\xc2\x1c\xda\x36\xdd\x30\xaa\x57\xdb\xd3\x29\x69\xdb\xf4\xc1\x94\x21\x1c\x60\xb2\x8c\xf7\x35\xc5\xf9\x57\x87\x49\x56\xa2\xa4\x40\x02\xf0\xd3\x94\xc9\xbb\x54\x64\x91\xe7\x10\x01\x94\x8c\xd7\xa6\xaa\xbe\x08\x25\x7c\x0e\x59\x04\xc0\x8d\xb2\x12\xbd\x30\x9a\x72\xb8\x8b\x00\x3c\x2a\x2b\x99\xc7\x9e\xba\xeb\xec\x22\x00\x87\xe4\x99\xf3\x6b\x23\x05\x3f\xe6\x50\xe0\x01\xdd\x00\x11\xba\x83\xe0\x38\xe3\xdc\x34\xda\x17\x67\x2d\xcf\x17\xe9\x4e\x77\x78\xdc\x68\xcf\x84\x46\x47\x9d\xa8\xf0\x92\x61\x17\x55\xa3\x35\xca\xe4\xd5\xb8\x1a\x5d\x32\xb1\x33\xd4\x01\x08\xc5\x76\x3d\xfb\x2a\x44\x6f\x91\x75\x23\xe5\x59\xe1\x4c\xbe\xb2\x23\x8d\x38\x37\x4a\xb1\xf0\x37\x7c\x8f\x6f\x4b\xa1\x6f\x69\x1f\xdf\x40\x9c\xf0\xf8\xc7\x58\xc2\xdc\x8e\x3a\xee\x79\x5f\x3b\x61\x0f\x92\x84\xde\x2d\x84\xeb\x0a\xbe\x19\x57\x6f\x85\x9b\x14\x38\x24\xd3\x38\x8e\x94\x8f\xa9\x90\xfc\xd5\x20\xf9\x8b\x1c\x00\xb7\x4d\x20\x11\x15\x68\x84\x74\x6e\x1b\x82\x0c\x92\xd3\x29\x0c\xb6\x0d\x85\x00\x50\x12\x42\x88\xe2\xbb\x2c\x53\x71\x88\xf0\x42\x50\x78\x0a\x95\x71\xc7\x09\xd7\x57\xa6\x96\x25\x64\xe9\x40\x67\x9d\xd0\xbe\x82\xf8\x43\x9a\x55\xcb\x78\x80\x3b\x2a\x49\xd8\x93\x7f\x7c\xfc\x07\x37\xda\x3d\x2a\x74\x4c\x26\xe4\x8d\x1b\x96\x3e\x8c\x59\x08\xaa\xdf\x9b\xd3\xe3\x97\x83\xb2\x6c\x3a\x69\x1c\x75\x30\xb2\x51\xf8\x18\x0e\x64\xb2\xa5\xab\xab\x2b\x58\x3c\x41\xf1\xb4\x81\xf9\xfd\xac\x58\x7e\x86\xcd\xfd\xea\x79\x84\xdb\xd6\x31\xbd\x43\xb8\x16\xdb\xdf\x37\x70\x2d\x3c\x2a\xc8\x3f\x41\xfa\xd2\x91\xd1\xc4\xc9\xf9\xb0\x06\x0f\x30\xb1\xa8\xc2\xcc\x35\xf3\xfb\x60\xac\xe3\x48\xe7\xe7\xcb\x0c\xe9\x8b\x7d\x50\x53\x8e\xa5\xe3\x51\xfe\xaf\xed\x8d\xd9\xde\xea\xdf\x47\x3f\x68\x1b\xdb\x6c\xf8\x7c\x90\x47\xed\x7b\x3f\x73\xc9\x84\x9a\x5e\x10\x0f\x89\x62\xda\x9b\xd8\x03\x87\x3f\x01\x00\x00\xff\xff\x5e\x3e\xe4\x77\x7a\x04\x00\x00")

func configKubernetesExecutorTemplateYamlBytes() ([]byte, error) {
	return bindataRead(
		_configKubernetesExecutorTemplateYaml,
		"config/kubernetes-executor-template.yaml",
	)
}

func configKubernetesExecutorTemplateYaml() (*asset, error) {
	bytes, err := configKubernetesExecutorTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/kubernetes-executor-template.yaml", size: 1146, mode: os.FileMode(0644), modTime: time.Unix(1728510735, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0xb, 0xc5, 0x3f, 0x73, 0xdc, 0x5d, 0x4a, 0x1d, 0x40, 0xd0, 0x8b, 0x31, 0xaa, 0x77, 0xf1, 0xa, 0x93, 0x8e, 0x32, 0xce, 0xaa, 0xa5, 0x9d, 0x7e, 0xa5, 0xa8, 0x96, 0x13, 0xe1, 0x74, 0xd4}}
	return a, nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3a\x5d\x73\xdc\x38\x72\xef\xfc\x15\x1d\xcd\x5e\xc5\x5b\x35\x5f\xda\xad\xbd\xe4\x58\xa5\x07\x7d\xad\xad\x58\xf6\x2a\x9a\x71\x9c\x3c\xb9\x40\xa2\x39\xc4\x0e\x09\x70\x01\x50\xe3\xb1\xe3\xff\x9e\xea\x06\xf8\x31\x92\xbc\xf6\xdd\xc9\x55\x9b\xba\xd3\x8b\x86\x40\xa3\xd1\xe8\xef\x6e\x60\x02\xeb\x12\x41\x8b\x1a\xc1\x14\xe0\x4b\x04\x91\x7b\x75\x87\xe0\xd0\xde\xa1\x05\x29\xbc\xc8\x84\x43\xc8\x44\xbe\x45\x2d\x93\x09\x9c\xde\x09\x55\x89\xac\xea\xc7\x5c\x0a\x99\xa9\xbc\xcc\xa6\x90\x09\xb9\x41\x3b\xe5\x65\xce\x1b\x8b\x53\x90\x7b\x2d\x6a\x43\x93\x58\x09\xe7\x55\x3e\x85\xda\xe8\x8d\x91\x59\x72\x11\x91\x77\xeb\x93\xe4\xb3\xe4\xe4\xa6\x6e\x5a\xff\x25\x32\x2a\x93\x8b\x6a\x0a\xa5\xcf\x8d\x96\xc6\x4e\xc1\x55\xad\xad\xa7\xd0\x64\x6e\x0a\x1b\xab\x24\xea\x8d\xd2\x38\x85\x5a\xe8\x96\x20\xc5\xce\xcd\x32\xe1\xf3\x32\x39\x0f\x1b\x44\x1c\xbf\x43\x09\xde\xa1\xf6\xb0\xb3\xca\xa3\xed\xb6\x7e\xe6\xbe\x9f\x7f\x96\xa4\xcd\xf4\x6f\x63\xcf\x14\xb6\xa2\xd8\x8a\xe4\x92\x36\x7c\xcb\xfb\xb9\x34\x01\x98\x75\xdc\xa2\x9f\x95\xd9\x24\xc9\xb5\xd9\x6c\xd0\xd2\xdc\x04\xe8\xb7\xd2\x1b\xa8\xf0\x0e\x2b\x97\x82\xc4\xac\xdd\x4c\x41\xe9\xc2\x4c\x01\xad\x35\x36\x01\xb8\xa6\xc9\x94\x07\x79\x11\x63\x27\x5c\x0e\xbc\x01\x5f\x2a\x07\x8d\xf0\xe5\x1c\xae\x0a\xc0\xba\xf1\xfb\x69\x98\x14\x16\xf9\xe4\x1e\x35\x01\x3a\x2f\xd1\xda\x79\x02\xf0\x4b\xeb\x9b\xd6\xff\xac\x2a\x4c\xe1\xe8\x28\x49\x56\xac\x3d\x81\xa2\x17\xc6\xf9\x31\x1f\x7f\x6e\xb5\xc6\x2a\x2a\x18\x2d\x26\x80\xd7\xa2\xee\x78\x5f\x1a\xe7\x13\x5e\x79\x63\xac\x87\xd6\xa1\x84\xc2\x58\x78\xb1\x5e\xdf\x90\x1e\xd4\xad\x56\xb9\xf0\xca\x68\x10\x5a\x32\xca\x1d\x66\x20\x85\x2b\x33\x23\xac\x64\x94\xeb\xf5\x0d\xad\x4e\xe1\xdf\x97\xcb\xe5\x63\xd8\x6e\x6f\xce\x0f\x91\xd1\xb2\xdb\x9b\xf3\xb0\xea\x2f\xcb\xbf\xc4\x55\xb7\xf8\x5b\xab\x2c\x49\xd4\xa9\x1c\x44\xeb\x4b\xd4\xbe\xdb\x9f\x10\xd1\xfe\xd1\x58\x4e\x6f\xae\x1c\xb4\x8e\xd8\x2f\xa0\x11\xce\xed\x4c\x20\x67\x42\x8c\xa4\xad\x49\xf3\xb6\x08\xae\xb5\x48\x0c\x6c\xac\x69\xd0\x56\x7b\xb0\xe8\xbc\x55\xb9\x07\x91\xe7\xe8\xa2\x14\x48\xeb\x75\xa1\x36\x50\xa8\x0a\x19\xcb\x33\x9c\x6f\xe6\x90\x97\xb5\x91\xf0\xe7\xe5\x12\x0a\x66\xe5\x3c\x80\xcd\xf7\x75\xf5\x3d\x83\x9d\x11\xad\xa7\xad\x2f\x83\x00\x48\x4f\xde\x38\xb4\x29\x91\x60\x8f\xe3\x18\xc0\x4d\xa4\x30\x05\x91\xe5\xc7\x3f\xfc\xf8\x08\xf0\x0f\x8f\x00\x17\xc6\x64\xc2\x06\xee\x5c\xe9\xbc\x6a\x25\x82\x80\xa3\x73\x91\x97\x38\x3b\x37\xda\x5b\x53\xa5\xa0\xcd\x8c\x35\xfc\x28\xc8\xad\x44\x21\xd1\x82\xd2\xf0\x1c\xfd\xe2\x5a\x39\x4f\x67\x6e\x8c\x76\xe8\x18\x13\x73\x23\xd8\x56\x2e\xf2\x92\x78\x98\xed\x41\x69\x8f\xb6\x46\xa9\x84\xdd\x33\x97\x55\x8e\x8e\x38\x7a\xa1\x1c\x19\x1a\xe1\xe6\x8d\x53\xf0\xb6\xc5\x24\xb9\xbd\x39\x3f\xaf\x14\x6a\x1f\x8e\x4e\x52\x8e\xc2\x11\x52\x5a\x74\xb4\x59\x50\xce\xd3\xf0\x3d\x52\xba\x74\x90\xfa\xb9\x45\x49\x72\x16\x95\x63\x21\x9f\xfd\x3f\x92\x7e\x90\x5e\x98\x0c\x8a\x7f\x5f\xce\x3c\x9a\x1b\xad\x31\xe7\x83\x78\x55\xa3\x69\x3d\xd1\xba\x0e\x3f\x53\xf8\xf3\xd2\x05\x38\x72\x83\xb5\x78\xaf\xea\xb6\x06\xdd\xd6\x19\x5a\x36\x64\x55\xa3\x03\x5f\x0a\x0f\x02\x2c\xfe\xd6\xa2\xf3\xb0\x53\x55\x05\x19\x82\x45\x6f\x55\xb4\xb3\x42\xa8\xaa\xb5\x41\x68\x13\x46\x0f\x19\xfa\x1d\xa2\x8e\x60\xc4\xe0\xaa\x32\x3b\x07\x42\x03\xbe\x6f\x8c\x0e\x8c\x67\x1f\x6a\x8a\x02\x9c\x17\xd6\x33\x57\x3d\xfc\x04\x0e\xc9\xb7\x07\x9d\x69\x1b\x62\xd5\x31\xd4\x4a\xb7\x9e\x78\xf4\x4a\xbc\xbf\x0d\x48\x53\x38\x5e\x76\x4e\xdc\xe5\x25\xca\xb6\x22\xf5\x73\x83\x03\x20\x0e\xbf\xe2\x30\x70\x3f\xb8\xcc\x93\x55\xb7\xa2\xf3\x60\x3b\x30\x45\x74\x7a\xb6\xd5\x20\xc6\x38\x3d\xda\xde\x81\x74\x0b\x6f\x05\x85\x92\x63\xd7\x2f\xaf\x85\xde\x83\x17\x6e\xcb\xd2\xed\x56\x93\x3d\x18\x8d\x8f\xe3\x38\x2f\x5b\xbd\xe5\x73\x74\x48\x2a\xa3\x37\xb4\x7c\x27\x94\xef\xb9\xd8\x36\x52\x78\x74\x90\x61\x61\x2c\x89\xca\x6e\x83\x0a\x6a\x23\x11\x24\x0a\xd6\xc1\xd7\x46\xe2\x8d\xd2\x9b\x5e\xbe\xc7\xf5\xe3\x68\x89\x35\x71\x2d\x7b\x78\x61\xfd\xf4\x3e\x6e\x62\xdd\x03\xec\x57\x5a\xf9\x1e\xfb\x4f\x75\x92\xd0\x60\xda\xa9\x7f\x8c\x22\x11\xf3\xd5\x45\xaf\x2b\xa2\xf5\xa6\x16\x64\x53\x55\xb5\x87\x0d\x6a\xe2\x04\x32\xd6\xab\x8b\x10\x4c\x22\x8a\x7e\xd7\x52\xd0\x69\x51\x83\x92\x15\x32\xc1\x74\x02\x24\x91\x0a\xcd\x60\x51\xa1\xa7\xa0\xa2\x52\xba\xb2\xf5\x20\xcd\x4e\x07\x35\x9c\x1d\x43\x8d\x42\x93\x02\xa3\x45\x52\x0b\x6d\x7a\x2b\x80\x65\x37\x19\x06\x40\xd5\xec\x81\x3c\x56\x7b\x10\x85\xc7\xa0\x3b\x85\xb2\xce\xb3\x48\x0f\xec\x66\x76\x1c\xed\xe6\x94\xb9\x12\xb6\x3f\x3c\xa4\xb7\x7b\xe2\xad\x44\x8f\xb9\x87\x1d\xd9\x90\x45\x67\x5a\x9b\x63\x08\xb1\xa2\xcf\x23\xbc\x01\xe5\x03\xcd\x17\x58\x28\x4d\xdc\xbf\xed\x61\x55\x38\x2d\xef\x13\xbc\x40\x1b\xd4\x08\xcc\x1d\x5a\x4a\x77\x5c\x08\xe6\x19\x96\xe2\x4e\x19\x8e\xb6\xfd\x72\x92\x0d\xfb\xba\x9b\x37\x6e\xd8\x72\xde\x8d\x36\xad\x4b\x81\xdd\x21\x3b\xd2\xd3\x57\x03\xcc\x94\xfd\xf8\x59\x07\x7a\x2b\xea\xe7\x59\x0a\xcb\x79\x0f\x7d\xa1\xdc\x16\x5c\x23\x72\xfc\xec\x22\x02\x19\xad\x9a\xc0\xcf\x2c\xc7\xdd\x8c\x13\x17\xf0\x2d\x9d\x75\xfe\xd0\xfc\xdc\x5e\xe7\xb0\x53\xbe\x7c\x3c\x97\x78\xc3\xd6\x10\xcc\xef\x27\x97\x24\x6f\x8d\xdd\x76\x66\x4c\xe9\x89\x83\xdc\x22\x29\x18\xc8\xd6\x12\x37\x1b\x6b\xc8\xe7\xd2\xcf\x4e\x25\xbb\x0c\x87\xd9\xab\x1c\x48\x65\x31\xf7\xc6\xee\x69\x03\x42\x78\xa1\x6c\x0a\xf3\x45\x70\xb1\xb3\x9d\xb1\xdb\x99\x54\xf6\xaf\x3a\x46\x63\xaa\x8a\x55\x37\x17\x3a\xa7\x13\xa8\x8d\x16\x15\xf9\x8b\x1b\x53\x55\x4a\x6f\x86\x23\xfc\x35\xcc\x41\x2d\x29\x2b\x33\xad\x5f\xa0\xb5\xac\x9d\x94\xb9\xf5\x4e\x22\x46\x96\x07\x6c\x9b\xc0\x0a\xbd\x0f\xb6\xad\x18\x6c\x19\xd8\x61\xd1\xb5\x95\x8f\x9a\xe6\x48\xeb\xb1\x92\xa4\x50\x04\x1b\xb0\x4a\x72\x87\x4a\x6f\xaa\x60\x77\x8c\x6d\x30\x13\x7c\x8f\x79\xeb\x8d\x05\x7c\xaf\x3c\x47\x81\x6b\xb3\xb9\x2f\x25\x5a\xf2\x4a\xbc\x87\x6c\x1f\x89\xe4\xd4\x81\xf9\x33\x3a\x4d\x54\xf7\xee\x50\x11\xd7\x5a\xa8\x6a\xa5\x3e\x90\xbb\x5d\x2e\x97\x4b\x98\xc0\xf1\x12\x5e\x9e\x05\xa4\xaf\x8d\xad\x83\xcd\x51\x96\xc8\xba\x00\x12\x2b\xa4\x6d\x94\x77\x3c\x44\x27\xe9\x45\x1c\x29\x0f\x54\xf7\x4c\x5e\x13\x53\x4c\xc3\xa6\x25\x43\xe6\x11\x83\xdf\xd8\xb2\xae\x51\xdc\x61\xaf\x1f\x85\xa8\x1c\x06\x2a\xae\x55\xad\x7c\xf0\x5f\x7d\x00\xcd\x8d\xce\x5b\x6b\x29\xdf\x21\xbf\x54\x19\x21\xdd\xa2\x6d\xf8\x7f\x88\x64\x37\xc2\x8a\xaa\xc2\x6a\x6d\x85\x76\x05\x25\xff\x21\xa6\xcd\x9e\xf6\x2f\x99\x40\x57\x87\x51\x08\x96\x0b\x63\x81\x4b\x0e\x88\x35\xc7\xe2\x85\xd0\xb2\x42\xeb\x9e\x7e\xeb\xe4\xcc\x54\xfe\xe2\x2c\x8d\x69\x0a\x19\x75\x50\xd0\xbe\xec\x8c\xc9\x0f\xcd\x3d\x62\x72\xf1\x7b\x4e\xa5\xe3\x05\x17\x52\x1d\xb2\x33\xe1\x90\x8b\x0e\x6f\x28\xe4\xb3\x2a\x75\xa5\x16\x78\x16\x20\x79\x6d\xfa\xd1\x81\x1e\xe4\x4c\xa7\x6f\x57\x60\x71\xa3\x8c\x66\x97\x49\x3f\x38\x18\x75\x73\xa7\x21\x53\xdb\xe2\x1e\xae\x2e\x12\x80\x97\xb8\x3f\x98\x5f\x61\x6e\xd1\x77\x60\x2f\x71\xcf\x79\x27\x8d\x85\x98\x76\x19\x8a\xbd\x78\x72\x8b\x85\x7a\x3f\x26\x55\x69\x89\xef\xd1\xc1\x33\x52\xf6\x69\xa8\x39\xdd\x94\xc3\x9f\xa3\x2c\xef\x8a\xe6\xc3\xb2\x03\xb2\xdf\xdc\x5e\x77\x65\x56\x2c\x27\x1d\x0a\x9b\x97\x63\x0f\x79\x7b\x9d\x42\xe9\x7d\x93\x2e\x16\xa3\xd4\xf7\x87\x25\xe7\x4b\xcf\x8d\x21\x43\x3e\xaf\x4c\x2b\x59\x2f\x82\x25\xb2\xcd\x75\x42\x99\x27\xfd\x04\xd1\x7f\x63\xcd\xaf\x98\xfb\xfe\xf8\x9d\x1c\x45\x9e\x9b\x96\xd2\xf9\x71\x2e\xad\x42\x84\x99\xc0\x2f\x6c\x4d\xa2\xe2\x1a\xb3\x31\xce\x29\x8e\x11\x63\xe0\xc7\x53\x04\xa9\x5c\x4e\xe1\x0d\x25\xe3\x29\xac\xa9\xc3\x79\xf5\x9d\xb2\x46\xd7\xa8\x39\x60\x8e\x32\xf8\xa1\x2c\x7d\x45\x95\x75\xa7\x22\x54\x00\x38\x28\x0d\xf9\x33\xae\xef\x43\x41\x80\x6e\x94\xd8\xa3\x8c\x9c\x63\xcf\xc5\x2b\x42\xd8\x9c\x8d\x6a\x55\x0e\x67\x9d\xc2\x2a\x77\xa8\xc0\xac\x84\x9c\x74\x52\xd0\x52\x1a\x22\x0d\x23\x2f\x17\x9c\x31\xad\xe0\xca\xa6\x6f\x8a\x8c\xe4\xba\xee\x52\x91\x48\x6a\xcd\x9c\x8d\x79\xf8\xbd\xdc\x2d\x96\x23\x94\xaa\x72\x85\x25\x61\x57\xa2\x0e\xcc\xe2\x9c\xa5\xcb\xfc\x29\x4b\xd4\x12\xb8\x92\xa1\x0c\x9c\xf2\x69\xaa\x48\x38\x85\xe8\xb3\x0b\x47\xd1\xd1\x68\x92\x53\x28\xd4\x06\x52\x3e\xa0\x35\xd3\x50\xaa\x88\xaa\x82\x5a\xec\x21\xab\x4c\xbe\x25\x42\x90\x68\x20\xaa\x68\x9b\x40\xd8\x50\x71\x74\x15\x5f\x86\x80\x8e\xac\x51\xb9\x32\xe4\x7c\xe3\x0c\xb2\x2b\x66\x98\x85\x44\x69\x57\xc8\x70\xe3\xc2\x06\xb1\xe7\xf7\x2a\x35\x1a\x53\x5a\x71\x05\x71\x58\xaf\x31\x3e\x49\xe9\xb6\xd1\x87\x32\x92\x94\x5a\xa1\xa4\x82\x93\xc6\x2f\x06\xe7\x83\x15\x53\xd5\x51\x11\x75\x7c\x28\xa8\x48\xa9\x5e\x8a\x62\x2b\xd2\xbe\xae\xec\x15\x84\x41\xd7\xa6\x51\x79\x2f\xca\x6f\xe1\xbc\x63\xe3\x0a\xce\x62\xcb\xe9\x1b\x78\xe9\x17\xeb\x73\xee\xa7\x05\xbb\x59\xb7\x56\x03\x15\x66\xec\x14\x9c\x17\x9e\x2a\x3e\x8a\x67\xaa\x42\x3b\x87\xb7\x25\x6a\x40\x4d\xae\x55\x4e\xbb\x54\x63\x68\xb5\xa0\x1b\xd2\xb7\x17\x37\xe7\x8c\x72\xa8\xa6\xbc\x81\x42\x69\xd9\x95\x4a\x5c\x5f\x5a\x04\xe7\xdb\x7c\x4b\x1a\x29\xe0\xb7\x16\x5b\x32\x4b\xde\x97\xf2\x0a\x6b\x8d\xa5\x24\x44\xcb\x58\x14\xc6\x54\xa7\x4b\x15\x02\x24\x79\x23\x2b\x29\x4d\xd9\x8f\xfa\x07\xb7\x3d\xdd\xb1\x81\x10\x5a\x3e\x71\x90\x12\x14\xd2\xf3\x72\xc8\xb1\xca\x07\xad\x48\xfe\x16\x16\x5d\xd8\x88\xed\x26\x1c\xfa\x5f\x5d\xdf\xae\x8c\xfa\xee\x4b\xe3\x88\x59\x8d\xb1\x7e\xd0\xb7\x01\xe8\x60\x67\x0a\xf7\x64\x04\x6b\xac\x9b\x4a\x78\xec\xdd\xd8\x30\x94\xc2\xff\xb2\xb2\xb5\x5a\x91\xe6\x21\x9c\xc0\x9d\xd0\xaa\xaa\x04\x0f\x6f\xd0\xa3\xbe\x83\x13\x58\x87\xa3\x41\xcc\x6b\xb8\xb4\x38\x81\x8f\x1f\xe7\x97\xfd\xf7\xa7\x4f\x0c\x20\xec\xa6\x25\x17\xea\xe0\xa4\xcb\x97\xa8\xe0\x9d\xcd\x62\x33\xe2\xe3\xc7\xf9\x39\xff\xfa\xf4\x09\x66\x33\xe2\xef\x4c\x49\x1a\x5d\x0b\xb7\xbd\x92\x11\x0b\xa5\x9c\x8c\x3f\x66\x43\x9f\x3e\x2d\x42\x47\x76\xc6\x91\x6c\x56\x99\x4d\x20\x87\x64\x77\x1f\x32\xc6\xf8\xd0\x5c\x64\x30\xc3\xdd\xc5\xcf\xc3\x99\xd6\x33\x9c\x2b\x4d\x5b\xc9\x77\x3e\x26\x4c\xef\x0a\x4e\xf8\x4f\xe0\x7f\x2e\x57\x3c\x4f\x7e\xf0\x9d\x37\x03\x40\x8f\xf8\x97\xd7\xef\x2e\xff\xfb\x6a\xfd\xee\x97\xdb\x77\x97\xff\x75\x75\xbe\x66\xf0\x8f\x1f\x55\x01\x1a\x61\x4e\xb5\x10\x2c\x61\x16\x4f\xf7\xf1\x63\x63\x95\xf6\x05\x1c\xc5\xc6\xc7\xbb\x9c\x00\x4e\xe0\x4f\xf2\x28\x00\xf7\x80\x33\x40\x2d\xfb\xaf\x88\x8e\xeb\x25\x2a\x7c\x7e\x07\x63\x8d\x35\x65\xa3\x27\xf0\xa7\xf9\xb2\x80\xe7\x67\x47\x71\xd9\xef\x63\x0e\x45\xd5\x17\x50\x4b\x2a\xce\xc6\x88\xc3\xaa\x07\x98\xf9\x93\xad\x2d\x49\x6e\xce\x56\xff\x34\xfe\x3f\xa8\xf1\x4f\xfe\x25\x53\x7a\x91\x09\x57\x86\xcf\x9b\xb3\x15\xcc\x5e\x3f\xb0\xc9\x30\x6e\xbe\x64\x43\x01\x0c\xbf\x64\x92\x5f\xb6\x8d\x80\xa8\x0a\x39\xeb\xc9\x71\xda\x34\xfa\xe4\x09\x0c\xa4\x43\x5b\x63\x7d\x42\x2a\xbc\xc9\x9e\xc0\x34\x3a\xa4\xe4\x30\x06\xac\xbf\x67\x17\xf7\x7c\xe7\x57\xfa\xca\xab\x8b\x03\xb1\x24\xcf\xad\x92\x97\x7c\x25\x95\xfe\x6d\xb2\xfe\xee\x51\x49\x7f\xf7\x35\x72\xfe\xee\x2b\xa4\x4c\x40\xbd\x04\xbf\x56\xee\xdf\xc1\xac\x41\xa8\x1b\xf5\x14\xfe\x30\x50\x50\xbe\xbb\xeb\xe4\xfd\xfc\x29\xc4\x1d\x91\x16\x4e\x7d\xc0\x1e\xeb\xb7\x17\xf7\xaa\x6a\x6d\xfd\x4f\x3f\xfa\x87\xf5\xa3\x8b\x43\xe3\x5a\x9d\x9d\xae\xcf\x5f\xc0\x6c\xf6\xab\xc9\x66\x5c\x84\x3c\xb0\xb4\x1e\x44\x07\x5e\x1f\xdf\x1b\x0e\x09\xce\x97\xac\xac\x07\x8f\xf9\xc8\x17\x4c\xf7\x2b\x6c\xb0\xc7\x48\x99\xc9\xac\x41\xcb\xfa\xf8\x24\x06\xd9\xa3\xae\xb1\xe6\x24\xe2\x49\x92\x93\x01\xad\xaf\x9b\x01\xed\xb7\xb7\x49\x6e\xd7\x9c\x09\x9f\x97\x20\xd1\xe5\x56\x65\x51\xed\x0f\x1b\xea\x5d\x69\x79\xfa\x76\x05\x01\xfa\xc1\xa5\x51\x87\xe7\x49\x0d\xbc\xdf\xaf\xd3\xfe\xfb\x86\xad\xb9\xd0\xe6\x7b\x9a\x60\xbf\x83\xed\xfe\xe1\xed\x76\x7c\xb8\x47\xad\x76\x02\xff\x61\xb2\x70\xf1\xc1\x52\xc8\x85\xe6\x9e\x81\xf2\x25\xf2\x35\x15\x3f\x2b\x88\x92\xa9\xc5\x07\xa3\xfb\xeb\x0d\x78\x4d\x73\xcf\x4e\x6f\x5f\x7f\x4f\x47\x3e\xc0\x93\xc2\x51\xb4\x2a\xb2\x6c\x89\xc5\x51\xb7\xd7\x7f\x92\x5f\xfc\xfb\xb6\x61\x14\x87\x3b\xb0\xb7\x3d\xba\xd7\x57\xec\xfa\x74\xae\xc1\x5c\x15\x0a\x25\xfc\x6a\xb2\xe0\x98\xc3\xbb\x06\x13\xaf\x2a\x18\x8a\xe6\xe4\xc0\x08\xf5\xa0\x2d\x39\x34\x20\xc7\x6d\xc6\x09\xbc\x6c\x33\xb4\x9a\x1b\xde\x5f\xa3\xdf\x23\xf0\x07\x0a\x3e\xcc\xa5\xfd\xcd\x70\xdf\xde\xe7\x16\x97\x37\x71\x20\x44\x0d\x37\x1f\x3d\x89\xe9\x20\x5d\x0a\xd2\xe4\x5b\xb4\x53\xd8\xf6\x08\x13\x80\xcb\x38\x9f\xc2\xd1\x30\x7e\x04\x4f\x69\x4c\x2f\xc7\xfb\x3d\x6a\x4d\xff\xe8\x61\xf2\x40\x5f\x48\xb5\xc3\x25\x9e\x37\xe0\x1a\xb1\xd3\xa4\x86\x2e\x36\x32\x13\x18\x00\x52\x38\x92\x58\x88\xb6\xf2\x47\xf7\x91\xac\xc2\xa3\x8d\xd3\xd8\x0c\x1e\xf5\xb8\xa3\x5a\xc7\xc6\xd9\x00\x33\xd8\x8e\x13\x47\xf1\x6a\xc8\x85\xc7\x56\xe4\x77\xc9\x12\x7c\x0c\xdd\x73\x58\x21\x86\x6e\xb6\x4b\x17\x8b\x41\x6f\xe6\xca\x2c\xa4\xc9\xdd\xc2\x62\x81\x16\x75\x8e\x8b\xfe\x6a\x79\x04\x36\x13\x8d\x5a\xdc\x1d\xcf\x8f\xff\x6d\x31\x21\x43\xbd\x3b\x8e\xaf\xc1\xc6\xd9\x41\x6c\x6b\x8f\x33\x88\xae\x0f\xdb\x8c\xae\x2c\xea\x40\xe4\x01\x79\x8f\x25\x1e\xe1\x7d\xc9\xe1\x6d\x6d\x71\xdf\xf6\x3a\x63\x99\x27\x9d\x67\xea\x91\x0e\x2f\x18\xfa\x4b\xaa\x5e\xff\xb8\x4b\xdd\x19\xd2\x83\x13\xdc\x9f\xf8\xdc\x49\x7a\x9b\x1e\x9f\xe3\xb1\xc5\xd1\xc7\x3c\x75\xbf\x71\x02\x2b\x6f\xac\xd8\xe0\x37\x68\x65\x4e\xfe\x8e\xeb\x86\xcf\x5d\x36\x24\x13\xb8\x36\xb9\x08\xe5\x23\xb8\xbd\xf3\x58\xcf\x13\x1e\x8a\x07\x09\xfe\xf2\x6d\xa9\x3c\x56\xca\x71\xe3\x9e\xaf\x0f\x46\xf7\x8e\x24\x00\x07\xbb\x52\xe5\x65\xe7\xc0\x94\x03\x51\x55\x66\x17\x1c\x6b\x78\x1b\xc4\xd7\x10\x61\xf0\x42\x0d\xbd\xe6\xf9\x82\xa8\x78\xb1\x5e\xdf\xc4\x1d\xfb\xa7\x2e\xde\xf4\xf7\x8b\xd0\xb4\x59\xa5\x72\x08\x6d\xb1\xd8\x04\xdf\x61\x06\x77\x4a\x80\x80\xe7\x97\xeb\xee\x25\xcf\x3c\x19\xa1\x4a\x0f\x6e\x20\x48\xf1\xc8\xde\x9e\xb9\xef\xc7\x2b\xdc\x41\xf3\xfe\xc7\xa5\x4b\x92\x10\x29\x57\x3f\xa6\x83\x0b\x94\xdd\xb5\xe8\x13\x3f\x2c\xba\xf7\xee\xe7\xa9\x2e\xe9\x06\x3b\x45\xbe\xab\x21\xbe\x76\x2f\x3b\x99\x86\xd5\x8f\xd0\x58\x73\xa7\x24\x5a\x07\xae\xcd\x4b\x10\x0e\x5e\x29\xad\x4c\x77\x93\x7a\x8e\x4d\x99\x4c\xe0\x39\x39\x1f\x95\x13\x33\xc2\x13\xbb\x81\x21\x1c\x0a\xc2\x1b\xbb\x4b\x2d\x1b\xa3\x74\xd8\x3d\x0c\x75\x24\x87\xaf\x31\x71\xe1\xa6\x6e\x24\xa3\xc7\x78\xfc\x07\xbe\x8b\x5b\xed\x54\xe1\x1f\xa7\xfb\x8d\x43\xfb\xfa\x33\xd7\x2d\x00\xa7\xad\x2f\xf9\x12\x33\x56\x71\x5a\x68\x3f\x82\x0e\x03\xf1\xed\x50\x97\x24\x8d\xe6\x27\xf0\xd3\x72\x09\xaf\xce\x88\xae\xb2\xd5\xdb\x95\xfa\x80\x67\x7b\x4a\x6a\x68\x22\xfc\x25\xc9\xcf\x07\xea\xff\x90\xc4\xe1\x1d\xd5\xd2\x45\x8a\x53\x38\x12\xda\xe8\x7d\x6d\x5a\x77\x8f\xec\xd1\xf8\xff\x05\x00\x00\xff\xff\x53\xa0\x2f\x67\x71\x2d\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 11633, mode: os.FileMode(0644), modTime: time.Unix(1728510363, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x16, 0xbb, 0xcd, 0xc3, 0xda, 0x3e, 0x1e, 0x75, 0xa3, 0x87, 0xfb, 0xdf, 0x7, 0xd2, 0xca, 0x1, 0xc1, 0xac, 0xa9, 0xb6, 0x3d, 0xa8, 0x7b, 0xbb, 0x66, 0xae, 0xd2, 0xe3, 0x2e, 0xab, 0x4f, 0xf7}}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x11\xd2\x5d\x26\x97\x17\xc8\xa6\x80\x10\x9b\x22\xd1\xa8\x3f\x2b\xcb\xe0\x49\xb0\xe2\x8c\x61\xec\x09\xad\xa2\xbc\x7b\x15\x40\xad\xa8\x4a\x77\x47\x3e\xdf\xf9\x3c\x42\xae\x43\x8e\x08\x05\x74\x86\x9c\xf7\x46\xd5\x98\x90\x3a\x28\xa0\x64\x41\x85\xef\xb8\x93\x64\xb6\x7e\x44\x2a\x21\x42\xaf\x0c\xd7\xd2\x22\xa5\x08\x05\x9c\x02\x37\xc8\xc0\x42\x90\x65\xc9\xc4\x66\x35\x87\xbe\xcf\xcb\x31\xd9\x61\x50\x3e\xd4\x50\x8c\x2f\x2f\x81\x9b\xb9\xe3\x61\xf8\xbf\x0b\x64\x03\x67\xd8\x21\xa5\xcc\x87\x5a\x21\x73\xe0\x9f\xd4\xe5\xaf\x2c\x26\x8b\xcc\x2a\x48\x3a\x48\xba\xcf\x04\x49\x2a\xee\x83\x78\xab\x13\x1b\x8a\x15\xb2\xae\x9c\xc7\xf1\xc4\xb7\xc5\x93\x3a\xed\x91\x74\x0a\xdf\xe5\x97\x70\xfd\xa8\x17\xaf\xab\x52\xaf\x37\x7a\xf1\xbc\x9a\x95\xaa\xef\x5d\x05\x84\x90\xcf\x0e\x12\x61\x0a\xd9\x30\xa8\xbe\x3f\xb0\xa3\x54\xc1\x84\xf1\x28\x18\x93\xde\x8d\x65\x01\xff\xec\xe4\x02\x9e\xa1\x0c\x90\xec\x39\x5d\x15\x1b\xd3\x2e\xb7\x30\xcd\xef\x59\x5a\x6c\x03\x7f\x8c\x9e\x7c\x5a\xc1\xf2\x61\x72\x9d\xfc\x6e\x9b\xbb\xd8\xfc\xa9\xb3\x2e\x36\x37\xb2\xcb\xe2\xc6\xa6\x8e\x82\x82\xea\x33\x00\x00\xff\xff\x61\xe0\x01\xde\xf9\x01\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 505, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0x3, 0xc3, 0xc4, 0x14, 0xdf, 0x97, 0x3b, 0x68, 0xaf, 0x9e, 0xee, 0x13, 0x1, 0xbd, 0x3, 0x61, 0x3c, 0x95, 0x4b, 0x8f, 0x27, 0xcf, 0x52, 0x2d, 0x11, 0x2d, 0x67, 0x54, 0xd2, 0x1, 0x79}}
	return a, nil
}

var _configKubernetesTemplateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xcd\x8e\x9b\x3c\x14\xdd\xf3\x14\x57\x8c\xbe\x25\x81\x6c\xbe\x85\x77\x51\x32\x4a\x5b\x35\x4c\xd4\x8e\x66\x6f\xcc\x25\xb1\xe2\xbf\xda\x26\xa3\x28\xe2\xdd\x2b\x63\x68\x43\xfe\x16\xf5\xca\xbe\x07\x9f\x73\xee\xe5\x00\x35\xfc\x03\xad\xe3\x5a\x11\xa8\xa8\x67\xfb\xfc\x38\x4f\x0e\x5c\xd5\x04\xbe\xe9\x2a\x91\xe8\x69\x4d\x3d\x25\x09\xc0\xcb\x0b\xac\xde\xa0\x7c\x7b\x87\xe5\x97\x45\xb9\x7e\x85\x72\xb1\x79\x4d\x00\x14\x95\x48\xe0\x7c\x9e\xbd\x53\x77\xf8\x5a\x77\xdd\x50\x73\x86\xb2\x08\x94\xe3\xa9\xeb\x12\x67\x90\x11\x48\x00\x2a\xca\x0e\xba\x69\xbe\x73\xc9\x3d\x81\x22\x01\x60\x5a\x1a\x81\x9e\x6b\xe5\x08\xcc\x13\x00\x8f\xd2\x08\xea\x31\xa8\x03\xf4\x37\xfb\x1d\x80\x43\x7b\xe4\x0c\x17\x8c\xe9\x56\xf9\x72\x74\xf0\x73\x52\xee\x9d\x84\x65\xd1\x79\x6a\xfd\x56\x0b\xce\x4e\x04\x4a\x3c\xa2\x1d\x20\xa6\x95\xa7\x5c\xa1\x75\xbd\xa9\xb8\xb2\xa1\xa7\xa6\x55\x0a\x45\xf6\xa9\xed\x01\x6d\x36\xed\x70\x5c\x5c\xd2\x1d\x12\xd0\x7b\xd7\x06\xff\x15\xd7\xf9\x70\xad\xe6\xaa\xce\xac\xd6\x5e\xa0\x73\x24\xf4\xe1\xfc\xf5\xc5\x6d\x2b\xc4\x68\x6b\x21\x3e\xe9\xc9\x5d\x3c\x41\xed\xce\x91\x8b\x73\x30\x96\x46\x33\xe9\x75\xd9\xb6\xea\xa6\x96\x65\x4c\xab\x86\xef\x6e\x80\x1c\x3d\xcb\x23\x96\x4f\x7b\x8c\xc5\xd9\x49\x8a\x3b\x6c\x3e\x74\xbf\xba\x06\xee\x8f\xc5\xa2\xd3\xad\x65\x78\xd5\x40\x00\x7e\xb5\xe8\xfc\x4d\x1d\x80\x99\x36\xbc\x44\xde\x80\x42\x98\x2d\x4d\xeb\xa0\x80\xac\xeb\xce\xe7\xfe\x10\x36\x80\xc2\x21\x84\x5d\x3a\x2f\x0a\x99\x86\x1d\xaa\xa9\x72\x5c\x12\xa5\xb6\xa7\x0b\xbe\x1f\x54\xae\x2b\x28\x66\x03\xa5\xb1\x5c\xf9\x06\xd2\xff\x66\x45\xb3\x4e\x07\xb8\xa7\x13\x0e\xa3\xc0\xff\x9b\x27\xfc\x68\xf6\x28\xd1\x52\x91\x39\xaf\x6d\x1f\x81\x3f\x52\x2b\xee\x0e\xcf\xb4\x22\x3e\x15\x2b\x8a\xfb\x6a\x47\x2d\x5a\x89\x9b\x10\xe7\x9b\x2c\x4c\x42\x3a\xd8\x78\x90\xd2\x7e\x24\x81\x64\x4b\xfd\x9e\x40\xae\x8d\x1f\xde\xfc\x65\x00\xb2\x9a\xdb\xfc\x31\x81\x6b\xab\x78\xfd\xd1\x23\xa3\xa5\x98\xa2\x2c\x7a\x7f\xe2\xe2\x6f\x0c\x93\xe4\xb2\xdd\x7b\xdf\xe2\x23\xce\x58\xdf\x50\x33\x9d\xce\x64\x36\x83\xc6\x3f\x4d\xce\x84\xbf\xa3\xf3\xa8\xfc\x47\x2f\xbd\x14\x94\xcb\xa9\x16\x0b\xa5\xf8\x0f\x1a\xb9\xcc\x91\xc1\xef\x00\x00\x00\xff\xff\x38\xcd\x93\x4b\x5b\x05\x00\x00")

func configKubernetesTemplateYamlBytes() ([]byte, error) {
	return bindataRead(
		_configKubernetesTemplateYaml,
		"config/kubernetes-template.yaml",
	)
}

func configKubernetesTemplateYaml() (*asset, error) {
	bytes, err := configKubernetesTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/kubernetes-template.yaml", size: 1371, mode: os.FileMode(0644), modTime: time.Unix(1728510676, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3a, 0x69, 0x1, 0x41, 0x70, 0xa9, 0x27, 0x6d, 0x4a, 0xec, 0xb6, 0x24, 0x14, 0x4d, 0xb8, 0x46, 0xdf, 0xfe, 0xff, 0x16, 0xd1, 0x6d, 0x48, 0xc8, 0xe, 0xea, 0x7a, 0xe6, 0x48, 0xff, 0xda, 0x42}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/gridengine-template.txt":           configGridengineTemplateTxt,
	"config/pbs-template.txt":                  configPbsTemplateTxt,
	"config/slurm-template.txt":                configSlurmTemplateTxt,
	"config/kubernetes-executor-template.yaml": configKubernetesExecutorTemplateYaml,
	"config/default-config.yaml":               configDefaultConfigYaml,
	"config/htcondor-template.txt":             configHtcondorTemplateTxt,
	"config/kubernetes-template.yaml":          configKubernetesTemplateYaml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":               {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt":           {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":             {configHtcondorTemplateTxt, map[string]*bintree{}},
		"kubernetes-executor-template.yaml": {configKubernetesExecutorTemplateYaml, map[string]*bintree{}},
		"kubernetes-template.yaml":          {configKubernetesTemplateYaml, map[string]*bintree{}},
		"pbs-template.txt":                  {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":                {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
