// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\x5f\x73\xdb\xb8\x11\x7f\xe7\xa7\xd8\x5a\xb9\x69\x32\x23\xd2\x72\x33\xd7\xe9\x69\xc6\x0f\xb6\xec\x38\x9a\x73\x12\xd5\x52\x9a\xb6\x2f\x1e\x90\x5c\x91\x38\x83\x00\x03\x80\x52\x14\x37\xdf\xbd\xb3\x00\x48\xfd\xb1\xec\x28\x8d\xfb\x26\x02\xbb\xbf\x5d\x60\x17\x0b\xec\x4f\x3d\x98\x30\x5b\x82\x55\x60\x4b\x84\x9c\x59\x96\x32\x83\x30\xe7\x02\x93\xe8\xe2\x9c\x26\x87\x90\x1c\xcf\x1b\x29\x51\xc4\x4b\xa5\xef\xe2\x9c\xeb\xf0\x9d\xe4\x69\xd4\x83\x89\xd2\x16\x1a\x83\x39\xcc\x95\x86\xb7\xb3\xd9\x04\x32\x55\x55\x8d\xe4\x19\xb3\x5c\x49\x60\x32\x77\xe8\x4b\x4c\x21\x67\xa6\x4c\x15\xd3\x79\x12\x91\x24\xe9\x0e\xe1\x6f\x83\xc1\xe0\x01\xd0\xcd\x64\xb4\x8d\x93\x44\x37\x93\x91\x57\xf8\x6d\xf0\x1b\x29\x7c\x52\xfa\x8e\xcb\xc2\x79\x6b\x20\xd3\xc8\x2c\xe6\x90\x37\x9a\x06\x6b\xad\x32\x34\x86\x7e\x2e\xb9\x10\x90\x22\x2c\x35\xb7\x16\x25\x70\x09\xb6\xe4\x06\x72\xae\x31\xb3\x4a\xaf\x92\x88\xa0\x2e\xb8\xde\xb3\xd6\xa8\x07\x6f\x95\xb1\x92\x55\x08\x6a\xee\x16\xf2\xc6\x49\x80\x41\xbd\x40\x9d\xc0\x3b\xc6\xa5\x58\xf5\x3d\x26\x37\x7e\x09\xe9\x0a\x58\x63\x55\x6c\x32\x26\x50\x9b\xa8\x47\x7b\x9c\x29\x39\xe7\x45\xa3\x11\x08\x1d\xb5\x49\x22\xc2\x7e\xcf\x2a\x1c\x82\x50\x19\x13\xa5\x32\x36\x9a\x3a\xe0\x61\x04\xd0\x83\x1b\xfc\xdc\x70\x8d\x90\x32\xc3\x33\x82\x2c\x51\xda\x76\x67\x69\x9f\xc8\x21\xef\x09\x9c\x4d\xc6\x64\x9d\x96\xcc\xa0\x66\xc6\x2c\x15\x6d\x34\xc1\x8c\xe7\xce\xad\x3e\x54\xec\x0e\xc1\x90\x0b\x56\xd1\x1e\xd5\xa8\xc5\x0a\x34\x1a\xab\x79\x66\x81\x65\xb4\x69\x6d\x3e\x78\x7f\xdd\xfe\x3a\x94\x97\x98\x14\x09\x64\x65\xa5\x72\xf8\xeb\x60\x00\x21\x0d\xbc\x58\xb2\xaa\xc4\x2b\x12\x9b\x04\xcb\x43\x60\x69\x76\xf2\x97\xd7\xd1\xb5\x2a\x8a\x76\x3d\xf4\x9b\x1c\x14\xb8\x40\x61\x86\x90\x63\xda\x14\x7d\xe0\x72\xae\xfa\x80\x5a\x2b\x1d\x01\x5c\xd3\xe4\xd0\x0d\x3a\xa5\x4f\x9a\x5b\x04\xa1\x8a\xe0\x19\x37\x50\x33\x5b\x26\xb4\x2c\xac\x6a\xbb\xea\xfb\x49\xa6\xd7\x41\xb6\x0a\x8c\xcd\x51\x6b\xda\x80\x0f\x8d\xad\x1b\xfb\x86\x0b\x1c\xc2\xd1\x51\xd4\x83\x6b\x5e\x71\xeb\xf7\x8e\x7f\xf5\x81\x65\xe6\x0e\xf0\x0b\x66\x8d\x55\xda\xc3\xbd\x34\x36\x57\x8d\x3d\x46\xad\x5f\x91\x8b\x90\xae\x2c\x9a\x24\x7a\xc7\xbe\x5c\x06\xc1\x6b\x55\x4c\xf9\x57\x1c\xc2\xc9\x60\x30\x18\x40\x0f\x4e\x06\xf0\xfb\xb9\xcb\x99\x25\xa8\x79\x70\x44\x37\x12\x18\x98\xac\xc4\xbc\x11\xa8\x81\x5b\xd4\x21\xa7\x7b\x30\x96\x20\x99\x54\x06\x33\x25\x73\x93\x44\xd3\x20\x76\xc3\x6c\x8b\x3b\x68\xc1\xc1\x4b\x05\xfc\x8a\xc9\x95\xf3\xdb\x6d\x4b\x0b\x4f\x8e\x2a\x89\x9b\x46\x5a\xc8\x51\xd9\xc8\x3b\xc2\x0c\x00\x42\xc9\x82\x54\x97\x8c\x5b\x48\xd1\x2e\x11\x25\x34\x75\xce\x2c\x1a\x48\x71\xae\x34\x42\xc5\xfc\x21\x63\x21\x67\x21\x47\x96\xef\xf3\xfb\x93\x9b\x9e\x70\x59\xcc\x78\x85\xaa\xb1\x43\xca\x91\x2d\xef\x2b\x2e\x1b\x8b\xfb\x8c\x53\x26\x77\x16\x5c\xe8\x98\xb6\xfd\x5d\x1f\x5c\x15\x39\xc4\x8b\xb1\xe4\xb6\xf3\xe2\xf5\x60\xcb\x8d\x5f\x83\x1b\xc6\x69\x67\xa2\xc9\x11\x18\x1c\x8d\x58\x56\x62\x3c\x52\xd2\x6a\x25\x86\x20\x55\x6c\xac\xd2\x78\xe4\x2b\x5a\x89\x2c\xa7\xc0\x49\xb8\x42\x7b\x7c\xcd\x8d\xa5\x33\x53\x2b\x69\x30\x9c\xed\x5a\xe3\x02\xa5\x85\x8c\x65\x25\xf9\x9a\xae\x80\x4b\x8b\xba\xc2\x9c\x33\xbd\x72\x67\x94\x67\x94\x3e\x17\xdc\xb0\x54\x20\xe1\x3a\xa3\x43\xb0\xba\xc1\x28\xea\x01\x25\x28\x90\x59\x56\x20\x98\x95\xb1\x58\x51\x42\xf8\x81\xf6\xfc\x64\x4c\xb8\x13\x19\x04\x28\xbd\xdd\x20\xcd\xbb\xc3\x52\x72\x8b\x82\x3c\x54\x73\x5f\x54\xd6\x85\xce\x1d\x1b\x03\xcb\x92\x67\x65\x5b\xc6\xb8\x01\x26\x84\x5a\x62\x4e\xcb\xf0\x05\x20\x71\x58\x67\x7e\xf8\x82\x6b\xe3\xc1\x01\xe2\x3d\x97\x41\x70\x38\x72\xfe\x4d\x5f\x7b\x3f\x49\xf4\x52\xe6\xb5\xe2\xd2\xb6\x23\x00\xbf\xe3\x6a\xfd\x31\xc5\x4c\xa3\x1d\x7a\xbd\x2b\xa5\x0a\x81\x30\x12\xaa\xc9\x21\xac\xd8\x4f\x4c\xd7\x80\xeb\xdb\x8a\x65\x99\x6a\x68\xb7\x35\xe6\x54\x10\x99\x30\xe1\xd2\x6a\xd1\x7b\xf0\xa1\xa6\xec\x67\xc2\x95\x89\x5a\x19\xc3\x53\x81\xa1\x4c\xb7\x57\x02\xd5\xe8\x8a\x51\x41\x15\x62\x05\x39\x37\x99\x5a\xa0\xc6\x7c\x8d\x73\xe6\x2d\xb9\xda\xb1\x01\x7e\xb6\x57\x71\xdb\x1f\xad\x2a\x97\xb2\x28\x17\x5c\x2b\x59\xa1\xb4\x6b\xdc\x37\x5a\x55\x97\x72\xb1\x0e\xfe\xac\x44\xd8\xbc\x65\x58\x66\xf9\x02\x37\xaa\x46\xca\xb2\x3b\x74\x87\xff\x6c\xc1\xb8\xa0\x1c\x6a\xc7\x4c\xb8\x3e\xfa\x54\xb2\x73\xa5\xfb\x50\x64\xd8\x07\x55\xa3\x34\x96\x65\x77\x5d\x05\xd0\x41\x90\x0c\x4e\x77\x91\x43\xbd\x8f\xce\x5b\xd0\x08\xe0\xed\x6c\xe4\x10\x7d\x02\xcc\xb0\xaa\x85\xab\x4b\xff\x09\x09\xd1\x48\xbe\x40\x6d\x10\x4e\x61\xc1\x24\x17\x82\x85\x89\x02\x2d\xca\x05\x9c\xc2\x8c\xd6\xe7\xc7\x7c\x79\x75\x8e\x9f\xc2\xfd\x7d\x72\xd9\x7d\x7f\xfb\x16\x44\x98\x2e\x1a\xda\x28\x03\xa7\xed\x51\x8f\xe3\x70\x0f\xdd\xdf\x27\xfe\x78\x8f\xdc\x77\xa7\x23\x54\xe1\xf1\xc2\x2d\xfe\xed\xdb\xb1\xdf\x86\xd8\x1d\xc9\x58\xa8\xa2\x75\x80\x2e\x98\x5d\xd9\x8d\x7c\x46\x1d\xfb\x4b\x23\xc8\x2b\x77\x6f\x7c\x57\x41\x35\x36\x28\x98\x52\x35\x22\xbf\xb5\x9a\x49\x33\x47\x7d\xeb\x9f\x26\xa7\xf0\xaf\xcb\x69\x90\x58\x96\x28\x6f\xad\x5a\x8b\x74\x36\x3e\xbc\xbf\xbd\xfc\xe7\x78\x76\xfb\xe1\xe6\xf6\xf2\x1f\xe3\xd1\x2c\x28\xdc\xdf\xf3\x39\x48\x84\x64\x54\x37\x06\x06\x10\x77\xeb\xbe\xbf\xaf\x35\x97\x76\x0e\x47\x1a\x3f\x37\x68\xec\x6d\x46\x22\xa7\xf0\x4b\x7e\xe4\xc5\x37\x44\x63\x40\x99\x6f\x7c\x07\xd0\x1b\x56\x5d\xa5\x30\x48\x9e\xc6\xad\xb0\xa2\xea\x71\x0a\xbf\x24\x83\x39\x5c\x9d\x1f\x05\xc5\xef\xe3\x5f\x70\x73\x77\x80\x81\x9c\x9b\xbb\x2d\x78\xaf\xb7\x07\x3f\x0c\x7c\x6e\xb0\x71\x25\x67\x72\x3e\x7d\x2c\x37\x7b\x7f\x4a\xb9\x3c\x4e\x99\x29\xdb\x81\xc9\xf9\x14\xe2\xf7\xeb\x44\x1a\xaf\x3d\xf6\x73\xea\xe0\x48\x7b\x79\x3c\x38\x95\x0e\x09\xa3\xc7\x14\x20\x55\x8e\xe6\xf4\x64\x58\xd7\xf2\xf4\xd9\x62\xd9\x82\x57\x58\x9d\xd2\x3e\x17\xe9\xb3\x45\xb1\x85\xa6\x6c\x5f\x63\x7f\x2f\x84\x3b\x05\xe0\x80\xe3\x1e\x01\x5c\x69\x9e\x5f\xca\x82\x4b\x3c\x3c\xea\x2f\x1e\x8d\xf9\x8b\x1f\x8a\xf8\x8b\x1f\x89\x37\x49\x77\x91\xfc\x91\x1c\x78\x01\x71\x8d\x50\xd5\xfc\xf9\x8e\xb1\xf7\xa5\xbc\x5d\xb4\xb1\xbf\x7a\xbe\xd0\x07\xe8\x39\xbd\xa3\x3b\xec\xe7\x0f\x3d\x40\x04\x30\xbd\xfe\x78\xf3\xee\xf1\xb8\x1f\xef\x06\x7e\x7a\x7e\x36\x1b\xbd\x85\x38\xfe\x43\xa5\xb1\xbb\x5b\xf7\x66\x41\x27\x26\xfd\x63\xfa\xe4\xc1\x84\xbf\x37\x0e\x0e\x7d\xa7\x17\x6a\xfb\xa1\x19\x76\x50\x7e\x74\xe0\x54\xec\xe3\x1a\x75\xec\x5a\x97\xe7\x4b\x96\xce\x40\x85\x95\xab\xc8\xcf\x58\xef\xd7\xe0\xb6\xaa\xd7\xe0\xff\x9f\x52\x31\xba\x6c\xdf\xc4\x87\x3c\x1b\x43\x9b\xfc\x3f\x3c\x14\xb7\x1f\x89\xd4\x60\x7a\xb4\xad\x37\x6d\xad\xd5\x1f\x98\x59\x18\x5f\xfc\xac\xb1\x89\x47\x7a\xcc\xd0\x57\x25\x7f\x7a\x3d\xff\x56\x72\xbd\x90\x4f\xc8\x8b\xd2\x76\x2d\x40\x0f\x26\x1a\xe7\xa8\x5b\x0e\x03\x6c\xc9\xac\x6f\xd8\xa0\xa9\xe1\x73\xc3\xb3\x3b\xb1\x4a\x3a\xe9\x4f\x9b\x62\xd4\xa1\x33\xa1\x91\xe5\x2b\x50\x52\x70\x89\x50\xb2\x05\xf5\xac\xc6\x32\x19\x60\x9a\x1a\x2c\xaf\xb0\x85\xf0\xe6\xfe\x4e\xb8\x53\x3f\x3d\x84\x93\x64\x10\x96\xb8\xd9\x4a\x52\xef\x85\x14\x77\x38\x9b\x8c\xa9\x41\x6b\x84\x35\xf0\xb2\x72\x2d\x19\x02\x35\x45\x7d\xb0\xa1\x72\x98\x3e\xa0\xcd\x5e\x05\x98\xd0\x69\x6a\x9c\x6b\x34\xd4\xc0\x79\xeb\xae\x41\x9b\xcd\xae\x1f\xed\x65\x43\xc3\x39\x6c\x59\x96\x40\x47\x74\xbd\xec\xf8\xe2\x91\x2d\x2f\x50\x52\x7f\xee\x77\x7c\x7c\x11\x76\xbb\xe7\x78\x2f\x96\xe7\x1a\x8d\xd9\xcb\x37\x51\x19\x74\x3f\xce\xbc\xd0\x06\x71\x34\x74\xbc\x18\x81\xbc\xf9\x79\x46\x0c\xe0\x09\x4e\x2c\x2c\x76\xa3\x1f\x2f\x99\x81\x14\x09\x2a\x17\xe8\xda\x79\x0a\x0a\x35\xf3\x25\x93\x4e\xd0\xfa\x7e\xbc\x0f\xdc\x7a\xfb\xa6\x6c\x2c\xe4\x6a\x29\x7d\x53\x14\x9f\x40\x85\x4c\x52\xa2\xa0\x46\x6a\x4b\xa5\x6a\x95\x12\x18\xb4\x93\x7e\x00\x78\xe5\x1a\x6b\x8b\x62\x05\x6c\x6e\xd1\x13\x61\x73\xae\x8d\x75\x94\x08\x61\x76\x0c\x40\x7c\xe2\x2c\xbc\x63\x5f\x78\xd5\x54\x9e\xea\xa1\xa6\x61\x93\xe0\x71\x44\xd0\x26\xcb\x43\x6d\x75\x31\x63\x5c\xec\x23\x78\x22\x5f\x55\x3c\xd1\xe5\x96\xbb\x26\xe8\x12\x58\x72\x2a\x37\xdb\xc4\x9c\x5b\xa4\x8f\xdc\x03\x82\xac\x8b\xd9\xc3\xe6\x1f\xa0\xe7\x66\x67\x1d\xb9\xd8\xb8\xf4\x31\x68\x77\x12\x2a\x5d\x79\x93\x6d\x57\xd7\x87\xb4\xb1\xb0\x52\x0d\x54\x74\x7e\x41\x22\x75\xf8\x25\x37\x0e\x8f\xcf\x69\xea\xcf\x1a\xfd\x91\xdb\x62\x78\x2a\x26\x9d\x11\xb2\xbe\x41\x3e\x3c\x4a\x3f\x6c\x11\x10\xcf\x4b\x41\xec\x25\x21\x9e\xa6\x21\xfc\x0d\xfc\xba\xf5\x78\x87\x87\x08\xed\x77\x20\x22\xc2\xd7\x06\x13\xf1\x04\x17\x01\xd0\xbb\x9a\xae\xb5\x0e\xbd\x53\xe0\x31\x22\x62\x53\xe1\x7b\x65\xb9\xc3\x7a\x8c\x54\x70\x27\x68\x97\xac\xf0\x2a\x3f\x41\x55\x78\x80\x1d\xaa\xc2\x1d\x8c\x40\xe8\x1e\x4c\xe9\xee\x92\xba\xcf\x42\xeb\x3e\x20\x76\x5d\x6a\x7f\x58\xa0\xd6\x3c\x47\x60\x1d\x4d\xa2\xd1\xa8\x46\x67\xfe\x58\xdf\xb4\x1f\xed\x02\x46\x93\x8f\x66\x2d\xdc\xae\x9b\xde\x52\x43\x18\xb4\x49\x71\x73\xf6\x6e\x2d\xe3\xea\xc4\xd5\x79\x2b\xea\xde\x46\x43\x7a\xf4\xb4\xd2\xf4\xa0\x01\x53\xb3\x0c\x1f\x55\xf2\x6f\x9e\x4e\xab\x07\x6f\x5c\xd1\x5c\xc6\x6e\x1f\xc1\x36\x32\xdc\x42\xfe\x4e\x68\x0b\x1f\xd5\x1a\x4f\xd1\x1e\x9b\x95\xcc\x80\xa2\x1a\x38\xfe\x1d\x2a\x14\xe0\xa3\x93\xeb\xca\xe0\x7e\x2e\xf9\x69\xd3\x5b\x3c\xb6\x33\xd8\x15\xb7\xed\xbf\x41\x9e\x74\xc1\x73\xd9\xbf\x6e\xd3\xb0\x41\xea\x87\x1c\x40\x99\xaf\xcb\x77\xcb\x54\x87\x7f\x2b\x0e\xf2\xe7\x5a\x15\x07\xb8\xf4\xdf\x00\x00\x00\xff\xff\x38\xda\x71\x7c\x17\x1b\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 6935, mode: os.FileMode(420), modTime: time.Unix(1504662784, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd0\xbd\x4e\xc3\x30\x10\xc0\xf1\xdd\x4f\x71\xa4\x74\xb4\x93\x17\x60\x6a\x51\xc5\xc2\xc0\xc2\x88\x92\xe6\x4c\x4f\x4d\x6c\xcb\x1f\x80\x38\xdd\xbb\x23\x9c\x02\x42\x8a\x60\xb3\x4f\x3f\xff\x25\xdf\xe6\xaa\x1d\xc8\xb5\x43\x9f\x4e\x6a\x73\x0d\xfa\x1e\x98\xcd\xa3\x8f\x67\x8c\x77\xa3\x48\x9d\xf9\xaf\xd9\x9e\xa2\x48\x6b\x8b\x73\x38\xe9\xd7\x8a\x74\xca\xa3\x2f\xb9\x3a\xfc\xc7\x61\x8c\x8a\x99\x2c\x38\x04\xb3\x0b\x25\x41\x07\x5a\x44\x31\x87\x48\x2e\x5b\x68\x3e\x2b\x01\x61\x0e\x04\xdb\xb1\x59\x50\x05\x1a\xd0\x8d\xf5\x74\x79\xfe\xd0\xcf\x87\x01\x3a\xb3\x56\x98\xe0\xf4\xf4\x32\xe3\x7c\xb3\x35\x9d\x3d\x34\x17\xbc\xde\xd9\x53\x3a\xff\x19\xb2\x89\xde\xf1\xbb\xb4\xf0\x5f\x29\xc5\x6c\x6e\xdf\xf0\x58\x72\x3f\x4c\x28\x02\xcb\x87\x21\xe5\x3e\x66\xd0\xfa\xe8\x9d\xa5\xe7\x9f\xb5\xee\xea\x5d\x44\x7d\x04\x00\x00\xff\xff\x01\xb3\x79\x12\x7b\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 379, mode: os.FileMode(420), modTime: time.Unix(1504662798, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x11\xd2\x5d\x3a\x97\x17\xc8\xe6\x42\x84\xd8\x5c\x24\x8a\xfa\xb3\x8a\x42\x32\x09\x16\xce\x18\xc6\xe3\xd0\x2a\xf2\xbb\x57\x49\x10\x15\x55\x7f\x76\x3e\x3e\xdf\xf9\xec\x40\xa6\x43\xf6\x08\x29\x74\x05\x19\x6b\x0b\xd5\xa0\x20\x75\x90\xc2\x8e\x03\x2a\x7c\xc5\x32\x48\xb1\xb7\x03\xd2\xf7\x49\x76\xcb\x31\xaa\x82\x9b\xd0\x22\x89\x87\x14\x2e\x8e\x8f\xc8\xe0\xa5\x60\x01\xad\x4b\x47\xb5\x69\x86\xc5\xd3\x58\x2c\xc6\x1c\xa3\xb2\xae\x99\x4c\xc3\xfd\xd2\x70\x8c\x7f\x4b\x47\x95\x63\x8d\x1d\x92\x68\xeb\x1a\x85\xcc\x8e\x3f\x53\x75\x20\x42\xab\xa7\x77\xb4\x97\x0a\x99\x95\x0b\x72\x0a\xf2\x2b\xea\x82\x28\x7f\x70\xc1\x56\xb9\x70\x41\xbe\x46\xce\x6b\x63\x71\xf8\xf8\x4b\xf6\xa0\x2e\x07\xa4\x5c\xdc\x47\x79\xf3\x6e\xfe\xe7\xd9\xf3\x7a\x97\x6f\xb6\x79\xf6\xb8\x5e\xec\x54\xdf\x9b\x1a\x08\x21\x59\x9c\x82\x87\x39\xe8\x18\x55\xdf\x9f\xd8\x90\xd4\x30\x63\x3c\x07\xf4\x92\x97\x43\x99\xc2\x9f\x6a\x36\x81\x23\xa4\x01\xa9\x1a\x4f\x57\xc5\xb6\x68\x57\x7b\x98\x27\xdf\x59\x5a\x6c\x1d\xbf\x0d\x9e\x64\x5e\xc3\xea\xdf\xec\x3a\xf9\xda\xb6\x34\xfe\xf8\xa3\xae\x32\xfe\x78\x27\x9b\x16\x77\x36\x75\x0e\x18\x50\xbd\x07\x00\x00\xff\xff\x23\x9d\xf1\xcf\x18\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 536, mode: os.FileMode(420), modTime: time.Unix(1504662798, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd0\xcf\x4a\xc4\x30\x10\xc7\xf1\x7b\x9e\x62\xec\xb2\xc7\xa4\xf5\x2a\xf4\xe2\xae\x88\x17\x11\x3d\x78\x6e\x36\x93\x35\x6c\x3b\x29\x49\x8a\xc2\x30\xef\x2e\xb4\x95\x22\xf8\xe7\x96\xfc\xf8\xf2\x81\x64\x77\x55\xdb\x40\xb5\xed\xf2\x9b\xda\x3d\xdd\xbe\x80\x7e\x04\x66\xf3\x1a\xd3\x05\xd3\x83\x13\x59\xd7\xf8\xb5\x1e\x43\x12\xa9\xfd\x44\x84\xbd\x7e\x9f\x33\x9d\x8b\x8b\x53\x59\x4b\xfc\xa7\xc4\x94\x14\x73\xf0\x40\x08\xe6\x30\x4e\x19\x1a\xd0\x22\x8a\x79\x4c\x81\x8a\x87\x6a\x71\x7a\xa0\xe8\x30\xb7\xd7\x37\xe3\x48\xed\xde\x55\x4b\x3d\x97\x1a\x90\xdc\x7c\x5a\x9d\xe7\x6e\xb8\xb7\xd0\x98\xdf\xa8\x01\x87\x76\x6f\x1a\x7f\xb6\xd5\x1a\xff\xec\x1c\x43\xbe\xfc\x09\xf9\xd0\xe3\x26\x2d\xf9\x37\x4a\x31\x9b\xbb\x0f\x3c\x4d\xa5\xb3\x3d\x8a\xc0\xf2\x72\xc8\xa5\x4b\x05\xb4\x3e\x45\xf2\xe1\xbc\xfd\xf1\x61\xbe\x8b\xa8\xcf\x00\x00\x00\xff\xff\xec\xd9\xe4\xdc\x8a\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 394, mode: os.FileMode(420), modTime: time.Unix(1504662798, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd1\x4d\x4e\xc3\x30\x10\x05\xe0\x7d\x4e\x31\xa4\xea\xd2\x49\x38\x02\x4d\x51\x61\x0b\x48\xac\x9d\x66\x02\x26\xf5\x8f\xc6\x63\x81\x64\xcd\xdd\x51\x93\xa2\x04\x09\xd4\x9d\x6d\xbd\xf7\xc9\xf6\x6c\x6e\xea\xce\xb8\xba\xd3\xf1\xbd\xd8\x3c\xef\xee\x5e\xda\x07\x50\xea\xc3\x77\xca\x69\x8b\x90\x73\xf5\xea\x69\x44\x7a\xec\x45\x56\x01\xc7\x3a\x8e\x11\x6e\x57\x47\x48\xe4\xe9\xa7\xb0\x37\x24\x52\x0f\xc9\x39\x3c\xa9\xcf\x49\x50\x91\x7b\x24\x5a\x35\x7c\xe2\x90\xf8\x4a\xc5\x27\x2e\x72\x36\x03\x38\x84\xaa\x0d\x29\x42\x03\x4a\xa4\xc8\x39\x90\x71\x3c\x40\xb9\x80\xc7\x90\xa2\x0a\x48\xea\x7c\x3b\xd8\xf6\xe5\xdc\x98\xd2\x0a\xd0\xf5\xd3\xea\x62\x3d\x69\x7b\xe8\xa0\xa9\xfe\xe7\x2c\x5a\xd8\x56\xcd\x70\xd8\x95\x97\xf8\xdf\xd2\xde\xc4\xf1\x0a\xc5\x36\x2c\xd4\x9c\xff\x65\x15\x39\x57\xf7\x5f\x78\x4c\xac\xbb\x13\x8a\xc0\xfc\x01\x10\x59\x13\x9f\x5f\xe6\xdd\x60\xde\x96\x71\xb4\xd3\x5e\xa4\xf8\x0e\x00\x00\xff\xff\x74\x5f\x6a\xff\xc0\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 448, mode: os.FileMode(420), modTime: time.Unix(1504662798, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
