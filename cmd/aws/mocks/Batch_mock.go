package mocks

import batch "github.com/aws/aws-sdk-go/service/batch"
import mock "github.com/stretchr/testify/mock"

// Batch is an autogenerated mock type for the Batch type
type Batch struct {
	mock.Mock
}

// CreateComputeEnvironment provides a mock function with given fields: _a0
func (_m *Batch) CreateComputeEnvironment(_a0 *batch.CreateComputeEnvironmentInput) (*batch.CreateComputeEnvironmentOutput, error) {
	ret := _m.Called(_a0)

	var r0 *batch.CreateComputeEnvironmentOutput
	if rf, ok := ret.Get(0).(func(*batch.CreateComputeEnvironmentInput) *batch.CreateComputeEnvironmentOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*batch.CreateComputeEnvironmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*batch.CreateComputeEnvironmentInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJobQueue provides a mock function with given fields: _a0
func (_m *Batch) CreateJobQueue(_a0 *batch.CreateJobQueueInput) (*batch.CreateJobQueueOutput, error) {
	ret := _m.Called(_a0)

	var r0 *batch.CreateJobQueueOutput
	if rf, ok := ret.Get(0).(func(*batch.CreateJobQueueInput) *batch.CreateJobQueueOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*batch.CreateJobQueueOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*batch.CreateJobQueueInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeJobs provides a mock function with given fields: _a0
func (_m *Batch) DescribeJobs(_a0 *batch.DescribeJobsInput) (*batch.DescribeJobsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *batch.DescribeJobsOutput
	if rf, ok := ret.Get(0).(func(*batch.DescribeJobsInput) *batch.DescribeJobsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*batch.DescribeJobsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*batch.DescribeJobsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobs provides a mock function with given fields: _a0
func (_m *Batch) ListJobs(_a0 *batch.ListJobsInput) (*batch.ListJobsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *batch.ListJobsOutput
	if rf, ok := ret.Get(0).(func(*batch.ListJobsInput) *batch.ListJobsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*batch.ListJobsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*batch.ListJobsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterJobDefinition provides a mock function with given fields: _a0
func (_m *Batch) RegisterJobDefinition(_a0 *batch.RegisterJobDefinitionInput) (*batch.RegisterJobDefinitionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *batch.RegisterJobDefinitionOutput
	if rf, ok := ret.Get(0).(func(*batch.RegisterJobDefinitionInput) *batch.RegisterJobDefinitionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*batch.RegisterJobDefinitionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*batch.RegisterJobDefinitionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitJob provides a mock function with given fields: _a0
func (_m *Batch) SubmitJob(_a0 *batch.SubmitJobInput) (*batch.SubmitJobOutput, error) {
	ret := _m.Called(_a0)

	var r0 *batch.SubmitJobOutput
	if rf, ok := ret.Get(0).(func(*batch.SubmitJobInput) *batch.SubmitJobOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*batch.SubmitJobOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*batch.SubmitJobInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateJob provides a mock function with given fields: _a0
func (_m *Batch) TerminateJob(_a0 *batch.TerminateJobInput) (*batch.TerminateJobOutput, error) {
	ret := _m.Called(_a0)

	var r0 *batch.TerminateJobOutput
	if rf, ok := ret.Get(0).(func(*batch.TerminateJobInput) *batch.TerminateJobOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*batch.TerminateJobOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*batch.TerminateJobInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
