// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// examples/file-contents.json
// examples/google-storage.json
// examples/hello-world.json
// examples/log-streaming.json
// examples/md5sum.json
// examples/port-request.json
// examples/resource-request.json
// DO NOT EDIT!

package examples

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5f\x73\xdb\xb8\x11\x7f\xf7\xa7\xd8\xda\xe9\x34\x99\x11\x69\xb9\x99\xeb\xf4\x34\xe3\x07\x5b\x76\x1c\xcf\x39\x89\x6a\x29\x4d\xdb\x17\x0f\x48\x2e\x49\x9c\x41\x80\xc1\x1f\x29\x8a\x9b\xef\xde\x59\x00\x24\x25\xc7\x8e\xdc\x9e\x3b\xd3\xe6\x21\x63\x11\xbb\xbf\x5d\xec\x2e\x7e\xc0\xee\x1c\xf5\x12\xf5\x64\x0f\xe0\x00\x66\xcc\xd6\x60\x15\xd8\x1a\xa1\x60\x96\x65\xcc\x20\x94\x5c\x60\xba\x07\x70\x76\x4a\xcb\x13\x48\x0f\x4b\x27\x25\x8a\x64\xa5\xf4\x6d\x52\x70\x1d\x7f\xa7\x45\xb6\xe7\x51\xde\x2a\x63\x25\x6b\x10\x54\xe9\x91\xde\xf8\x65\x30\xde\x50\x0a\xef\x18\x97\x62\x3d\x02\x5b\x73\x03\xdc\x80\x33\x58\x40\xb6\x06\xe6\xac\x4a\x4c\xce\x04\x6a\xe3\x71\xac\x82\x5c\xc9\x92\x57\x4e\x23\x90\x31\xd4\x86\x1c\x21\xfc\xf7\xac\xc1\x09\x08\x95\x33\x51\x2b\x63\x83\xe1\x99\xd2\x36\xc0\x95\x4a\xc3\xdb\xc5\x62\x06\xb9\x6a\x1a\x27\x79\xce\x2c\x57\x12\x98\x2c\xbc\x47\x2b\xcc\xa0\x60\xa6\xce\x14\xd3\x85\x87\x5c\x2c\x66\xa4\x3d\x81\x3f\x8f\xc7\xe3\x87\xd0\xae\x67\xd3\x6d\x30\x52\xbb\x9e\x4d\x83\xd6\xcf\xe3\x9f\xa3\xd6\x35\x7e\x76\x5c\x23\x64\xcc\xf0\x9c\xf6\x54\xa3\xb4\x9d\x7d\x02\x22\xfb\x21\x14\x70\x32\xbb\xa4\xed\x73\x59\x01\x83\x96\x19\xb3\x52\xc1\x9d\x03\xb8\x2c\xbd\xe9\x11\x34\xec\x16\xc1\x50\x04\xac\x82\x56\xab\x16\xb5\x58\x83\x46\x63\x35\xcf\x2d\xb0\x3c\x47\x63\xba\x9c\x85\x70\xf9\x8c\x79\x94\x97\x98\x56\x29\xe4\x75\xa3\x0a\xf8\xd3\x78\x0c\x31\x51\x41\x2c\x5d\x37\xe2\x55\x4c\x7b\x30\x3d\x01\x96\xe5\x47\x7f\x7c\x1d\x76\x72\x29\x73\xe1\x0a\x04\x06\xfb\x53\x96\xd7\x98\x4c\x95\xb4\x5a\x89\x09\x48\x95\x18\xab\x34\xee\x87\x18\xd7\xc8\x0a\xd4\xc0\x25\x5c\xa0\x3d\xbc\xe2\xc6\x92\x7f\xad\x92\x06\xfb\x44\xb6\x1a\x97\x28\x2d\xe4\x2c\xaf\x69\xbf\xd9\x1a\xb8\xb4\xa8\x1b\x2c\x38\xd3\x6b\x1f\x11\x9e\xa3\xcf\xef\x19\x37\x2c\x13\x48\xd8\xde\xf0\x04\xac\x76\x18\x9c\xba\xe2\x0d\xb7\x21\x86\xfc\x6b\xa8\x30\x66\x6e\x01\xbf\x60\xee\xac\xd2\x20\x54\x65\xe0\xa5\xb1\x85\x72\xf6\x10\xb5\x7e\x35\x22\xbf\xb2\xb5\x0d\xd0\xef\xd8\x97\xf3\x28\x7a\xa5\xaa\x39\xff\x8a\x13\x38\x1a\x8f\xc7\x63\x38\x80\xa3\x31\xfc\x72\x4a\x56\xae\x54\x55\x85\x13\xe1\x2d\xaa\xaa\x22\x8f\x05\x2e\x51\x98\x09\x14\x98\xb9\x8a\x50\x4b\x35\x02\xd4\x5a\x69\x2f\x78\x45\xcb\x13\xff\x39\x2a\x7e\xd2\xdc\x62\x70\xc8\xa7\x87\x1b\x68\x99\xad\x53\xca\x2d\x36\xad\x5d\x8f\xc2\x22\xa3\xea\xd6\xdc\x5a\x94\x24\x68\x6c\x81\x5a\xa7\x1e\xe4\x83\xb3\xad\xb3\x6f\xb8\xc0\x09\xec\xef\xef\xed\xcd\xf3\x1a\x0b\x27\xba\xe3\xfa\x56\xad\x40\x95\x51\x4f\x3b\x09\x0c\x4c\x27\x01\xdc\xa2\xee\x0b\x95\xb2\x09\x92\x49\x65\x30\x57\xb2\xf0\xb1\xe8\xc0\xae\x99\xed\xa2\x30\xee\x42\x01\x41\xae\xb7\xd2\x30\xb9\xf6\x91\xf6\x7b\xe9\x8c\x50\x68\x95\xc4\x6d\x53\x1d\xec\xb4\x76\xf2\x96\x70\x7b\x10\xa1\x64\x45\xea\x2b\xc6\x2d\x64\x68\x57\x88\x12\x5c\x5b\x30\x8b\x06\x32\x2c\x95\x46\x68\x98\xbe\x0d\xe7\x41\xaa\x02\xa1\x40\x56\x3c\xe6\xff\x7b\x55\xe0\x8c\xcb\x6a\xc1\x1b\x54\xce\x4e\xa8\xc2\xb7\xf6\xd0\x70\xe9\x2c\x3e\x6c\x9e\x4e\x62\xb4\xe1\x63\xce\xb4\x1d\xdd\xf7\xc1\x33\x85\xa7\x9d\x9d\x7e\x5c\x4a\x6e\x7b\x3f\x5e\x8f\xb7\x1c\xf9\x29\x3a\x62\xa2\x6c\x57\x58\x43\x19\xb0\xce\xcc\xe5\x19\xac\xb8\x10\x90\xa1\x67\xc3\x86\x11\x73\x08\xb1\x86\x0a\x25\x85\x18\x8b\x50\x17\x97\x67\xbe\x1e\x02\x0e\x31\x13\x2b\x0a\x4d\x3c\xf0\x10\xe3\x7a\xb1\xc0\xf2\x27\x41\x6c\x83\x38\x27\x1d\x73\x6d\xf2\x80\x8f\xce\x40\x60\x29\xac\x38\xdd\x0b\xdb\xc4\x95\x46\xa5\x80\xfc\x10\x85\xd0\x2a\xd5\xae\x81\x5c\x23\x39\x0f\x85\xd3\x14\xd8\x56\x2b\x62\x2d\xfa\xb3\xdb\x6e\x77\x00\xb8\x0c\x27\xa5\xe0\x1a\x73\xab\xf4\x3a\x98\xf9\xa4\xf4\xed\x19\xd7\x0f\x5c\x3e\x43\x30\x37\xd2\x55\x33\x2a\x28\x82\x2b\x04\xfa\xdd\x50\xf2\x91\xc8\x97\x49\x2f\x68\x43\xb2\x46\xc0\x6d\xf0\xc1\xd4\xce\x42\xa1\x56\xb2\xdb\x57\x72\x04\x0d\x32\x69\x48\x5c\x23\x5d\x54\x52\x75\x6a\x29\x8c\xbb\xc5\xf0\x01\x78\xe3\x99\xcc\xa2\x58\x03\x2b\x2d\x06\x9e\x2f\xb9\x36\xd6\x9f\x9b\x80\xda\x97\x48\x72\xd4\x05\xe8\xc3\x12\xb5\xe6\x44\xb3\x4b\xc6\x05\xf1\x1e\x91\xa7\x72\x3a\x92\x21\xc0\x75\xf7\x33\x14\x0e\x29\x4d\x67\x1f\xcd\xa0\x90\x0e\xdf\x5b\x67\x26\x10\xf3\xe9\x6b\xe3\xe4\xdd\x20\xe7\xa9\xf0\xe2\x74\x10\xbf\x66\xcd\x45\x36\x81\x71\xba\xa1\x71\xc6\xcd\x2d\x98\x96\xe5\xf8\x03\x45\x12\xfa\x4e\xf3\x8d\x0f\xf3\x2a\xf1\x44\x09\xd6\x49\x2e\xab\x41\x65\x8b\xab\xcc\x5a\xe6\x43\x51\x6d\xbf\x0f\x7a\x8d\xef\x4f\x1a\xfd\xfb\xe8\xf9\x22\x70\xd6\x4f\xdb\xc7\x2c\x4a\x0e\xdb\x9b\x4d\xfb\xfc\x50\x0d\x04\xaa\x39\xf4\xc6\xe9\x58\x3d\xcd\x54\x9f\xb3\x87\x19\xf2\x7f\xfa\xbe\xd8\x3b\x80\x45\x8d\xb0\xf9\x18\x63\xb9\xe5\x4b\xdc\xb8\x27\x32\x96\xdf\xa2\x2c\xf6\x0e\xe0\xa4\xaf\xc0\xf8\xad\x23\x8a\x11\x3d\x2c\x0a\xa5\x47\x50\xe5\x38\x02\xd5\xa2\x34\x96\xe5\xb7\x7b\xa7\x41\x2e\x8a\x91\xb9\xf9\x7d\xdc\xf8\x26\xe9\x44\x7d\x11\xbf\x5d\x4c\x3d\x5e\x08\xd9\x02\x9b\x56\xf8\x7c\xfe\x33\x06\xde\x49\xbe\x44\x6d\x10\x8e\x61\xc9\x24\x17\x82\xc5\x85\x0a\x2d\xca\x25\x1c\xc3\x82\x1e\x04\xe1\x5b\xb8\xfa\xbd\xdb\xc7\x70\x77\x97\x9e\xf7\xbf\xbf\x7d\x8b\x22\x4c\x57\xae\x41\x69\x0d\x1c\x07\xca\xf7\x7c\x0f\x49\x12\xdf\x4b\x77\x77\x53\xff\x47\xaf\x20\x54\x15\xc0\x22\xef\x7c\xfb\x76\x18\x22\x90\xf8\x57\x4c\x22\x54\xd5\x59\xa7\x84\xde\x97\x8d\x14\x15\x32\x13\x05\x95\x4f\xcd\xe3\x92\xca\xd9\x28\x69\x6a\xe5\x44\x71\x63\x35\x93\xa6\x44\x7d\x53\x7a\x0a\x3d\x86\xbf\x9f\xcf\xa3\xc4\xaa\x46\x79\x63\xd5\x20\xd2\x83\x7f\x78\x7f\x73\xfe\xb7\xcb\xc5\xcd\x87\xeb\x9b\xf3\xbf\x5e\x4e\x17\x51\xe1\xee\x8e\x97\x20\x11\x52\x22\x08\x18\x43\xd2\xef\xf4\xee\xae\xd5\x5c\xda\x12\xf6\x35\x7e\x76\x68\xec\x4d\x4e\x22\xc7\xf0\xfb\x62\x3f\x88\x6f\x88\x26\x80\xb2\xd8\xf8\x1d\x41\x3d\x8d\x10\x17\xfc\x10\xb7\xc1\x46\xe9\x35\x21\xa7\xe3\x12\x2e\x4e\xf7\xa3\xe2\x6e\xfc\xc0\x36\x3b\x0d\x14\xc4\x5c\x9b\xf0\x41\xef\x01\xfc\xf8\xe1\xb3\xc3\xf0\xac\x9c\x9d\xce\x1f\x2b\xc5\x83\xdf\x65\x5c\x1e\x66\xcc\xd4\xdd\x87\xd9\xe9\x1c\x92\xf7\x94\x46\x7f\xf1\x0f\xfe\x86\x15\xb5\x3b\xc1\x41\x10\x77\xd7\xcc\x53\xd2\x16\xc0\x84\xaf\x6b\x73\x7c\x34\x69\x5b\x79\xfc\x6c\xb9\xeb\xc0\x1b\x6c\x8e\x29\xae\x55\xf6\x6c\x59\xeb\xa0\xa9\xba\x07\xec\x5d\x29\xbb\x77\xbe\x77\x9d\xe6\x3d\x80\x0b\xcd\x8b\x73\x59\x71\x89\x4f\x4f\xf1\x8b\x47\x12\xfc\xe2\x69\xe9\x7d\xf1\xa4\xe4\x92\x58\x9f\xb6\x7f\x27\xe1\x2f\x20\x69\x11\x9a\x96\x3f\xdf\x19\x0d\xbe\xd4\x37\xcb\x2e\xd1\x17\xcf\x97\xe7\x08\x5d\x52\xbf\xd6\x63\x3f\x73\x9e\x01\xa8\xf1\xb8\xfa\x78\xfd\xee\xf1\x24\x1f\xde\xcf\xf2\xfc\xf4\x64\x31\x7d\x0b\x49\xf2\xab\xca\x12\x7f\x45\x3e\x90\xf2\x5e\x48\x86\xee\xe7\xe8\xbb\x85\x70\x03\xec\x4e\x77\xaf\x10\xc9\x7a\x67\x1d\x3d\xa9\x18\x7a\x54\xa2\xed\xa4\x45\x9d\xf8\x7e\xf8\xf9\x2a\xa3\x37\xd0\x60\xe3\xb9\xf5\x19\x99\x7b\x00\xb7\x4d\x3b\x80\xff\x17\x48\x60\x7a\x3e\xe9\x7b\x9c\x30\xe2\x62\x79\xae\x9c\xb4\xd4\x9a\x14\x28\x2d\x67\xc2\xf4\x93\xae\xd8\x50\xb4\xca\x18\xee\x9f\xbf\xfe\x31\xf6\x70\x67\x56\x70\x93\xab\x25\xea\xae\x35\x3b\x09\xb8\xfd\x1b\x2c\xa0\x5d\x28\x55\x09\x84\xa9\x50\xae\xa0\xf6\xe7\x57\xcc\x2d\x5c\x9e\xfd\x56\x63\xb3\x80\xf4\x98\xa1\xaf\x4a\xfe\xe6\xfd\xfc\x43\xc9\x61\x23\x9f\x90\x57\xb5\xdd\x68\x44\x66\x1a\x4b\xd4\xdd\x70\x8e\xda\x2b\x1b\x33\xe1\x5a\xf8\xec\x78\x7e\x2b\xd6\xc3\x33\xfb\xd3\xa6\x18\x3d\x63\x99\xd0\xc8\x8a\x35\x28\x29\xb8\x44\xa8\xd9\x12\x81\xd3\xdb\x52\x46\x18\xd7\xfa\x17\x7c\x07\x11\xcc\xfd\x85\x70\xe7\x61\x79\x02\x47\xe9\x38\x6e\x71\xb3\xc9\xcf\x59\x5e\x23\xe5\x9d\x7a\x55\xea\xa8\x9c\xb0\x06\x5e\x36\x7e\xfc\x84\x20\xb8\xb1\x23\xb0\x91\x26\xcc\x08\xd0\xe6\xaf\x22\x4c\x9c\x02\x68\x2c\x35\x9a\xba\x6f\x62\xfc\x28\x6a\xb1\xb8\x7a\x74\xce\xb0\x17\xb6\x17\x46\x33\x4f\x68\xca\x77\xb6\xe4\xff\x41\x43\xfe\xa3\x76\xfc\x99\x9a\xf1\x1f\xb4\xe2\xbd\x11\x30\x56\x69\x56\x21\x98\xb5\xb1\xd8\x04\xd7\xfc\xea\xa2\x1f\xfa\x3a\x5f\x6e\x06\xed\xbd\x02\xcc\xd6\x61\x63\x5d\x23\x31\x82\xcc\x59\x58\x2b\x07\x0d\x15\x1f\x48\xc4\xc2\xbb\xe5\xf1\x78\x49\x4b\x7f\xd0\x91\x00\xc2\xe8\x28\x4e\x01\x1a\x26\xbd\x11\x3f\x95\x0a\x0e\x0d\x4d\x5a\xce\xc2\xdb\x23\xba\x18\x72\xec\x3f\x0f\xd5\xfd\xa9\xe6\x16\xa9\x54\x28\x85\x3e\x3f\x43\x28\x7c\x6f\x66\x60\x55\xf3\xbc\xee\x52\xcb\x0d\x30\x21\xd4\x8a\x1c\x54\x71\x34\xdb\x95\xee\x49\x58\x38\xe3\xba\x3f\x3e\x00\x09\xa4\x87\xdd\x20\x60\xfe\xba\x73\x8e\xbe\x9f\xcb\xa2\x55\x5c\xda\xe1\x1b\xc0\x2f\xb8\xde\xfc\x39\xc7\x5c\xa3\x9d\x74\xfa\x17\xf3\xcd\xc5\xa7\x13\x5d\xf8\xff\x43\x6b\xb9\x92\x4c\xa4\xdb\x44\xb1\xa9\xb4\x8b\x2f\xb6\xf0\x4a\xad\x1a\x9f\x47\x94\x4b\xae\x95\xa4\xf6\x2b\xdd\xd8\xdf\x26\x4d\x6e\x29\x9e\x3c\x88\xbe\xed\xfd\x0f\xb1\x01\xde\x68\xd5\x9c\xcb\xe5\xe6\xd8\xf8\xb1\xd9\xc4\xfd\xb9\x04\x35\xac\xfe\x02\xa5\x0e\xb0\x1b\x4d\xc6\xe1\xfa\x77\x63\x8a\x87\xe6\x06\x4f\x1a\x4f\x3c\x6d\x34\xf1\x38\xfc\x8e\x91\x04\xa9\xbe\x63\x5f\x78\xe3\x9a\x61\x33\x9b\x33\x71\x3f\x3b\x1f\x06\xe3\xb4\xc1\xcc\x95\x44\xe4\xf7\xa6\xb2\x64\xf2\xd4\xaf\xfc\xbf\x8d\xca\xff\x15\x00\x00\xff\xff\xff\x3e\xa4\x26\xd6\x1a\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 6870, mode: os.FileMode(420), modTime: time.Unix(1504513367, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xbd\x4e\xc3\x30\x14\x85\x77\x3f\xc5\x25\xa5\xa3\x9d\xbc\x00\x53\x8b\x2a\x96\x0e\x2c\x8c\x28\xa9\xaf\xa9\xd5\xe4\x3a\xf2\x0f\x42\x5c\xdd\x77\x47\x71\x2b\x24\xa4\xd0\xed\xe8\xe8\x3b\xdf\x70\x36\x0f\xed\xe0\xa9\x1d\xfa\x74\x56\x9b\x47\xd0\x47\x60\x36\xc7\x60\xf1\xc5\x8a\xd4\x26\x2c\xcd\x5b\x88\x97\xbd\x8f\x22\xad\x2b\x44\x38\xea\x94\x6d\x28\xb9\x02\xf8\x1f\x80\x31\x2a\x66\xef\x80\x10\xcc\x6e\x2e\x09\x3a\xd0\x22\x8a\x79\x8e\x9e\xb2\x83\x66\x99\xcf\x08\xd3\xec\x61\x6b\x9b\x2b\x54\x01\x0d\x48\xb6\xa6\xdb\xfc\xb5\x9f\x0e\x03\x74\x66\xcd\x30\xc2\xf9\xfd\x73\xc2\xe9\x69\x6b\x3a\x77\x68\x6e\xf0\xba\x67\xef\xd3\xe5\xae\xc8\x25\xff\x8d\xbf\xa6\x2b\xfe\x47\xa5\x98\xcd\xf3\x17\x9e\x4a\xee\x87\x11\x45\x80\x82\x45\x48\xb9\x8f\x19\xb4\x3e\x05\x72\xfe\x63\x79\x64\x57\x93\x88\xfa\x09\x00\x00\xff\xff\x30\x08\xbc\xe9\x63\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 355, mode: os.FileMode(420), modTime: time.Unix(1504513367, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xcf\x6e\xfa\x30\x0c\xc0\xf1\x7b\x9e\xc2\x42\xfa\x1d\xdb\x1f\x2f\xd0\xcb\xa0\x42\x5c\x86\xc4\xd0\xfe\x9c\xaa\xd2\x38\x25\x22\x75\xc0\x71\xba\x4d\x55\xde\x7d\x2a\x20\x26\xa6\xb1\x9b\x23\x7f\xfd\x51\x22\xd9\x1e\x39\x20\x14\xd0\xd7\x64\x9d\xab\x55\x8b\x82\xd4\x43\x01\x1b\x8e\xa8\xf0\x03\x9b\x28\xf5\xd6\x8d\xc9\x30\xe4\xe5\xf5\x9d\x92\xaa\xb9\x8d\x1d\x92\x04\x28\x80\xbc\x46\x08\x52\xb3\x40\x96\x35\x9e\x8c\x6d\xc7\x7e\x76\x9a\x52\x52\xce\xb7\x67\xe1\xc5\xf3\x7e\x6e\x39\xa5\xff\x8d\x27\xed\x39\xc3\x1e\x49\x32\xe7\x5b\x85\xcc\x9e\x7f\x56\x26\x12\xa1\xcb\x82\x68\x64\x56\x3e\xca\x21\xca\xfd\xc6\x47\x51\x61\xe7\xa3\xd3\x95\x70\x4d\xc1\x20\x57\xc6\x3a\x1c\xbf\xf8\x56\x3e\xa9\xf7\x1d\x52\x25\xfe\x7b\x79\x05\x57\x8f\x55\xf9\xba\xdc\x54\xab\x75\x55\x3e\x2f\x67\x1b\x35\x0c\xd6\x00\x21\xe4\xb3\x43\x0c\x30\x85\x2c\x25\x35\x0c\x07\xb6\x24\x06\x26\x8c\xc7\x88\x41\xaa\x66\x5c\x16\xf0\x4f\x4f\xce\xe1\x29\xca\x00\x49\x9f\xa6\x0b\xb1\xae\xbb\xc5\x16\xa6\xf9\x3d\xa5\xc3\xce\xf3\xe7\xe8\xe4\x53\x03\x8b\x87\xc9\xe5\xe4\x77\x6d\x6e\xc3\xfe\x4f\x4e\xdb\xb0\xbf\xc1\xce\x17\x37\x9a\x3a\x46\x8c\xa8\xbe\x02\x00\x00\xff\xff\xe4\xa8\xee\x31\x02\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 514, mode: os.FileMode(420), modTime: time.Unix(1504513367, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xc1\x4a\xc4\x30\x10\xc6\xf1\x7b\x9e\x62\xec\xb2\xc7\xa4\xf5\x2a\xf4\xe2\xae\x88\x97\x45\xf4\xe0\xb9\xd9\x4c\xd6\xb0\xed\xa4\x24\x29\x08\xc3\xbc\xbb\x6c\x5b\x10\xc1\x7a\x1b\x3e\xfe\xfc\x20\xd9\xdd\xd5\x36\x50\x6d\xbb\xfc\xa9\x76\xaf\x8f\xef\xa0\x4f\xc0\x6c\x4e\xd1\xe1\x8b\x13\x59\xb7\x78\xdb\x3e\x62\xba\x1e\x43\x12\xa9\xfd\x44\x84\xbd\xce\xc5\xc5\xa9\xac\x09\x6e\x25\x98\x92\x62\x0e\x1e\x08\xc1\x1c\xc6\x29\x43\x03\x5a\x44\x31\x8f\x29\x50\xf1\x50\x2d\x40\x0f\x14\x1d\xe6\xf6\xfe\x61\x1c\xa9\xdd\xbb\x6a\xa9\xe7\x52\x03\x92\x9b\xaf\xd5\x79\xeb\x86\x67\x0b\x8d\xd9\xa2\x06\x1c\xda\xbd\x69\xfc\xc5\x56\x6b\xfc\xb7\x73\x0c\xf9\xfa\x2f\xe4\x43\x8f\x3f\xd2\x92\xff\xa2\x14\xb3\x79\xfa\xc2\xf3\x54\x3a\xdb\xa3\xc8\xfc\x0a\xc8\xa5\x4b\x05\xb4\x3e\x47\xf2\xe1\x72\xfb\x9a\xc3\x7c\x89\xa8\xef\x00\x00\x00\xff\xff\x5b\x97\x19\x4c\x72\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 370, mode: os.FileMode(420), modTime: time.Unix(1504513367, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcd\x6a\xeb\x40\x0c\x46\xf7\x7e\x0a\x5d\x87\x2c\xc7\xf6\x7d\x84\xc6\x29\x69\x37\x5d\xb4\x85\xae\xc7\x19\xb9\x9d\x3a\xf3\x83\x46\x03\x85\x41\xef\x5e\xec\x04\xe2\x42\x43\x77\x1f\xd2\xd1\x41\xd2\xe6\x5f\x3b\x58\xdf\x0e\x3a\x7d\x54\x9b\x97\xdd\xdd\x6b\xff\x00\x4a\x7d\x86\x41\x79\xed\x10\x4a\x69\x9e\x82\xc1\x47\x23\xb2\x6a\x7b\xd6\x69\x4a\xf0\x7f\x55\x42\xa2\x40\x33\xfe\x16\x68\xda\x5b\x12\x69\xc7\xec\x3d\x9e\x54\x62\x83\x44\x2b\x34\x64\x8e\x99\x6f\xb1\x21\x73\x55\x8a\x1d\xc1\x23\x34\x7d\xcc\x09\x3a\x50\x22\x55\x29\x91\xac\xe7\x11\xea\xab\xe9\x18\x73\x52\x11\x49\xcd\xfb\xc0\xd6\xd4\xe7\x89\x85\x56\x80\xde\x2c\xe9\xe2\x7a\xd6\xee\x30\x40\xd7\xdc\xd6\x39\x74\xb0\x6d\xba\xf1\xb0\xab\x2f\xf8\xef\xa6\xbd\x4d\xd3\x1f\x2a\x76\xf1\xaa\x3a\xf3\x3f\x5c\x55\x29\xcd\xfd\x17\x1e\x33\xeb\xe1\x84\x22\xe0\x83\x41\x48\xac\x89\xe7\xbb\x82\x1f\xed\xfb\xfc\xa1\x7e\x49\x22\xd5\x77\x00\x00\x00\xff\xff\x65\xd8\x5a\xa1\xa8\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 424, mode: os.FileMode(420), modTime: time.Unix(1504513367, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesFileContentsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\xbd\x4e\xc3\x30\x10\xde\xf3\x14\x9f\xb2\x74\xa9\x9a\x89\xa5\x33\x20\x2a\xb1\x31\x30\x40\x55\x99\xf8\xd2\x5a\xf2\x4f\x64\x9f\x05\x55\xd5\x77\x47\xbe\x34\xa4\x54\x55\x61\xc9\xe0\xfb\xfe\x73\xa8\x80\xda\x2b\x47\xf5\x12\xf5\xca\xf7\x99\xd1\x19\x4b\x68\x83\x67\xf2\x9c\xa0\xbc\x46\xc8\x3c\x1e\xea\x79\x21\x68\x4a\x6d\x34\x3d\x9b\xe0\x0b\xef\x9e\x5c\xf0\x89\xa3\x62\x4a\xc8\xc9\xf8\x2d\x78\x47\x98\x8d\x22\x33\x74\x86\xac\x46\x17\x22\x4c\xf1\x48\xe0\x80\x36\x92\x62\x82\x1a\x0c\x83\x17\xce\x2e\x24\x46\xda\x27\x26\x37\x58\x0d\xf8\x7a\x89\xb7\x0a\x00\x0e\xf2\x3d\xcb\xdc\x2a\x1e\x34\x05\x2e\xa7\x8b\x74\x43\x2b\x0e\x70\xfa\x2e\x65\xb7\x40\xc3\xae\x6f\x8c\xc7\xa7\xb1\x16\x1f\x74\x0a\xa2\xaf\x44\x58\x4c\xa2\xbc\xef\xc5\xef\x71\xf5\xfc\x30\xbd\xf6\x8a\x77\xe5\xf5\x24\x39\x1d\xc6\xea\xe5\xf8\x44\xd6\x06\xbc\x86\x68\xf5\xbb\xaf\x05\x71\xac\x80\xb5\xf4\x1b\xb6\xfd\xa3\x60\x62\x1d\x6e\x34\x7c\x91\x33\x42\x07\x59\x23\xa1\x55\x3d\xe7\x48\x32\xb3\x44\x63\x4a\xbc\x11\xcc\xad\x8e\x39\xda\x22\x57\xfe\xc7\xb2\x69\x84\xd8\x2a\xe1\xfd\xda\xf7\x1f\x53\x94\xb4\x17\x45\xe9\x8b\xda\xcc\x21\x5e\xa9\x6a\x9c\xda\xd2\x66\x2c\xac\x6c\x6f\x3c\x9d\x4d\xe9\x74\xa1\x94\x21\xea\xf9\x34\xf5\xfa\x07\x70\x5a\xe7\xba\x77\x75\xac\xbe\x03\x00\x00\xff\xff\xd2\x4c\x48\xc4\xe4\x02\x00\x00")

func examplesFileContentsJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesFileContentsJson,
		"examples/file-contents.json",
	)
}

func examplesFileContentsJson() (*asset, error) {
	bytes, err := examplesFileContentsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/file-contents.json", size: 740, mode: os.FileMode(420), modTime: time.Unix(1504522951, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesGoogleStorageJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x4f\x6b\xe3\x30\x10\xc5\xef\xfe\x14\x0f\x9d\x76\x21\x1b\x7b\x0f\x59\xd8\x5c\x5b\xe8\xa5\xd0\xd2\x34\xa7\x52\xca\x44\x92\x5d\x51\xfd\xc3\x1a\xd1\x90\x90\xef\x5e\xa4\xd4\x0e\xb4\xbd\x18\x8b\x79\xef\x37\xf3\xde\xb1\x01\x84\x27\xa7\xc5\x1a\xe2\x26\x84\xc1\x6a\x5c\xd9\x90\x15\x36\x1c\x46\x1a\x34\xf4\x9e\x5c\xb4\x5a\x2c\x8a\x52\xe9\x24\x47\x13\xd9\x04\x5f\x0c\x8f\x94\xde\x60\x7c\xcc\x9c\x40\x5e\x21\x64\xae\xff\x92\x3c\x76\x1a\x3f\xf2\xb6\x0f\xb7\x69\x79\xa6\xe9\xbd\x96\x99\xc3\x98\xc4\x1a\x4f\x0d\x00\x1c\xeb\x17\x10\xc6\xd1\xa0\x5f\xa6\xc3\xf2\x2e\x7b\xce\xd5\x54\xa7\xd2\xa9\x62\x11\x4e\xad\x52\x76\x62\x01\xd1\xb2\x8b\x6d\x6f\xac\x5e\x1e\x4c\x14\xcf\xb3\x32\xb1\x0a\x99\x0b\xa3\x2a\x3e\x9f\x75\x7a\x6a\x80\x2a\x14\xe7\x04\xdf\x8f\x98\xd6\x1f\x4c\x2c\xe8\xcb\xfe\x2f\x35\x5c\x87\x77\x6f\x03\x29\x10\x62\xde\x59\x23\x51\xe4\xe8\xc7\xe0\xa6\x0e\xa6\xf4\xbf\xb6\x1b\xdc\x13\x6b\xcf\xb8\xeb\x7b\x23\x35\x14\x31\xfd\xbe\xa0\xf3\x68\x0b\x72\x48\xeb\xb6\xcd\x29\x72\xf8\x13\xc9\x8c\x2d\xc5\x68\x8d\xa4\xb2\x31\xb5\xdd\xea\x7f\xd7\x75\x7f\xff\xd5\xac\xb3\x33\x12\xbf\xce\x41\xe7\x2a\x2e\x51\x9b\x53\xf3\x11\x00\x00\xff\xff\x55\xe2\xd5\x01\xee\x01\x00\x00")

func examplesGoogleStorageJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesGoogleStorageJson,
		"examples/google-storage.json",
	)
}

func examplesGoogleStorageJson() (*asset, error) {
	bytes, err := examplesGoogleStorageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/google-storage.json", size: 494, mode: os.FileMode(420), modTime: time.Unix(1504522951, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesHelloWorldJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x41\x6a\xc4\x30\x0c\x45\xf7\x3e\xc5\x47\xeb\xd0\xec\xb3\xee\xa2\x77\x28\xa1\xb8\xb6\x68\x4c\x6d\x2b\x58\x0a\x2d\x84\xdc\xbd\xd8\x9d\x19\x66\x23\x10\x4f\x4f\xff\x9f\x0e\xa0\xea\x0b\xd3\x02\x7a\xe3\x9c\x05\x3f\xd2\x72\xa4\xa9\x83\xc8\x1a\x5a\xda\x2d\x49\xed\xfc\x95\x8b\x54\xb5\xe6\x8d\x15\xb6\x31\x8a\xa8\xe1\xd3\x6b\x0a\xe0\xb0\x09\xcc\xeb\xf7\xcb\xbf\xca\xbf\x1c\x0e\x93\xa6\xb4\xe0\xdd\x01\xc0\x39\x26\x40\xa9\xf8\x2f\xfe\xb8\x87\xfa\xbc\xa7\xca\x43\x1a\x34\x94\xd8\x15\xea\x0f\x69\x02\x6d\x4f\xa5\xd6\xc7\x95\x5a\x94\xc3\xba\x3f\x5b\xd9\xe7\xdb\x3a\xe8\xe5\x80\xd5\x5d\xee\x2f\x00\x00\xff\xff\xbf\x61\x26\xf5\xdb\x00\x00\x00")

func examplesHelloWorldJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesHelloWorldJson,
		"examples/hello-world.json",
	)
}

func examplesHelloWorldJson() (*asset, error) {
	bytes, err := examplesHelloWorldJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/hello-world.json", size: 219, mode: os.FileMode(420), modTime: time.Unix(1504522951, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesLogStreamingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x3f\x6b\x23\x31\x14\xc4\xfb\xfd\x14\x83\x6a\x9f\x97\x6b\xed\xf6\xb8\x2a\x45\xfa\x60\x82\x2c\x0d\xbb\x02\xfd\x59\xde\x7b\x9b\xc4\x18\x7f\xf7\xa0\xb5\x13\xdc\x3c\x18\xfd\x34\xc3\xcc\x75\x00\x5c\xf5\x85\xee\x00\xf7\xd2\x26\xa8\x09\x7d\x49\x75\x72\xbb\x8e\x22\x35\x48\x5a\x2c\xb5\xda\x7f\xfc\x63\x69\x55\x4d\xbc\x51\x61\xb3\x37\xa8\xc5\xb6\xda\x48\x11\xe4\x36\x29\xbc\xf0\x91\xc1\x88\xf3\x05\xd6\x60\x33\xf1\x7f\xad\x95\x19\xd1\xeb\x7c\x6e\x5e\xa2\xee\xf1\x2a\xa9\x9a\x6e\x34\x7a\xe3\x68\xa9\x10\xfc\xa0\x5c\xa0\x0c\xad\xc6\x1d\xd6\x6a\x29\x23\xf8\x1a\x98\x19\xf7\xf7\x4a\xfc\x62\x58\xad\x89\xba\x03\xde\x06\x00\xb8\x6e\x17\x70\xa9\xf8\x89\xef\x3f\x73\x7c\x5e\x52\xe5\x66\xda\x68\x28\xb1\x5b\x9c\xce\x6e\x07\xf7\x27\xf4\xfb\x39\xa7\x4c\x98\xac\x3c\x22\xb6\xad\xc8\x11\x9a\xc9\x05\x7f\xfb\x4b\xa5\x3b\xfd\x06\xdc\xb7\xf6\xe8\xd1\xca\x32\x3e\xe4\x33\xa6\xc8\x33\xee\x72\xa3\xb7\x01\x38\x0d\xb7\xe1\x3b\x00\x00\xff\xff\xa3\x3b\xb9\x65\x6f\x01\x00\x00")

func examplesLogStreamingJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesLogStreamingJson,
		"examples/log-streaming.json",
	)
}

func examplesLogStreamingJson() (*asset, error) {
	bytes, err := examplesLogStreamingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/log-streaming.json", size: 367, mode: os.FileMode(420), modTime: time.Unix(1504522951, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesMd5sumJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x50\xbd\x6a\xf3\x40\x10\xec\xf5\x14\xc3\xd5\xc6\xaa\xbe\xc6\xf5\x97\x80\x21\x5d\xca\x60\xcc\x21\xad\xed\x03\xdd\x0f\xda\x3d\xb0\x31\x7e\xf7\x70\x7b\x72\x14\x1c\x91\x90\x34\x42\xb7\x3b\x33\x3b\x33\xd7\x06\x30\xc1\x7a\x32\x1b\x98\x6d\x48\x59\x60\x43\x8f\x98\xa5\xfc\x1e\xdc\x40\x66\x55\x20\x3d\x71\x37\xba\x24\x2e\x86\x82\xfc\x4f\x3e\x06\x96\xd1\x0a\x31\xdc\x12\x8d\x91\xd9\x85\x23\x2c\xd8\xf9\x34\x10\x7c\xff\x8f\xb3\x47\x17\xbd\xb7\xa1\x5f\x57\x59\xa5\xb2\xd9\xe0\xad\x01\x80\xab\x7e\x3f\x39\x9a\x48\x0a\x53\x86\x6e\x1f\xcc\x54\xdb\x12\xa7\x13\x6b\xb4\xe2\x53\x5b\x1f\xfb\x6a\xce\x67\x16\xd0\xd9\xb1\x20\x06\xc8\x89\x70\x8a\x2c\xe0\x0b\x0b\xf9\xf5\xac\x9c\xc7\xa1\x28\x96\x00\x9b\xb6\xfd\xa2\x33\x03\xe5\x92\xd4\xe0\xf3\xf6\xe5\x69\x9e\x26\x2b\xa7\x32\x55\xa2\x0b\x46\xe7\xb7\x06\xd8\x69\xda\x5a\xcf\xcf\x71\x59\xfa\xf8\x4d\xde\x57\x5d\x23\x1e\xee\x9d\x3a\x46\x67\x93\xe4\x91\xb8\xd4\xa0\xd7\x85\x58\xf6\x0a\xfb\x5b\xde\xea\xf5\x57\x81\x8b\xe7\x87\xc4\x74\xa6\x2e\x4b\x1c\x17\x32\x3b\x6f\x8f\xb4\xbf\x27\xb7\x43\x72\x81\x66\xe1\xce\xf7\x85\x32\x35\x62\x56\x73\xa7\xbb\x0f\xcc\x54\xd3\xf2\xf9\xe6\xd6\xbc\x07\x00\x00\xff\xff\x41\x06\xac\x11\xdc\x02\x00\x00")

func examplesMd5sumJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesMd5sumJson,
		"examples/md5sum.json",
	)
}

func examplesMd5sumJson() (*asset, error) {
	bytes, err := examplesMd5sumJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/md5sum.json", size: 732, mode: os.FileMode(420), modTime: time.Unix(1504522951, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesPortRequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x31\x6a\xc4\x30\x10\x45\x7b\x9d\xe2\x33\xb5\x09\x9b\xce\xb8\xce\x01\xd2\x07\x13\x84\x76\xf0\x0a\x56\x33\x8a\x66\x16\x02\x8b\xef\x1e\xa4\xac\xdd\xa8\x79\xff\x3d\xcd\x33\x00\x24\xb1\x30\x2d\xa0\x4f\x6d\x8e\xc6\x3f\x0f\x36\xa7\xa9\x93\x2b\x5b\x6a\xb9\x7a\x56\xe9\x83\x0f\x2e\x2a\xe6\x2d\x3a\x1b\xa2\x59\xde\x24\xcb\x86\xaa\xcd\x0d\xae\xf0\x1b\x83\x7f\x39\x3d\x5c\x1b\x92\x8a\xc7\x2c\xdc\xde\xfe\x5b\x07\x30\x5a\xf0\x15\x00\xe0\x39\x5e\x80\x72\x89\x1b\x7f\x1f\x67\xc4\x7b\xcd\xc2\x43\x1a\x74\xe4\xbb\x74\xec\x01\xba\xa9\x39\x2d\xb8\x4c\xa0\xf3\x1f\x5a\x30\xcf\xf3\xfc\x1a\xed\xeb\x19\x48\xe5\xda\x75\xb2\x3b\x73\xa5\x09\xf4\x7e\xa1\x75\xc0\x3d\x00\x6b\xd8\xc3\x5f\x00\x00\x00\xff\xff\x96\xf7\xb2\x9c\x07\x01\x00\x00")

func examplesPortRequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesPortRequestJson,
		"examples/port-request.json",
	)
}

func examplesPortRequestJson() (*asset, error) {
	bytes, err := examplesPortRequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/port-request.json", size: 263, mode: os.FileMode(420), modTime: time.Unix(1504522951, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesResourceRequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8f\x39\x6b\xc4\x30\x10\x85\x7b\xff\x8a\xc7\xd4\x22\xd8\xb0\xdb\xb8\xcb\x01\xa9\x02\x61\x21\x55\x58\xcc\x44\x1e\x8c\xd8\xd5\x11\x8d\x0c\x21\xc1\xff\x3d\xc8\x47\xa9\x77\x7c\x4f\xf3\xd7\x00\x14\xd8\x0b\xf5\xa0\x8b\x68\x9c\xb3\x15\x64\xf9\x9e\x45\x0b\x99\xea\x8e\xa2\x36\xbb\x54\x5c\x0c\x35\xf4\x22\x3e\x06\x2d\x99\x8b\x28\x18\x85\xf5\x76\xe4\x5d\x98\x70\xc2\xf3\xfb\x07\x6c\xcc\xa2\x06\xdd\x19\xaf\x4f\xb8\x3c\xbe\x19\x70\x18\xd1\xb5\x6d\x7d\x8f\x4e\x6f\xd0\xc4\x56\x1e\xb6\x85\xbc\xef\x2a\xf5\xa8\x1f\x02\xc8\xa6\x79\x58\x21\xd4\xe3\x64\x36\x2d\xb3\x1f\xa6\x2f\xea\xd1\x9d\x77\x45\xdd\xaf\xec\x52\xdb\x36\xc0\xb2\xe2\xe4\x47\xec\x5c\x62\xae\xdd\xcf\x35\xb8\x41\x01\x72\x9e\x27\x19\x8e\x7b\xf9\x9e\x5c\x10\x32\x87\x6b\xfd\x58\x2b\xa4\x77\x91\x44\x06\xd4\xd1\x75\xf5\x96\x06\xb8\x36\x4b\xf3\x1f\x00\x00\xff\xff\xa4\xd2\x4b\x24\x2e\x01\x00\x00")

func examplesResourceRequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesResourceRequestJson,
		"examples/resource-request.json",
	)
}

func examplesResourceRequestJson() (*asset, error) {
	bytes, err := examplesResourceRequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/resource-request.json", size: 302, mode: os.FileMode(420), modTime: time.Unix(1504522951, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
	"examples/file-contents.json":    examplesFileContentsJson,
	"examples/google-storage.json":   examplesGoogleStorageJson,
	"examples/hello-world.json":      examplesHelloWorldJson,
	"examples/log-streaming.json":    examplesLogStreamingJson,
	"examples/md5sum.json":           examplesMd5sumJson,
	"examples/port-request.json":     examplesPortRequestJson,
	"examples/resource-request.json": examplesResourceRequestJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
	"examples": {nil, map[string]*bintree{
		"file-contents.json":    {examplesFileContentsJson, map[string]*bintree{}},
		"google-storage.json":   {examplesGoogleStorageJson, map[string]*bintree{}},
		"hello-world.json":      {examplesHelloWorldJson, map[string]*bintree{}},
		"log-streaming.json":    {examplesLogStreamingJson, map[string]*bintree{}},
		"md5sum.json":           {examplesMd5sumJson, map[string]*bintree{}},
		"port-request.json":     {examplesPortRequestJson, map[string]*bintree{}},
		"resource-request.json": {examplesResourceRequestJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
