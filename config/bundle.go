// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\xdf\x53\xdb\x48\xf2\x7f\xd7\x5f\xd1\x5f\xc8\xb7\x8a\x54\x59\xc2\x6c\x6a\xaf\x6e\x55\xc5\x03\x18\x96\x70\x49\x08\x07\xce\xe5\xee\x89\x1a\x69\x5a\xd6\x2c\xd2\x8c\x76\x66\x64\xc7\xe1\xf2\xbf\x5f\x75\x8f\x24\xdb\xc4\xfc\xb8\x5b\xb2\x79\x09\x96\x7a\x3e\xdd\xd3\xbf\xbb\xb5\x0b\xd3\x12\x41\x8b\x1a\xc1\x14\xe0\x4b\x04\x91\x7b\x35\x47\x70\x68\xe7\x68\x41\x0a\x2f\x32\xe1\x10\x32\x91\xdf\xa2\x96\xd1\x2e\x1c\xcd\x85\xaa\x44\x56\x0d\xcf\x5c\x0a\x99\xa9\xbc\xcc\x46\x20\x97\x5a\xd4\x86\xfe\xc2\x4a\x38\xaf\xf2\x11\xd4\x46\xcf\x8c\xcc\xa2\x93\x0e\xa9\x27\x8e\xa2\x07\x79\xe7\xa6\x6e\x5a\xff\x14\xcf\xca\xe4\xa2\x1a\x41\xe9\x73\xa3\xa5\xb1\x23\x70\x55\x6b\xeb\x11\x34\x99\x1b\xc1\xcc\x2a\x89\x7a\xa6\x34\x8e\xa0\x16\xba\x25\x4a\xb1\x70\x71\x26\x7c\x5e\x46\x93\xc0\xa0\xc3\x78\x44\x12\x9c\xa3\xf6\xb0\xb0\xca\xa3\xed\x59\xef\xb9\xd7\xc9\x03\x22\xd9\x26\x1f\x41\x65\x66\x8f\x29\x62\x04\xb7\xa2\xb8\x15\xd1\x29\x41\x7f\x66\x64\x97\x42\x04\x10\xd3\x71\xfe\xbf\x32\xb3\x28\x7a\x6f\x66\x33\xb4\x69\x04\xb0\x0b\xf4\xb7\xd2\x33\xa8\x70\x8e\x95\x4b\x41\x62\xd6\xce\x46\xa0\x74\x61\x46\x80\xd6\x1a\x1b\x01\xbc\xa7\x97\x29\x3f\xe4\x43\x8c\x4d\x58\x0e\xbc\x01\x5f\x2a\x07\x8d\xf0\x65\x02\xe7\x05\x60\xdd\xf8\xe5\x28\xbc\x14\x16\xf9\x86\x1e\x35\x11\x3a\x2f\xd1\xda\x24\x02\xf8\xd8\xfa\xa6\xf5\xbf\xaa\x0a\x53\xd8\xd9\x89\xa2\x6b\x76\x89\x20\xd1\x5b\xe3\xfc\xba\xbe\x7e\x6d\xb5\xc6\xaa\xf3\x1a\x3a\x4c\x04\x17\xa2\xee\x75\x5c\x1a\xe7\x23\x3e\x79\x69\xac\x87\xd6\xa1\x84\xc2\x58\x78\x3b\x9d\x5e\x92\xbd\xeb\x56\xab\x5c\x78\x65\x34\x08\x2d\x19\x72\x81\x19\x48\xe1\xca\xcc\x08\x2b\x19\x72\x3a\xbd\xa4\xd3\x29\xfc\x75\x3c\x1e\x6f\x43\xbb\xba\x9c\x6c\x82\xd1\xb1\xab\xcb\x49\x38\xf5\xcb\xf8\x97\xee\xd4\x15\xfe\xde\x2a\x4b\x96\x73\x2a\x07\xd1\xfa\x12\xb5\xef\xf9\x13\x10\xf1\xef\x22\xe0\xe8\xf2\xdc\x41\xeb\x48\xfd\x02\x1a\xe1\xdc\xc2\x04\x71\x76\x49\x91\xc4\x9a\x3c\xec\x16\xc1\xb5\x16\x49\x81\x8d\x35\x0d\xda\x6a\x09\x16\x9d\xb7\x2a\xf7\x20\xf2\x1c\x5d\x67\x05\xf2\x6e\x5d\xa8\x19\x14\xaa\x42\x46\xd9\xc3\x64\x96\x40\x5e\xd6\x46\xc2\x5f\xc6\x63\x28\x58\x95\x49\x20\x4b\x96\x75\xf5\x3a\xdc\xb4\x63\x9d\x82\xc8\xf2\x83\x9f\xde\x84\x9b\x9c\xeb\xbc\x6a\x25\x82\x80\x9d\x89\xc8\x4b\x8c\x27\x46\x7b\x6b\xaa\x14\xb4\x89\x9d\x37\x16\x77\x82\x8e\x4b\x14\x12\x2d\x28\x0d\x67\xe8\xf7\xdf\x2b\xe7\x49\xbe\xc6\x68\x87\x8e\x91\x58\xf2\xe0\xef\xb9\xc8\x4b\xba\x6f\xb6\x04\xa5\x3d\xda\x1a\xa5\x12\x76\xc9\x1a\x51\x39\x3a\xba\xfd\x89\x72\xe4\xfc\x84\xcd\x8c\x53\xf0\xb6\xc5\x3e\x94\x5c\x5e\xa2\x6c\x2b\x62\xe8\x56\xe6\xa1\xdb\x7f\xe0\x60\xbc\x1f\xe2\x09\x44\xd7\xfd\x91\xde\xc1\x16\x60\x8a\xce\x27\x6d\xab\x41\xac\x83\x7a\xb4\x83\x7d\x49\x09\xa0\x85\x36\x0e\x29\x13\xb0\x74\x3d\xd8\x95\xa0\x28\x3f\x18\xf7\xff\x60\x17\x0e\x20\xd0\x0d\x5c\x6a\xa1\x97\xe0\x85\xbb\x65\x0b\xf5\x4c\x48\x53\x46\xe3\x26\xab\x1e\x76\x52\xb6\xfa\x96\x70\x07\x90\xca\xe8\x19\x1d\x5f\x08\xe5\x21\x43\xbf\x40\xd4\xd0\x36\x52\x78\x74\x90\x61\x61\x2c\x42\x2d\xec\x6d\x70\x23\x6d\x24\x82\x44\x21\x1f\x92\xff\xc2\x48\xbc\x54\x7a\x36\x55\x35\x9a\xd6\xa7\xe4\x18\x1b\x77\xa8\x95\x6e\x3d\x6e\x67\x4f\xaa\xee\x78\x70\x3c\x0b\xeb\x47\xf7\x65\x20\x53\x3c\x4b\x8a\x73\xad\xfc\x20\xc5\x9b\xf1\x86\x18\x3f\x77\x62\xb8\x28\x22\xd2\xb4\x0f\x8a\x2e\xbb\x74\x32\x9c\x9f\xc0\x42\x55\x15\x64\x48\x91\x66\x6a\x41\x91\x56\x55\x4b\x98\xa1\x26\xdd\x22\xf3\x3f\x3f\x09\x49\xa6\x83\x18\xe4\x2b\x05\xe9\x0f\x35\x28\x59\x21\x5f\x8d\xee\x8a\xe4\x4c\x42\x33\x99\x0f\xd2\x8d\x40\xf9\xc0\xc8\x95\xad\x07\x69\x16\x9d\x77\xc4\x07\x50\xa3\xd0\x8e\x88\x2d\x92\x43\x6a\xd3\x1f\x4a\x60\xdc\xbf\x0c\x0f\x40\xd5\xec\xed\x1e\xab\x25\x88\xc2\x63\xf0\xda\x42\x59\xe7\xd9\x49\x08\x73\xd0\x47\x7c\x10\x04\x3e\x62\x55\x05\xee\x9b\x77\xf4\x76\x49\x46\x90\xe8\x31\xf7\xb0\x28\x05\x87\x9d\x69\x6d\x8e\x21\xf3\x8a\xa1\x8c\x78\x03\xca\x27\xc0\x80\x27\x58\x28\x4d\x76\xba\x1a\x88\x55\xb8\x2d\x33\x0a\xb9\xa1\x0d\x8e\x09\x66\x8e\x96\xca\x9d\x0b\x49\x3e\xc3\x52\xcc\x95\xe1\x2c\x3c\x1c\x27\xdb\x10\xf0\xe4\xf2\x93\x5b\xf1\x4c\xfa\xa7\x4d\xeb\x52\xe0\xe4\xc8\xe9\xf1\xe8\xc3\x8a\x66\xc4\x39\xe3\xb8\x27\xbd\x12\xf5\x59\x96\xc2\x38\x19\xa8\x4f\x94\xbb\x05\xd7\x88\x1c\x1f\x3c\x44\x24\x6b\xa7\x76\xe1\x57\xb6\xe3\x22\xe6\x82\x06\xbe\xa5\xbb\x26\xdf\xc7\xbd\x5b\xea\x1c\x16\xca\x97\xdb\x6b\xcc\x36\x9f\xfd\xc4\x31\x17\xe2\xfe\xe7\x4d\x67\xed\xa8\x42\x05\xb8\x9c\x0c\x26\x27\xa7\x0a\xa1\xba\xcf\x0c\xc9\x72\x8f\xc3\x6f\x0b\x08\xd8\x85\x37\xe3\x81\x47\xf4\xd9\xd8\xdb\x3e\x97\x51\x09\x75\x90\x5b\x24\x67\x07\xd9\x5a\xb2\x6c\x63\x0d\x55\x05\xfa\xb3\x0f\x8f\xbe\x0a\xb3\xa9\x95\x03\xa9\x2c\xe6\xde\xd8\x25\x71\x26\xc0\x13\x65\x53\x48\xf6\x43\x85\x88\x17\xc6\xde\xc6\x52\xd9\xff\x4e\xa5\x48\xe5\x55\xb8\x5b\x2a\xfe\x43\x86\xea\x4a\xd3\x4b\x69\x98\x4f\x7e\x10\x5f\x54\xdd\xd6\x2b\x66\x7b\xce\x4b\xd3\xfa\x7d\xb4\xf6\x35\x38\xf5\x35\x78\x49\xb6\xec\x04\xc8\xda\xa2\xa0\x2e\x6b\x33\x79\x12\xc7\x63\x7e\x73\xad\xbe\xf6\xb9\x9c\x52\xe0\x18\xde\x1d\x07\x46\x0f\xf4\x6e\xcc\xd7\x86\xb2\xd7\x97\x99\x10\xad\x0f\x75\x6e\x8f\x74\xaf\x00\x53\xe1\x6e\xaf\x18\x8d\xa9\xa3\x68\x37\x7e\xd9\x7f\xd1\x2e\xf4\x3d\xb2\xa3\x26\x68\xdf\x58\xe0\x26\x11\xba\x2e\x71\xff\xad\xd0\xb2\x42\xeb\x5e\x9e\x75\x74\x6c\x2a\x7f\x72\x9c\x76\x9d\x06\x05\x5c\xf0\x88\xa1\xff\xef\xda\x15\x7a\xb7\xc5\x05\xbb\xdf\x09\xb5\xf5\x27\xac\xc5\x1e\xec\x58\x38\x64\xe3\x78\x43\x8d\x00\x07\x5b\xaf\x67\xf0\x64\x05\xc7\xca\xcd\x2a\xec\x49\xd3\xae\x05\x0a\xc6\xfa\x7c\x0d\x16\x67\xca\x68\x4e\x67\xf4\x07\x17\x8a\xfe\xdd\x51\xe8\xad\x6e\x71\x09\xe7\x27\x11\xc0\x3b\x5c\x6e\xbc\xbf\xc6\xdc\xa2\xef\xc9\xde\xe1\x92\xca\x38\x3f\x0b\xf5\xe6\x34\x58\xba\xbb\xb9\xc5\x42\x7d\x59\x17\x55\x69\x89\x5f\xd0\xc1\x1e\x79\xd3\x28\xcc\x03\x6e\xc4\xa5\xc9\x51\x5f\x76\x4e\xef\xc3\xb1\x0d\xb1\x3f\x5d\xbd\xef\xdd\xb1\xf3\x25\x87\xc2\xe6\xe5\x5a\x6c\x7d\xba\x7a\x9f\x42\xe9\x7d\x93\xee\xef\x0f\x3d\x72\xfa\xcb\x4f\xd4\xda\x7e\x20\xb7\xeb\x55\x78\x24\xa5\x75\x50\x9a\x4a\xba\xe0\xdf\x52\x5a\x74\xe4\x25\xab\x56\x15\x65\x87\xcc\x01\xc3\x27\x42\xca\x8f\xd7\xfa\x6f\x4e\xc5\xbd\x41\x95\xdb\x34\x30\x1b\x89\x5b\x35\x4a\xb8\x4a\x43\x27\x43\xe8\x21\xa8\x77\x08\xd7\xe3\x13\xdc\x01\x0e\x03\xdd\x70\xef\x4f\x0e\x6d\xb0\x20\x5b\x60\xd5\xb2\x92\xa6\xdf\xd1\xd8\x93\xb2\xfa\x59\xd0\x5e\x3e\x26\x9d\x9a\x46\xe5\x03\x52\x74\x75\x39\x49\x87\x3c\xdd\xdd\x77\xeb\xa8\x31\xc0\x1d\x05\xa2\xb5\x71\x23\xe5\x7e\x7f\xbd\x75\x66\x7d\xad\x7a\xfe\x64\x55\x5a\xd6\x7a\xfd\x64\x80\xdc\x10\x9f\x13\x4d\x57\x30\xf6\xd4\x46\x52\x7c\xcd\xb8\x33\x1e\x3e\x44\x55\xb9\xf5\x0e\xe1\xe1\x02\xf1\x03\xd2\x47\x37\xd6\xc2\x71\x97\xd6\x7e\x40\x9e\x78\x3b\x9d\xf0\xb4\x4d\xd6\x99\x62\xdd\x54\x5c\x06\xfe\xcd\xa6\x6c\xb5\x22\xbb\x22\x1c\xc2\x5c\x68\x55\x55\x82\x1f\xcf\xd0\xa3\x9e\xc3\x21\x4c\x69\x40\xa0\x27\xf8\x05\xf3\x96\x63\x1f\x0e\xe1\xee\x2e\x39\x1d\x7e\x7f\xfb\xc6\x04\xc2\xce\xda\x9a\x22\x0d\x0e\x61\xc1\x85\x94\x47\x80\x38\xee\x66\xa7\xbb\xbb\x64\xc2\x7f\x7d\xfb\x06\x71\x4c\xa1\x19\x2b\x49\x4f\x29\x49\x9f\xcb\x0e\x85\x6a\x0e\xe3\x77\xa5\xf3\xdb\xb7\xfd\xb0\x2a\x88\x39\x8c\x63\x1a\xb3\x59\x1c\x1a\xa0\xef\x53\x76\x09\x2e\x4c\xc3\x4c\x66\x78\x1c\x7e\x98\xce\xb4\x9e\xe9\x5c\x69\xda\x4a\xde\x78\x2b\xb4\x2b\xd0\xde\x14\x5c\xfd\x0f\xe1\x5f\xa7\xd7\xfc\x7e\x51\xa2\xbe\xf1\x66\x45\x30\x00\x7f\xbc\xb8\x39\xfd\xe7\xf9\xf4\xe6\xe3\xd5\xcd\xe9\x3f\xce\x27\x53\x26\xbf\xbb\x53\x05\x68\x84\x84\x9a\x34\x18\x43\xdc\xdd\xee\xee\xae\xb1\x4a\xfb\x02\x76\x2c\xfe\xde\xa2\xf3\x37\x39\x11\x1c\xc2\xff\xcb\x9d\x40\x3c\x10\xc6\x80\x5a\x0e\xbf\x3a\x38\x6e\xe4\xa8\x23\x7b\x04\xb1\xc6\xda\xd8\x25\x61\x26\xe3\x02\xce\x8e\x77\xba\x63\x8f\x23\x87\x6e\xef\x09\x68\x49\x5d\xe3\x3a\x70\x38\xf5\x1d\x32\xff\xfc\xbd\x45\x9a\x2d\x2f\x8f\xaf\xb7\xf9\xdd\xee\xff\x65\x4a\xef\x67\xc2\x95\xe1\xe7\xe5\xf1\x35\xc4\x17\x64\x26\x1e\x60\x7a\xf9\xc2\x73\xf3\x94\xf9\x02\x19\x3e\xe5\x0d\x4f\x9b\x25\x00\x55\xa1\x56\x1c\x1e\xa4\x4d\xa3\x0f\x5f\xc0\x36\x3d\x6c\x8d\xf5\x21\x69\x6f\x96\xbd\x80\x55\x7a\x50\xf2\xd5\x15\xea\x63\x26\xb9\x17\xb6\xff\x63\x98\x46\x67\x56\xc9\x53\xde\xd3\x3d\xc7\xb2\xaf\xb6\xda\xf5\xd5\x73\xac\xfa\xea\x19\x36\x25\xa2\xc1\x5e\xcf\xb5\xf2\x2b\x88\x1b\x84\xba\x51\x2f\x11\x78\x41\x82\xf2\x66\xde\x5b\xf7\xec\x25\x8c\xdb\x81\x16\xd4\x73\x0f\xa8\x7f\x82\x71\xaf\xab\xd6\xd6\xdb\xed\xba\xbf\x69\xd8\xeb\xe3\xa3\xe9\xe4\x2d\xc4\xf1\x6f\x26\x8b\xb9\x13\xf9\xce\xca\x03\x89\x0e\xbb\x9a\x83\x7b\x8f\x43\x16\x7f\xca\xc2\x03\x79\x97\x74\x9f\x70\x9b\x67\xd8\x7f\x40\xa4\xf4\x1b\x37\x68\x59\x17\x2f\xe2\x0c\x03\x74\x8d\x35\x67\xca\x17\xc9\xc0\x2b\x58\x5f\x37\x2b\xd8\x3f\xc1\x1f\xb8\x23\x3f\x16\x3e\x2f\x41\xa2\xcb\xad\xca\xd0\xad\xad\x44\xfb\x7d\x46\xdf\xd5\x52\xfb\x1e\xa8\xef\x6f\x0b\xa3\x1e\x27\x34\x89\x7f\x33\x59\x58\x98\xf0\xf1\x5c\x68\x1a\xa6\x51\xf9\x12\x79\x11\xc6\xa3\x61\x07\x59\x8b\xaf\x46\x0f\x6b\x11\xb8\xa0\x77\x7b\x47\x57\x17\xaf\xa9\xed\xdb\xc0\x49\x61\xa7\xf3\x07\xf2\x49\x89\xc5\x4e\xcf\xeb\xef\x54\x8d\xfe\x18\x1b\x86\xd8\xe4\xc0\x35\x6e\xe7\xde\xcc\xd3\xf7\xbc\xae\xc1\x5c\x15\x0a\x25\xfc\x66\xb2\x50\x0e\xc3\x9e\xdc\x74\x6b\x05\xa6\xa2\x77\x72\xa5\x08\xf5\xdd\xc8\xb4\x1a\x8e\xd6\x47\xa0\x1f\xd0\x89\x5e\x7b\x63\xc5\x0c\x7f\x40\x03\xca\xdb\xc1\xc6\x38\xa7\x78\xcd\x94\x5b\x94\xa8\xbd\x12\x95\x7b\x60\xcb\x28\x95\xcb\xcd\x1c\x2d\xca\x68\x17\x0a\x6b\xea\x30\x94\xe9\xb9\xb2\x46\x53\x93\x99\x10\xe8\x7b\x9a\x1a\xb8\xfc\x81\x5b\x3a\x8f\x75\x12\xf1\xa3\xee\x22\xc1\xcf\x3e\x97\xca\x63\xa5\x9c\x27\xb3\xf0\x9c\xb1\x5a\xd1\xf0\xb7\x15\x07\x8b\x52\xe5\x65\x3f\xa2\x28\x07\xa2\xaa\xcc\x02\xd9\x50\xe1\x2b\x00\x8f\x67\xe1\xe1\x89\x5a\x0d\x41\xc9\x3e\x49\xf1\x76\x3a\xbd\xec\x38\x0e\x8b\x73\x6f\x78\x97\x59\x19\x21\xa1\x69\xb3\x4a\xe5\x10\x3a\x4a\xa3\x87\xcf\x24\x73\x25\x40\xc0\xd9\xe9\x14\xba\xf6\x2a\x89\xd6\xa0\xd2\x8d\xe1\x85\xa2\x8b\xa6\xce\x3d\xf7\x7a\xfd\x84\x7b\x68\xdd\xf3\x8c\x51\x26\xb8\xfb\xf5\x9b\x74\xf5\x5d\x40\xa6\x50\x88\xca\xe1\xb0\xa0\xa9\xbb\x6d\x90\x6e\xeb\x0c\x2d\xfb\xb5\xaa\x39\xfc\x85\x07\xd1\x4b\x31\xd8\xd0\xa2\xb7\xaa\xfb\x6c\x50\x08\x55\xb5\x36\xac\x82\x3e\x88\x2f\x57\xfc\xca\x0d\xeb\xf7\x97\xd8\x02\xd0\xec\x14\x52\x10\xf2\xb0\x4b\x06\xe8\x97\x43\x2c\xc3\xf5\x1b\x68\xac\x99\x2b\x89\xd6\x81\x6b\xf3\x12\x84\x83\x0f\x4a\x2b\xd3\xaf\x6a\x26\xd8\x94\xd1\x2e\x9c\xa1\x46\xab\x72\x52\xc6\x2e\x5b\x76\xa5\x10\xfe\x40\x42\x0f\x01\x4e\xb5\x6c\x8c\xd2\x81\x7b\x78\xd4\x8b\x1c\x7e\xad\x0b\x77\x66\xcc\xac\xc2\x35\x63\x6e\xd3\x71\xbf\xb4\x11\x79\x6e\x5a\xed\x37\x02\x83\xfc\x25\x98\xf7\x63\x43\x99\x41\x54\xc9\x1f\x88\x22\xc2\xd9\x1e\x47\x40\x0a\x26\xee\x6b\xdf\x0c\x17\xaa\xf0\xdb\x65\xfe\xe4\xd0\x5e\x3c\xb0\x2c\x00\x38\x6a\x7d\xc9\x1b\x92\xb0\x1e\x40\x2d\xb4\x5f\xa3\x0e\x0f\xba\x8f\x06\x7d\x96\x1b\xde\xff\x27\x00\x00\xff\xff\x59\xa2\xfe\xf3\xd6\x1e\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 7894, mode: os.FileMode(420), modTime: time.Unix(1513187723, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\x03\x31\x14\x85\xf7\xf3\x14\xd7\xa9\x5d\x26\x33\x2f\xe0\xaa\x95\xe2\xc6\x85\x08\x2e\x25\xd3\xdc\xd8\x4b\x66\x92\x21\x3f\x2a\x86\xfb\xee\x32\x69\x11\x0a\x63\x77\x87\xc3\x77\xbe\xc5\xd9\xdc\x75\x03\xb9\x6e\x50\xf1\xd4\x6c\xee\x41\x3c\x43\x29\xf2\x55\x45\xfb\xa4\x99\x6b\xe3\x97\xe6\xcd\x07\xbb\xa7\xc0\xdc\x99\xec\x1c\x8e\x22\x26\xed\x73\xaa\x00\xfe\x07\x60\x08\x4d\x29\x64\xc0\x21\xc8\xdd\x9c\x23\xf4\x20\x98\x9b\x52\xe6\x40\x2e\x19\x68\x97\xf9\x8c\x30\xcd\x04\x5b\xdd\x9e\xa1\x0a\x08\x40\xa7\x6b\xba\xcc\x5f\xd4\x74\x18\xa0\x97\x6b\x86\x11\x4e\xef\x9f\x13\x4e\x0f\x5b\xd9\x9b\x43\x7b\x81\xd7\x3d\x7b\x8a\xf6\xa6\xc8\x44\xfa\xc1\x3f\xd3\x19\xbf\x52\x35\xa5\xc8\xc7\x6f\x3c\xe6\xa4\x86\x11\x99\xe1\xcb\x07\x8b\x01\x42\x76\x20\xc4\xd1\x3b\x43\x1f\xcb\x23\xbb\x9a\x98\x41\x88\xa4\xa2\x15\xa4\xaf\xae\xfd\x0d\x00\x00\xff\xff\x24\x76\x8a\x2a\x79\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 377, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xcd\x6e\xe2\x30\x10\xc0\xf1\xbb\x9f\x62\x84\xb4\x47\x67\x79\x81\x5c\x16\x22\xc4\x65\x91\x68\xd4\x8f\x53\x64\xe2\x49\xb0\xe2\x8c\x61\x6c\x87\x56\x91\xdf\xbd\x0a\x20\x2a\xaa\xd2\xdb\x24\xf3\x9f\x9f\x1c\xc9\x0c\xc8\x1e\x21\x87\x41\x91\xb1\x56\x89\x16\x03\xd2\x00\x39\x94\x1c\x51\xe0\x3b\xd6\x31\xa8\x9d\x9d\x92\x71\xcc\x8a\xdb\x77\x4a\x42\x71\x1b\x7b\xa4\xe0\x21\x87\x93\xe3\x0e\x19\x38\x12\x48\x59\x3b\x6a\x4c\x3b\xf5\x8b\xf3\x94\x12\x48\x19\x94\xef\xa4\xd1\xd3\xdf\x52\xf9\x6e\xad\x53\x12\xd6\xb5\x17\xf7\xc5\x71\xb7\x34\x9c\xd2\xdf\xda\x91\x76\x2c\x71\x40\x0a\xd2\xba\x56\x20\xb3\xe3\xef\x55\x13\x89\xd0\x4a\x1f\x34\x32\x0b\x17\xc3\x21\x86\xc7\x8d\x8b\x41\xf8\xbd\x8b\x56\x57\x81\x15\xf9\x06\xb9\x6a\x8c\xc5\xe9\xe1\x6f\xc5\x93\x38\xed\x91\xaa\xe0\xbe\x96\x37\x70\xf3\xbf\x2a\x5e\xd7\x65\xb5\xd9\x56\xc5\xf3\x7a\x51\x8a\x71\x34\x0d\x10\x42\xb6\x38\x44\x0f\x73\x90\x29\x89\x71\x3c\xb0\xa1\xd0\xc0\x8c\xf1\x18\xd1\x87\xaa\x9e\x96\x39\xfc\xd1\xb3\x4b\x78\x8e\x24\x20\xe9\xf3\x74\x25\xb6\xaa\x5f\xed\x60\x9e\x3d\x52\x7a\xec\x1d\x7f\x4c\x4e\x36\x6f\x60\xf5\x6f\x76\x3d\xf9\x59\x5b\x1a\xdf\xfd\xca\x69\xe3\xbb\x3b\xec\x72\x71\xa7\x89\x63\xc4\x88\xe2\x33\x00\x00\xff\xff\x5f\xc0\xd7\xf8\x18\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 536, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xcf\x4a\x03\x31\x10\xc7\xf1\xfb\x3e\xc5\xd8\xd2\x63\xb2\xeb\x55\xd8\x8b\xad\x88\x17\x11\x15\x3c\x27\xcd\xa4\x86\xec\x4e\x96\xfc\x41\x21\xcc\xbb\x4b\x77\x17\xa4\x60\xbd\x0d\xc3\x97\xcf\xe1\xb7\xbd\x69\xb5\xa3\x56\xab\xf4\xd9\x6c\x5f\xee\xdf\x40\x3c\x43\xad\xf2\x5d\x25\xff\x64\x98\xd7\x5f\x38\xff\x3e\x42\xf4\x07\x17\x99\x5b\x5b\x88\x70\x10\x29\x9b\x50\xf2\x9a\xe0\xb5\x04\x63\x6c\x6a\x75\x16\x08\x41\xee\xa7\x92\xa0\x03\xc1\xdc\xd4\x3a\x45\x47\xd9\xc2\x66\x01\x06\xa0\x60\x30\xf5\xb7\x77\xd3\x44\xfd\xce\x6c\x96\x7a\x2e\x05\x20\x99\xf9\x5a\x9d\x57\x35\x3e\x6a\xe8\xe4\x35\x6a\xc4\xb1\xdf\xc9\xce\x9e\xf4\x66\x8d\xff\x76\x0e\x2e\xf9\x7f\x21\xeb\x06\xfc\x95\x96\xfc\x82\x6a\x6a\x95\x0f\xdf\x78\x2c\x59\xe9\x01\x99\xe1\x2b\x44\x8f\x11\x62\x21\x10\xe2\x18\xc8\xba\xd3\x79\x9a\xfd\x7c\x31\x83\x10\x59\x25\x2f\x9c\xb9\xd8\xf9\x27\x00\x00\xff\xff\x80\x45\x84\x4d\x88\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 392, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcf\x6a\xc3\x30\x0c\x87\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\xe9\xe8\x76\xdd\x0a\x3b\x3b\x8d\xb2\x79\x6e\x64\x23\xdb\x6c\x60\xf4\xee\x23\x69\xa1\x29\xac\xf4\xf6\xc3\xfe\xf4\xa1\x3f\xab\x87\xba\x33\x54\x77\x3a\x7c\x15\xab\xf7\xcd\xd3\xbe\x7d\x01\xa5\xbe\x5d\xa7\x48\x8f\x08\x39\x57\x7b\x1d\xec\x6b\x2f\xb2\xf8\xa6\xa8\x83\x0d\xf0\xb8\x78\x42\x66\xc7\x13\xfe\xe1\xd8\x6e\x0d\x8b\xd4\x43\x22\xc2\xa3\x0a\xb1\x47\xe6\x05\xea\x52\xf4\x29\xde\x62\x5d\x8a\x45\xce\x66\x00\x42\xa8\x5a\x9f\x02\x34\xa0\x44\x8a\x9c\x3d\x1b\x8a\x03\x94\x17\xd3\xc1\xa7\xa0\x3c\xb2\x9a\xfa\x81\x75\x5f\x9e\x2a\x66\x5a\x01\x52\x3f\xa7\xb3\xeb\x4d\x8f\xbb\x0e\x9a\xea\xb6\x6e\xc4\x11\xd6\x55\x33\xec\x36\xe5\x19\xff\xdf\xb4\x35\xc1\xde\x51\xc5\xd1\x5f\x54\x27\xfe\xca\x55\xe4\x5c\x3d\xff\xe2\x21\x45\xdd\x1d\x51\x04\x7e\x1c\x5b\x64\xe0\x44\xd3\x5c\x8e\x06\xf3\x39\x6d\xa8\x9d\x93\xc8\xa4\xd4\xc1\x2a\xd3\x5f\x9d\xe4\x2f\x00\x00\xff\xff\x36\x8f\xbd\x5a\xbe\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 446, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
