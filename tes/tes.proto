
syntax = "proto3";

option go_package = "github.com/ohsu-comp-bio/funnel/tes";

package tes;

import "google/api/annotations.proto";


enum State { 
	UNKNOWN = 0;
	QUEUED = 1;
	INITIALIZING = 2;
	RUNNING = 3;
	PAUSED = 4;
	COMPLETE = 5;
	EXECUTOR_ERROR = 6;
	SYSTEM_ERROR = 7;
	CANCELED = 8;
	PREEMPTED = 9;
	CANCELING = 10;
}

enum FileType { 
	FILE = 0;
	DIRECTORY = 1;
}

enum view { 
	MINIMAL = 0;
	BASIC = 1;
	FULL = 2;
}


message CancelTaskRequest { 
	string id = 1;
}

message GetServiceInfoRequest { 
}

message GetTaskRequest { 
	string id = 1;
	string view = 2;
}

message ListTasksRequest { 
	string name_prefix = 1;
	State state = 2;
	repeated string tag_key = 3;
	repeated string tag_value = 4;
	int32 page_size = 5;
	string page_token = 6;
	string view = 7;
}

message CancelTaskResponse { 
}

message CreateTaskResponse { 
	string id = 1;
}

message Executor { 
	repeated string command = 1;
	map<string,string> env = 2;
	bool ignore_error = 3;
	string image = 4;
	string stderr = 5;
	string stdin = 6;
	string stdout = 7;
	string workdir = 8;
}

message ExecutorBasic { 
	repeated string command = 1;
	map<string,string> env = 2;
	bool ignore_error = 3;
	string image = 4;
	string stdin = 5;
	string workdir = 6;
}

message ExecutorLog { 
	string end_time = 1;
	int32 exit_code = 2;
	string start_time = 3;
	string stderr = 4;
	string stdout = 5;
}

message Input { 
	string content = 1;
	string description = 2;
	string name = 3;
	string path = 4;
	bool streamable = 5;
	FileType type = 6;
	string url = 7;
}

message InputBasic { 
	string description = 1;
	string name = 2;
	string path = 3;
	bool streamable = 4;
	FileType type = 5;
	string url = 6;
}


message ListTasksResponse { 
	string next_page_token = 1;
	repeated Task tasks = 2;
}

message ListTasksResponseMin { 
	string next_page_token = 1;
	repeated TaskMin tasks = 2;
}

message ListTasksResponseBasic { 
	string next_page_token = 1;
	repeated TaskBasic tasks = 2;
}

message Output { 
	string description = 1;
	string name = 2;
	string path = 3;
	string path_prefix = 4;
	FileType type = 5;
	string url = 6;
}

message OutputFileLog { 
	string path = 1;
	string size_bytes = 2;
	string url = 3;
}

message Resources { 
	map<string,string> backend_parameters = 1;
	bool backend_parameters_strict = 2;
	int32 cpu_cores = 3;
	double disk_gb = 4;
	bool preemptible = 5;
	double ram_gb = 6;
	repeated string zones = 7;
}

message ServiceInfo { 
	string contactUrl = 1;
	string createdAt = 2;
	string description = 3;
	string documentationUrl = 4;
	string environment = 5;
	string id = 6;
	string name = 7;
	map<string,string> organization = 8;
	repeated string storage = 9;
	repeated string tesResources_backend_parameters = 10;
	ServiceType type = 11;
	string updatedAt = 12;
	string version = 13;
}

message ServiceType { 
	string artifact = 1;
	string group = 2;
	string version = 3;
}

message Task { 
	string creation_time = 1;
	string description = 2;
	repeated Executor executors = 3;
	string id = 4;
	repeated Input inputs = 5;
	repeated TaskLog logs = 6;
	string name = 7;
	repeated Output outputs = 8;
	Resources resources = 9;
	State state = 10;
	map<string,string> tags = 11;
	repeated string volumes = 12;
}

message TaskMin { 
	string id = 4;
	State state = 10;
}

message TaskBasic { 
	string creation_time = 1;
	string description = 2;
	repeated ExecutorBasic executors = 3;
	string id = 4;
	repeated InputBasic inputs = 5;
	repeated TaskLogBasic logs = 6;
	string name = 7;
	repeated Output outputs = 8;
	Resources resources = 9;
	State state = 10;
	map<string,string> tags = 11;
	repeated string volumes = 12;
}

message TaskLog { 
	string end_time = 1;
	repeated ExecutorLog logs = 2;
	map<string,string> metadata = 3;
	repeated OutputFileLog outputs = 4;
	string start_time = 5;
	repeated string system_logs = 6;
}

message TaskLogBasic { 
	string end_time = 1;
	repeated ExecutorLog logs = 2;
	map<string,string> metadata = 3;
	repeated OutputFileLog outputs = 4;
	string start_time = 5;
}

service TaskService {

    rpc ListTasks(ListTasksRequest) returns (ListTasksResponse) {
      option (google.api.http) = {
        get: "/tasks"
		additional_bindings {
			get: "/v1/tasks"
		}
		additional_bindings {
			get: "/ga4gh/tes/v1/tasks"
		}
      };
    }

    rpc CreateTask(Task) returns (CreateTaskResponse) {
      option (google.api.http) = {
        post: "/tasks"
		additional_bindings {
			post: "/v1/tasks"
			body: "*"
		}
		additional_bindings {
			post: "/ga4gh/tes/v1/tasks"
			body: "*"
		}
		body: "*"
      };
    }

    rpc GetTask(GetTaskRequest) returns (Task) {
      option (google.api.http) = {
        get: "/tasks/{id}"
		additional_bindings {
			get: "/v1/tasks/{id}"
		}
		additional_bindings {
			get: "/ga4gh/tes/v1/tasks/{id}"
		}
      };
    }

    rpc CancelTask(CancelTaskRequest) returns (CancelTaskResponse) {
      option (google.api.http) = {
        post: "/tasks/{id}:cancel"
		additional_bindings {
			post: "/v1/tasks/{id}:cancel"
			body: "*"
		}
		additional_bindings {
			post: "/ga4gh/tes/v1/tasks/{id}:cancel"
			body: "*"
		}
		body: "*"
      };
    }

    rpc GetServiceInfo(GetServiceInfoRequest) returns (ServiceInfo) {
      option (google.api.http) = {
        get: "/service-info"
		additional_bindings {
			get: "/v1/service-info"
		}
		additional_bindings {
			get: "/ga4gh/tes/v1/service-info"
		}
      };
    }

}

