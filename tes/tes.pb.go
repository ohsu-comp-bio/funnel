// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: tes/tes.proto

package tes

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileType int32

const (
	FileType_FILE      FileType = 0
	FileType_DIRECTORY FileType = 1
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "FILE",
		1: "DIRECTORY",
	}
	FileType_value = map[string]int32{
		"FILE":      0,
		"DIRECTORY": 1,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_tes_tes_proto_enumTypes[0].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_tes_tes_proto_enumTypes[0]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{0}
}

type State int32

const (
	State_UNKNOWN        State = 0
	State_QUEUED         State = 1
	State_INITIALIZING   State = 2
	State_RUNNING        State = 3
	State_PAUSED         State = 4
	State_COMPLETE       State = 5
	State_EXECUTOR_ERROR State = 6
	State_SYSTEM_ERROR   State = 7
	State_CANCELED       State = 8
	State_PREEMPTED      State = 9
	State_CANCELING      State = 10
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "QUEUED",
		2:  "INITIALIZING",
		3:  "RUNNING",
		4:  "PAUSED",
		5:  "COMPLETE",
		6:  "EXECUTOR_ERROR",
		7:  "SYSTEM_ERROR",
		8:  "CANCELED",
		9:  "PREEMPTED",
		10: "CANCELING",
	}
	State_value = map[string]int32{
		"UNKNOWN":        0,
		"QUEUED":         1,
		"INITIALIZING":   2,
		"RUNNING":        3,
		"PAUSED":         4,
		"COMPLETE":       5,
		"EXECUTOR_ERROR": 6,
		"SYSTEM_ERROR":   7,
		"CANCELED":       8,
		"PREEMPTED":      9,
		"CANCELING":      10,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_tes_tes_proto_enumTypes[1].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_tes_tes_proto_enumTypes[1]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{1}
}

type View int32

const (
	View_MINIMAL View = 0
	View_BASIC   View = 1
	View_FULL    View = 2
)

// Enum value maps for View.
var (
	View_name = map[int32]string{
		0: "MINIMAL",
		1: "BASIC",
		2: "FULL",
	}
	View_value = map[string]int32{
		"MINIMAL": 0,
		"BASIC":   1,
		"FULL":    2,
	}
)

func (x View) Enum() *View {
	p := new(View)
	*p = x
	return p
}

func (x View) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (View) Descriptor() protoreflect.EnumDescriptor {
	return file_tes_tes_proto_enumTypes[2].Descriptor()
}

func (View) Type() protoreflect.EnumType {
	return &file_tes_tes_proto_enumTypes[2]
}

func (x View) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use View.Descriptor instead.
func (View) EnumDescriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{2}
}

type CancelTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTaskRequest) Reset() {
	*x = CancelTaskRequest{}
	mi := &file_tes_tes_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTaskRequest) ProtoMessage() {}

func (x *CancelTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTaskRequest.ProtoReflect.Descriptor instead.
func (*CancelTaskRequest) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{0}
}

func (x *CancelTaskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ExecutorBasic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Command       []string               `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
	Env           map[string]string      `protobuf:"bytes,2,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IgnoreError   bool                   `protobuf:"varint,3,opt,name=ignore_error,json=ignoreError,proto3" json:"ignore_error,omitempty"`
	Image         string                 `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	Stderr        string                 `protobuf:"bytes,5,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Stdin         string                 `protobuf:"bytes,6,opt,name=stdin,proto3" json:"stdin,omitempty"`
	Stdout        string                 `protobuf:"bytes,7,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Workdir       string                 `protobuf:"bytes,8,opt,name=workdir,proto3" json:"workdir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutorBasic) Reset() {
	*x = ExecutorBasic{}
	mi := &file_tes_tes_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutorBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutorBasic) ProtoMessage() {}

func (x *ExecutorBasic) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutorBasic.ProtoReflect.Descriptor instead.
func (*ExecutorBasic) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{1}
}

func (x *ExecutorBasic) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *ExecutorBasic) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *ExecutorBasic) GetIgnoreError() bool {
	if x != nil {
		return x.IgnoreError
	}
	return false
}

func (x *ExecutorBasic) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ExecutorBasic) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *ExecutorBasic) GetStdin() string {
	if x != nil {
		return x.Stdin
	}
	return ""
}

func (x *ExecutorBasic) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *ExecutorBasic) GetWorkdir() string {
	if x != nil {
		return x.Workdir
	}
	return ""
}

type GetServiceInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServiceInfoRequest) Reset() {
	*x = GetServiceInfoRequest{}
	mi := &file_tes_tes_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceInfoRequest) ProtoMessage() {}

func (x *GetServiceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceInfoRequest.ProtoReflect.Descriptor instead.
func (*GetServiceInfoRequest) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{2}
}

type GetTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	View          string                 `protobuf:"bytes,2,opt,name=view,proto3" json:"view,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	mi := &file_tes_tes_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{3}
}

func (x *GetTaskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetTaskRequest) GetView() string {
	if x != nil {
		return x.View
	}
	return ""
}

type InputBasic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       string                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Path          string                 `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Streamable    bool                   `protobuf:"varint,5,opt,name=streamable,proto3" json:"streamable,omitempty"`
	Type          FileType               `protobuf:"varint,6,opt,name=type,proto3,enum=tes.FileType" json:"type,omitempty"`
	Url           string                 `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InputBasic) Reset() {
	*x = InputBasic{}
	mi := &file_tes_tes_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputBasic) ProtoMessage() {}

func (x *InputBasic) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputBasic.ProtoReflect.Descriptor instead.
func (*InputBasic) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{4}
}

func (x *InputBasic) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *InputBasic) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InputBasic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InputBasic) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *InputBasic) GetStreamable() bool {
	if x != nil {
		return x.Streamable
	}
	return false
}

func (x *InputBasic) GetType() FileType {
	if x != nil {
		return x.Type
	}
	return FileType_FILE
}

func (x *InputBasic) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ListTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NamePrefix    string                 `protobuf:"bytes,1,opt,name=name_prefix,json=namePrefix,proto3" json:"name_prefix,omitempty"`
	State         State                  `protobuf:"varint,2,opt,name=state,proto3,enum=tes.State" json:"state,omitempty"`
	TagKey        []string               `protobuf:"bytes,3,rep,name=tag_key,json=tagKey,proto3" json:"tag_key,omitempty"`
	TagValue      []string               `protobuf:"bytes,4,rep,name=tag_value,json=tagValue,proto3" json:"tag_value,omitempty"`
	PageSize      int32                  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                 `protobuf:"bytes,6,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	View          string                 `protobuf:"bytes,7,opt,name=view,proto3" json:"view,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksRequest) Reset() {
	*x = ListTasksRequest{}
	mi := &file_tes_tes_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksRequest) ProtoMessage() {}

func (x *ListTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksRequest.ProtoReflect.Descriptor instead.
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{5}
}

func (x *ListTasksRequest) GetNamePrefix() string {
	if x != nil {
		return x.NamePrefix
	}
	return ""
}

func (x *ListTasksRequest) GetState() State {
	if x != nil {
		return x.State
	}
	return State_UNKNOWN
}

func (x *ListTasksRequest) GetTagKey() []string {
	if x != nil {
		return x.TagKey
	}
	return nil
}

func (x *ListTasksRequest) GetTagValue() []string {
	if x != nil {
		return x.TagValue
	}
	return nil
}

func (x *ListTasksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTasksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListTasksRequest) GetView() string {
	if x != nil {
		return x.View
	}
	return ""
}

type ListTasksResponseBasic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NextPageToken string                 `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Tasks         []*TaskBasic           `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksResponseBasic) Reset() {
	*x = ListTasksResponseBasic{}
	mi := &file_tes_tes_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksResponseBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksResponseBasic) ProtoMessage() {}

func (x *ListTasksResponseBasic) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksResponseBasic.ProtoReflect.Descriptor instead.
func (*ListTasksResponseBasic) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{6}
}

func (x *ListTasksResponseBasic) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListTasksResponseBasic) GetTasks() []*TaskBasic {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type ListTasksResponseMin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NextPageToken string                 `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Tasks         []*TaskMin             `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksResponseMin) Reset() {
	*x = ListTasksResponseMin{}
	mi := &file_tes_tes_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksResponseMin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksResponseMin) ProtoMessage() {}

func (x *ListTasksResponseMin) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksResponseMin.ProtoReflect.Descriptor instead.
func (*ListTasksResponseMin) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{7}
}

func (x *ListTasksResponseMin) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListTasksResponseMin) GetTasks() []*TaskMin {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type TaskBasic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreationTime  string                 `protobuf:"bytes,1,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Executors     []*ExecutorBasic       `protobuf:"bytes,3,rep,name=executors,proto3" json:"executors,omitempty"`
	Id            string                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Inputs        []*InputBasic          `protobuf:"bytes,5,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Logs          []*TaskLogBasic        `protobuf:"bytes,6,rep,name=logs,proto3" json:"logs,omitempty"`
	Name          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Outputs       []*Output              `protobuf:"bytes,8,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Resources     *Resources             `protobuf:"bytes,9,opt,name=resources,proto3" json:"resources,omitempty"`
	State         State                  `protobuf:"varint,10,opt,name=state,proto3,enum=tes.State" json:"state,omitempty"`
	Tags          map[string]string      `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Volumes       []string               `protobuf:"bytes,12,rep,name=volumes,proto3" json:"volumes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskBasic) Reset() {
	*x = TaskBasic{}
	mi := &file_tes_tes_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskBasic) ProtoMessage() {}

func (x *TaskBasic) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskBasic.ProtoReflect.Descriptor instead.
func (*TaskBasic) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{8}
}

func (x *TaskBasic) GetCreationTime() string {
	if x != nil {
		return x.CreationTime
	}
	return ""
}

func (x *TaskBasic) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskBasic) GetExecutors() []*ExecutorBasic {
	if x != nil {
		return x.Executors
	}
	return nil
}

func (x *TaskBasic) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskBasic) GetInputs() []*InputBasic {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TaskBasic) GetLogs() []*TaskLogBasic {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *TaskBasic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskBasic) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TaskBasic) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *TaskBasic) GetState() State {
	if x != nil {
		return x.State
	}
	return State_UNKNOWN
}

func (x *TaskBasic) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TaskBasic) GetVolumes() []string {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type TaskLogBasic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EndTime       string                 `protobuf:"bytes,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Logs          []*ExecutorLog         `protobuf:"bytes,2,rep,name=logs,proto3" json:"logs,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Outputs       []*OutputFileLog       `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	StartTime     string                 `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	SystemLogs    []string               `protobuf:"bytes,6,rep,name=system_logs,json=systemLogs,proto3" json:"system_logs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskLogBasic) Reset() {
	*x = TaskLogBasic{}
	mi := &file_tes_tes_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskLogBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogBasic) ProtoMessage() {}

func (x *TaskLogBasic) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogBasic.ProtoReflect.Descriptor instead.
func (*TaskLogBasic) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{9}
}

func (x *TaskLogBasic) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *TaskLogBasic) GetLogs() []*ExecutorLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *TaskLogBasic) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TaskLogBasic) GetOutputs() []*OutputFileLog {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TaskLogBasic) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *TaskLogBasic) GetSystemLogs() []string {
	if x != nil {
		return x.SystemLogs
	}
	return nil
}

type TaskMin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreationTime  string                 `protobuf:"bytes,1,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Executors     []*Executor            `protobuf:"bytes,3,rep,name=executors,proto3" json:"executors,omitempty"`
	Id            string                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Inputs        []*Input               `protobuf:"bytes,5,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Logs          []*TaskLog             `protobuf:"bytes,6,rep,name=logs,proto3" json:"logs,omitempty"`
	Name          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Outputs       []*Output              `protobuf:"bytes,8,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Resources     *Resources             `protobuf:"bytes,9,opt,name=resources,proto3" json:"resources,omitempty"`
	State         State                  `protobuf:"varint,10,opt,name=state,proto3,enum=tes.State" json:"state,omitempty"`
	Tags          map[string]string      `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Volumes       []string               `protobuf:"bytes,12,rep,name=volumes,proto3" json:"volumes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskMin) Reset() {
	*x = TaskMin{}
	mi := &file_tes_tes_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskMin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskMin) ProtoMessage() {}

func (x *TaskMin) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskMin.ProtoReflect.Descriptor instead.
func (*TaskMin) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{10}
}

func (x *TaskMin) GetCreationTime() string {
	if x != nil {
		return x.CreationTime
	}
	return ""
}

func (x *TaskMin) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskMin) GetExecutors() []*Executor {
	if x != nil {
		return x.Executors
	}
	return nil
}

func (x *TaskMin) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskMin) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TaskMin) GetLogs() []*TaskLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *TaskMin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskMin) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TaskMin) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *TaskMin) GetState() State {
	if x != nil {
		return x.State
	}
	return State_UNKNOWN
}

func (x *TaskMin) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TaskMin) GetVolumes() []string {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type CancelTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTaskResponse) Reset() {
	*x = CancelTaskResponse{}
	mi := &file_tes_tes_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTaskResponse) ProtoMessage() {}

func (x *CancelTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTaskResponse.ProtoReflect.Descriptor instead.
func (*CancelTaskResponse) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{11}
}

type CreateTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTaskResponse) Reset() {
	*x = CreateTaskResponse{}
	mi := &file_tes_tes_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskResponse) ProtoMessage() {}

func (x *CreateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateTaskResponse) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{12}
}

func (x *CreateTaskResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Executor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Command       []string               `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
	Env           map[string]string      `protobuf:"bytes,2,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IgnoreError   bool                   `protobuf:"varint,3,opt,name=ignore_error,json=ignoreError,proto3" json:"ignore_error,omitempty"`
	Image         string                 `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	Stderr        string                 `protobuf:"bytes,5,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Stdin         string                 `protobuf:"bytes,6,opt,name=stdin,proto3" json:"stdin,omitempty"`
	Stdout        string                 `protobuf:"bytes,7,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Workdir       string                 `protobuf:"bytes,8,opt,name=workdir,proto3" json:"workdir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Executor) Reset() {
	*x = Executor{}
	mi := &file_tes_tes_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Executor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Executor) ProtoMessage() {}

func (x *Executor) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Executor.ProtoReflect.Descriptor instead.
func (*Executor) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{13}
}

func (x *Executor) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Executor) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Executor) GetIgnoreError() bool {
	if x != nil {
		return x.IgnoreError
	}
	return false
}

func (x *Executor) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Executor) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *Executor) GetStdin() string {
	if x != nil {
		return x.Stdin
	}
	return ""
}

func (x *Executor) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *Executor) GetWorkdir() string {
	if x != nil {
		return x.Workdir
	}
	return ""
}

type ExecutorLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EndTime       string                 `protobuf:"bytes,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	ExitCode      int32                  `protobuf:"varint,2,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	StartTime     string                 `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Stderr        string                 `protobuf:"bytes,4,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Stdout        string                 `protobuf:"bytes,5,opt,name=stdout,proto3" json:"stdout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutorLog) Reset() {
	*x = ExecutorLog{}
	mi := &file_tes_tes_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutorLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutorLog) ProtoMessage() {}

func (x *ExecutorLog) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutorLog.ProtoReflect.Descriptor instead.
func (*ExecutorLog) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{14}
}

func (x *ExecutorLog) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ExecutorLog) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ExecutorLog) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ExecutorLog) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *ExecutorLog) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

type Input struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       string                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Path          string                 `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Streamable    bool                   `protobuf:"varint,5,opt,name=streamable,proto3" json:"streamable,omitempty"`
	Type          FileType               `protobuf:"varint,6,opt,name=type,proto3,enum=tes.FileType" json:"type,omitempty"`
	Url           string                 `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Input) Reset() {
	*x = Input{}
	mi := &file_tes_tes_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{15}
}

func (x *Input) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Input) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Input) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Input) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Input) GetStreamable() bool {
	if x != nil {
		return x.Streamable
	}
	return false
}

func (x *Input) GetType() FileType {
	if x != nil {
		return x.Type
	}
	return FileType_FILE
}

func (x *Input) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ListTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NextPageToken string                 `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Tasks         []*Task                `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksResponse) Reset() {
	*x = ListTasksResponse{}
	mi := &file_tes_tes_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksResponse) ProtoMessage() {}

func (x *ListTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksResponse.ProtoReflect.Descriptor instead.
func (*ListTasksResponse) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{16}
}

func (x *ListTasksResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListTasksResponse) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type Output struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Description   string                 `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path          string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	PathPrefix    string                 `protobuf:"bytes,4,opt,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
	Type          FileType               `protobuf:"varint,5,opt,name=type,proto3,enum=tes.FileType" json:"type,omitempty"`
	Url           string                 `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Output) Reset() {
	*x = Output{}
	mi := &file_tes_tes_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{17}
}

func (x *Output) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Output) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Output) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Output) GetPathPrefix() string {
	if x != nil {
		return x.PathPrefix
	}
	return ""
}

func (x *Output) GetType() FileType {
	if x != nil {
		return x.Type
	}
	return FileType_FILE
}

func (x *Output) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type OutputFileLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	SizeBytes     string                 `protobuf:"bytes,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutputFileLog) Reset() {
	*x = OutputFileLog{}
	mi := &file_tes_tes_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutputFileLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputFileLog) ProtoMessage() {}

func (x *OutputFileLog) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputFileLog.ProtoReflect.Descriptor instead.
func (*OutputFileLog) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{18}
}

func (x *OutputFileLog) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *OutputFileLog) GetSizeBytes() string {
	if x != nil {
		return x.SizeBytes
	}
	return ""
}

func (x *OutputFileLog) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Resources struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	BackendParameters       map[string]string      `protobuf:"bytes,1,rep,name=backend_parameters,json=backendParameters,proto3" json:"backend_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BackendParametersStrict bool                   `protobuf:"varint,2,opt,name=backend_parameters_strict,json=backendParametersStrict,proto3" json:"backend_parameters_strict,omitempty"`
	CpuCores                int32                  `protobuf:"varint,3,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`
	DiskGb                  float64                `protobuf:"fixed64,4,opt,name=disk_gb,json=diskGb,proto3" json:"disk_gb,omitempty"`
	Preemptible             bool                   `protobuf:"varint,5,opt,name=preemptible,proto3" json:"preemptible,omitempty"`
	RamGb                   float64                `protobuf:"fixed64,6,opt,name=ram_gb,json=ramGb,proto3" json:"ram_gb,omitempty"`
	Zones                   []string               `protobuf:"bytes,7,rep,name=zones,proto3" json:"zones,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Resources) Reset() {
	*x = Resources{}
	mi := &file_tes_tes_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{19}
}

func (x *Resources) GetBackendParameters() map[string]string {
	if x != nil {
		return x.BackendParameters
	}
	return nil
}

func (x *Resources) GetBackendParametersStrict() bool {
	if x != nil {
		return x.BackendParametersStrict
	}
	return false
}

func (x *Resources) GetCpuCores() int32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *Resources) GetDiskGb() float64 {
	if x != nil {
		return x.DiskGb
	}
	return 0
}

func (x *Resources) GetPreemptible() bool {
	if x != nil {
		return x.Preemptible
	}
	return false
}

func (x *Resources) GetRamGb() float64 {
	if x != nil {
		return x.RamGb
	}
	return 0
}

func (x *Resources) GetZones() []string {
	if x != nil {
		return x.Zones
	}
	return nil
}

type ServiceInfo struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	ContactUrl                    string                 `protobuf:"bytes,1,opt,name=contactUrl,proto3" json:"contactUrl,omitempty"`
	CreatedAt                     string                 `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Description                   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	DocumentationUrl              string                 `protobuf:"bytes,4,opt,name=documentationUrl,proto3" json:"documentationUrl,omitempty"`
	Environment                   string                 `protobuf:"bytes,5,opt,name=environment,proto3" json:"environment,omitempty"`
	Id                            string                 `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	Name                          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Organization                  map[string]string      `protobuf:"bytes,8,rep,name=organization,proto3" json:"organization,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Storage                       []string               `protobuf:"bytes,9,rep,name=storage,proto3" json:"storage,omitempty"`
	TesResourcesBackendParameters []string               `protobuf:"bytes,10,rep,name=tesResources_backend_parameters,json=tesResourcesBackendParameters,proto3" json:"tesResources_backend_parameters,omitempty"`
	Type                          *ServiceType           `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	UpdatedAt                     string                 `protobuf:"bytes,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Version                       string                 `protobuf:"bytes,13,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *ServiceInfo) Reset() {
	*x = ServiceInfo{}
	mi := &file_tes_tes_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInfo) ProtoMessage() {}

func (x *ServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInfo.ProtoReflect.Descriptor instead.
func (*ServiceInfo) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{20}
}

func (x *ServiceInfo) GetContactUrl() string {
	if x != nil {
		return x.ContactUrl
	}
	return ""
}

func (x *ServiceInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ServiceInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServiceInfo) GetDocumentationUrl() string {
	if x != nil {
		return x.DocumentationUrl
	}
	return ""
}

func (x *ServiceInfo) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *ServiceInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceInfo) GetOrganization() map[string]string {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *ServiceInfo) GetStorage() []string {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *ServiceInfo) GetTesResourcesBackendParameters() []string {
	if x != nil {
		return x.TesResourcesBackendParameters
	}
	return nil
}

func (x *ServiceInfo) GetType() *ServiceType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ServiceInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ServiceInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ServiceType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Artifact      string                 `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	Group         string                 `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceType) Reset() {
	*x = ServiceType{}
	mi := &file_tes_tes_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceType) ProtoMessage() {}

func (x *ServiceType) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceType.ProtoReflect.Descriptor instead.
func (*ServiceType) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{21}
}

func (x *ServiceType) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *ServiceType) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ServiceType) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Task struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreationTime  string                 `protobuf:"bytes,1,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Executors     []*Executor            `protobuf:"bytes,3,rep,name=executors,proto3" json:"executors,omitempty"`
	Id            string                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Inputs        []*Input               `protobuf:"bytes,5,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Logs          []*TaskLog             `protobuf:"bytes,6,rep,name=logs,proto3" json:"logs,omitempty"`
	Name          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Outputs       []*Output              `protobuf:"bytes,8,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Resources     *Resources             `protobuf:"bytes,9,opt,name=resources,proto3" json:"resources,omitempty"`
	State         State                  `protobuf:"varint,10,opt,name=state,proto3,enum=tes.State" json:"state,omitempty"`
	Tags          map[string]string      `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Volumes       []string               `protobuf:"bytes,12,rep,name=volumes,proto3" json:"volumes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_tes_tes_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{22}
}

func (x *Task) GetCreationTime() string {
	if x != nil {
		return x.CreationTime
	}
	return ""
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Task) GetExecutors() []*Executor {
	if x != nil {
		return x.Executors
	}
	return nil
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Task) GetLogs() []*TaskLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *Task) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Task) GetState() State {
	if x != nil {
		return x.State
	}
	return State_UNKNOWN
}

func (x *Task) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Task) GetVolumes() []string {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type TaskLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EndTime       string                 `protobuf:"bytes,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Logs          []*ExecutorLog         `protobuf:"bytes,2,rep,name=logs,proto3" json:"logs,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Outputs       []*OutputFileLog       `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	StartTime     string                 `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	SystemLogs    []string               `protobuf:"bytes,6,rep,name=system_logs,json=systemLogs,proto3" json:"system_logs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskLog) Reset() {
	*x = TaskLog{}
	mi := &file_tes_tes_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLog) ProtoMessage() {}

func (x *TaskLog) ProtoReflect() protoreflect.Message {
	mi := &file_tes_tes_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLog.ProtoReflect.Descriptor instead.
func (*TaskLog) Descriptor() ([]byte, []int) {
	return file_tes_tes_proto_rawDescGZIP(), []int{23}
}

func (x *TaskLog) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *TaskLog) GetLogs() []*ExecutorLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *TaskLog) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TaskLog) GetOutputs() []*OutputFileLog {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TaskLog) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *TaskLog) GetSystemLogs() []string {
	if x != nil {
		return x.SystemLogs
	}
	return nil
}

var File_tes_tes_proto protoreflect.FileDescriptor

const file_tes_tes_proto_rawDesc = "" +
	"\n" +
	"\rtes/tes.proto\x12\x03tes\x1a\x1cgoogle/api/annotations.proto\"#\n" +
	"\x11CancelTaskRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"\xa9\x02\n" +
	"\rExecutorBasic\x12\x18\n" +
	"\acommand\x18\x01 \x03(\tR\acommand\x12-\n" +
	"\x03env\x18\x02 \x03(\v2\x1b.tes.ExecutorBasic.EnvEntryR\x03env\x12!\n" +
	"\fignore_error\x18\x03 \x01(\bR\vignoreError\x12\x14\n" +
	"\x05image\x18\x04 \x01(\tR\x05image\x12\x16\n" +
	"\x06stderr\x18\x05 \x01(\tR\x06stderr\x12\x14\n" +
	"\x05stdin\x18\x06 \x01(\tR\x05stdin\x12\x16\n" +
	"\x06stdout\x18\a \x01(\tR\x06stdout\x12\x18\n" +
	"\aworkdir\x18\b \x01(\tR\aworkdir\x1a6\n" +
	"\bEnvEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x17\n" +
	"\x15GetServiceInfoRequest\"4\n" +
	"\x0eGetTaskRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04view\x18\x02 \x01(\tR\x04view\"\xc5\x01\n" +
	"\n" +
	"InputBasic\x12\x18\n" +
	"\acontent\x18\x01 \x01(\tR\acontent\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x12\n" +
	"\x04path\x18\x04 \x01(\tR\x04path\x12\x1e\n" +
	"\n" +
	"streamable\x18\x05 \x01(\bR\n" +
	"streamable\x12!\n" +
	"\x04type\x18\x06 \x01(\x0e2\r.tes.FileTypeR\x04type\x12\x10\n" +
	"\x03url\x18\a \x01(\tR\x03url\"\xdb\x01\n" +
	"\x10ListTasksRequest\x12\x1f\n" +
	"\vname_prefix\x18\x01 \x01(\tR\n" +
	"namePrefix\x12 \n" +
	"\x05state\x18\x02 \x01(\x0e2\n" +
	".tes.StateR\x05state\x12\x17\n" +
	"\atag_key\x18\x03 \x03(\tR\x06tagKey\x12\x1b\n" +
	"\ttag_value\x18\x04 \x03(\tR\btagValue\x12\x1b\n" +
	"\tpage_size\x18\x05 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x06 \x01(\tR\tpageToken\x12\x12\n" +
	"\x04view\x18\a \x01(\tR\x04view\"f\n" +
	"\x16ListTasksResponseBasic\x12&\n" +
	"\x0fnext_page_token\x18\x01 \x01(\tR\rnextPageToken\x12$\n" +
	"\x05tasks\x18\x02 \x03(\v2\x0e.tes.TaskBasicR\x05tasks\"b\n" +
	"\x14ListTasksResponseMin\x12&\n" +
	"\x0fnext_page_token\x18\x01 \x01(\tR\rnextPageToken\x12\"\n" +
	"\x05tasks\x18\x02 \x03(\v2\f.tes.TaskMinR\x05tasks\"\xf0\x03\n" +
	"\tTaskBasic\x12#\n" +
	"\rcreation_time\x18\x01 \x01(\tR\fcreationTime\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x120\n" +
	"\texecutors\x18\x03 \x03(\v2\x12.tes.ExecutorBasicR\texecutors\x12\x0e\n" +
	"\x02id\x18\x04 \x01(\tR\x02id\x12'\n" +
	"\x06inputs\x18\x05 \x03(\v2\x0f.tes.InputBasicR\x06inputs\x12%\n" +
	"\x04logs\x18\x06 \x03(\v2\x11.tes.TaskLogBasicR\x04logs\x12\x12\n" +
	"\x04name\x18\a \x01(\tR\x04name\x12%\n" +
	"\aoutputs\x18\b \x03(\v2\v.tes.OutputR\aoutputs\x12,\n" +
	"\tresources\x18\t \x01(\v2\x0e.tes.ResourcesR\tresources\x12 \n" +
	"\x05state\x18\n" +
	" \x01(\x0e2\n" +
	".tes.StateR\x05state\x12,\n" +
	"\x04tags\x18\v \x03(\v2\x18.tes.TaskBasic.TagsEntryR\x04tags\x12\x18\n" +
	"\avolumes\x18\f \x03(\tR\avolumes\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb7\x02\n" +
	"\fTaskLogBasic\x12\x19\n" +
	"\bend_time\x18\x01 \x01(\tR\aendTime\x12$\n" +
	"\x04logs\x18\x02 \x03(\v2\x10.tes.ExecutorLogR\x04logs\x12;\n" +
	"\bmetadata\x18\x03 \x03(\v2\x1f.tes.TaskLogBasic.MetadataEntryR\bmetadata\x12,\n" +
	"\aoutputs\x18\x04 \x03(\v2\x12.tes.OutputFileLogR\aoutputs\x12\x1d\n" +
	"\n" +
	"start_time\x18\x05 \x01(\tR\tstartTime\x12\x1f\n" +
	"\vsystem_logs\x18\x06 \x03(\tR\n" +
	"systemLogs\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xdd\x03\n" +
	"\aTaskMin\x12#\n" +
	"\rcreation_time\x18\x01 \x01(\tR\fcreationTime\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12+\n" +
	"\texecutors\x18\x03 \x03(\v2\r.tes.ExecutorR\texecutors\x12\x0e\n" +
	"\x02id\x18\x04 \x01(\tR\x02id\x12\"\n" +
	"\x06inputs\x18\x05 \x03(\v2\n" +
	".tes.InputR\x06inputs\x12 \n" +
	"\x04logs\x18\x06 \x03(\v2\f.tes.TaskLogR\x04logs\x12\x12\n" +
	"\x04name\x18\a \x01(\tR\x04name\x12%\n" +
	"\aoutputs\x18\b \x03(\v2\v.tes.OutputR\aoutputs\x12,\n" +
	"\tresources\x18\t \x01(\v2\x0e.tes.ResourcesR\tresources\x12 \n" +
	"\x05state\x18\n" +
	" \x01(\x0e2\n" +
	".tes.StateR\x05state\x12*\n" +
	"\x04tags\x18\v \x03(\v2\x16.tes.TaskMin.TagsEntryR\x04tags\x12\x18\n" +
	"\avolumes\x18\f \x03(\tR\avolumes\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x14\n" +
	"\x12CancelTaskResponse\"$\n" +
	"\x12CreateTaskResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"\x9f\x02\n" +
	"\bExecutor\x12\x18\n" +
	"\acommand\x18\x01 \x03(\tR\acommand\x12(\n" +
	"\x03env\x18\x02 \x03(\v2\x16.tes.Executor.EnvEntryR\x03env\x12!\n" +
	"\fignore_error\x18\x03 \x01(\bR\vignoreError\x12\x14\n" +
	"\x05image\x18\x04 \x01(\tR\x05image\x12\x16\n" +
	"\x06stderr\x18\x05 \x01(\tR\x06stderr\x12\x14\n" +
	"\x05stdin\x18\x06 \x01(\tR\x05stdin\x12\x16\n" +
	"\x06stdout\x18\a \x01(\tR\x06stdout\x12\x18\n" +
	"\aworkdir\x18\b \x01(\tR\aworkdir\x1a6\n" +
	"\bEnvEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x94\x01\n" +
	"\vExecutorLog\x12\x19\n" +
	"\bend_time\x18\x01 \x01(\tR\aendTime\x12\x1b\n" +
	"\texit_code\x18\x02 \x01(\x05R\bexitCode\x12\x1d\n" +
	"\n" +
	"start_time\x18\x03 \x01(\tR\tstartTime\x12\x16\n" +
	"\x06stderr\x18\x04 \x01(\tR\x06stderr\x12\x16\n" +
	"\x06stdout\x18\x05 \x01(\tR\x06stdout\"\xc0\x01\n" +
	"\x05Input\x12\x18\n" +
	"\acontent\x18\x01 \x01(\tR\acontent\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x12\n" +
	"\x04path\x18\x04 \x01(\tR\x04path\x12\x1e\n" +
	"\n" +
	"streamable\x18\x05 \x01(\bR\n" +
	"streamable\x12!\n" +
	"\x04type\x18\x06 \x01(\x0e2\r.tes.FileTypeR\x04type\x12\x10\n" +
	"\x03url\x18\a \x01(\tR\x03url\"\\\n" +
	"\x11ListTasksResponse\x12&\n" +
	"\x0fnext_page_token\x18\x01 \x01(\tR\rnextPageToken\x12\x1f\n" +
	"\x05tasks\x18\x02 \x03(\v2\t.tes.TaskR\x05tasks\"\xa8\x01\n" +
	"\x06Output\x12 \n" +
	"\vdescription\x18\x01 \x01(\tR\vdescription\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04path\x18\x03 \x01(\tR\x04path\x12\x1f\n" +
	"\vpath_prefix\x18\x04 \x01(\tR\n" +
	"pathPrefix\x12!\n" +
	"\x04type\x18\x05 \x01(\x0e2\r.tes.FileTypeR\x04type\x12\x10\n" +
	"\x03url\x18\x06 \x01(\tR\x03url\"T\n" +
	"\rOutputFileLog\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x1d\n" +
	"\n" +
	"size_bytes\x18\x02 \x01(\tR\tsizeBytes\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03url\"\xe8\x02\n" +
	"\tResources\x12T\n" +
	"\x12backend_parameters\x18\x01 \x03(\v2%.tes.Resources.BackendParametersEntryR\x11backendParameters\x12:\n" +
	"\x19backend_parameters_strict\x18\x02 \x01(\bR\x17backendParametersStrict\x12\x1b\n" +
	"\tcpu_cores\x18\x03 \x01(\x05R\bcpuCores\x12\x17\n" +
	"\adisk_gb\x18\x04 \x01(\x01R\x06diskGb\x12 \n" +
	"\vpreemptible\x18\x05 \x01(\bR\vpreemptible\x12\x15\n" +
	"\x06ram_gb\x18\x06 \x01(\x01R\x05ramGb\x12\x14\n" +
	"\x05zones\x18\a \x03(\tR\x05zones\x1aD\n" +
	"\x16BackendParametersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa8\x04\n" +
	"\vServiceInfo\x12\x1e\n" +
	"\n" +
	"contactUrl\x18\x01 \x01(\tR\n" +
	"contactUrl\x12\x1c\n" +
	"\tcreatedAt\x18\x02 \x01(\tR\tcreatedAt\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12*\n" +
	"\x10documentationUrl\x18\x04 \x01(\tR\x10documentationUrl\x12 \n" +
	"\venvironment\x18\x05 \x01(\tR\venvironment\x12\x0e\n" +
	"\x02id\x18\x06 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\a \x01(\tR\x04name\x12F\n" +
	"\forganization\x18\b \x03(\v2\".tes.ServiceInfo.OrganizationEntryR\forganization\x12\x18\n" +
	"\astorage\x18\t \x03(\tR\astorage\x12F\n" +
	"\x1ftesResources_backend_parameters\x18\n" +
	" \x03(\tR\x1dtesResourcesBackendParameters\x12$\n" +
	"\x04type\x18\v \x01(\v2\x10.tes.ServiceTypeR\x04type\x12\x1c\n" +
	"\tupdatedAt\x18\f \x01(\tR\tupdatedAt\x12\x18\n" +
	"\aversion\x18\r \x01(\tR\aversion\x1a?\n" +
	"\x11OrganizationEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"Y\n" +
	"\vServiceType\x12\x1a\n" +
	"\bartifact\x18\x01 \x01(\tR\bartifact\x12\x14\n" +
	"\x05group\x18\x02 \x01(\tR\x05group\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\"\xd7\x03\n" +
	"\x04Task\x12#\n" +
	"\rcreation_time\x18\x01 \x01(\tR\fcreationTime\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12+\n" +
	"\texecutors\x18\x03 \x03(\v2\r.tes.ExecutorR\texecutors\x12\x0e\n" +
	"\x02id\x18\x04 \x01(\tR\x02id\x12\"\n" +
	"\x06inputs\x18\x05 \x03(\v2\n" +
	".tes.InputR\x06inputs\x12 \n" +
	"\x04logs\x18\x06 \x03(\v2\f.tes.TaskLogR\x04logs\x12\x12\n" +
	"\x04name\x18\a \x01(\tR\x04name\x12%\n" +
	"\aoutputs\x18\b \x03(\v2\v.tes.OutputR\aoutputs\x12,\n" +
	"\tresources\x18\t \x01(\v2\x0e.tes.ResourcesR\tresources\x12 \n" +
	"\x05state\x18\n" +
	" \x01(\x0e2\n" +
	".tes.StateR\x05state\x12'\n" +
	"\x04tags\x18\v \x03(\v2\x13.tes.Task.TagsEntryR\x04tags\x12\x18\n" +
	"\avolumes\x18\f \x03(\tR\avolumes\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xad\x02\n" +
	"\aTaskLog\x12\x19\n" +
	"\bend_time\x18\x01 \x01(\tR\aendTime\x12$\n" +
	"\x04logs\x18\x02 \x03(\v2\x10.tes.ExecutorLogR\x04logs\x126\n" +
	"\bmetadata\x18\x03 \x03(\v2\x1a.tes.TaskLog.MetadataEntryR\bmetadata\x12,\n" +
	"\aoutputs\x18\x04 \x03(\v2\x12.tes.OutputFileLogR\aoutputs\x12\x1d\n" +
	"\n" +
	"start_time\x18\x05 \x01(\tR\tstartTime\x12\x1f\n" +
	"\vsystem_logs\x18\x06 \x03(\tR\n" +
	"systemLogs\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01*#\n" +
	"\bFileType\x12\b\n" +
	"\x04FILE\x10\x00\x12\r\n" +
	"\tDIRECTORY\x10\x01*\xab\x01\n" +
	"\x05State\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\n" +
	"\n" +
	"\x06QUEUED\x10\x01\x12\x10\n" +
	"\fINITIALIZING\x10\x02\x12\v\n" +
	"\aRUNNING\x10\x03\x12\n" +
	"\n" +
	"\x06PAUSED\x10\x04\x12\f\n" +
	"\bCOMPLETE\x10\x05\x12\x12\n" +
	"\x0eEXECUTOR_ERROR\x10\x06\x12\x10\n" +
	"\fSYSTEM_ERROR\x10\a\x12\f\n" +
	"\bCANCELED\x10\b\x12\r\n" +
	"\tPREEMPTED\x10\t\x12\r\n" +
	"\tCANCELING\x10\n" +
	"*(\n" +
	"\x04view\x12\v\n" +
	"\aMINIMAL\x10\x00\x12\t\n" +
	"\x05BASIC\x10\x01\x12\b\n" +
	"\x04FULL\x10\x022\x85\x05\n" +
	"\vTaskService\x12\x87\x01\n" +
	"\x0eGetServiceInfo\x12\x1a.tes.GetServiceInfoRequest\x1a\x10.tes.ServiceInfo\"G\x82\xd3\xe4\x93\x02AZ\x12\x12\x10/v1/service-infoZ\x1c\x12\x1a/ga4gh/tes/v1/service-info\x12\r/service-info\x12n\n" +
	"\tListTasks\x12\x15.tes.ListTasksRequest\x1a\x16.tes.ListTasksResponse\"2\x82\xd3\xe4\x93\x02,Z\v\x12\t/v1/tasksZ\x15\x12\x13/ga4gh/tes/v1/tasks\x12\x06/tasks\x12m\n" +
	"\n" +
	"CreateTask\x12\t.tes.Task\x1a\x17.tes.CreateTaskResponse\";\x82\xd3\xe4\x93\x025:\x01*Z\x0e:\x01*\"\t/v1/tasksZ\x18:\x01*\"\x13/ga4gh/tes/v1/tasks\"\x06/tasks\x12l\n" +
	"\aGetTask\x12\x13.tes.GetTaskRequest\x1a\t.tes.Task\"A\x82\xd3\xe4\x93\x02;Z\x10\x12\x0e/v1/tasks/{id}Z\x1a\x12\x18/ga4gh/tes/v1/tasks/{id}\x12\v/tasks/{id}\x12\x9e\x01\n" +
	"\n" +
	"CancelTask\x12\x16.tes.CancelTaskRequest\x1a\x17.tes.CancelTaskResponse\"_\x82\xd3\xe4\x93\x02Y:\x01*Z\x1a:\x01*\"\x15/v1/tasks/{id}:cancelZ$:\x01*\"\x1f/ga4gh/tes/v1/tasks/{id}:cancel\"\x12/tasks/{id}:cancelB%Z#github.com/ohsu-comp-bio/funnel/tesb\x06proto3"

var (
	file_tes_tes_proto_rawDescOnce sync.Once
	file_tes_tes_proto_rawDescData []byte
)

func file_tes_tes_proto_rawDescGZIP() []byte {
	file_tes_tes_proto_rawDescOnce.Do(func() {
		file_tes_tes_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tes_tes_proto_rawDesc), len(file_tes_tes_proto_rawDesc)))
	})
	return file_tes_tes_proto_rawDescData
}

var file_tes_tes_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_tes_tes_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_tes_tes_proto_goTypes = []any{
	(FileType)(0),                  // 0: tes.FileType
	(State)(0),                     // 1: tes.State
	(View)(0),                      // 2: tes.view
	(*CancelTaskRequest)(nil),      // 3: tes.CancelTaskRequest
	(*ExecutorBasic)(nil),          // 4: tes.ExecutorBasic
	(*GetServiceInfoRequest)(nil),  // 5: tes.GetServiceInfoRequest
	(*GetTaskRequest)(nil),         // 6: tes.GetTaskRequest
	(*InputBasic)(nil),             // 7: tes.InputBasic
	(*ListTasksRequest)(nil),       // 8: tes.ListTasksRequest
	(*ListTasksResponseBasic)(nil), // 9: tes.ListTasksResponseBasic
	(*ListTasksResponseMin)(nil),   // 10: tes.ListTasksResponseMin
	(*TaskBasic)(nil),              // 11: tes.TaskBasic
	(*TaskLogBasic)(nil),           // 12: tes.TaskLogBasic
	(*TaskMin)(nil),                // 13: tes.TaskMin
	(*CancelTaskResponse)(nil),     // 14: tes.CancelTaskResponse
	(*CreateTaskResponse)(nil),     // 15: tes.CreateTaskResponse
	(*Executor)(nil),               // 16: tes.Executor
	(*ExecutorLog)(nil),            // 17: tes.ExecutorLog
	(*Input)(nil),                  // 18: tes.Input
	(*ListTasksResponse)(nil),      // 19: tes.ListTasksResponse
	(*Output)(nil),                 // 20: tes.Output
	(*OutputFileLog)(nil),          // 21: tes.OutputFileLog
	(*Resources)(nil),              // 22: tes.Resources
	(*ServiceInfo)(nil),            // 23: tes.ServiceInfo
	(*ServiceType)(nil),            // 24: tes.ServiceType
	(*Task)(nil),                   // 25: tes.Task
	(*TaskLog)(nil),                // 26: tes.TaskLog
	nil,                            // 27: tes.ExecutorBasic.EnvEntry
	nil,                            // 28: tes.TaskBasic.TagsEntry
	nil,                            // 29: tes.TaskLogBasic.MetadataEntry
	nil,                            // 30: tes.TaskMin.TagsEntry
	nil,                            // 31: tes.Executor.EnvEntry
	nil,                            // 32: tes.Resources.BackendParametersEntry
	nil,                            // 33: tes.ServiceInfo.OrganizationEntry
	nil,                            // 34: tes.Task.TagsEntry
	nil,                            // 35: tes.TaskLog.MetadataEntry
}
var file_tes_tes_proto_depIdxs = []int32{
	27, // 0: tes.ExecutorBasic.env:type_name -> tes.ExecutorBasic.EnvEntry
	0,  // 1: tes.InputBasic.type:type_name -> tes.FileType
	1,  // 2: tes.ListTasksRequest.state:type_name -> tes.State
	11, // 3: tes.ListTasksResponseBasic.tasks:type_name -> tes.TaskBasic
	13, // 4: tes.ListTasksResponseMin.tasks:type_name -> tes.TaskMin
	4,  // 5: tes.TaskBasic.executors:type_name -> tes.ExecutorBasic
	7,  // 6: tes.TaskBasic.inputs:type_name -> tes.InputBasic
	12, // 7: tes.TaskBasic.logs:type_name -> tes.TaskLogBasic
	20, // 8: tes.TaskBasic.outputs:type_name -> tes.Output
	22, // 9: tes.TaskBasic.resources:type_name -> tes.Resources
	1,  // 10: tes.TaskBasic.state:type_name -> tes.State
	28, // 11: tes.TaskBasic.tags:type_name -> tes.TaskBasic.TagsEntry
	17, // 12: tes.TaskLogBasic.logs:type_name -> tes.ExecutorLog
	29, // 13: tes.TaskLogBasic.metadata:type_name -> tes.TaskLogBasic.MetadataEntry
	21, // 14: tes.TaskLogBasic.outputs:type_name -> tes.OutputFileLog
	16, // 15: tes.TaskMin.executors:type_name -> tes.Executor
	18, // 16: tes.TaskMin.inputs:type_name -> tes.Input
	26, // 17: tes.TaskMin.logs:type_name -> tes.TaskLog
	20, // 18: tes.TaskMin.outputs:type_name -> tes.Output
	22, // 19: tes.TaskMin.resources:type_name -> tes.Resources
	1,  // 20: tes.TaskMin.state:type_name -> tes.State
	30, // 21: tes.TaskMin.tags:type_name -> tes.TaskMin.TagsEntry
	31, // 22: tes.Executor.env:type_name -> tes.Executor.EnvEntry
	0,  // 23: tes.Input.type:type_name -> tes.FileType
	25, // 24: tes.ListTasksResponse.tasks:type_name -> tes.Task
	0,  // 25: tes.Output.type:type_name -> tes.FileType
	32, // 26: tes.Resources.backend_parameters:type_name -> tes.Resources.BackendParametersEntry
	33, // 27: tes.ServiceInfo.organization:type_name -> tes.ServiceInfo.OrganizationEntry
	24, // 28: tes.ServiceInfo.type:type_name -> tes.ServiceType
	16, // 29: tes.Task.executors:type_name -> tes.Executor
	18, // 30: tes.Task.inputs:type_name -> tes.Input
	26, // 31: tes.Task.logs:type_name -> tes.TaskLog
	20, // 32: tes.Task.outputs:type_name -> tes.Output
	22, // 33: tes.Task.resources:type_name -> tes.Resources
	1,  // 34: tes.Task.state:type_name -> tes.State
	34, // 35: tes.Task.tags:type_name -> tes.Task.TagsEntry
	17, // 36: tes.TaskLog.logs:type_name -> tes.ExecutorLog
	35, // 37: tes.TaskLog.metadata:type_name -> tes.TaskLog.MetadataEntry
	21, // 38: tes.TaskLog.outputs:type_name -> tes.OutputFileLog
	5,  // 39: tes.TaskService.GetServiceInfo:input_type -> tes.GetServiceInfoRequest
	8,  // 40: tes.TaskService.ListTasks:input_type -> tes.ListTasksRequest
	25, // 41: tes.TaskService.CreateTask:input_type -> tes.Task
	6,  // 42: tes.TaskService.GetTask:input_type -> tes.GetTaskRequest
	3,  // 43: tes.TaskService.CancelTask:input_type -> tes.CancelTaskRequest
	23, // 44: tes.TaskService.GetServiceInfo:output_type -> tes.ServiceInfo
	19, // 45: tes.TaskService.ListTasks:output_type -> tes.ListTasksResponse
	15, // 46: tes.TaskService.CreateTask:output_type -> tes.CreateTaskResponse
	25, // 47: tes.TaskService.GetTask:output_type -> tes.Task
	14, // 48: tes.TaskService.CancelTask:output_type -> tes.CancelTaskResponse
	44, // [44:49] is the sub-list for method output_type
	39, // [39:44] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_tes_tes_proto_init() }
func file_tes_tes_proto_init() {
	if File_tes_tes_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tes_tes_proto_rawDesc), len(file_tes_tes_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tes_tes_proto_goTypes,
		DependencyIndexes: file_tes_tes_proto_depIdxs,
		EnumInfos:         file_tes_tes_proto_enumTypes,
		MessageInfos:      file_tes_tes_proto_msgTypes,
	}.Build()
	File_tes_tes_proto = out.File
	file_tes_tes_proto_goTypes = nil
	file_tes_tes_proto_depIdxs = nil
}
