// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scheduler.proto

/*
Package scheduler is a generated protocol buffer package.

It is generated from these files:
	scheduler.proto

It has these top-level messages:
	Resources
	Node
	ListNodesRequest
	ListNodesResponse
	UpdateNodeResponse
	GetNodeRequest
*/
package scheduler

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeState int32

const (
	NodeState_UNINITIALIZED NodeState = 0
	NodeState_ALIVE         NodeState = 1
	NodeState_DEAD          NodeState = 2
	NodeState_GONE          NodeState = 3
	NodeState_INITIALIZING  NodeState = 4
)

var NodeState_name = map[int32]string{
	0: "UNINITIALIZED",
	1: "ALIVE",
	2: "DEAD",
	3: "GONE",
	4: "INITIALIZING",
}
var NodeState_value = map[string]int32{
	"UNINITIALIZED": 0,
	"ALIVE":         1,
	"DEAD":          2,
	"GONE":          3,
	"INITIALIZING":  4,
}

func (x NodeState) String() string {
	return proto.EnumName(NodeState_name, int32(x))
}
func (NodeState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Resources struct {
	Cpus uint32 `protobuf:"varint,1,opt,name=cpus" json:"cpus,omitempty"`
	// In GB
	RamGb float64 `protobuf:"fixed64,2,opt,name=ram_gb,json=ramGb" json:"ram_gb,omitempty"`
	// In GB
	DiskGb float64 `protobuf:"fixed64,3,opt,name=disk_gb,json=diskGb" json:"disk_gb,omitempty"`
}

func (m *Resources) Reset()                    { *m = Resources{} }
func (m *Resources) String() string            { return proto.CompactTextString(m) }
func (*Resources) ProtoMessage()               {}
func (*Resources) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Resources) GetCpus() uint32 {
	if m != nil {
		return m.Cpus
	}
	return 0
}

func (m *Resources) GetRamGb() float64 {
	if m != nil {
		return m.RamGb
	}
	return 0
}

func (m *Resources) GetDiskGb() float64 {
	if m != nil {
		return m.DiskGb
	}
	return 0
}

type Node struct {
	Id          string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Resources   *Resources `protobuf:"bytes,5,opt,name=resources" json:"resources,omitempty"`
	Available   *Resources `protobuf:"bytes,6,opt,name=available" json:"available,omitempty"`
	LastPing    int64      `protobuf:"varint,7,opt,name=last_ping,json=lastPing" json:"last_ping,omitempty"`
	State       NodeState  `protobuf:"varint,8,opt,name=state,enum=scheduler.NodeState" json:"state,omitempty"`
	Preemptible bool       `protobuf:"varint,9,opt,name=preemptible" json:"preemptible,omitempty"`
	// TODO where does this get updated?
	ActivePorts []int32 `protobuf:"varint,10,rep,packed,name=active_ports,json=activePorts" json:"active_ports,omitempty"`
	Zone        string  `protobuf:"bytes,11,opt,name=zone" json:"zone,omitempty"`
	// Hostname of the worker host.
	// TODO where does this get updated?
	Hostname string `protobuf:"bytes,13,opt,name=hostname" json:"hostname,omitempty"`
	// Version of the record in the database. Used to prevent write conflicts.
	Version  int64             `protobuf:"varint,14,opt,name=version" json:"version,omitempty"`
	Metadata map[string]string `protobuf:"bytes,15,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TaskIds  []string          `protobuf:"bytes,16,rep,name=task_ids,json=taskIds" json:"task_ids,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Node) GetAvailable() *Resources {
	if m != nil {
		return m.Available
	}
	return nil
}

func (m *Node) GetLastPing() int64 {
	if m != nil {
		return m.LastPing
	}
	return 0
}

func (m *Node) GetState() NodeState {
	if m != nil {
		return m.State
	}
	return NodeState_UNINITIALIZED
}

func (m *Node) GetPreemptible() bool {
	if m != nil {
		return m.Preemptible
	}
	return false
}

func (m *Node) GetActivePorts() []int32 {
	if m != nil {
		return m.ActivePorts
	}
	return nil
}

func (m *Node) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *Node) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Node) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Node) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Node) GetTaskIds() []string {
	if m != nil {
		return m.TaskIds
	}
	return nil
}

type ListNodesRequest struct {
}

func (m *ListNodesRequest) Reset()                    { *m = ListNodesRequest{} }
func (m *ListNodesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListNodesRequest) ProtoMessage()               {}
func (*ListNodesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ListNodesResponse struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *ListNodesResponse) Reset()                    { *m = ListNodesResponse{} }
func (m *ListNodesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListNodesResponse) ProtoMessage()               {}
func (*ListNodesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListNodesResponse) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type UpdateNodeResponse struct {
}

func (m *UpdateNodeResponse) Reset()                    { *m = UpdateNodeResponse{} }
func (m *UpdateNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateNodeResponse) ProtoMessage()               {}
func (*UpdateNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type GetNodeRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetNodeRequest) Reset()                    { *m = GetNodeRequest{} }
func (m *GetNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNodeRequest) ProtoMessage()               {}
func (*GetNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetNodeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Resources)(nil), "scheduler.Resources")
	proto.RegisterType((*Node)(nil), "scheduler.Node")
	proto.RegisterType((*ListNodesRequest)(nil), "scheduler.ListNodesRequest")
	proto.RegisterType((*ListNodesResponse)(nil), "scheduler.ListNodesResponse")
	proto.RegisterType((*UpdateNodeResponse)(nil), "scheduler.UpdateNodeResponse")
	proto.RegisterType((*GetNodeRequest)(nil), "scheduler.GetNodeRequest")
	proto.RegisterEnum("scheduler.NodeState", NodeState_name, NodeState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SchedulerService service

type SchedulerServiceClient interface {
	UpdateNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*UpdateNodeResponse, error)
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*Node, error)
}

type schedulerServiceClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerServiceClient(cc *grpc.ClientConn) SchedulerServiceClient {
	return &schedulerServiceClient{cc}
}

func (c *schedulerServiceClient) UpdateNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*UpdateNodeResponse, error) {
	out := new(UpdateNodeResponse)
	err := grpc.Invoke(ctx, "/scheduler.SchedulerService/UpdateNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	out := new(ListNodesResponse)
	err := grpc.Invoke(ctx, "/scheduler.SchedulerService/ListNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/scheduler.SchedulerService/GetNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SchedulerService service

type SchedulerServiceServer interface {
	UpdateNode(context.Context, *Node) (*UpdateNodeResponse, error)
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	GetNode(context.Context, *GetNodeRequest) (*Node, error)
}

func RegisterSchedulerServiceServer(s *grpc.Server, srv SchedulerServiceServer) {
	s.RegisterService(&_SchedulerService_serviceDesc, srv)
}

func _SchedulerService_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.SchedulerService/UpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).UpdateNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.SchedulerService/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.SchedulerService/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchedulerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.SchedulerService",
	HandlerType: (*SchedulerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateNode",
			Handler:    _SchedulerService_UpdateNode_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _SchedulerService_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _SchedulerService_GetNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheduler.proto",
}

func init() { proto.RegisterFile("scheduler.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 630 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0xe3, 0x7c, 0x79, 0xd2, 0xa4, 0xee, 0x28, 0xc0, 0x36, 0x2d, 0x92, 0x89, 0x84, 0x64,
	0xf5, 0xd0, 0x88, 0x70, 0x81, 0x22, 0x21, 0x55, 0x6a, 0x14, 0x45, 0x2a, 0x69, 0xb5, 0xa1, 0x1c,
	0xb8, 0x84, 0x4d, 0xbc, 0xa4, 0xab, 0x3a, 0xb6, 0xf1, 0x6e, 0x22, 0x15, 0xc4, 0x85, 0x1b, 0x67,
	0x7e, 0x1a, 0x7f, 0x81, 0x0b, 0xff, 0x02, 0xed, 0x26, 0x75, 0x53, 0xab, 0xe2, 0x36, 0xf3, 0xe6,
	0xcd, 0xcc, 0xf3, 0x9b, 0x95, 0x61, 0x47, 0x4e, 0xaf, 0x78, 0xb0, 0x08, 0x79, 0x7a, 0x94, 0xa4,
	0xb1, 0x8a, 0xd1, 0xc9, 0x80, 0xd6, 0xc1, 0x2c, 0x8e, 0x67, 0x21, 0xef, 0xb0, 0x44, 0x74, 0x58,
	0x14, 0xc5, 0x8a, 0x29, 0x11, 0x47, 0x72, 0x45, 0x6c, 0x9f, 0x83, 0x43, 0xb9, 0x8c, 0x17, 0xe9,
	0x94, 0x4b, 0x44, 0x28, 0x4e, 0x93, 0x85, 0x24, 0x96, 0x67, 0xf9, 0x75, 0x6a, 0x62, 0x7c, 0x04,
	0xe5, 0x94, 0xcd, 0xc7, 0xb3, 0x09, 0x29, 0x78, 0x96, 0x6f, 0xd1, 0x52, 0xca, 0xe6, 0xfd, 0x09,
	0x3e, 0x81, 0x4a, 0x20, 0xe4, 0xb5, 0xc6, 0x6d, 0x83, 0x97, 0x75, 0xda, 0x9f, 0xb4, 0xff, 0xda,
	0x50, 0x1c, 0xc6, 0x01, 0xc7, 0x06, 0x14, 0x44, 0x60, 0x46, 0x39, 0xb4, 0x20, 0x02, 0xec, 0x82,
	0x93, 0xde, 0x6e, 0x22, 0x25, 0xcf, 0xf2, 0x6b, 0xdd, 0xe6, 0xd1, 0x9d, 0xee, 0x4c, 0x05, 0xbd,
	0xa3, 0xe9, 0x1e, 0xb6, 0x64, 0x22, 0x64, 0x93, 0x90, 0x93, 0xf2, 0xff, 0x7a, 0x32, 0x1a, 0xee,
	0x83, 0x13, 0x32, 0xa9, 0xc6, 0x89, 0x88, 0x66, 0xa4, 0xe2, 0x59, 0xbe, 0x4d, 0xab, 0x1a, 0xb8,
	0x10, 0xd1, 0x0c, 0x0f, 0xa1, 0x24, 0x15, 0x53, 0x9c, 0x54, 0x3d, 0xcb, 0x6f, 0xdc, 0x1b, 0xa6,
	0x45, 0x8f, 0x74, 0x8d, 0xae, 0x28, 0xe8, 0x41, 0x2d, 0x49, 0x39, 0x9f, 0x27, 0x4a, 0xe8, 0xf5,
	0x8e, 0x67, 0xf9, 0x55, 0xba, 0x09, 0xe1, 0x33, 0xd8, 0x66, 0x53, 0x25, 0x96, 0x7c, 0x9c, 0xc4,
	0xa9, 0x92, 0x04, 0x3c, 0xdb, 0x2f, 0xd1, 0xda, 0x0a, 0xbb, 0xd0, 0x90, 0xb6, 0xf4, 0x6b, 0x1c,
	0x71, 0x52, 0x33, 0x3e, 0x98, 0x18, 0x5b, 0x50, 0xbd, 0x8a, 0xa5, 0x8a, 0xd8, 0x9c, 0x93, 0xba,
	0xc1, 0xb3, 0x1c, 0x09, 0x54, 0x96, 0x3c, 0x95, 0x22, 0x8e, 0x48, 0xc3, 0x68, 0xbf, 0x4d, 0xf1,
	0x35, 0x54, 0xe7, 0x5c, 0xb1, 0x80, 0x29, 0x46, 0x76, 0x3c, 0xdb, 0xaf, 0x75, 0x9f, 0xe6, 0xd4,
	0x1f, 0xbd, 0x5b, 0xd7, 0x7b, 0x91, 0x4a, 0x6f, 0x68, 0x46, 0xc7, 0x3d, 0xa8, 0x2a, 0x26, 0xaf,
	0xc7, 0x22, 0x90, 0xc4, 0xf5, 0x6c, 0xdf, 0xa1, 0x15, 0x9d, 0x0f, 0x02, 0xd9, 0x7a, 0x03, 0xf5,
	0x7b, 0x5d, 0xe8, 0x82, 0x7d, 0xcd, 0x6f, 0xd6, 0x77, 0xd3, 0x21, 0x36, 0xa1, 0xb4, 0x64, 0xe1,
	0x82, 0x9b, 0x07, 0xe0, 0xd0, 0x55, 0x72, 0x5c, 0x78, 0x65, 0xb5, 0x11, 0xdc, 0x33, 0x21, 0x95,
	0xde, 0x2d, 0x29, 0xff, 0xb2, 0xe0, 0x52, 0xb5, 0x8f, 0x61, 0x77, 0x03, 0x93, 0x49, 0x1c, 0x49,
	0x8e, 0xcf, 0xa1, 0x14, 0x69, 0x80, 0x58, 0x46, 0xf8, 0x4e, 0x4e, 0x38, 0x5d, 0x55, 0xdb, 0x4d,
	0xc0, 0xcb, 0x24, 0x60, 0x8a, 0x1b, 0x70, 0xdd, 0xdc, 0xf6, 0xa0, 0xd1, 0xe7, 0x6a, 0x05, 0x99,
	0x1d, 0xf9, 0xa7, 0x75, 0x78, 0x0e, 0x4e, 0x76, 0x3d, 0xdc, 0x85, 0xfa, 0xe5, 0x70, 0x30, 0x1c,
	0xbc, 0x1f, 0x9c, 0x9c, 0x0d, 0x3e, 0xf6, 0x4e, 0xdd, 0x2d, 0x74, 0xa0, 0x74, 0x72, 0x36, 0xf8,
	0xd0, 0x73, 0x2d, 0xac, 0x42, 0xf1, 0xb4, 0x77, 0x72, 0xea, 0x16, 0x74, 0xd4, 0x3f, 0x1f, 0xf6,
	0x5c, 0x1b, 0x5d, 0xd8, 0xce, 0xf8, 0x83, 0x61, 0xdf, 0x2d, 0x76, 0x7f, 0x16, 0xc0, 0x1d, 0xdd,
	0x4a, 0x1c, 0xf1, 0x74, 0x29, 0xa6, 0x1c, 0xdf, 0x02, 0xdc, 0xa9, 0xc3, 0xfc, 0x37, 0xb4, 0x36,
	0xaf, 0xf1, 0xc0, 0x57, 0x6c, 0xe1, 0x27, 0x70, 0x32, 0x67, 0x70, 0x7f, 0x83, 0x9d, 0xf7, 0xb0,
	0x75, 0xf0, 0x70, 0x71, 0x3d, 0x89, 0xfc, 0xf8, 0xfd, 0xe7, 0x57, 0x01, 0xd1, 0xed, 0x2c, 0x5f,
	0x74, 0x3e, 0x2f, 0xa2, 0x88, 0x87, 0x1d, 0xe3, 0x1f, 0x8e, 0xa0, 0xb2, 0x76, 0x0a, 0xf7, 0x36,
	0x46, 0xdc, 0x77, 0xaf, 0x95, 0x57, 0xde, 0x3e, 0x30, 0x03, 0x1f, 0x63, 0x33, 0x37, 0xb0, 0xf3,
	0x4d, 0x04, 0xdf, 0x27, 0x65, 0xf3, 0xa3, 0x78, 0xf9, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x21, 0x42,
	0x4c, 0xcb, 0x64, 0x04, 0x00, 0x00,
}
