// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdf\x53\x1b\x39\xf2\x7f\x9f\xbf\xa2\xbf\x90\xad\x4a\xaa\x6c\x03\x9b\xda\x6f\xdd\xba\x8a\x07\x30\x6c\xc2\x85\x10\x0e\x3b\x97\xbb\x27\x4a\x33\xea\xf1\x68\x99\x91\x66\x25\x8d\x1d\x2f\x97\xff\xfd\xaa\x5b\xd2\xd8\x10\x13\xb8\x5b\xb2\x75\x7e\xb2\xa5\xd6\xa7\x5b\xdd\xad\xfe\xe5\x5d\x98\x55\x08\x5a\x34\x08\xa6\x04\x5f\x21\x88\xc2\xab\x05\x82\x43\xbb\x40\x0b\x52\x78\x91\x0b\x87\x90\x8b\xe2\x06\xb5\xcc\x76\xe1\x68\x21\x54\x2d\xf2\xba\x5f\x73\x63\xc8\x4d\xed\x65\x3e\x00\xb9\xd2\xa2\x31\xf4\x0d\x6b\xe1\xbc\x2a\x06\xd0\x18\x3d\x37\x32\xcf\x4e\x22\x52\x22\xce\xb2\x07\x79\x17\xa6\x69\x3b\xff\x18\xcf\xda\x14\xa2\x1e\x40\xe5\x0b\xa3\xa5\xb1\x03\x70\x75\x67\x9b\x01\xb4\xb9\x1b\xc0\xdc\x2a\x89\x7a\xae\x34\x0e\xa0\x11\xba\x23\x4a\xb1\x74\xc3\x5c\xf8\xa2\xca\x26\x81\x41\xc4\xf8\x86\x24\xb8\x40\xed\x61\x69\x95\x47\x9b\x58\xbf\x74\xaf\x46\x0f\x8a\x34\x1f\x3c\x41\x17\x03\xb8\x11\xe5\x8d\xc8\x4e\x09\xfd\x13\x83\xbb\x31\x64\x00\xc3\xa4\x1b\xfa\x5a\x9b\x79\x96\x9d\x9b\xf9\x1c\xed\x38\x03\xd8\x05\xfa\xae\xf4\x1c\x6a\x5c\x60\xed\xc6\x20\x31\xef\xe6\x03\x50\xba\x34\x03\x40\x6b\x8d\xcd\x00\xce\x69\x73\xcc\x8b\x7c\x88\xe1\x09\xcb\x81\x37\xe0\x2b\xe5\xa0\x15\xbe\x1a\xc1\x59\x09\xd8\xb4\x7e\x35\x08\x9b\xc2\x22\xdf\xd3\xa3\x26\x42\xe7\x25\x5a\x3b\xca\x00\x3e\x74\xbe\xed\xfc\x2f\xaa\xc6\x31\xec\xec\x64\xd9\x94\x1d\x23\x48\xf4\xd6\x38\xbf\xa9\xb5\x5f\x3a\xad\xb1\x8e\xbe\x43\x87\x89\xe0\x42\x34\x49\xd3\x95\x71\x3e\xe3\x93\x97\xc6\x7a\xe8\x1c\x4a\x28\x8d\x85\xb7\xb3\xd9\x25\x59\xbd\xe9\xb4\x2a\x84\x57\x46\x83\xd0\x92\x21\x97\x98\x83\x14\xae\xca\x8d\xb0\x92\x21\x67\xb3\x4b\x3a\x3d\x86\xbf\xec\xef\xef\x6f\x43\xbb\xba\x9c\xdc\x05\xa3\x63\x57\x97\x93\x70\xea\xe7\xfd\x9f\xe3\xa9\x2b\xfc\xad\x53\x96\xec\xe7\x54\x01\xa2\xf3\x15\x6a\x9f\xf8\x13\x10\xf1\x8f\xef\xe0\xe8\xf2\xcc\x41\xe7\x48\xfd\x02\x5a\xe1\xdc\xd2\x04\x71\x76\x49\x91\xc4\x9a\xfc\xec\x06\xc1\x75\x16\x49\x81\xad\x35\x2d\xda\x7a\x05\x16\x9d\xb7\xaa\xf0\x20\x8a\x02\x5d\xb4\x02\xf9\xb8\x2e\xd5\x1c\x4a\x55\x23\xa3\xbc\xc4\xd1\x7c\x04\x45\xd5\x18\x09\xff\xbf\xbf\x0f\x25\xab\x72\x14\xc8\x46\xab\xa6\x7e\x15\x6e\x1a\x59\x8f\x41\xe4\xc5\xc1\x8f\xaf\xc3\x4d\xce\x74\x51\x77\x12\x41\xc0\xce\x44\x14\x15\x0e\x27\x46\x7b\x6b\xea\x31\x68\x33\x74\xde\x58\xdc\x09\x3a\xae\x50\x48\xb4\xa0\x34\xbc\x41\xbf\x77\xae\x9c\x27\xf9\x5a\xa3\x1d\x3a\x46\x62\xc9\x83\xd7\x17\xa2\xa8\xe8\xbe\xf9\x0a\x94\xf6\x68\x1b\x94\x4a\xd8\x15\x6b\x44\x15\xe8\xe8\xf6\x27\xca\xd1\x13\x20\x6c\x66\x3c\x06\x6f\x3b\x8c\xea\x25\x33\xd4\x8a\xa1\x8c\xd6\x58\xb0\x5e\xbd\x6a\xd0\x74\x3e\xaa\x4e\x83\x16\xda\x38\xa4\x27\xec\xa2\x99\x26\x7c\x66\x16\xe8\xc6\xa4\x8c\xf4\x81\x5d\x78\xbd\x0f\x91\x3a\x4b\xcf\xd6\x15\x15\xca\xae\xa6\x6b\xb9\xb5\x13\x90\x8e\xdf\xf3\xc3\xbf\x1f\x4e\x46\x90\x4d\xd3\x91\xe4\xc6\x4b\x30\x65\xf4\x7c\xdb\x69\x10\x9b\xa0\x1e\x6d\xef\x45\xdb\x44\x4e\x60\x57\x82\x22\xca\xc1\xa6\xb4\x07\x51\xd8\x9e\x4b\x23\xf4\x0a\xbc\x70\x37\xec\x07\x89\x09\xd9\xc3\x68\xbc\xcb\x2a\xc1\x4e\xaa\x4e\xdf\x10\x6e\x0f\x52\x1b\x3d\xa7\xe3\x4b\xa1\x3c\xe4\xe8\x97\x88\x1a\xba\x56\x0a\x8f\x0e\x72\x2c\x8d\x45\x68\x84\xbd\x09\xce\xaa\x8d\x44\x90\x28\xe4\x43\xf2\x5f\x18\x89\x97\x4a\xcf\x1f\xd0\xf8\x01\x34\x4a\x77\x1e\xb7\xb3\x27\x55\x47\x1e\x1c\x35\x84\xf5\x83\xfb\x32\x90\x29\x9e\x24\xc5\x99\x56\x6b\xbb\xbf\xde\xbf\x23\xc6\x4f\x51\x0c\x97\x65\x44\x3a\x4e\x4f\x2f\xc6\xb0\x28\xc3\xd9\x09\x2c\x55\x5d\x43\x8e\xf4\x9e\x4d\x23\xe8\x3d\xd7\xf5\x0a\xe6\xa8\x49\xb7\xc8\xfc\xcf\x4e\x42\x28\x8b\x10\xbd\x7c\x95\x20\xfd\xa1\x06\x25\x6b\xe4\xab\xd1\x5d\x91\x9c\x49\x68\x26\x8b\xde\x3b\x00\xe5\x03\x23\x57\x75\x1e\xa4\x59\x46\xef\x18\x1e\x40\x83\x42\x3b\x22\xb6\x48\x0e\xa9\x4d\xef\xf2\xb0\x9f\x36\xc3\x02\xa8\x86\xdf\x94\xc7\x7a\x05\xa2\xf4\x18\xbc\xb6\x54\xd6\x79\x76\x12\xc2\xec\xf5\x31\x3c\x08\x02\x1f\xb1\xaa\x02\xf7\xbb\x77\xf4\x76\x45\x46\x90\xe8\xb1\xf0\xb0\xac\x04\x3f\x6e\xd3\xd9\x02\x43\x7c\x17\x7d\xca\xf2\x06\x94\x1f\x01\x03\x9e\x60\xa9\x34\xd9\xe9\xaa\x27\x56\xe1\xb6\xcc\x28\x44\xa0\x2e\x38\x26\x98\x05\x5a\x4a\xad\x2e\xa4\x92\x1c\x2b\xb1\x50\x86\x63\x7d\x7f\x9c\x6c\x43\xc0\x93\xcb\x8f\x6e\xcd\x73\x94\x56\xdb\xce\x8d\x81\x43\x30\x47\x89\xa3\xf7\x6b\x9a\x01\x47\xa6\xe3\x44\x7a\x25\x9a\x37\xf9\x18\xf6\x47\x3d\xf5\x89\x72\x37\xe0\x5a\x51\xe0\x83\x87\x88\x64\xe3\xd4\x2e\xfc\xc2\x76\x5c\x0e\x39\x6d\x82\xef\xe8\xae\xa3\xaf\xdf\xbd\x5b\xe9\x02\x96\xca\x57\xdb\x33\xd9\x36\x9f\xfd\xc8\x6f\x2e\xbc\xfb\x9f\xee\x3a\x6b\x1f\xa4\x3e\x19\x7b\x93\xe2\x0c\x25\x51\x07\x85\x45\x72\x44\x90\x9d\x25\xad\xb7\xd6\x50\x5e\xa0\xaf\xc9\x75\x53\x1e\x66\x33\x28\x07\x52\x59\x2c\xbc\xb1\x2b\x62\x4a\x80\x27\xca\x8e\x61\xb4\x17\x72\xc4\x70\x69\xec\xcd\x50\x2a\x1b\xae\x7b\x61\x6c\x13\xdc\x81\xb2\x27\x73\x07\x89\x35\x52\x70\x50\xde\xf1\x12\x31\xeb\x41\xa3\xeb\xe1\x67\x2c\x3a\xdf\xeb\x66\x46\x8c\x4d\xcb\x46\x97\x21\xca\x93\xcd\x85\xbf\x63\xf3\x73\x14\x0b\xec\x25\x2a\x45\xed\x62\xf0\x7f\x2f\x3e\xab\xa6\x6b\xd8\x8d\xa9\xc0\x80\x97\xce\x4b\xd3\xf9\x3d\xb4\xf6\x15\x38\xf5\x7b\x30\x5b\xbe\x22\xb1\xbc\x81\xbc\x2b\x4b\x2a\xb1\xee\x46\x33\x62\x71\xcc\x3b\x53\xf5\x7b\x0a\xae\x14\x93\xf6\xe1\xdd\xf1\x7f\x66\x5d\xa4\x7a\x22\x09\x93\x82\x65\xcc\xc5\xcf\x66\xec\xc7\x05\x0a\xc1\x73\x6d\x19\x57\x99\xae\x96\xe9\xe9\x5a\x14\xa1\xea\x61\x49\x4b\x6b\x9a\xcd\x1a\xc4\xac\xcb\x71\xc6\x8b\x61\xb6\x14\xaa\xee\x79\x7c\x2d\xf7\x4c\xb8\x9b\x2b\x14\xf2\x09\x81\x75\x77\xf8\xbc\x9f\x6c\x17\x52\xd5\xef\xa8\xa0\xdb\x33\x16\xb8\xe6\x85\x58\xf4\xee\xbd\x15\x5a\xd6\x68\xdd\xf3\xb3\xce\x8e\x4d\xed\x4f\x8e\xc7\xb1\x6a\xa2\x67\x1d\x8c\xdd\x77\x34\xb1\xf4\xa2\xbd\x2d\x8f\x29\xfe\x1e\x51\xa3\x72\xc2\x95\x7c\x02\x3b\x16\x0e\xb9\xe8\xf5\x86\xca\x0d\xce\x13\xa9\xd6\x07\xcf\x0f\x85\xd5\x9e\xd7\x98\x48\xc7\xb1\x9c\x0b\x01\xfc\xd3\x14\x2c\xce\x95\xd1\x1c\x34\xe9\x0b\xa7\xa3\xb4\x77\x14\xea\xc4\x1b\x5c\xc1\xd9\x49\x06\xf0\x0e\x57\x77\xf6\xa7\x58\x58\xf4\x89\xec\x1d\xae\xa8\x58\xe0\xb5\x90\xd5\x4e\x43\xb7\x11\x6f\x6e\xb1\x54\x9f\x37\x45\x55\x5a\xe2\x67\x74\xf0\x92\x7c\x6c\x10\x3a\x1c\x37\xe0\x04\xe8\xa8\xc6\x3c\xa3\xfd\x70\xec\x8e\xd8\x1f\xaf\xce\x53\x99\x1f\xfb\x19\x87\xc2\x16\xd5\xc6\xb3\xf9\x78\x75\x3e\x86\xca\xfb\x76\xbc\xb7\xd7\xd7\xfb\xe3\x9f\x7f\xa4\x32\x7d\x17\xde\x18\x33\xaf\x11\x26\xb5\xe9\x24\xfb\x05\x17\xa6\xc1\xd5\x93\x51\x46\x59\xbf\x41\xf2\x5f\x5a\xf3\x2b\x16\xbe\xbf\x7e\xb2\xa3\x28\x0a\xd3\x51\x5d\x69\x51\x52\xcd\x2e\x6a\xc7\xe6\x0c\x6f\xe0\x03\x47\x2d\x51\x73\x8f\xd3\x1a\xe7\x14\x67\x89\x4d\xe2\xed\x45\x82\x54\xae\xa0\x04\x87\xa1\x60\xeb\xdf\x1f\xea\x85\xb2\x46\x37\xa8\xb9\x6e\x9d\xac\x81\xfa\xb6\x08\x20\x7b\x4f\xcd\x5d\x72\x92\x23\x29\xad\x83\xca\xd4\xd2\x85\x7e\x52\x4a\x8b\x8e\xde\xc1\xba\xb1\x40\x19\x75\xc7\xef\x94\x4f\x84\xd4\x39\xdc\xe8\x96\x38\xa5\x25\x97\x55\xee\xae\x0b\xb3\x1b\x72\xc9\x4b\x89\x4b\x69\x88\x32\x84\x5a\x8c\x83\x43\x08\x6d\x74\x82\xeb\xf5\xbe\x09\xef\x2d\xfb\xd1\xa1\x0d\x3e\xca\xd7\x58\x37\x18\xe4\x4b\xef\xa8\x4f\x1d\xb3\x83\xb1\xa0\x49\x3e\x26\x9d\x99\x56\x15\x3d\xd2\xf7\x88\x1e\xb1\x4f\x87\xe3\xd8\x61\x7f\x87\x30\xf1\x76\x36\xe1\xf1\x01\xdd\x6c\x86\x4d\x5b\x73\x80\xff\x17\xdf\xb3\xd3\x8a\x2e\x8d\x70\x08\x0b\xa1\x55\x5d\x0b\x5e\x9e\xa3\x47\xbd\x80\x43\x98\x51\xaf\x43\x2b\x21\x77\x72\x65\x75\x08\xb7\xb7\xa3\xd3\xfe\xf7\x97\x2f\x4c\x20\xec\xbc\x23\xf7\x71\x70\x98\x22\x3f\xf5\x19\xc3\x61\x6c\x03\x6f\x6f\x47\x13\xfe\xf6\xe5\x0b\x0c\x87\xf4\x24\x86\x4a\xd2\x2a\x45\xef\x33\x19\x51\x28\x75\x31\x7e\xcc\xb8\x5f\xbe\xec\x85\xd9\xc7\x90\x5f\xf1\xb0\x36\xf3\x20\x8e\xb5\xc6\xde\xa7\x8c\xf1\x2d\x34\xf6\x4c\x66\xb8\xb3\x7f\x98\xce\x74\x9e\xe9\x42\x8e\xba\xf6\x56\x68\x57\xa2\xbd\x2e\xb9\x8c\x39\x84\x7f\x9e\x4e\x79\x7f\x59\xa1\xbe\xf6\x66\x4d\xd0\x03\x7f\xb8\xb8\x3e\xfd\xc7\xd9\xec\xfa\xc3\xd5\xf5\xe9\xdf\xcf\x26\x33\x26\xbf\xbd\x55\x25\x68\x84\x11\x55\x82\xb0\x0f\xc3\x78\xbb\xdb\xdb\xd6\x2a\xed\x4b\xd8\xb1\xf8\x5b\x87\xce\x5f\x17\x44\x70\x08\x3f\xc8\x9d\x40\xdc\x13\x0e\x01\xb5\xec\x7f\x45\x38\xae\x16\xa9\xec\xfb\x06\x62\x83\x0d\x55\x3c\x87\xf0\xc3\x68\xbf\x84\x37\xc7\x3b\xf1\xd8\xb7\x91\x43\x49\xf9\x08\xb4\xa4\xd2\x74\x13\x38\x9c\xfa\x0a\x99\x7f\xfe\xd6\x21\xb5\xc9\x97\xc7\xd3\x6d\x7e\xb7\xfb\x7f\xb9\xd2\x7b\xb9\x70\x55\xf8\x79\x79\x3c\x85\xe1\x05\x99\x89\xbb\xa4\x24\x5f\x58\x37\x8f\x99\x2f\x90\xe1\x63\xde\xf0\xb8\x59\x02\x50\x1d\x52\xc5\xe1\xc1\xb8\x6d\xf5\xe1\x33\xd8\x26\xc1\x36\xd8\x1c\x92\xf6\xe6\xf9\x33\x58\x25\x81\x92\xaf\xae\x51\xbf\x65\x92\x7b\xcf\xf6\xbf\x7c\xa6\xd9\x1b\xab\xe4\x29\x0f\x1e\x9f\x62\xd9\x17\x5b\xed\xfa\xe2\x29\x56\x7d\xf1\x04\x9b\x12\x51\x6f\xaf\xa7\x5a\xf9\x05\x0c\x5b\x84\xa6\x55\xcf\xf1\xf0\x82\x04\xd5\xf5\x22\x59\xf7\xcd\x73\x18\x37\x82\x96\xd4\x47\xf4\xa8\x7f\x82\x71\xa7\x75\x67\x9b\xed\x76\xdd\xbb\x6b\xd8\xe9\xf1\xd1\x6c\xf2\x16\x86\xc3\x5f\x4d\x3e\xe4\x34\xfd\x95\x95\x7b\x12\x1d\x06\x42\x07\xf7\x96\x43\x14\x7f\xcc\xc2\x3d\x79\x0c\xba\x8f\xb8\xcd\x13\xec\xdf\x23\x52\xf8\x1d\xb6\x68\x59\x17\xcf\xe2\x0c\x3d\x74\x83\x0d\x47\xca\x67\x89\xc0\x6b\x58\xdf\xb4\x6b\xd8\x3f\xc1\x1f\xb8\x20\x3f\x16\xbe\xa8\x40\xa2\x2b\xac\xca\xd1\x6d\x4c\x77\xd3\xd0\x24\x95\x7c\x54\xbd\x07\xea\xfb\x23\xc9\x2c\xe1\x84\xea\xf1\xaf\x26\x0f\x53\x19\x3e\x5e\x08\x4d\xb5\x2a\x2a\x5f\x21\x4f\xdb\x78\xe2\x1e\x21\x1b\xf1\xbb\xd1\xfd\xec\x05\x2e\x68\xef\xe5\xd1\xd5\xc5\x2b\x2a\xf7\xee\xe0\x8c\x61\x27\xfa\x03\xf9\xa4\xc4\x72\x27\xf1\xfa\x1b\x65\xa3\x3f\xc6\x86\x21\xee\x72\xe0\x1c\xb7\x73\xaf\xe5\x49\x2d\x84\x6b\xb1\x50\xa5\x42\x09\xbf\x9a\x3c\xa4\xc3\x30\xf2\x37\x71\x3e\xc2\x54\xb4\x27\xd7\x8a\x50\x5f\x75\x4c\xeb\xde\x68\xb3\x03\xfa\x0e\x95\xe8\xd4\x1b\x2b\xe6\xf8\x1d\x0a\xd0\xdd\x3f\xd0\xa5\x3c\xd4\xa3\x64\xbb\x70\x4e\x1d\x04\xa7\x3f\x70\x2b\xe7\xb1\x19\x65\xbc\x14\x2f\x12\xfc\xec\x53\xa5\x3c\xd6\xca\x79\x32\x0b\xf7\x1c\x1b\x63\xa1\x56\xf8\xca\xc1\xb2\x52\x45\x95\x26\x24\xca\x81\xa8\x6b\xb3\x44\x19\xbb\x30\x74\xa1\x77\x09\x8b\x27\x6a\xdd\x21\x8c\xf6\x48\x8a\xb7\xb3\xd9\x65\xe4\xd8\x4f\xe7\xbd\xe1\x81\x69\x6d\x84\x84\xb6\xcb\x6b\x55\x40\xa8\x28\x8d\xee\xff\xf1\x59\x28\x01\x02\xde\x9c\xce\x20\x96\x57\xa3\x6c\x03\x2a\x08\x1f\x07\x1a\xfc\xba\xa8\xe9\x7c\xe9\x5e\x6d\x9e\x70\x0f\x0e\x44\xb6\x0c\x42\xee\xfd\xb3\x10\xdc\x7d\xfa\x7a\xbc\xfe\x8b\x43\xa6\xf1\x56\x18\x8e\x21\x34\x71\xc2\xa5\xbb\x26\x47\xcb\x7e\xad\x9a\x34\x23\x13\x49\x8a\xde\x86\x16\xbd\x55\xf1\xbf\x89\x52\xa8\xba\xb3\x61\xbc\xf5\x5e\x7c\xbe\xe2\x2d\xd7\xcf\xf8\x9f\x63\x08\x40\xbd\x53\x08\x41\xc8\x9d\x20\x19\x20\xfd\x4f\xc9\x32\x4c\x5f\x43\x6b\xcd\x42\x49\xb4\x0e\x5c\x57\x54\x20\x1c\xbc\x57\x5a\x99\x34\xa9\x99\x60\x5b\x51\xdb\x8e\x1a\xad\x2a\x48\x19\xbb\x6c\xd9\xb5\x42\xf8\xbf\x1e\x5a\x04\x38\xd5\xb2\x35\x4a\x07\xee\x61\x29\x89\x1c\x7e\x6d\x0a\x17\x26\x01\x1b\xc6\xdc\xa6\xe3\xff\xdd\x5e\x3f\x9b\x2e\x55\xe9\xb7\xcb\x4d\xdd\xf4\xc5\x03\xdd\x34\xc0\x51\xe7\x2b\x1e\x92\x84\xfe\x19\xb5\xd0\x7e\x83\x3a\x2c\xc4\x7f\x27\x52\xa4\xeb\xf7\xff\x1d\x00\x00\xff\xff\x1e\xd6\x62\xe5\xab\x1f\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 8107, mode: os.FileMode(420), modTime: time.Unix(1515024186, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcf\x4a\xc3\x40\x18\xc4\xef\x79\x8a\x31\xb5\xc7\xdd\xe4\x05\x3c\x35\x52\xbc\x78\x10\xc1\xa3\x24\xcd\xb7\x76\x49\xb2\x1b\xf6\x8f\x8a\xcb\xf7\xee\xb2\xdb\x22\x14\x6a\x6f\xc3\xf0\x9b\xdf\x61\x36\x77\xcd\xa0\x4d\x33\xf4\xfe\x58\x6d\xee\x21\x9e\x91\x92\x7c\xed\xfd\xf4\x34\x32\x97\xc6\xe6\xe6\xcd\xba\xa9\xd3\x8e\xb9\x51\xd1\x18\x9a\x85\x0f\xa3\x8d\xa1\x00\xf4\x1f\x40\xce\x55\x29\x69\x05\x43\x90\xbb\x35\x7a\xb4\x10\xcc\x55\x4a\xab\xd3\x26\x28\xd4\x79\xbe\x12\x96\x55\x63\x3b\xd6\x27\xa8\x00\x02\x64\xc6\x92\xce\xf3\x97\x7e\xd9\x0f\x68\xe5\x35\xc3\x8c\xe3\xfb\xe7\x42\xcb\xc3\x56\xb6\x6a\x5f\x9f\xe1\xeb\x9e\x4e\xfb\xe9\xa6\x48\x79\xfd\x43\x7f\xa6\x13\x7e\xa1\xaa\x52\x92\x8f\xdf\x74\x88\xa1\x1f\x66\x62\xc6\x97\x75\x13\x39\xb8\x68\x20\xc4\xc1\x1a\xa5\x3f\xf2\x23\xbb\x92\x98\x21\x44\xc8\x7f\x76\x17\xcf\xfe\x06\x00\x00\xff\xff\x43\xce\xa0\xb4\x78\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 376, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x11\xd2\x5d\x3a\x97\x17\xc8\xe6\x42\x84\xd8\x5c\x24\x1a\xf5\x67\x15\x85\x64\x12\xac\x38\x63\x18\x7b\x42\xab\xc8\xef\x5e\x05\x10\x15\x55\xe9\xee\xd8\xe7\x3b\x9f\x46\xc8\x0c\xc8\x1e\x21\x85\xa1\x24\x63\x6d\xa9\x5a\x0c\x48\x03\xa4\x90\xb3\xa0\xc2\x77\xac\x24\x94\x3b\x3b\x21\xe3\x98\x64\xb7\x77\x8c\xaa\xe4\x56\x7a\xa4\xe0\x21\x85\x93\xe3\x0e\x19\x58\x08\xb4\xae\x1c\x35\xa6\x9d\xf8\xc5\x39\xc5\x08\x5a\x87\xd2\x77\xeb\xe5\xf4\x99\x4f\xa9\x8e\x51\x59\xd7\x5e\xb4\x2f\x8e\xbb\xa5\xe1\x18\xff\x56\x8e\x6a\xc7\x1a\x07\xa4\xa0\xad\x6b\x15\x32\x3b\xfe\x4e\x35\x42\x84\x56\xfb\x50\x23\xb3\x72\x12\x0e\x12\x1e\x33\x4e\x82\xf2\x7b\x27\xb6\x2e\x02\x97\xe4\x1b\xe4\xa2\x31\x16\xa7\xbb\xdf\xb2\x27\x75\xda\x23\x15\xc1\x7d\x95\x37\xe1\xe6\x7f\x91\xbd\xae\xf3\x62\xb3\x2d\xb2\xe7\xf5\x22\x57\xe3\x68\x1a\x20\x84\x64\x71\x10\x0f\x73\xd0\x31\xaa\x71\x3c\xb0\xa1\xd0\xc0\x8c\xf1\x28\xe8\x43\x51\x4d\x65\x0a\x7f\xea\xd9\x05\x3c\x43\x1a\x90\xea\x73\xba\x2a\xb6\x65\xbf\xda\xc1\x3c\x79\x64\xe9\xb1\x77\xfc\x31\x79\x92\x79\x03\xab\x7f\xb3\xeb\xe4\x67\xdb\xd2\xf8\xee\x57\x5d\x6d\x7c\x77\x27\xbb\x2c\xee\x6c\xea\x28\x28\xa8\x3e\x03\x00\x00\xff\xff\xbb\x66\xa4\x8a\x17\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 535, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\x4d\x4b\xc4\x30\x10\xc6\xf1\x7b\x3f\xc5\xd8\x65\x8f\x49\xeb\x55\xe8\xc5\xad\x88\x17\x11\x15\x3c\x37\x9b\xc9\x1a\xda\x4e\x4a\x5e\x50\x08\xf3\xdd\xa5\x2f\x20\x0b\xd6\xdb\x30\xfc\xf9\x1d\x9e\xc3\x4d\xa5\x2c\x55\xaa\x0b\x9f\xc5\xe1\xe5\xfe\x0d\xc4\x33\xe4\x2c\xdf\xbb\xd0\x3f\x69\xe6\xed\xe7\xe6\xdf\x87\xf3\x7d\x6b\x3d\x73\x65\x12\x11\x0e\x22\x44\xed\x52\xdc\x12\xdc\x4b\xd0\xfb\x22\x67\x6b\x80\x10\xe4\x69\x4a\x01\x6a\x10\xcc\x45\xce\x93\xb7\x14\x0d\x94\x2b\x30\x00\x39\x8d\xa1\xb9\xbd\x9b\x26\x6a\x8e\xba\x5c\xeb\xa5\x14\x80\xa4\x97\x6b\x73\x5e\xbb\xf1\x51\x41\x2d\xf7\xa8\x11\xc7\xe6\x28\x6b\x73\x51\xe5\x16\xff\xed\xb4\x36\xf4\xff\x42\xc6\x0e\xf8\x2b\xad\xf9\x15\x55\xe4\x2c\x1f\xbe\xf1\x9c\x62\xa7\x06\x64\x86\x2f\xe7\x7b\xf4\xe0\x13\x81\x10\x67\x47\xc6\x5e\xe6\x69\x4e\xcb\xc5\x0c\x42\xc4\x79\xdc\xf6\x6a\xe6\x9f\x00\x00\x00\xff\xff\xd8\xa6\xd9\x67\x87\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 391, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x6a\xeb\x30\x10\x45\xf7\xfe\x8a\x79\x0e\x59\xca\xf6\xfb\x84\xc6\x2e\x69\xb7\x6d\xa0\x6b\x39\x1e\xb7\xaa\xe3\x91\x18\x49\xb4\x20\xe6\xdf\x8b\x9c\x40\x1c\x68\xe8\xee\x22\x1d\x1d\x34\x73\x37\xff\xea\xde\x50\xdd\x6b\xff\x51\x6c\x5e\x77\x0f\x87\xf6\x09\x94\xfa\xb4\xbd\x22\x3d\x23\xa4\x54\x1d\xb4\x9f\x9e\x07\x91\xd5\x35\x05\xed\x27\x0f\xff\x57\x47\xc8\x6c\x39\xe3\x6f\x96\xa7\xce\xb0\x48\x3d\x46\x22\x3c\x29\x1f\x06\x64\x5e\xa1\x36\x06\x17\xc3\x3d\xd6\xc6\x50\xa4\x64\x46\x20\x84\xaa\x75\xd1\x43\x03\x4a\xa4\x48\xc9\xb1\xa1\x30\x42\x79\x35\x1d\x5d\xf4\xca\x21\xab\xfc\x1f\xd8\x0e\xe5\xf9\xc5\x42\x2b\x40\x1a\x96\x74\x71\xbd\xe8\x79\xdf\x43\x53\xdd\xd7\xcd\x38\xc3\xb6\x6a\xc6\xfd\xae\xbc\xe0\xbf\x9b\x3a\xe3\xa7\x3f\x54\x61\x76\x57\xd5\x99\xbf\x71\x15\x29\x55\x8f\xdf\x78\x8c\x41\xf7\x27\x14\x81\x2f\xcb\x13\x32\x70\xa4\x3c\x97\xa5\xd1\xbc\xe7\x0d\xb5\x4b\x12\xc9\xca\xdc\x43\x77\xd3\xc8\x4f\x00\x00\x00\xff\xff\x46\x53\xad\xe9\xbd\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 445, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
