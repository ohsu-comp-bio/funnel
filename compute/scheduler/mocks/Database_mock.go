package mocks

import context "golang.org/x/net/context"
import events "github.com/ohsu-comp-bio/funnel/events"
import mock "github.com/stretchr/testify/mock"
import protoscheduler "github.com/ohsu-comp-bio/funnel/proto/scheduler"

import tes "github.com/ohsu-comp-bio/funnel/proto/tes"

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// DeleteNode provides a mock function with given fields: ctx, id
func (_m *Database) DeleteNode(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListNodes provides a mock function with given fields: _a0, _a1
func (_m *Database) ListNodes(_a0 context.Context, _a1 *protoscheduler.ListNodesRequest) (*protoscheduler.ListNodesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *protoscheduler.ListNodesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *protoscheduler.ListNodesRequest) *protoscheduler.ListNodesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protoscheduler.ListNodesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *protoscheduler.ListNodesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutNode provides a mock function with given fields: _a0, _a1
func (_m *Database) PutNode(_a0 context.Context, _a1 *protoscheduler.Node) (*protoscheduler.PutNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *protoscheduler.PutNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *protoscheduler.Node) *protoscheduler.PutNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protoscheduler.PutNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *protoscheduler.Node) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueueTask provides a mock function with given fields: _a0
func (_m *Database) QueueTask(_a0 *tes.Task) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*tes.Task) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadQueue provides a mock function with given fields: _a0
func (_m *Database) ReadQueue(_a0 int) []*tes.Task {
	ret := _m.Called(_a0)

	var r0 []*tes.Task
	if rf, ok := ret.Get(0).(func(int) []*tes.Task); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*tes.Task)
		}
	}

	return r0
}

// Write provides a mock function with given fields: ev
func (_m *Database) Write(ev *events.Event) error {
	ret := _m.Called(ev)

	var r0 error
	if rf, ok := ret.Get(0).(func(*events.Event) error); ok {
		r0 = rf(ev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
