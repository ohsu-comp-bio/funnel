// Package config Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config/gridengine-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// config/default-config.yaml
// config/htcondor-template.txt
// config/kubernetes-template.yaml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\xc4\x30\x14\x85\xf7\x79\x8a\x6b\xc7\x59\x26\xed\x0b\xb8\xb2\x30\xb8\x71\x21\x82\x4b\x69\xc9\x0d\x13\x32\xf9\xe1\x26\x51\x30\xe4\xdd\xa5\x69\x11\x0a\x75\x76\x97\xc3\x77\x3e\xb8\xe7\xf4\xd0\xcf\xda\xf5\xf3\x14\xaf\xec\xf4\x08\xfc\x15\x4a\x11\xef\x53\x34\x2f\xb2\xd6\x96\xf8\x25\xf9\xf0\x64\x46\x4d\xb5\xf6\x2a\x3b\x87\x37\x1e\x93\xf4\x39\x35\x00\xff\x03\x90\x88\x95\xa2\x15\x38\x04\xf1\x1c\x72\x84\x01\x78\xad\xac\x94\x40\xda\x25\x05\xdd\x52\x0f\x08\x36\x68\x38\xcb\x6e\x85\x1a\xc0\x01\x9d\x6c\xd7\x56\x7f\x9b\xec\x65\x86\x41\x1c\x19\x6e\x70\xfd\xfc\xb2\x68\x9f\xce\x62\x50\x97\x6e\x83\x8f\x3d\xa3\x8e\xe6\xae\x48\x45\xfd\x83\x7f\xa6\x15\xdf\xa9\xd8\xfa\x20\x7c\x7b\x32\x48\x40\xd9\x01\xe7\x69\x59\x6c\xdc\x6d\xf7\x1b\x00\x00\xff\xff\xcf\x92\x30\x7f\x5a\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 346, mode: os.FileMode(420), modTime: time.Unix(1548721562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xc1\x4a\xc4\x30\x10\xc6\xf1\x7b\x9f\x62\xec\xb2\xc7\xb4\xf5\x2a\xf4\xa2\x05\xf1\x22\xa2\x82\xe7\x86\x4c\x34\xa4\x9d\x84\x49\x82\x87\x90\x77\x97\xdd\x04\x64\xc1\xf5\x16\x86\x3f\x3f\xc8\x77\xb8\x19\xa5\xa1\x51\xae\xe1\xab\x3b\xbc\xdc\xbf\x81\x78\x86\x9c\x87\xf7\x35\xd8\x27\x55\x4a\xbb\xb9\xd3\xed\xc3\xb1\x5d\x0c\x97\x32\xea\x44\x84\x9b\x08\x51\xb9\x14\x5b\x82\xd7\x12\x64\xee\x72\x36\x1a\x08\x61\x78\xf0\x29\xc0\x04\xa2\x94\x2e\x67\xcf\x86\xa2\x86\xbe\x02\x1b\x90\x53\x18\xe6\xdb\x3b\xef\x69\x3e\xaa\xbe\xd6\xe7\x52\x00\x92\x3a\xbf\x9a\xf3\xba\xee\x8f\x12\xa6\xe1\x1a\xb5\xe3\x3e\x1f\x87\x49\x7f\xca\xbe\xc5\x7f\x3b\x8b\x09\xf6\x5f\x48\x9b\x0d\x7f\xa5\x9a\x5f\x50\x5d\xfd\x29\x7c\x3b\xb6\xc8\xc0\x89\x40\x88\x78\x9a\x6f\xb9\x18\xf2\x27\x00\x00\xff\xff\x94\x91\x42\x0b\x69\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 361, mode: os.FileMode(420), modTime: time.Unix(1548721562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\x0d\x74\xbb\x6e\x85\x9d\x9d\x45\x61\x9e\x67\xd9\x48\x36\x3b\x18\xbf\xfb\x48\x53\x68\x0a\x0b\xbb\x19\xeb\xfb\x3f\xa4\x7f\xf7\xd0\x0e\x86\xda\x41\xcb\x67\xb5\x7b\x3b\x3c\x9d\x8f\xcf\xa0\xd4\x97\x1f\x14\x69\x87\x90\x73\x73\xd6\x62\x5f\xc6\x52\x56\x63\x8a\x5a\xac\xc0\xe3\xea\x0b\x99\x3d\xcf\xf8\xbb\x67\xdb\x1b\x2e\xa5\x9d\x12\x11\x7e\x2b\x89\x23\x32\xaf\x50\x9f\x62\x48\x71\x8b\xf5\x29\x56\x39\x9b\x09\x08\xa1\x39\x86\x24\xd0\x81\x2a\xa5\xca\x39\xb0\xa1\x38\x41\x7d\x33\x7d\x84\x24\x2a\x20\xab\x79\x1f\xd8\x8f\xf5\x92\xb8\xd0\x0a\x90\xc6\xcb\xeb\xea\x7a\xd5\xee\x34\x40\xd7\x6c\xeb\x1c\x3a\xd8\x37\xdd\x74\x3a\xd4\x57\xfc\x6f\x53\x6f\xc4\xfe\xa3\x8a\x2e\xdc\x54\x0b\x7f\xe7\xaa\x96\x83\xe1\xc7\xb3\x45\x06\x4e\x34\x87\xe6\xa6\xfb\xbb\xce\x7f\x03\x00\x00\xff\xff\x71\x9e\x5b\xbd\x9f\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 415, mode: os.FileMode(420), modTime: time.Unix(1548721562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x73\xdb\x38\x92\x7f\xe7\xa7\xe8\xb3\x66\xeb\x32\x55\xfa\xe7\x99\x9a\xbd\x5b\x55\xf9\xc1\x96\x3d\x89\x2f\x4e\x46\x67\x29\x97\xbb\xa7\x14\x48\xb4\x44\x8c\x40\x80\x03\x80\x56\x94\x5c\xbe\xfb\x55\x37\x40\x8a\xb2\x9d\x49\x76\xd7\xa9\x9a\xab\xdd\xbc\xc4\x02\x1b\x8d\x46\xff\xfd\x75\x93\x03\x58\x95\x08\x46\x54\x08\x76\x0d\xa1\x44\x10\x45\x50\x77\x08\x1e\xdd\x1d\x3a\x90\x22\x88\x5c\x78\x84\x5c\x14\x5b\x34\x32\x1b\xc0\xf9\x9d\x50\x5a\xe4\xba\x5b\xf3\x33\xc8\xad\x0e\x32\x1f\x42\x2e\xe4\x06\xdd\x90\xb7\xf9\x60\x1d\x0e\x41\xee\x8d\xa8\x2c\x3d\x44\x2d\x7c\x50\xc5\x10\x2a\x6b\x36\x56\xe6\xd9\x65\x62\xde\xee\xcf\xb2\xcf\x8a\x53\xd8\xaa\x6e\xc2\x97\xc4\xd0\xb6\x10\x7a\x08\x65\x28\xac\x91\xd6\x0d\xc1\xeb\xc6\x55\x43\xa8\x73\x3f\x84\x8d\x53\x12\xcd\x46\x19\x1c\x42\x25\x4c\x43\x94\x62\xe7\x47\xb9\x08\x45\x99\xcd\xe3\x01\x89\xc7\xef\x48\x82\x77\x68\x02\xec\x9c\x0a\xe8\xda\xa3\x9f\xf9\xef\xc7\x9f\x15\x69\x33\xfc\xdb\xd4\x33\x84\xad\x58\x6f\x45\x76\x45\x07\xbe\xe5\xf3\xfc\x0c\x32\x80\x51\xab\x2e\xfa\x53\xdb\x4d\x96\xdd\xd8\xcd\x06\xdd\x2c\x03\x18\x00\xfd\xad\xcc\x06\x34\xde\xa1\xf6\x33\x90\x98\x37\x9b\x21\x28\xb3\xb6\x43\x40\xe7\xac\xcb\x00\x6e\xe8\xe1\x8c\x17\x79\x13\xb3\x27\x5e\x1e\x82\x85\x50\x2a\x0f\xb5\x08\xe5\x18\xae\xd7\x80\x55\x1d\xf6\xc3\xf8\x50\x38\xe4\xab\x07\x34\x44\xe8\x83\x44\xe7\xc6\x19\xc0\x2f\x4d\xa8\x9b\xf0\xb3\xd2\x38\x83\x93\x93\x2c\x5b\xb2\xfb\x44\x89\x5e\x58\x1f\xfa\x8a\xfc\xb9\x31\x06\x75\xf2\x30\xda\x4c\x04\xaf\x45\xd5\x2a\xbf\xb4\x3e\x64\xbc\x73\x61\x5d\x80\xc6\xa3\x84\xb5\x75\xf0\x62\xb5\x5a\x90\x23\x54\x8d\x51\x85\x08\xca\x1a\x10\x46\x32\xcb\x1d\xe6\x20\x85\x2f\x73\x2b\x9c\x64\x96\xab\xd5\x82\x76\xcf\xe0\xdf\xa7\xd3\xe9\x63\xdc\x6e\x17\xf3\x63\x66\xb4\xed\x76\x31\x8f\xbb\xfe\x32\xfd\x4b\xda\x75\x8b\xbf\x35\xca\x91\x49\xbd\x2a\x40\x34\xa1\x44\x13\xda\xf3\x89\x11\x9d\x9f\xa2\xe5\x7c\x71\xed\xa1\xf1\xa4\x7e\x01\xb5\xf0\x7e\x67\xa3\x38\x03\x52\x24\x1d\x4d\xae\xb7\x45\xf0\x8d\x43\x52\x60\xed\x6c\x8d\x4e\xef\xc1\xa1\x0f\x4e\x15\x01\x44\x51\xa0\x4f\x56\x20\xb7\x37\x6b\xb5\x81\xb5\xd2\xc8\x5c\x9e\xe1\x78\x33\x86\xa2\xac\xac\x84\x3f\x4f\xa7\xb0\x66\x55\x8e\x23\xd9\x78\x5f\xe9\xef\x99\xec\x82\x64\x3d\x6f\x42\x19\x0d\x40\x7e\xf2\xc6\xa3\x9b\x91\x08\xee\x34\xad\x01\x2c\x92\x84\x33\x10\x79\x71\xfa\xc3\x8f\x8f\x10\xff\xf0\x08\xf1\xda\xda\x5c\xb8\xa8\x9d\x6b\x53\xe8\x46\x22\x08\x38\x99\x8b\xa2\xc4\xd1\xdc\x9a\xe0\xac\x9e\x81\xb1\x23\x76\xf1\x93\x68\xb7\x12\x85\x44\x07\xca\xc0\x73\x0c\x93\x1b\xe5\x03\xdd\xb9\xb6\xc6\xa3\x67\x4e\xac\x8d\x18\x5c\x85\x28\x4a\xd2\x61\xbe\x07\x65\x02\xba\x0a\xa5\x12\x6e\xcf\x5a\x56\x05\x7a\xd2\xe8\xa5\xf2\x14\x69\xc4\x9b\x0f\x9e\x41\x70\x0d\x66\xd9\xed\x62\x3e\xd7\x0a\x4d\x88\x57\x27\x2b\x27\xe3\x08\x29\x1d\xa9\x36\x03\x88\xde\x79\x1e\x17\x7a\x5e\x37\x3b\x98\x7d\xee\x50\x92\xa1\x85\xf6\x6c\xe5\x8b\xff\x47\xe6\x8f\xe6\x8b\x0f\xa3\xe7\xdf\x37\x34\xaf\x16\xd6\x18\x2c\xf8\x22\x41\x55\x68\x9b\x40\xb2\xae\xe2\x9f\x33\xf8\xf3\xd4\x47\x3a\x4a\x84\x95\x78\xaf\xaa\xa6\x02\xd3\x54\x39\x3a\x8e\x64\x55\xa1\x87\x50\x8a\x00\x02\x1c\xfe\xd6\xa0\x0f\xb0\x53\x5a\x43\x8e\xe0\x30\x38\x95\x02\x6d\x2d\x94\x6e\x5c\xb4\xda\x80\xd9\x43\x8e\x61\x87\x68\x12\x19\x29\x58\x6b\xbb\xf3\x20\x0c\xe0\xfb\xda\x9a\xa8\x78\xce\xa2\x76\xbd\x06\x1f\x84\x0b\xac\xd5\x00\x3f\x81\x47\xca\xee\xd1\x69\x9a\x9a\x54\x75\x0a\x95\x32\x4d\x20\x1d\xbd\x12\xef\x6f\x23\xd3\x19\x9c\x4e\xdb\x34\xee\x8b\x12\x65\xa3\xc9\xff\xfc\x21\x03\x90\x86\x5f\x71\x21\xb8\x5f\x5e\xc6\x90\x2d\xdb\x2d\x6d\x0e\xdb\x81\x5d\xa7\xb4\xe7\x1a\x03\xa2\xcf\x34\xa0\xeb\x52\x48\xbb\xf1\x56\x50\x35\x39\xf5\xdd\xf6\x4a\x98\x3d\x04\xe1\xb7\x6c\xde\x76\x37\x45\x84\x35\xf8\x38\x8f\x79\xd9\x98\x2d\x5f\xa4\x65\xa2\xad\xd9\xd0\xf6\x9d\x50\xa1\x53\x63\x53\x4b\x11\xd0\x43\x8e\x6b\xeb\xc8\x56\x6e\x1b\x7d\xd0\x58\x89\x20\x51\xb0\x13\xbe\xb6\x12\x17\xca\x6c\x3a\x03\x9f\x56\x8f\xb3\x25\xdd\xa4\xbd\x9c\xe3\x85\x0b\xc3\xfb\xbc\x49\x77\x0f\xb8\x5f\x1b\x15\x3a\xee\x3f\x55\x59\x46\x8b\xb3\xd6\xff\x53\x1d\x49\x9c\xaf\x2f\x3b\x67\x11\x4d\xb0\x95\xa0\xa0\xd2\x7a\x0f\x1b\x34\xa4\x09\x64\xae\xd7\x97\xb1\x9c\x24\x16\xdd\xa9\xa5\xa0\xdb\xa2\x01\x25\x35\xb2\xc0\x74\x03\x24\x9b\x0a\xc3\x64\xc9\xa3\x87\xa0\x92\x57\xfa\xb2\x09\x20\xed\xce\x44\x3f\x1c\x9d\x42\x85\xc2\x90\x07\xa3\x43\xf2\x0b\x63\xbb\x30\x80\x69\xfb\x30\x2e\x80\xaa\x38\x07\x05\xd4\x7b\x10\xeb\x80\xd1\x79\xd6\xca\xf9\xc0\x26\x3d\x0a\x9c\xd1\x69\x0a\x9c\x73\xd6\x4a\x3c\xfe\xf8\x92\xc1\xed\x49\xb7\x12\x03\x16\x01\x76\x14\x44\x0e\xbd\x6d\x5c\x81\xb1\xc8\x8a\x0e\x4a\x04\x0b\x2a\x8c\x81\x19\x5e\xe2\x5a\x19\x52\xff\x6d\x47\xac\xe2\x75\xf9\xa0\x98\x07\x9a\xe8\x47\x60\xef\xd0\x11\xe4\xf1\xb1\x9e\xe7\x58\x8a\x3b\x65\xb9\xe0\x76\xdb\xc9\x38\x9c\xed\x16\x6f\xfc\xe1\xcc\x71\xbb\x5a\x37\x7e\x06\x9c\x10\x39\x97\x9e\xbf\x3a\xd0\x0c\x39\x95\x5f\xb4\xa4\xb7\xa2\x7a\x9e\xcf\x60\x3a\xee\xa8\x2f\x95\xdf\x82\xaf\x45\x81\x9f\xdd\x44\x24\xbd\x5d\x03\xf8\x99\x0d\xb9\x1b\x31\x76\x81\xd0\xd0\x5d\xc7\x0f\xe3\xcf\xef\x4d\x01\x3b\x15\xca\xc7\xe1\xc4\x1b\x0e\x87\x18\x7f\x3f\xf9\x2c\x7b\x6b\xdd\xb6\x8d\x63\x42\x28\x1e\x0a\x87\xe4\x61\x20\x1b\x47\xda\xac\x9d\xa5\xac\x4b\x7f\xb6\x3e\xd9\x82\x1c\x56\xaf\xf2\x20\x95\xc3\x22\x58\xb7\xa7\x03\x88\xe1\xa5\x72\x33\x18\x4f\x62\x92\x1d\xed\xac\xdb\x8e\xa4\x72\x7f\xd5\x35\x6a\xab\x35\xfb\x6e\x21\x4c\x41\x37\x50\x1b\x23\x34\x25\x8c\x85\xd5\x5a\x99\xcd\xe1\x0a\x7f\x8d\x72\xd0\x48\x02\x66\xb6\x09\x13\x74\x8e\xdd\x93\xc0\x5b\x97\x25\x52\x6d\x79\xa0\xb6\x01\x2c\x31\x84\x18\xdc\x8a\xc9\xa6\x51\x1d\x0e\x7d\xa3\x43\xf2\x34\x4f\x6e\x8f\x5a\x92\x43\x11\x6d\xe4\x2a\x29\x1f\x2a\xb3\xd1\x31\xf0\x98\xdb\x21\x4e\xf0\x3d\x16\x4d\xb0\x0e\xf0\xbd\x0a\x5c\x07\x6e\xec\xe6\xbe\x95\x68\xcb\x2b\xf1\x1e\xf2\x7d\x12\x92\xd1\x03\xeb\xa7\x77\x9b\xe4\xee\xed\xa5\x12\xaf\x95\x50\x7a\xa9\x3e\x50\xbe\x9d\x4e\xa7\x53\x18\xc0\xe9\x14\x5e\x5e\x44\xa6\xaf\xad\xab\x62\xd0\x11\x50\x64\x5f\x00\x89\x1a\xe9\x18\x15\x3c\x2f\xd1\x4d\x3a\x13\x27\xc9\xa3\xd4\x9d\x92\x57\xa4\x14\x5b\x73\x68\xc9\x08\x3e\x52\xf9\xeb\x47\xd6\x0d\x8a\x3b\xec\xfc\x63\x2d\xb4\xc7\x28\xc5\x8d\xaa\x54\x88\x09\xac\x2b\xa1\x85\x35\x45\xe3\x1c\x41\x1e\x4a\x4c\xda\x0a\xe9\x27\x4d\xcd\xff\xc7\x5a\xb6\x10\x4e\x68\x8d\x7a\xe5\x84\xf1\x6b\x6e\x00\xb8\xaa\x8d\x9e\xf6\x5f\x36\x80\xb6\x17\xa3\x22\x2c\x27\xd6\x01\xb7\x1d\x90\xfa\x8e\xc9\x0b\x61\xa4\x46\xe7\x9f\xfe\xe8\xec\xc2\xea\x70\x79\x31\x4b\x40\x85\x82\x3a\x3a\x68\xd7\x7a\x26\xf8\x43\xcf\x1e\x09\xb9\xf4\x7b\x4c\xed\xe3\x25\x37\x53\x2d\xb3\x0b\xe1\x91\xfb\x8e\x60\xa9\xe8\xb3\x2b\xb5\xed\x16\x04\x36\x20\xa5\x6d\xfa\xa3\x25\x3d\x42\x4d\xe7\x6f\x97\xe0\x70\xa3\xac\xe1\x94\x49\x7f\x70\x35\x6a\x9f\x9d\x47\xac\xb6\xc5\x3d\x5c\x5f\x66\x00\x2f\x71\x7f\xf4\x7c\x89\x85\xc3\xd0\x92\xbd\xc4\x3d\x23\x4f\x5a\x8b\x45\xed\x2a\x36\x7c\xe9\xe6\x0e\xd7\xea\x7d\x5f\x54\x65\x24\xbe\x47\x0f\xcf\xc8\xd9\x87\xb1\xef\xf4\x43\xae\x7f\x9e\x70\xde\x35\x3d\x8f\xdb\x8e\xc4\x7e\x73\x7b\xd3\x76\x5a\xa9\xa5\xf4\x28\x5c\x51\xf6\x33\xe4\xed\xcd\x0c\xca\x10\xea\xd9\x64\xd2\x03\xbf\x3f\x4c\x19\x31\x3d\xb7\x96\x02\x79\xae\x6d\x23\xd9\x2f\x62\x24\x72\xcc\xb5\x46\x19\x67\xdd\x03\x92\x7f\xe1\xec\xaf\x58\x84\xee\xfa\xad\x1d\x45\x51\xd8\x86\x10\x7d\x1f\x4d\xab\x58\x61\x06\xf0\x0b\x47\x93\xd0\xdc\x66\xd6\xd6\x7b\xc5\x35\xa2\x4f\xfc\x38\x46\x90\xca\x17\x54\xde\x50\x32\x9f\xb5\xb3\x55\xbc\xaf\xb9\x53\xce\x9a\x0a\x0d\x43\xd9\x1e\x86\xef\x3a\x53\x80\xec\x15\xf5\xd7\xad\x93\x50\x13\xe0\xa1\xb4\x94\xd1\xb8\xcb\x8f\x4d\x01\xfa\x1e\xb8\x47\x99\x74\xc7\xb9\x8b\x77\xc4\xc2\x39\xea\x35\xac\x5c\xd0\x5a\x97\x55\xfe\xd8\x85\xd9\x0d\x19\x78\x52\xd9\x52\x06\x92\x0c\xbd\x3c\x17\xd3\x31\xed\xe0\xf6\xa6\x1b\x8d\xf4\x2c\xbb\x6a\xd1\x48\x12\xb5\x62\xdd\x26\x2c\x7e\x0f\xbe\xa5\x96\x84\xd0\x2a\xb7\x59\x12\x76\x25\x9a\xa8\x2e\x86\x2d\x2d\xfa\x27\xa0\x68\x24\x70\x37\x43\x28\x9c\x30\x35\x75\x25\x0c\x22\x3a\x7c\xe1\xa9\x3e\x5a\x43\x96\x8a\xdd\xda\x41\x94\x0f\xe8\xec\x30\xb6\x2b\x42\x6b\xa8\xc4\x1e\x72\x6d\x8b\x2d\x09\x82\x24\x03\x49\x45\xc7\x44\xc1\x0e\x5d\x47\xdb\xf6\xe5\x08\xe8\x29\x1e\x95\x2f\x23\xec\xeb\x83\xc8\xb6\xa1\x61\x15\x92\xa4\x6d\x33\xc3\xd3\x0b\x17\x0d\x5f\xdc\xeb\xd6\x68\x4d\x19\xc5\x5d\xc4\x71\xcf\xc6\xfc\x24\x21\x6e\x6b\x8e\x6d\x24\x09\x5c\xa1\xa4\xae\x93\xd6\x2f\x0f\xe9\x07\x35\x4b\xd5\x4a\x91\xfc\xe8\xd0\x54\x51\x30\xbf\x14\xeb\xad\x98\x75\xbd\x65\xe7\x20\x4c\xba\xb2\xb5\x2a\x3a\x53\x7e\x8b\xf4\x9d\xc6\x57\x70\x91\x06\x4f\xdf\x20\x4f\xbf\x58\xcd\x79\xaa\x16\xe3\x66\xd5\x38\x03\xd4\x9c\x71\x5a\xf0\x41\x04\xea\xfa\xa8\xa2\x29\x8d\x6e\x0c\x6f\x4b\x34\x80\x86\x92\xab\x1c\xb6\x60\xe3\x30\x6f\x41\x7f\x00\x70\x2f\x16\x73\x66\x79\x68\xa8\x82\x85\xb5\x32\xb2\xed\x96\xb8\xc7\x74\x08\x3e\x34\xc5\x96\x3c\x52\xc0\x6f\x0d\x36\x14\x96\x7c\x2e\x21\x0b\xe7\xac\x23\x18\x62\x64\x6a\x0c\x13\xd8\x69\xc1\x42\xa4\xa4\x7c\xe4\x24\x01\x95\x7d\x6f\x88\x70\xdb\xc9\x9d\xa6\x08\x71\xee\x93\x16\x09\xa2\x90\x9f\x97\x07\x94\x55\x3e\x18\x48\xf2\x6f\xe1\xd0\xc7\x83\x38\x6e\xe2\xa5\xff\xd5\x77\x43\xcb\xe4\xef\xa1\xb4\x9e\x94\x55\x5b\x17\x0e\xfe\x76\x20\x3a\x3a\x99\x0a\x3e\x05\xc1\x0a\xab\x5a\x8b\x80\xbd\x44\xd6\x2e\xcd\xe0\x7f\xd9\xd9\x1a\xa3\xc8\xf3\x10\xce\xe0\x4e\x18\xa5\xb5\xe0\xe5\x0d\x06\x34\x77\x70\x06\xab\x78\x35\x48\xc8\x86\xbb\x8b\x33\xf8\xf8\x71\x7c\xd5\xfd\xfe\xf4\x89\x09\x84\xdb\x34\x94\x44\x3d\x9c\xb5\x88\x89\x7a\xde\xd1\x28\x0d\x24\x3e\x7e\x1c\xcf\xf9\xaf\x4f\x9f\x60\x34\x22\xfd\x8e\x94\xa4\xd5\x95\xf0\xdb\x6b\x99\xb8\x10\xe8\x64\xfe\x09\x0f\x7d\xfa\x34\x89\x73\xd9\x11\xd7\xb2\x91\xb6\x9b\x28\x0e\xd9\xee\x3e\x65\xaa\xf2\x71\xc2\xc8\x64\x96\x47\x8c\x9f\xa7\xb3\x4d\x60\x3a\x5f\xda\x46\xcb\x77\x21\x41\xa6\x77\x6b\x86\xfc\x67\xf0\x3f\x57\x4b\x7e\x4e\x79\xf0\x5d\xb0\x07\x82\x8e\xf1\x2f\xaf\xdf\x5d\xfd\xf7\xf5\xea\xdd\x2f\xb7\xef\xae\xfe\xeb\x7a\xbe\x62\xf2\x8f\x1f\xd5\x1a\x0c\xc2\x98\xba\x21\x98\xc2\x28\xdd\xee\xe3\xc7\xda\x29\x13\xd6\x70\x92\x86\x1f\xef\x0a\x22\x38\x83\x3f\xc9\x93\x48\xdc\x11\x8e\x00\x8d\xec\x7e\x25\x76\xdc\x31\x51\xeb\xf3\x3b\x1c\x2b\xac\x08\x8f\x9e\xc1\x9f\xc6\xd3\x35\x3c\xbf\x38\x49\xdb\x7e\x9f\x73\x6c\xab\xbe\xc0\x5a\x52\x7b\xd6\x67\x1c\x77\x3d\xe0\xcc\x3f\x39\xda\xb2\x6c\x71\xb1\xfc\x67\xf0\xff\x41\x83\x7f\xf0\x2f\xb9\x32\x93\x5c\xf8\x32\xfe\x5c\x5c\x2c\x61\xf4\xfa\x41\x4c\xc6\x75\xfb\xa5\x18\x8a\x64\xf8\xa5\x90\xfc\x72\x6c\x44\x46\x3a\xa2\xd6\xb3\xd3\x59\x5d\x9b\xb3\x27\x08\x90\x96\x6d\x85\xd5\x19\xb9\xf0\x26\x7f\x82\xd0\x68\x99\x52\xc2\x38\x70\xfd\xbd\xb8\xb8\x97\x3b\xbf\x32\x57\x5e\x5f\x1e\x99\x25\x7b\xee\x94\xbc\xe2\x17\x53\xb3\xbf\xcd\xd6\xdf\x3d\x6a\xe9\xef\xbe\xc6\xce\xdf\x7d\x85\x95\x89\xa8\xb3\xe0\xd7\xda\xfd\x3b\x18\xd5\x08\x55\xad\x9e\x22\x1f\x46\x09\xca\x77\x77\xad\xbd\x9f\x3f\x85\xb9\x13\xd3\xb5\x57\x1f\xb0\xe3\xfa\xed\xcd\xbd\xd4\x8d\xab\xfe\x99\x47\xff\xb0\x79\x74\x72\x1c\x5c\xcb\x8b\xf3\xd5\xfc\x05\x8c\x46\xbf\xda\x7c\xc4\x4d\xc8\x83\x48\xeb\x48\x4c\xd4\xf5\xe9\xbd\xe5\x08\x70\xbe\x14\x65\x1d\x79\xc2\x23\x5f\x08\xdd\xaf\x88\xc1\x8e\x23\x21\x93\x51\x8d\x8e\xfd\xf1\x49\x02\xb2\x63\x5d\x61\xc5\x20\xe2\x49\xc0\xc9\x81\x6d\xa8\xea\x03\xdb\x6f\x1f\x93\x3c\xb0\xb9\x10\xa1\x28\x41\xa2\x2f\x9c\xca\x93\xdb\x1f\x8f\xd4\xdb\xd6\xf2\xfc\xed\x12\x22\xf5\xfd\x17\x47\x59\xcb\xe7\x49\x03\xbc\x3b\xaf\xf5\xfe\xfb\x81\x6d\xb8\xd1\xe6\x57\x35\x31\x7e\x0f\xb1\xfb\x87\x8f\xdb\xfe\xe5\x1e\x8d\xda\x01\xfc\x87\xcd\xe3\xab\x0f\xb6\x42\x21\x0c\xcf\x0c\x54\x28\x91\xdf\x54\xf1\xb7\x05\xc9\x32\x95\xf8\x60\x4d\xf7\x82\x03\x5e\xd3\xb3\x67\xe7\xb7\xaf\xbf\xa7\x2b\x1f\xf1\x99\xc1\x49\x8a\x2a\x8a\x6c\x89\xeb\x93\xf6\xac\xff\xa4\xbc\xf8\xf7\x1d\xc3\x2c\x8e\x4f\xe0\x6c\x7b\x72\x6f\xb2\xd8\x4e\xea\x7c\x8d\x85\x5a\x2b\x94\xf0\xab\xcd\x63\x62\x8e\x1f\x37\xd8\xf4\xb2\x82\xa9\xe8\x99\x3c\x28\x42\x3d\x18\x4c\x1e\x46\x90\xfd\x41\xe3\x00\x5e\x36\x39\x3a\xc3\x23\xef\xaf\xf1\xef\x1e\xf9\x03\x07\x3f\x3c\x7b\x52\x17\x3f\xb0\xfd\x9c\x8f\xff\xa3\x17\xaf\x23\x2b\x92\xc3\xc5\x97\x6b\xc1\x82\xaf\xc5\xce\x90\x73\xf8\x34\x5e\xcc\xe0\x40\xd0\xcd\x64\x63\xc2\x22\x17\x0a\xa9\xe6\x8d\x61\x89\x18\x07\xc1\x7e\x36\x99\x6c\x3b\xf6\x63\x65\x27\xd2\x16\x7e\xe2\x70\x8d\x0e\x4d\x81\x93\xee\xb5\x6c\x8f\x6c\x24\x6a\x35\xb9\x3b\x1d\x9f\xfe\xdb\x64\x40\x1e\x7e\x77\x9a\x3e\xa6\xea\x97\xd5\x74\x7a\xbf\xf4\xb6\x03\xcc\xba\x37\xed\x3f\x92\xeb\xb1\x52\xfd\x2d\xa6\x66\xcb\x60\x9d\xd8\xe0\x37\x18\x96\x0d\xfe\x8e\x91\xf6\xe7\x06\xda\xd9\x00\x6e\x6c\x21\x62\x83\x02\x7e\xef\x03\x56\xe3\x8c\x97\xd2\x45\x62\x44\xbe\x2d\x55\x40\xad\x3c\x8f\x86\x79\x40\xdd\x7b\xb7\x45\x3a\xf7\xb0\x2b\x55\x51\xb6\xc1\xa8\x3c\x08\xad\xed\x0e\x65\x1a\xd9\xa3\x8f\x83\xee\xb8\x78\xa9\x0e\xd3\xcc\xf1\x84\xa4\x78\xb1\x5a\x2d\xd2\x89\xdd\x07\x15\xc1\x76\xef\xb0\xa0\x6e\x72\xad\x0a\x88\x83\x97\x34\x66\xdd\x61\x0e\x77\x4a\x80\x80\xe7\x57\xab\xf6\x7b\x91\x71\xd6\x63\x35\x3b\x9a\x71\x53\x2a\x22\xc7\x7c\xe6\xbf\xef\xef\xf0\x47\xe3\xe1\x1f\xa7\x3e\xcb\x62\x2e\x5e\xfe\x38\x3b\x84\xb3\x6c\x5f\xbd\x3d\xf1\xe7\x2b\xf7\xbe\x2e\x79\xaa\x17\x41\x03\x98\xa7\x34\x8c\xfc\x36\x80\xf4\xda\x7e\x41\xc8\x32\x2c\x7f\x84\xda\xd9\x3b\x25\xd1\x79\xf0\x4d\x51\x82\xf0\xf0\x4a\x19\x65\xdb\xb7\x75\x73\xac\xcb\x6c\x00\xcf\x29\x4a\x55\x41\xca\x88\x5f\x72\x1d\x14\xc2\x69\x2d\x7e\xca\x75\x65\x64\x6d\x95\x89\xa7\xc7\xa5\x56\xe4\xf8\xab\x2f\x5c\x7c\x1b\xd4\xb3\xd1\x63\x3a\xfe\xe3\xbe\xef\xc9\x96\x3b\xb5\x0e\x8f\xcb\xfd\xc6\xa3\x7b\xfd\x99\x81\x3e\xc0\x79\x13\x4a\x7e\x51\x96\xfa\x04\x23\x4c\xe8\x51\xc7\x85\xf4\x81\x4a\x5b\x86\x7b\xcf\x07\xf0\xd3\x74\x0a\xaf\x2e\x48\xae\xb2\x31\xdb\xa5\xfa\x80\x17\x7b\x2a\x9b\xf4\x20\xfe\xcb\xb2\x9f\x8f\xdc\xff\xa1\x88\x87\x8f\x75\xa6\x3e\x49\x3c\x83\x13\x61\xac\xd9\x57\xb6\xf1\xf7\xc4\xee\xad\xff\x5f\x00\x00\x00\xff\xff\xbe\x37\x36\x6d\xd9\x2b\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 11225, mode: os.FileMode(420), modTime: time.Unix(1582241932, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x11\xd2\x5d\x26\x97\x17\xc8\xa6\x80\x10\x9b\x22\xd1\xa8\x3f\x2b\xcb\xe0\x49\xb0\xe2\x8c\x61\xec\x09\xad\xa2\xbc\x7b\x15\x40\xad\xa8\x4a\x77\x47\x3e\xdf\xf9\x3c\x42\xae\x43\x8e\x08\x05\x74\x86\x9c\xf7\x46\xd5\x98\x90\x3a\x28\xa0\x64\x41\x85\xef\xb8\x93\x64\xb6\x7e\x44\x2a\x21\x42\xaf\x0c\xd7\xd2\x22\xa5\x08\x05\x9c\x02\x37\xc8\xc0\x42\x90\x65\xc9\xc4\x66\x35\x87\xbe\xcf\xcb\x31\xd9\x61\x50\x3e\xd4\x50\x8c\x2f\x2f\x81\x9b\xb9\xe3\x61\xf8\xbf\x0b\x64\x03\x67\xd8\x21\xa5\xcc\x87\x5a\x21\x73\xe0\x9f\xd4\xe5\xaf\x2c\x26\x8b\xcc\x2a\x48\x3a\x48\xba\xcf\x04\x49\x2a\xee\x83\x78\xab\x13\x1b\x8a\x15\xb2\xae\x9c\xc7\xf1\xc4\xb7\xc5\x93\x3a\xed\x91\x74\x0a\xdf\xe5\x97\x70\xfd\xa8\x17\xaf\xab\x52\xaf\x37\x7a\xf1\xbc\x9a\x95\xaa\xef\x5d\x05\x84\x90\xcf\x0e\x12\x61\x0a\xd9\x30\xa8\xbe\x3f\xb0\xa3\x54\xc1\x84\xf1\x28\x18\x93\xde\x8d\x65\x01\xff\xec\xe4\x02\x9e\xa1\x0c\x90\xec\x39\x5d\x15\x1b\xd3\x2e\xb7\x30\xcd\xef\x59\x5a\x6c\x03\x7f\x8c\x9e\x7c\x5a\xc1\xf2\x61\x72\x9d\xfc\x6e\x9b\xbb\xd8\xfc\xa9\xb3\x2e\x36\x37\xb2\xcb\xe2\xc6\xa6\x8e\x82\x82\xea\x33\x00\x00\xff\xff\x61\xe0\x01\xde\xf9\x01\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 505, mode: os.FileMode(420), modTime: time.Unix(1548721562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configKubernetesTemplateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x8f\x9b\x30\x10\xbd\xf3\x2b\x46\xac\xf6\x48\x20\x97\x1e\x7c\x5b\x25\xab\x74\xab\x86\x8d\xaa\x55\xef\xc6\x19\x12\x2b\xf8\xa3\xf6\x38\x6d\x14\xf1\xdf\x2b\x30\x54\x24\x34\x6a\xe7\x34\x9e\x61\xde\x7b\xf3\x01\xb7\xf2\x3b\x3a\x2f\x8d\x66\x50\x71\x12\xc7\xfc\xbc\x4c\x4e\x52\xef\x19\x7c\x31\x55\xa2\x90\xf8\x9e\x13\x67\x09\xc0\xd3\x13\xac\xdf\xa1\x7c\xff\x80\xd5\xe7\x97\x72\xf3\x0a\xe5\xcb\xf6\x35\x01\xd0\x5c\x21\x83\xeb\x75\xf1\xc1\xfd\xe9\x6d\xdf\xb6\x43\xcc\x5b\x2e\x62\xa2\x1c\x5f\x6d\x9b\x78\x8b\x82\x41\x02\x50\x71\x71\x32\x75\xfd\x55\x2a\x49\x0c\x8a\x04\x40\x18\x65\x1b\x24\x69\xb4\x67\xb0\x4c\x00\x08\x95\x6d\x38\x61\xc7\x0e\xd0\x57\xf6\x1e\x80\x43\x4f\xdc\xd1\xce\x34\x52\x5c\x18\x94\x78\x46\x37\xa4\x84\xd1\xc4\xa5\x46\xe7\x7b\x9a\x68\xd9\x1f\x95\xd6\x49\x4d\x35\xa4\x75\xd0\x1a\x9b\xec\xa7\x71\x27\x74\xd9\xb3\x4f\x61\xaa\x7f\x34\xa9\xf8\x01\x19\x98\xa3\x0f\x9d\xba\x4a\x9a\x7c\x28\x3c\x85\x0a\x9d\x46\x42\x3f\x60\xb0\x4e\xa9\xa7\xfb\xe2\x5d\x68\x9a\x51\xe6\x5b\x5d\x1a\xda\x39\xf4\xa8\xa7\xdf\x71\x77\xf0\x6c\xf2\xee\xe4\x0e\xfa\xd2\xfb\x70\xe4\x9a\x85\x5d\xd0\xb3\x58\x96\x09\xa3\x6b\x79\x98\x25\x72\x24\x91\xc7\x5c\x7e\x3b\x86\x18\x5c\x5c\xd4\x9c\x38\xcb\xa8\x1b\xcf\xfa\x3e\x71\xbb\xf7\xd1\x1c\x7a\x13\x9c\xc0\xbb\xbe\xba\xc4\x8f\x80\x9e\x66\x71\x00\x61\x43\xb7\x1f\x59\x83\x46\x58\xac\x6c\xf0\x50\x40\xd6\xb6\xd7\x6b\xff\xe8\x1c\xc0\xc6\x23\x74\x5e\xba\x2c\x0a\x95\x76\x1e\xea\x5b\xe6\x68\x0a\x95\x71\x97\x09\xde\x37\xae\x36\x15\x14\x8b\x01\x72\xbc\x82\xe7\x45\x51\x6f\xd2\x21\xdd\xc3\x35\x1e\x23\xc1\xa7\xed\x5f\xf1\xcf\xa6\x09\x0a\xb7\x26\xe8\xfb\x26\x1e\xde\x98\x27\xe3\xf8\x01\x1f\x1e\x59\x2f\xb8\x03\xdc\x71\x3a\x4e\xeb\x73\x63\x69\xd8\xd0\x74\x51\xd9\x5e\xba\xfc\x31\xd8\xa8\x23\x2e\x33\x8b\x82\x1f\xd3\x4d\xae\x61\xf2\x91\x47\x11\x9c\xa4\xcb\xca\x68\xc2\x5f\x74\xdb\xa9\x75\xf2\x2c\x1b\x3c\xe0\x9e\x01\xb9\x80\x49\x32\x9d\xcd\x7f\xfd\x77\xff\x9a\x09\x2a\x4b\x97\xb5\x74\x0c\xae\xed\x0c\xed\x51\x67\x31\xbe\xe5\xf6\x56\x6e\x2c\x1a\x88\x87\x4e\x7f\x07\x00\x00\xff\xff\x0a\xf4\x7b\x60\xf8\x04\x00\x00")

func configKubernetesTemplateYamlBytes() ([]byte, error) {
	return bindataRead(
		_configKubernetesTemplateYaml,
		"config/kubernetes-template.yaml",
	)
}

func configKubernetesTemplateYaml() (*asset, error) {
	bytes, err := configKubernetesTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/kubernetes-template.yaml", size: 1272, mode: os.FileMode(420), modTime: time.Unix(1582242960, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/gridengine-template.txt":  configGridengineTemplateTxt,
	"config/pbs-template.txt":         configPbsTemplateTxt,
	"config/slurm-template.txt":       configSlurmTemplateTxt,
	"config/default-config.yaml":      configDefaultConfigYaml,
	"config/htcondor-template.txt":    configHtcondorTemplateTxt,
	"config/kubernetes-template.yaml": configKubernetesTemplateYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":      {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt":  {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":    {configHtcondorTemplateTxt, map[string]*bintree{}},
		"kubernetes-template.yaml": {configKubernetesTemplateYaml, map[string]*bintree{}},
		"pbs-template.txt":         {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":       {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
