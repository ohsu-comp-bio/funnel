// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xdb\xb8\xb2\x7f\xf7\xa7\x98\x9b\xf4\xe2\xb6\x80\xe5\x38\xbb\xd8\x8b\x5d\x03\x79\x70\x9c\x34\xf5\x6e\x9a\x7a\x6d\x77\x73\xef\x79\x09\x28\x69\x24\x71\x23\x91\x2a\x49\xd9\x75\x73\xfa\xdd\x0f\x86\x7f\x24\x3b\x71\x9a\xec\xd9\x60\x71\x80\x73\x0a\xb4\xb0\xc8\xe1\x6f\x86\x33\xc3\x19\xce\xb0\x0b\x54\x2b\x54\xa3\x1e\xc0\x21\xbc\x93\xda\x08\x56\x21\xc8\x0c\x4c\x81\xf0\xb6\x11\x02\x4b\xd0\x96\x64\x00\xef\x19\x17\xe5\xa6\x0f\xa6\xe0\x1a\xb8\x86\x46\x63\x0a\xf1\x06\x58\x63\x64\xa4\x13\x56\xa2\xd2\x16\xc7\x48\x48\xa4\xc8\x78\xde\x28\x84\xb5\x54\xb7\xa8\xf4\xa0\x07\x16\xff\x8a\x55\x38\x82\x52\x26\xac\x2c\xa4\x36\x3d\xbb\x60\x26\x95\x71\x70\x99\x54\xf0\x6e\xb9\x9c\x41\x22\xab\xaa\x11\x3c\x61\x86\x4b\x01\x4c\xa4\x56\xa2\x35\xc6\x90\x32\x5d\xc4\x92\xa9\xd4\x42\x2e\x97\x33\x5a\x3d\x82\x1f\x87\xc3\xe1\x3e\xb4\xf9\x6c\xb2\x0b\x46\xcb\xe6\xb3\x89\x5b\xf5\xd3\xf0\x27\xbf\x6a\x8e\x9f\x1a\xae\x10\x62\xa6\x79\x42\x7b\x2a\x50\x98\xc0\x9f\x80\x88\xbf\x53\x05\x8c\x67\x53\xda\x3e\x17\x39\x30\xa8\x99\xd6\x6b\xe9\xc4\x39\x84\x69\x66\x59\xf7\xa1\x62\xb7\x08\x9a\x34\x60\x24\xd4\x4a\xd6\xa8\xca\x0d\x28\xd4\x46\xf1\xc4\x00\x4b\x12\xd4\x9a\xe6\x08\xd7\xa9\x0b\x32\x5e\xa2\x45\x79\x8d\x83\x7c\x00\x49\x51\xc9\x14\xfe\x77\x38\x84\xcc\x5a\x62\xe0\xc8\x06\x9b\xaa\x7c\xe3\x76\xea\x59\x8f\x80\xc5\xc9\xf1\x77\xdf\xbb\x9d\x4c\x45\x52\x36\x29\x02\x83\x83\x09\x4b\x0a\x8c\x26\x52\x18\x25\xcb\x11\x08\x19\x69\x23\x15\x1e\x38\x1d\x17\xc8\x52\x54\xc0\x05\x5c\xa0\x39\xba\xe4\xda\x90\x7c\xb5\x14\x1a\x5b\x43\xd6\x0a\x57\x28\x0c\x24\x2c\x29\x68\xbf\xf1\x06\xb8\x30\xa8\x2a\x4c\x39\x53\x1b\xab\x11\x9e\xa0\xb5\xef\x19\xd7\x2c\x2e\x91\xb0\x2d\xe3\x11\x18\xd5\xa0\x13\xea\x92\x57\xdc\x38\x1d\xf2\x2f\xce\xc3\x98\xbe\x05\xfc\x8c\x49\x63\xa4\x82\x52\xe6\x1a\x5e\x6b\x93\xca\xc6\x1c\xa1\x52\x6f\xfa\x24\x57\xbc\x31\x0e\xfa\x3d\xfb\x7c\xee\x49\x2f\x65\xbe\xe0\x5f\x70\x04\xc7\xc3\xe1\x70\x08\x87\x70\x3c\x84\x5f\x4e\x1d\x97\x65\x81\xb0\xed\xc1\x2c\x31\x7c\xd5\x9a\x2d\x65\x86\xc5\x4c\x93\x8d\x93\x5b\x14\xa9\x5d\x32\x5e\x31\x5e\x92\xd8\x61\x54\x8f\x20\x96\xa5\x49\xe3\x3e\xa4\x1b\xc1\x2a\x99\xc6\xb4\x37\xbf\x36\x4c\x6e\x0d\x69\x3a\x3d\x00\xa7\xb2\x34\x67\xa7\xee\xb7\x33\x8e\x29\x82\x7d\x5b\xce\xde\xc2\xf4\x87\xe6\x47\x30\x38\x72\xb6\x8d\xe8\x9c\x44\x29\x57\xfe\x7b\x90\xc6\xbd\x9e\x03\x3a\xb3\x52\x04\xe8\x43\xfb\xf7\x94\x69\xb4\x1b\x35\x92\xfc\xcd\x3a\x68\x90\x16\x0c\x6d\x47\xb7\xd4\x4b\xfa\x0c\x0b\x46\x70\xe0\x18\x1c\x6c\xa1\x8d\xaf\x17\xa0\x30\xe7\x52\xb4\x83\x73\xfb\x39\x82\x83\x8e\x6e\xa2\x30\xa5\x33\xc1\x4a\xdd\x89\x12\x96\x8f\x9d\x3f\xdf\xe2\x06\xa6\x67\x5b\xb3\xbf\xe0\x66\x07\x24\xd0\x2f\x30\x51\x68\xc2\xb2\x5f\x70\xb3\x45\xe1\xe6\xec\x32\x3b\x7a\x5e\x32\x6d\x78\xb2\xa5\x5a\x85\x19\xff\xbc\xbd\x77\x2e\x52\xfc\x8c\x1a\x5e\x93\x57\xf5\xc1\xfa\xac\xee\x83\x90\x29\xea\x37\x7e\xdd\x94\x68\xdc\xd2\x7b\x5a\x20\xcc\x8f\xf3\xcb\xe0\x35\xe8\xf8\x69\x64\x2a\x29\x42\xf8\xf3\x84\x1f\xe7\x97\x23\x28\x8c\xa9\x47\x47\x47\x6d\x14\x1b\xfd\xf4\x9d\x0b\x3e\x97\x32\xcf\x5d\x34\xb5\x3e\x2f\xf3\x9c\xce\x4c\x89\x2b\x2c\xf5\x08\x52\x8c\x9b\x9c\xfc\x3a\x93\x7d\x40\xa5\xa4\xb2\x84\x97\x34\x3d\xb2\xc3\x7e\xe1\xb5\xe2\x06\xdd\x91\xb0\x0e\xc4\x35\xd4\xcc\x14\x03\x8a\x2e\x58\xd5\x66\xd3\x77\x93\x8c\xe2\xab\xe2\xc6\xa0\x20\x42\x6d\x52\x54\x5e\xd2\x0f\x8d\xa9\x1b\xf3\x96\x97\xe8\xf4\xe8\xce\x86\x4e\x0a\x4c\x9b\x92\x0e\xbd\xee\x42\x24\xed\xf9\x62\x72\xde\x87\x0f\x35\x0a\x6d\x58\x72\xdb\xb7\x11\xf7\x3d\x13\x0d\x2b\x29\x7a\xd6\x8d\xe9\xce\xc7\x00\x7a\x8b\x80\x13\x12\xc7\x1a\x64\xe6\xa5\x50\x8d\x00\xb6\xcd\xc9\xa0\x6a\x03\x2f\x45\x27\x10\x4c\x48\x8d\x89\x24\xac\x1e\x40\x00\x9b\x33\x13\x4e\xf5\x30\x1c\x6d\x70\x74\x2d\x97\x8a\x89\x8d\x8d\x1c\x56\x33\x81\x09\x85\x0a\x29\x70\x97\x55\x80\x9d\x14\x8d\xb8\x25\xdc\x16\xa4\x94\x22\xa7\xe5\x6b\xc6\x0d\xc4\x68\xd6\x88\x02\x9a\x3a\x65\x06\x35\xc4\x98\x49\x85\x50\x31\x75\xeb\xe2\x3b\xf9\x10\xa4\xc8\xd2\xc7\xe4\xbf\x92\x29\xce\xb8\xc8\x97\xbc\x42\xd9\x98\x11\x45\xec\x9d\x3d\x54\x5c\x34\x06\xf7\xb3\x27\xfd\x7b\x1e\xd6\x82\x4c\x99\xfe\x7d\x19\xc8\x3e\xcf\x92\x62\x2a\xb8\x69\xa5\xf8\x7e\xb8\x23\xc6\x0f\x5e\x0c\xed\x69\x83\x93\x76\x2e\xe5\xc5\x98\x9e\xc1\x9a\x97\x25\xc4\x68\x33\x7b\xc5\x28\x0b\x96\xe5\x06\x72\x14\xa4\x5e\x4c\x9d\x87\x4d\xcf\xba\x13\x7a\x08\xe4\x69\x1a\x12\x85\x44\x00\x69\xa3\x48\xf0\x5a\x49\x3a\xde\xf4\x33\x40\x06\x77\xe5\xc2\xf9\x75\xca\x15\x26\x46\xaa\x8d\x03\xbd\x96\xea\xf6\x8c\xab\x3d\x71\xb1\x13\xb7\x55\x47\xc1\xc8\x5c\x04\x96\x96\x2e\x0c\x90\x6a\x91\x1c\x9a\x09\x4b\x66\x9c\x32\xfa\xc0\x8d\x93\x40\x17\x8d\x81\x54\xae\xc5\xc0\xe3\x45\xc7\x50\x21\x13\x9a\xc8\x15\xd2\xb1\x10\x32\x2c\x1b\xc0\x30\x4c\xba\x01\xe0\x95\xcd\x7b\x06\xcb\x0d\xb0\xcc\xa0\x3b\x3b\x19\x57\xda\x58\xaf\x74\xa8\xad\x09\xa2\xe3\xa0\x9e\xb1\xd5\xb9\x93\x61\x57\xab\x46\x6d\xc8\xf2\x29\x1a\x4c\x0c\xac\x0b\x66\x93\xb0\x6c\x54\x82\xee\x80\xb3\x36\x41\x19\x09\xdc\x0c\x20\xa4\x05\xcc\xb8\x20\xd5\xce\x5b\x72\xee\x76\x6d\x59\x85\x1b\x98\xbb\xc0\xc8\x15\x2a\xc5\x53\xd4\x4e\xeb\x31\x16\x6c\xc5\xa5\x8f\x15\x2d\x40\x17\x61\x27\xb3\x8f\xba\xe3\x3c\xe8\xc6\xeb\x46\x8f\x60\xd8\x6b\x07\xe6\xe3\xf7\x1d\x9d\xcd\xd9\x17\xa7\x1d\xf9\x9c\x55\x17\xf1\x08\x86\x83\xad\x15\x67\x5c\xdf\x82\xae\x59\x82\xdf\x58\x48\x44\x0f\x56\xbe\xb5\x16\x5e\x47\x36\x9e\x82\x69\x68\xf7\xdd\x92\x9d\x20\xa4\x37\x22\x81\x35\xa7\x0c\xfc\xe0\x22\xdb\xae\x78\x78\x88\x6c\x84\xb7\x81\xc0\x05\xa3\x1f\x76\x4f\x90\xa7\xec\xb6\x37\x9b\xb4\xae\x41\xee\xe7\x62\xc8\x91\x65\x4e\xd6\x7d\x1e\xab\xd6\x5d\xf6\x87\x3e\x4f\xbb\x9d\x5a\xfe\x50\x7a\xd9\x97\x62\x5e\x2c\xcd\xec\x4b\x35\xbd\x47\xef\x61\xf7\x32\x49\x6f\xff\xed\xcb\xa6\xd5\x3e\x14\x86\xb6\x2f\x55\x1f\x74\xd9\xa8\xaa\x0f\x75\xac\xfb\x90\x93\x17\x8b\x9c\x0b\xa4\x2b\x36\xe5\xa7\x3e\xe4\x09\xf6\x41\x86\xdc\xd5\x3b\x75\x48\x1e\x88\xc4\x69\xd3\x55\xe0\xe2\x4f\x47\x20\xb5\x8e\xff\x6e\x39\xb1\xfc\x9c\x8a\x97\x58\xd5\xa5\xf5\x81\xbf\xfb\x8d\x36\x82\xaf\x50\x69\x84\x13\x58\x31\xc1\xcb\x92\xf9\x89\x1c\x0d\x8a\x15\x9c\xc0\x92\x6e\xbb\x6e\xcc\xdd\x6b\xed\xc6\x4e\xe0\xee\x6e\x70\xde\x7e\x7f\xfd\xea\x49\x98\xca\x9b\x8a\xae\x29\x70\xe2\x8b\x24\x9b\x3a\xa3\xc8\x17\x03\x77\x77\x83\x89\xfd\xf5\xf5\x2b\x44\x11\x45\x97\x88\xa7\x34\xba\x64\xfa\x76\x9a\xb6\x38\xa5\xcc\x1d\x0f\x1f\x3b\xbf\x7e\x3d\x72\x8a\x8b\xec\x2d\x28\x2a\x65\x1e\x84\x22\x9f\xb8\x4f\xeb\xc3\xac\x33\xaa\x27\x94\xd6\xa2\x8f\x53\xca\xc6\x78\x4a\x5d\xc8\xa6\x4c\x6f\x8c\x62\x42\x67\xa8\x6e\x32\x9b\x06\x4e\xe0\xff\xcf\x17\x9e\x62\x5d\xa0\xb8\x31\xb2\x23\x69\xc1\x3f\x5c\xdd\x9c\xff\xdf\x74\x79\xf3\x61\x7e\x73\xfe\xdb\x74\xb2\xf4\x0b\xee\xee\x78\x06\x02\x61\x40\xb1\x06\x86\x10\xb5\x3b\xbd\xbb\xab\x15\x17\x26\x83\x03\x85\x9f\x1a\xd4\xe6\x26\x21\x92\x13\xf8\xef\xf4\xc0\x91\x6f\x91\x46\x80\x22\xdd\xfa\xf6\xa0\x36\x22\x51\x58\xf9\x26\x6e\x85\x95\x54\x1b\x42\x1e\x0c\x33\xb8\x38\x3d\xf0\x0b\x9f\xc6\x77\x81\xeb\x49\x06\x29\x05\xc1\x6d\x78\xb7\x6e\x0f\xbe\x1f\xf8\xd4\xa0\x2b\xa5\x66\xa7\x8b\xc7\x3c\xf4\xf0\xbf\x62\x2e\x8e\x62\xa6\x8b\x30\x30\x3b\x5d\x40\x74\x45\x66\xb4\xd7\x83\x4e\x5e\x37\x23\x9f\x36\xb0\x23\xc4\xa7\x7d\xe6\x39\x66\x73\x60\xa5\xbb\x96\x9f\x1c\x8f\xea\x5a\x9c\xbc\x98\xed\x02\x78\x85\xd5\x09\xe9\x35\x8f\x5f\xcc\x6a\x01\x9a\xbc\xbb\xc3\x7e\xca\x64\xf7\x8e\xfd\x3f\x79\xc8\x7b\x00\x17\x8a\xa7\xe7\x36\xe6\x3d\xdf\xf2\xaf\x1e\xb1\xfb\xab\xe7\x59\xfd\xd5\xb3\x6c\x4e\x64\xad\x35\xff\x88\x1f\xbc\x82\xa8\x46\xa8\x6a\xfe\x72\x47\xd7\xc9\x52\xdc\xac\x82\xfd\x2f\x5e\xce\xfc\x1e\x3a\xd3\xfc\x0b\xb6\xd8\x7f\x8d\xf9\x81\xae\x7b\x8b\xcb\x8f\xf3\xf7\x8f\xdb\xfe\xe8\xbe\xf1\x17\xa7\xe3\xe5\xe4\x1d\x44\xd1\xef\x32\x8e\x6c\x1e\xde\xe3\x09\x2d\x91\x70\xf5\xd4\xf1\x83\x09\x97\x2f\x9e\xf6\x82\x76\x81\x0f\xed\x4f\xba\xd7\xb3\x7c\xa4\x45\xa5\x20\x1f\xd5\xa8\xac\x7e\x5e\xd0\x61\x5a\x06\x15\x56\x36\x12\xbf\x60\x9c\xef\xc0\x4d\x55\x77\xe0\x7f\x5d\xc8\x98\x9c\x87\x02\x2f\xf4\xa1\x58\x92\xc8\x46\x18\xaa\xd1\x42\x1b\xc7\x06\xb4\x41\x57\x59\xd5\x52\x6b\x6e\xaf\xe3\xf6\x32\xb8\xbf\x0c\x4c\xb9\x4e\xa8\x9c\x08\x75\xe0\xd8\xe1\xb6\xf7\x3f\x87\x76\x21\x65\x5e\x22\x4c\x4a\xd9\xa4\x54\x07\xfe\x4e\xd5\xcd\xf4\xec\xcf\x32\x9b\x39\xa4\xc7\x18\x7d\x91\xe2\x4f\xef\xe7\x6f\x52\x74\x1b\xb9\x46\x9e\x17\x46\xef\xb6\x9e\x50\xb9\x98\x47\x75\xa6\x71\x35\x3b\x34\x35\x7c\x6a\x78\x72\x5b\x6e\xba\x4b\xff\x55\x47\x64\x0b\xb9\x52\x21\x4b\x37\x20\x45\xc9\x05\x55\xaf\x2b\x04\x4e\x77\x56\xe1\x41\x9a\xda\x56\x13\x01\xc0\xb1\xfa\x95\x50\x17\x6e\x7a\x04\xc7\x83\xa1\xdf\xde\x76\x27\x21\x61\x89\x6b\xe1\xc0\x78\x36\xa5\xf2\xb1\x29\x8d\x86\xd7\x95\xed\xd9\x22\x94\x5c\x9b\x3e\x18\x1f\x39\x74\x1f\xd0\x24\x6f\x3c\x8c\x6f\x35\x28\xcc\x14\xea\xa2\x2d\xa8\x6c\xff\x76\xb9\xbc\x7c\xb4\x99\xd1\x73\x5d\x48\x93\x14\x90\xa2\x4e\x14\x8f\xed\x56\xef\xd7\x9d\xa1\xbd\x34\xbe\x5e\x78\xea\x7b\x35\x00\xb1\xb3\x13\xc1\x5d\x7f\x96\xf1\x19\x66\xce\xc3\x41\x61\xad\x50\xdb\x4b\xf2\xbd\x7a\x36\xdb\x85\x0d\xbb\x61\x1a\x09\xc1\x17\xc7\xa1\x15\x04\x1e\x35\x98\xf1\x6a\xbb\x11\x6a\x83\x64\x8a\x59\x68\x05\x4e\x2b\x96\xd3\x6c\x2a\x93\x5b\x54\x03\x2e\x8f\x64\xa1\x9b\x88\xe4\x8e\x62\x2e\x7d\x40\x1b\x59\x55\x9a\xb0\xe8\x0c\x33\xd6\x94\xe6\xbd\xbd\x37\x8e\xe0\xf8\xbb\x1f\x77\x27\x7e\x4b\x6c\xe1\xdc\x06\xd9\x9f\x65\x3c\x97\x25\x8e\xd5\x76\x8b\xf5\x67\x19\xff\x4a\xd7\x3c\x48\x98\x20\x3f\x45\x6e\x0a\xb4\xed\x21\x5b\x4a\x79\x4d\x56\xec\x8b\x14\x6d\xcd\x6e\xf7\x02\xaf\xc7\xf3\xab\x37\xed\x4e\x2d\xc8\x16\x6e\xd7\xde\x0d\x7a\xd3\x35\x26\x3c\xe3\x98\xc2\xef\x32\x76\x77\x4b\xf7\xc6\x22\x7d\x0b\xc7\x52\xd1\x5c\xda\x2a\x12\xb8\xf0\xdd\x82\x9d\xce\xf0\x83\xae\xf0\x6e\xcf\x77\xb7\x9b\xdb\xbb\xb6\x01\xcd\x75\x0d\x5f\xa4\x65\xf4\x8d\x86\x51\xcb\x04\xb4\x91\x8a\xe5\x08\x7a\xa3\x0d\x56\xb6\xfc\x3e\xf4\xef\x05\xe1\x29\xab\xb1\xb1\x40\xa3\xb9\x17\x1d\xe2\x8d\x53\x58\xa8\x20\xfb\x10\x37\x06\x36\xb2\x81\x8a\x22\x03\x08\xc4\xd4\x8a\x65\xf1\x78\x46\x53\xff\xa3\xd0\x1d\x68\xd7\x40\xf4\x41\xdc\x55\xab\x2e\x3e\x2c\x9c\x40\x5d\xa3\x38\x61\xee\x76\xe9\x45\x74\xa6\xb4\xc3\x5d\xe8\xb9\x2e\xb8\x41\x3a\xcb\x64\x45\x5b\xdb\x76\xaa\xb0\x85\xbb\x86\x75\xc1\x93\x22\xb4\x3b\xb8\x06\x56\x96\x72\x8d\xa9\x0f\xff\xa8\xdb\xce\xc3\xd8\x4d\x9c\x71\xa5\xbb\x96\x42\x04\x83\xa3\xd0\xb0\x5a\x7c\xdf\xf5\xf8\x1f\x69\xfc\x3f\xd5\xfa\xdf\xd7\xfc\x7f\x4e\xfb\xff\xe1\x03\xc0\x21\x5c\x2c\x76\x9f\x1c\x9e\x9b\xd4\xdc\xbf\x1f\x6a\x72\x60\x56\x0e\x76\x93\xc2\xf6\xa2\xa7\x72\xc3\x0e\x5e\xa6\x64\xe5\x5e\x0a\xc4\x8a\x2b\x29\xa8\x8c\xef\x38\x46\x3b\x29\x71\x67\xe1\x78\x2f\xfa\xae\xf4\xdf\xc4\x06\x78\xab\x64\x75\x2e\x56\xdd\xdb\x9a\xb5\xd6\x9a\x67\xa6\x63\xf5\x51\xa3\xb2\x31\xae\x1d\x69\x5f\x0a\xdb\x91\x71\x63\x8a\x8f\xf3\xcb\x6e\x60\x89\x82\x09\xb3\xbb\xcc\x8d\x4d\xcf\xba\x11\x77\xfa\x1d\x55\xef\x5b\x4d\xb9\xfb\x0d\x39\xa4\xf0\x42\x17\xb8\x52\xe6\x6d\xb3\xdd\x3f\x8f\x3d\xe8\xcf\xed\x6b\x98\x3d\xa3\x2f\x67\x57\xbe\x67\x9f\x79\xd5\x54\x1d\xb3\xed\x57\x45\xfb\xfa\xd8\x3d\x2d\x92\x00\x71\x93\x51\x46\xbf\xf7\x0e\x60\xf3\x92\x9d\xf9\xa3\x8f\x8d\x96\xaf\x72\x4f\xab\x5b\x49\x6e\x7f\xaf\x4b\xd5\xc9\xce\x33\x23\xdd\xe1\xe6\x76\xad\x9d\xdb\x19\x69\x0f\x1f\x7d\xfa\x47\x10\x17\x00\xca\x8d\x73\x9b\xf0\x52\x38\x80\xb6\x49\xfc\xef\xfd\x76\xf8\xa8\x91\xdc\xa3\x36\x65\x96\x67\x5b\xa9\x94\xf9\x8e\xa9\xc6\x16\xe9\x9c\x80\x6c\x23\x55\xe9\x91\xd3\x7a\xe4\x2d\x47\xbf\x5c\xf3\x6d\x87\xc8\x0b\xeb\x9a\xaf\xee\xa1\xd2\xb6\xe7\x21\x9f\xcf\x26\x2e\xc3\xce\x26\x5d\xd4\xff\xeb\x7a\xcc\x87\xb0\x54\x4c\x68\xba\xd8\x04\xb9\xe8\x4e\x60\xff\xc7\x00\xe9\x8e\x2b\xba\x84\x19\x52\x1c\x17\x9d\xaf\xfd\xc7\xd3\xfe\xa5\x5f\x7e\xff\x11\x00\x00\xff\xff\xbd\x8a\x81\x77\xe1\x23\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 9185, mode: os.FileMode(420), modTime: time.Unix(1508879845, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\x03\x31\x14\x85\xf7\xf3\x14\xd7\xa9\x5d\x26\x33\x2f\xe0\xaa\x95\xe2\xc6\x85\x08\x2e\x25\xd3\xdc\xd8\x4b\x66\x92\x21\x3f\x2a\x86\xfb\xee\x32\x69\x11\x0a\x63\x77\x87\xc3\x77\xbe\xc5\xd9\xdc\x75\x03\xb9\x6e\x50\xf1\xd4\x6c\xee\x41\x3c\x43\x29\xf2\x55\x45\xfb\xa4\x99\x6b\xe3\x97\xe6\xcd\x07\xbb\xa7\xc0\xdc\x99\xec\x1c\x8e\x22\x26\xed\x73\xaa\x00\xfe\x07\x60\x08\x4d\x29\x64\xc0\x21\xc8\xdd\x9c\x23\xf4\x20\x98\x9b\x52\xe6\x40\x2e\x19\x68\x97\xf9\x8c\x30\xcd\x04\x5b\xdd\x9e\xa1\x0a\x08\x40\xa7\x6b\xba\xcc\x5f\xd4\x74\x18\xa0\x97\x6b\x86\x11\x4e\xef\x9f\x13\x4e\x0f\x5b\xd9\x9b\x43\x7b\x81\xd7\x3d\x7b\x8a\xf6\xa6\xc8\x44\xfa\xc1\x3f\xd3\x19\xbf\x52\x35\xa5\xc8\xc7\x6f\x3c\xe6\xa4\x86\x11\x99\xe1\xcb\x07\x8b\x01\x42\x76\x20\xc4\xd1\x3b\x43\x1f\xcb\x23\xbb\x9a\x98\x41\x88\xa4\xa2\x15\xa4\xaf\xae\xfd\x0d\x00\x00\xff\xff\x24\x76\x8a\x2a\x79\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 377, mode: os.FileMode(420), modTime: time.Unix(1505922697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xcd\x6e\xe2\x30\x10\xc0\xf1\xbb\x9f\x62\x84\xb4\x47\x67\x79\x81\x5c\x16\x22\xc4\x65\x91\x68\xd4\x8f\x53\x64\xe2\x49\xb0\xe2\x8c\x61\x6c\x87\x56\x91\xdf\xbd\x0a\x20\x2a\xaa\xd2\xdb\x24\xf3\x9f\x9f\x1c\xc9\x0c\xc8\x1e\x21\x87\x41\x91\xb1\x56\x89\x16\x03\xd2\x00\x39\x94\x1c\x51\xe0\x3b\xd6\x31\xa8\x9d\x9d\x92\x71\xcc\x8a\xdb\x77\x4a\x42\x71\x1b\x7b\xa4\xe0\x21\x87\x93\xe3\x0e\x19\x38\x12\x48\x59\x3b\x6a\x4c\x3b\xf5\x8b\xf3\x94\x12\x48\x19\x94\xef\xa4\xd1\xd3\xdf\x52\xf9\x6e\xad\x53\x12\xd6\xb5\x17\xf7\xc5\x71\xb7\x34\x9c\xd2\xdf\xda\x91\x76\x2c\x71\x40\x0a\xd2\xba\x56\x20\xb3\xe3\xef\x55\x13\x89\xd0\x4a\x1f\x34\x32\x0b\x17\xc3\x21\x86\xc7\x8d\x8b\x41\xf8\xbd\x8b\x56\x57\x81\x15\xf9\x06\xb9\x6a\x8c\xc5\xe9\xe1\x6f\xc5\x93\x38\xed\x91\xaa\xe0\xbe\x96\x37\x70\xf3\xbf\x2a\x5e\xd7\x65\xb5\xd9\x56\xc5\xf3\x7a\x51\x8a\x71\x34\x0d\x10\x42\xb6\x38\x44\x0f\x73\x90\x29\x89\x71\x3c\xb0\xa1\xd0\xc0\x8c\xf1\x18\xd1\x87\xaa\x9e\x96\x39\xfc\xd1\xb3\x4b\x78\x8e\x24\x20\xe9\xf3\x74\x25\xb6\xaa\x5f\xed\x60\x9e\x3d\x52\x7a\xec\x1d\x7f\x4c\x4e\x36\x6f\x60\xf5\x6f\x76\x3d\xf9\x59\x5b\x1a\xdf\xfd\xca\x69\xe3\xbb\x3b\xec\x72\x71\xa7\x89\x63\xc4\x88\xe2\x33\x00\x00\xff\xff\x5f\xc0\xd7\xf8\x18\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 536, mode: os.FileMode(420), modTime: time.Unix(1505922697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xcf\x4a\x03\x31\x10\xc7\xf1\xfb\x3e\xc5\xd8\xd2\x63\xb2\xeb\x55\xd8\x8b\xad\x88\x17\x11\x15\x3c\x27\xcd\xa4\x86\xec\x4e\x96\xfc\x41\x21\xcc\xbb\x4b\x77\x17\xa4\x60\xbd\x0d\xc3\x97\xcf\xe1\xb7\xbd\x69\xb5\xa3\x56\xab\xf4\xd9\x6c\x5f\xee\xdf\x40\x3c\x43\xad\xf2\x5d\x25\xff\x64\x98\xd7\x5f\x38\xff\x3e\x42\xf4\x07\x17\x99\x5b\x5b\x88\x70\x10\x29\x9b\x50\xf2\x9a\xe0\xb5\x04\x63\x6c\x6a\x75\x16\x08\x41\xee\xa7\x92\xa0\x03\xc1\xdc\xd4\x3a\x45\x47\xd9\xc2\x66\x01\x06\xa0\x60\x30\xf5\xb7\x77\xd3\x44\xfd\xce\x6c\x96\x7a\x2e\x05\x20\x99\xf9\x5a\x9d\x57\x35\x3e\x6a\xe8\xe4\x35\x6a\xc4\xb1\xdf\xc9\xce\x9e\xf4\x66\x8d\xff\x76\x0e\x2e\xf9\x7f\x21\xeb\x06\xfc\x95\x96\xfc\x82\x6a\x6a\x95\x0f\xdf\x78\x2c\x59\xe9\x01\x99\xe1\x2b\x44\x8f\x11\x62\x21\x10\xe2\x18\xc8\xba\xd3\x79\x9a\xfd\x7c\x31\x83\x10\x59\x25\x2f\x9c\xb9\xd8\xf9\x27\x00\x00\xff\xff\x80\x45\x84\x4d\x88\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 392, mode: os.FileMode(420), modTime: time.Unix(1505922697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcf\x6a\xc3\x30\x0c\x87\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\xe9\xe8\x76\xdd\x0a\x3b\x3b\x8d\xb2\x79\x6e\x64\x23\xdb\x6c\x60\xf4\xee\x23\x69\xa1\x29\xac\xf4\xf6\xc3\xfe\xf4\xa1\x3f\xab\x87\xba\x33\x54\x77\x3a\x7c\x15\xab\xf7\xcd\xd3\xbe\x7d\x01\xa5\xbe\x5d\xa7\x48\x8f\x08\x39\x57\x7b\x1d\xec\x6b\x2f\xb2\xf8\xa6\xa8\x83\x0d\xf0\xb8\x78\x42\x66\xc7\x13\xfe\xe1\xd8\x6e\x0d\x8b\xd4\x43\x22\xc2\xa3\x0a\xb1\x47\xe6\x05\xea\x52\xf4\x29\xde\x62\x5d\x8a\x45\xce\x66\x00\x42\xa8\x5a\x9f\x02\x34\xa0\x44\x8a\x9c\x3d\x1b\x8a\x03\x94\x17\xd3\xc1\xa7\xa0\x3c\xb2\x9a\xfa\x81\x75\x5f\x9e\x2a\x66\x5a\x01\x52\x3f\xa7\xb3\xeb\x4d\x8f\xbb\x0e\x9a\xea\xb6\x6e\xc4\x11\xd6\x55\x33\xec\x36\xe5\x19\xff\xdf\xb4\x35\xc1\xde\x51\xc5\xd1\x5f\x54\x27\xfe\xca\x55\xe4\x5c\x3d\xff\xe2\x21\x45\xdd\x1d\x51\x04\x7e\x1c\x5b\x64\xe0\x44\xd3\x5c\x8e\x06\xf3\x39\x6d\xa8\x9d\x93\xc8\xa4\xd4\xc1\x2a\xd3\x5f\x9d\xe4\x2f\x00\x00\xff\xff\x36\x8f\xbd\x5a\xbe\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 446, mode: os.FileMode(420), modTime: time.Unix(1505922697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
