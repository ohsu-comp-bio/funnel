package mocks

import context "golang.org/x/net/context"
import mock "github.com/stretchr/testify/mock"
import scheduler "github.com/ohsu-comp-bio/funnel/proto/scheduler"

import tasklogger "github.com/ohsu-comp-bio/funnel/proto/tasklogger"
import tes "github.com/ohsu-comp-bio/funnel/proto/tes"

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// CancelTask provides a mock function with given fields: _a0, _a1
func (_m *Database) CancelTask(_a0 context.Context, _a1 *tes.CancelTaskRequest) (*tes.CancelTaskResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *tes.CancelTaskResponse
	if rf, ok := ret.Get(0).(func(context.Context, *tes.CancelTaskRequest) *tes.CancelTaskResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tes.CancelTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tes.CancelTaskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTask provides a mock function with given fields: _a0, _a1
func (_m *Database) CreateTask(_a0 context.Context, _a1 *tes.Task) (*tes.CreateTaskResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *tes.CreateTaskResponse
	if rf, ok := ret.Get(0).(func(context.Context, *tes.Task) *tes.CreateTaskResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tes.CreateTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tes.Task) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNode provides a mock function with given fields: _a0, _a1
func (_m *Database) GetNode(_a0 context.Context, _a1 *scheduler.GetNodeRequest) (*scheduler.Node, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *scheduler.Node
	if rf, ok := ret.Get(0).(func(context.Context, *scheduler.GetNodeRequest) *scheduler.Node); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scheduler.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *scheduler.GetNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceInfo provides a mock function with given fields: _a0, _a1
func (_m *Database) GetServiceInfo(_a0 context.Context, _a1 *tes.ServiceInfoRequest) (*tes.ServiceInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *tes.ServiceInfo
	if rf, ok := ret.Get(0).(func(context.Context, *tes.ServiceInfoRequest) *tes.ServiceInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tes.ServiceInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tes.ServiceInfoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTask provides a mock function with given fields: _a0, _a1
func (_m *Database) GetTask(_a0 context.Context, _a1 *tes.GetTaskRequest) (*tes.Task, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *tes.Task
	if rf, ok := ret.Get(0).(func(context.Context, *tes.GetTaskRequest) *tes.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tes.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tes.GetTaskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodes provides a mock function with given fields: _a0, _a1
func (_m *Database) ListNodes(_a0 context.Context, _a1 *scheduler.ListNodesRequest) (*scheduler.ListNodesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *scheduler.ListNodesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *scheduler.ListNodesRequest) *scheduler.ListNodesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scheduler.ListNodesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *scheduler.ListNodesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTasks provides a mock function with given fields: _a0, _a1
func (_m *Database) ListTasks(_a0 context.Context, _a1 *tes.ListTasksRequest) (*tes.ListTasksResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *tes.ListTasksResponse
	if rf, ok := ret.Get(0).(func(context.Context, *tes.ListTasksRequest) *tes.ListTasksResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tes.ListTasksResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tes.ListTasksRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExecutorLogs provides a mock function with given fields: _a0, _a1
func (_m *Database) UpdateExecutorLogs(_a0 context.Context, _a1 *tasklogger.UpdateExecutorLogsRequest) (*tasklogger.UpdateExecutorLogsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *tasklogger.UpdateExecutorLogsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *tasklogger.UpdateExecutorLogsRequest) *tasklogger.UpdateExecutorLogsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tasklogger.UpdateExecutorLogsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tasklogger.UpdateExecutorLogsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNode provides a mock function with given fields: _a0, _a1
func (_m *Database) UpdateNode(_a0 context.Context, _a1 *scheduler.Node) (*scheduler.UpdateNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *scheduler.UpdateNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *scheduler.Node) *scheduler.UpdateNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scheduler.UpdateNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *scheduler.Node) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTaskLogs provides a mock function with given fields: _a0, _a1
func (_m *Database) UpdateTaskLogs(_a0 context.Context, _a1 *tasklogger.UpdateTaskLogsRequest) (*tasklogger.UpdateTaskLogsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *tasklogger.UpdateTaskLogsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *tasklogger.UpdateTaskLogsRequest) *tasklogger.UpdateTaskLogsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tasklogger.UpdateTaskLogsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tasklogger.UpdateTaskLogsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTaskState provides a mock function with given fields: _a0, _a1
func (_m *Database) UpdateTaskState(_a0 context.Context, _a1 *tasklogger.UpdateTaskStateRequest) (*tasklogger.UpdateTaskStateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *tasklogger.UpdateTaskStateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *tasklogger.UpdateTaskStateRequest) *tasklogger.UpdateTaskStateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tasklogger.UpdateTaskStateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tasklogger.UpdateTaskStateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
