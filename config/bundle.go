// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x6f\x1b\x37\xf2\x7f\xaf\x4f\x31\x7f\x3b\x7f\x5c\x02\x68\x65\xb9\x45\x8b\xab\x00\xbf\xf0\x53\x1d\x5f\x13\x47\x27\xc9\x97\xbb\x57\x06\x77\x39\xab\x65\xbd\x4b\x6e\x49\xae\x14\xd5\xe7\xef\x7e\x18\x3e\xec\x4a\xb2\xfc\xd0\xab\x51\xf4\x80\x04\x08\x60\x91\xc3\xdf\x0c\x67\x86\xf3\xb4\x53\xd4\x0b\xd4\xa3\x1e\xc0\x3e\xbc\x57\xc6\x4a\x56\x21\xa8\x1c\x6c\x81\xf0\x63\x23\x25\x96\x60\x1c\xc9\xa0\x07\x8e\xe0\x8a\x55\x38\x82\x52\x65\xac\x2c\x94\xb1\x3d\x77\x72\xac\xb4\x85\xc6\x20\x87\x5c\x69\x78\x3f\x9b\x8d\x21\x53\x55\xd5\x48\x91\x31\x2b\x94\x04\x26\xb9\x83\x5c\x62\x0a\x9c\x99\x22\x55\x4c\x73\x07\x39\x9b\x8d\xe9\xf4\x08\xfe\x3a\x1c\x0e\x77\xa1\x4d\xc6\xa7\x9b\x60\x74\x6c\x32\x3e\xf5\xa7\x7e\x18\xfe\x10\x4e\x4d\xf0\x97\x46\x68\x84\x94\x19\x91\x01\x6b\x6c\x81\xd2\x46\xfe\x04\x44\xfc\xfd\x5d\xe0\x78\x7c\x69\xa0\x31\x42\xce\x81\x41\xcd\x8c\x59\x2a\x2f\xce\x3e\x5c\xe6\x8e\x75\x1f\x2a\x76\x8b\x60\x1a\x8d\x60\x15\xd4\x5a\xd5\xa8\xcb\x15\x68\x34\x56\x8b\xcc\x02\xcb\x32\x34\x86\xf6\x08\x37\x53\x32\x17\x73\xc8\x45\x89\x0e\xe5\x2d\x0e\xe6\x03\xc8\x8a\x4a\x71\xf8\x7e\x38\x84\xdc\xa9\x72\xe0\xc9\x06\xab\xaa\x7c\xe7\x6f\x1a\x58\x8f\x80\xa5\xd9\xe1\x37\xdf\xfa\x9b\x5c\xca\xac\x6c\x38\x02\x83\xbd\x53\x96\x15\x98\x9c\x2a\x69\xb5\x2a\x47\x20\x55\x62\xac\xd2\xb8\xe7\x75\x5c\x20\xe3\xa8\x41\x48\xb8\x40\x7b\xf0\x41\x18\x4b\xf2\xd5\x4a\x1a\x34\x0e\xc9\x49\x8e\x0b\x94\x16\x32\x96\x15\x74\xdf\x74\x05\x42\x5a\xd4\x15\x72\xc1\xf4\xca\x69\x44\x64\x68\xe8\xf6\x67\xc2\xb0\xb4\x44\xc2\x76\x8c\x47\x60\x75\x83\x5e\xa8\x59\x81\xb0\xee\x1c\x2c\xb3\x62\xd1\x2a\x94\x33\xcb\x52\x66\x48\xfb\xd9\x2d\x4a\xee\x8e\x1c\x2f\x98\x28\x09\x30\xae\x9a\x11\xa4\xaa\xb4\x3c\xed\x03\x5f\x49\x56\x29\xfa\x0b\x4b\x66\xac\xc8\xfa\x50\x29\x39\x57\x3c\x25\x39\x02\x5a\x24\x5f\x5b\x32\xe4\xaa\x00\x27\xaa\xb4\x67\x27\xfe\x6f\xaf\x48\x5b\x44\x5b\xb4\xb2\x04\x6b\xd0\x3f\xda\x1f\xc1\xe0\xc0\xdb\x21\x59\x2a\x7d\x9b\x70\xa1\xc3\xef\x01\x4f\x7b\x3d\x0f\x74\xe6\xe4\x8a\xd0\xfb\xee\xff\x09\x33\xe8\xae\x6e\x15\xf9\x86\x73\xa6\x28\x3f\x58\xba\xa0\x69\xa9\x67\xf4\x33\x1e\x18\xc1\x9e\x67\xb0\xb7\x86\x76\xfc\x79\x0a\x1a\xe7\x42\xc9\x76\x71\xe2\x7e\x8e\x60\x6f\x9b\xee\xd8\x3b\xd9\x2d\xae\xe0\xf2\xac\xdd\xfb\x09\x57\x3b\x68\xa7\x98\x69\xb4\xf1\xc8\x4f\xb8\x6a\xf7\xfd\x8e\x3b\x12\xd6\xce\xbd\xce\xd7\x2f\x39\xd6\x98\x8b\x2f\xeb\x57\x14\x92\xe3\x17\x34\xf0\xd6\x32\x73\xdb\x07\xe7\x46\xa6\x0f\x52\x71\x34\xef\xda\x93\x97\x44\xe5\x0f\xef\xbc\xee\xf5\xe4\x43\x74\x99\x60\x69\x83\x4c\x67\xc5\x5a\x58\xf1\xa4\xd7\x93\x0f\x23\x28\xac\xad\x47\x07\x07\x6d\x78\x19\xfd\xf0\x8d\x8f\x0a\x44\xf3\x91\x1c\x64\xd3\x34\xc7\x9c\x6b\x03\x85\x2a\xb9\xf1\x5e\xc9\xb9\x46\x63\xd0\xac\xbd\x78\xe4\x81\x97\xe9\x98\xb9\x73\x1d\x10\x40\x02\x7b\x2d\xd3\x75\xf1\xa3\xdf\x81\x30\x9b\xce\xe5\x1c\xc2\x05\xa9\xa5\xb0\x85\x90\x51\x3a\xd2\xa0\x7b\xa3\xe1\xcd\xbb\x13\x1d\xe3\xce\xb5\x1f\xe8\xea\xda\xa0\x0e\x5e\xd3\x2d\x76\x11\xc2\x5b\xef\x83\x9a\xcf\x7d\xbc\xa6\x7d\xfa\x45\x8f\xba\xc4\x05\x96\x66\x04\x1c\xd3\x66\xde\x07\x21\x73\xd5\x07\xd4\x5a\x69\x47\xf8\x81\xb6\x47\x6e\x39\x1c\xfc\xac\x85\x45\x28\xd5\x3c\x44\x30\x61\xa0\x66\xb6\x18\x50\xf8\xc3\xaa\xb6\xab\xbe\xdf\x64\x1a\x61\xa9\x85\xb5\x28\xfd\xc5\x38\xea\x60\xb3\x4f\x8d\xad\x1b\xfb\xa3\x28\xbd\xc0\x3d\x1f\x22\x4c\x56\x20\x6f\x4a\x8a\x4a\xa6\x8b\xe1\xa4\xb9\x8f\x4c\x36\xac\xa4\x50\x5e\x37\xb6\x0d\x09\x03\xe8\x4d\xe3\x91\x98\x85\x96\xa0\xf2\xc0\x50\x37\x12\xd8\x3a\xa8\x45\xdd\x26\x01\x8a\x94\x20\x99\x54\x06\x33\x25\xb9\x33\x6f\x04\x9b\x30\x8b\x23\x38\x1c\xc6\x7f\xb0\x0f\x87\xe0\xe9\x5a\x2e\x15\x93\x2b\x20\xe7\x76\x4a\x88\x4c\x28\x9c\x2a\x89\x9b\xac\x22\xec\x69\xd1\xc8\x5b\xc2\x6d\x41\x4a\x25\xe7\x74\x7c\xc9\x84\x85\x14\xed\x12\x51\x42\x53\x73\x66\xd1\x40\x8a\x39\x79\x42\xc5\xf4\xad\xcf\x35\xf4\x78\x80\x23\xe3\x8f\xc9\x7f\xa5\x38\x8e\x85\x9c\xcf\x44\x85\xaa\xb1\x23\xca\x1e\x1b\x77\xa8\x84\x6c\x2c\xee\x66\x4f\xaa\x0e\x3c\x9c\xb1\x98\xb6\xfd\x6d\x19\xc8\x14\x2f\x92\xe2\x52\x0a\xdb\x4a\xf1\xed\x70\x43\x8c\xef\x82\x18\x26\xd0\x46\x7f\xec\xbc\x27\x88\x71\x79\x06\x4b\x51\x96\x90\x22\x65\x64\x55\x31\xca\xc8\x65\xb9\x82\x39\x4a\x52\x2f\x72\xef\x4c\x97\x67\xeb\xe1\x89\x9c\xca\x40\xa6\x91\x08\x80\x37\x9a\x04\xaf\xb5\xa2\xc8\x46\x7f\x46\xc8\xe8\x99\x42\x7a\x17\xe6\x42\x63\x66\x95\x5e\x79\xd0\xcf\x4a\xdf\x9e\x09\xbd\x23\xee\x77\xe2\xb6\xea\x28\x18\x99\x8b\xc0\x78\xe9\xe3\x1f\xa9\x16\xc9\x77\x99\x74\x64\xd6\x2b\xa3\x0f\xc2\x7a\x09\x4c\xd1\x58\xe0\x6a\x29\xe3\xf3\x4e\x0e\xa1\x42\x26\x5d\xa4\xd0\x2e\x64\x48\x15\x8f\x0d\x60\x18\x37\xfd\x02\x88\xca\xe5\x60\x8b\xe5\x0a\x58\x6e\xd1\x3f\x93\x5c\x68\x63\x9d\x57\x7a\xd4\xd6\x04\xc9\x61\x54\xcf\xb1\xd3\xb9\x97\x61\x53\xab\x56\xaf\xc8\xf2\x1c\x2d\x66\x16\x96\x05\x73\x05\x81\x6a\x74\x86\xfe\x2d\xb3\x36\x25\x5b\x05\xc2\x0e\x20\xa6\x3d\xcc\x85\x24\xd5\x4e\x5a\x72\xe1\x6f\xed\x58\xf9\xba\xa5\xf1\xef\x01\xd4\x02\xb5\x16\x1c\x8d\xd7\x7a\x8a\x05\x5b\x08\x15\xc2\x42\x0b\xd0\x25\xe7\xd3\xf1\xb5\xe9\x38\x0f\xba\xf5\xba\x31\x23\x08\xe1\xdd\x95\x70\xc7\x1f\x3b\xba\xbe\xab\x6b\x4e\x3a\xf2\x09\xab\x2e\xd2\x11\x0c\x07\x6b\x27\xce\x84\xb9\x05\x53\xb3\x0c\x9f\x38\x48\x44\x1b\x27\xf7\xe1\x47\x67\xdf\x65\xe2\x02\x27\xd8\x86\xee\x1e\xad\xb8\x11\x80\xcc\x4a\x66\x2e\xc2\xef\xae\x88\x77\x3f\x1f\x80\x6b\x17\x00\x7c\x10\xfa\x6e\xf3\xe5\x04\xba\x70\x98\xaa\xdb\xe8\x10\xe4\x74\x3e\x72\x1c\x38\xb6\x64\xd3\xe7\x99\xb4\x0e\xb2\x3b\xd8\xf9\x04\xb0\x96\x35\x7e\x43\xde\x78\x98\x39\x5e\x29\x77\x3c\xcc\x1e\xbd\x47\x2b\xcc\xad\x84\xd1\xdb\x5d\x57\xba\xe4\xdd\x87\xc2\xd2\xa5\x95\xee\x83\x29\x1b\x5d\xf5\xa1\x4e\x4d\x1f\xe6\xe4\xad\x72\x2e\x24\x52\x59\x4f\x69\xa8\x0f\x6c\x69\x92\x94\xd9\xac\xe8\x9d\x78\x90\x80\x41\x92\xb4\x19\x29\x32\x08\x0f\x20\x92\x3a\xdf\x7e\x3f\x3b\x75\xac\xbc\x56\x67\x58\xd5\xa5\x33\xf7\xbf\xc3\x0d\x1b\x29\xa8\xe6\x40\x38\x82\x05\x93\xa2\x2c\x59\xd8\x98\xa3\x45\xb9\x80\x23\x98\x51\x71\xed\xd7\xf0\x0b\x66\x8d\x2b\x25\xe1\x08\xee\xee\x06\xe7\xed\xef\xfb\xfb\x40\xc2\xf4\xbc\xa9\xa8\x04\x83\x23\xa0\x38\x86\xda\x65\xc7\x24\x09\xbd\xc7\xdd\xdd\xe0\xd4\xfd\x75\x7f\x0f\x49\x42\x01\x24\x11\x9c\x56\x67\xcc\xdc\x5e\xf2\x16\xa7\x54\x73\xcf\x23\x84\xc7\xfb\xfb\x03\xaf\xb3\xc4\x55\x78\x49\xa9\xe6\x51\x28\x72\x84\x6d\xda\x10\x49\xbd\x35\x03\xa1\x72\xc6\x7c\x9c\x52\x35\x36\x50\x9a\x42\x35\x25\xbf\xb1\x9a\x49\x93\xa3\xbe\xc9\x5d\xa4\x3f\x82\x7f\x9d\x4f\x03\xc5\xb2\x40\x79\x63\x55\x47\xd2\x82\x7f\xba\xba\x39\xff\xe7\xe5\xec\xe6\xd3\xe4\xe6\xfc\x1f\x97\xa7\xb3\x70\xe0\xee\x4e\xe4\x20\x11\x06\x14\x4e\x60\x08\x49\x7b\xd3\xbb\xbb\x5a\x0b\x69\x73\xd8\xd3\xf8\x4b\x83\xc6\xde\x64\x44\x72\x04\xff\xcf\xf7\x3c\xf9\x1a\x69\x02\x28\xf9\xda\xef\x00\xea\x82\x0e\x45\x8e\x27\x71\x2b\xac\x94\x5e\x11\xf2\x60\x98\xc3\xc5\xc9\x5e\x38\xf8\x3c\xbe\x8f\x4d\xcf\x32\xe0\x14\xe7\xd6\xe1\xfd\xb9\x1d\xf8\x61\xe1\x97\x06\x7d\xe7\x36\x3e\x99\x3e\xe6\xa1\xfb\xff\x97\x0a\x79\x90\x32\x53\xc4\x85\xf1\xc9\x14\x92\x2b\x32\xa3\xab\x00\x3a\x79\xfd\x8e\x7a\xde\xc0\x9e\x10\x9f\xf7\x99\x97\x98\xcd\x83\x95\xbe\xe5\x38\x3a\x1c\xd5\xb5\x3c\x7a\x35\xdb\x45\xf0\x0a\xab\x23\xd2\xeb\x3c\x7d\x35\xab\x45\x68\xf2\xee\x0e\xfb\x39\x93\x6d\x3d\xfb\xff\xf2\x91\xf7\x00\x2e\xb4\xe0\xe7\x2e\xdc\xbd\xdc\xf2\x6f\x1e\xb1\xfb\x9b\x97\x59\xfd\xcd\x8b\x6c\x4e\x64\xad\x35\x7f\x8b\x1f\xbc\x81\xa4\x46\xa8\x6a\xf1\x7a\x4f\xd7\xcb\x52\xdc\x2c\xa2\xfd\x2f\x5e\xcf\xfc\x01\x3a\x37\xe2\x57\x6c\xb1\xff\x18\xf3\x03\x55\x74\xd3\x0f\xd7\x93\x8f\x8f\xdb\xfe\x60\xdb\xf8\xd3\x93\xe3\xd9\xe9\x7b\x48\x92\x9f\x55\x9a\xb8\x14\xbc\xc3\x13\x5a\x22\xe9\x5b\xa6\xc3\x07\x1b\x3e\x5f\x3c\xef\x05\xed\x81\x10\xda\x9f\x75\xaf\x17\xf9\x48\x8b\x4a\x41\x3e\xa9\x51\x3b\xfd\xbc\xa2\xc3\xb4\x0c\x2a\xac\x5c\x24\x7e\xc5\x38\xdf\x81\xdb\xaa\xee\xc0\xff\xb0\x90\xe1\x46\x48\x27\x54\x0e\x01\x47\x93\x69\x91\xa2\x59\x1b\x6c\xc6\xca\x3f\xf6\xf2\xc7\x9f\xa7\xe0\xa9\xb7\xdb\xf9\x1e\xb4\x48\xb1\x29\xfc\x9b\x4a\x7d\x7b\xe1\x20\x32\x26\xa9\x75\x43\x41\x3d\x12\xb5\x89\xae\xe2\x0b\xb0\x15\xfb\x55\xc9\xb6\x85\x80\x2b\xda\x7b\x7b\x3c\xb9\x7a\xe7\xcb\xc6\x0d\xa4\x76\x82\xe2\xbc\x96\x63\xbe\xd7\xf1\xfb\x3b\x65\xbf\xdf\xcb\xca\x81\x6c\x72\x71\x59\x35\xf2\xe9\x06\x79\xb1\x62\x35\x35\x66\x22\x17\xc8\xe1\x67\x95\xfa\x14\xec\x27\xdf\x2a\x34\xb3\x8e\x8a\xf6\x78\xa7\x10\x21\x43\xdf\xb4\x31\x03\x5c\x9f\xf1\xad\xcf\xef\x3e\x3b\x0b\xfb\x49\xc9\xab\xb4\xc9\x4f\x34\xc9\x2d\x13\x37\xd0\x62\x73\x04\xb3\x32\x16\x2b\xd7\x7e\xec\x87\xa9\xb0\x30\x7e\xd2\xd3\xb8\x06\xd4\xa0\xdd\x6a\x49\xd3\x95\x57\x4d\x2c\xa9\xfb\x90\x36\x16\x56\xaa\x81\x4a\xcc\x0b\x0b\x12\x91\x3b\xb1\x1c\x9e\xc8\x69\xeb\x2f\x1a\xfd\xf4\xc2\x0f\x4d\x82\x57\xfb\xca\xbd\x74\x52\x4f\xbd\x40\xdd\x1c\x2c\x63\x3e\xdd\x06\x11\x07\xa1\xed\xc9\x58\xd9\x75\x3d\x9f\x0b\x61\xb1\x14\xc6\x92\xbd\x5c\xb1\xdf\xa9\xc2\xb5\x30\x06\x96\x85\xc8\x8a\xd8\xe6\x09\x03\xac\x2c\xd5\x12\x9d\x05\xfd\xc0\x3f\xf6\x2f\xc7\x7e\xe3\x4c\xe8\xb6\xd1\x05\x48\x60\x70\xe0\x9f\xe6\xfb\xd9\x6c\xdc\x31\x9e\xad\x35\x78\x85\xb5\xf5\x5b\xf3\x0e\x2e\xce\x67\x10\xaa\x3b\xd3\xb5\xaa\xbb\xda\xbc\xb5\x19\xc0\xe6\x30\xe8\xfb\x61\xdb\x4c\x3a\x42\xef\xd3\xd3\x6f\x23\xe3\x30\xce\xe7\x23\xc8\x59\x69\xb0\x13\xa7\x40\xa8\xd8\x17\x51\x35\x15\xc8\xa6\x4a\x51\x3b\x07\x16\x95\x7b\xf3\xcc\x02\x8b\x92\xb5\x2e\xa4\xd1\x6a\x11\x86\x79\x39\x13\x65\xa3\xb1\x95\xee\x23\xfb\x32\x71\xdb\x26\x0c\xc6\xe0\x89\xf9\xf5\xa6\x67\x3f\x3d\xbb\xde\x35\xb9\xbe\x40\x89\x5a\x64\xf1\x92\xfb\x4e\xeb\xdd\x45\x6d\x6c\xa9\xfc\x54\xf7\x5c\xf2\x5a\x09\x69\x37\x46\xaa\x0f\x07\xe8\x0f\x19\x5d\x4c\x9f\x53\x62\xfc\xe2\xc0\xb2\x4c\x35\xd2\xd2\x33\xe4\x28\xad\x60\xa5\x71\x8e\xd8\xd9\xf4\x53\x4d\xef\x9c\x95\xae\x41\xae\x95\x31\xc2\x0d\x29\xd6\x0f\xec\x9e\x91\x71\x61\x32\xb5\x40\x8d\xbc\xc5\xca\xb5\xaa\xfc\x2c\x5d\x2e\x84\x56\x92\x1a\xc2\xd6\x25\xbd\x24\x5d\x4f\x0d\x71\xc8\xf5\x3b\x98\x3e\xc5\x72\xba\x14\xb9\x7d\x5a\x4f\xd7\x06\xf5\xd5\xfa\x4c\x7b\x6b\xa2\x1d\x24\x6f\x6c\xe1\xc6\xff\xed\xca\x0c\x25\x93\x76\xeb\xa4\x5f\x0c\xa3\x42\xbf\xe4\xa3\x66\x4b\xd7\x7b\x6a\xb6\xb3\x3d\xd9\xa1\xbe\xde\x95\x08\xd4\x11\xc7\x89\x6d\xf8\x86\xf4\x60\xd0\xb3\xeb\x69\xbe\x60\xc8\xe3\x4e\x7e\x0c\x6f\xad\x65\xf6\xd6\x57\x37\x07\xa8\xf5\x3b\xa0\x22\xd1\x8d\xac\xd2\x55\x10\x20\x6d\xf2\x1c\xf5\xf6\x30\x99\x38\x9e\xb8\x9d\xa9\xf8\x35\xce\xb6\x61\x1f\x0e\x87\xf0\xd3\xc9\x93\xdf\xe8\x1c\x5f\xed\xbf\x15\xae\xe5\xe9\xdd\x83\x14\x5d\x67\xcf\x7c\x9d\xa3\xba\x61\xe2\xd0\x1c\xf5\xc6\x8a\x19\x7d\xfd\x90\xf6\xf5\x43\xda\xff\xc2\x87\xb4\x47\x5f\x8b\xff\x5c\x4e\x35\xd3\x8b\x9f\x4b\xa9\xe6\xcf\xbc\x99\x63\x87\x7d\x4e\xd0\x6e\x7c\xaa\xcd\xc8\x8f\xde\x93\xf0\x84\xe8\x2f\x3f\x79\xdb\x20\x0a\xe2\xfb\x91\xab\x77\x1c\x37\x7e\x87\xf9\x64\x7c\xea\xeb\xc6\xf1\x69\x57\x68\xbc\x6c\x9a\xfc\x82\x42\xe3\x89\x59\xf2\x3e\xcc\x34\x93\x86\x9a\xca\x28\x11\xd5\xb8\xde\x54\xb6\x40\xa1\xa9\x69\xb0\xa4\x44\x21\xdb\x30\x30\xf8\x1a\x16\xbe\x86\x85\x3f\x7b\x58\xf0\x8f\xe0\xcf\xfc\x95\xfd\x3f\x01\x00\x00\xff\xff\x90\xc5\x2a\x3f\xaf\x25\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 9647, mode: os.FileMode(420), modTime: time.Unix(1512519822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\x03\x31\x14\x85\xf7\xf3\x14\xd7\xa9\x5d\x26\x33\x2f\xe0\xaa\x95\xe2\xc6\x85\x08\x2e\x25\xd3\xdc\xd8\x4b\x66\x92\x21\x3f\x2a\x86\xfb\xee\x32\x69\x11\x0a\x63\x77\x87\xc3\x77\xbe\xc5\xd9\xdc\x75\x03\xb9\x6e\x50\xf1\xd4\x6c\xee\x41\x3c\x43\x29\xf2\x55\x45\xfb\xa4\x99\x6b\xe3\x97\xe6\xcd\x07\xbb\xa7\xc0\xdc\x99\xec\x1c\x8e\x22\x26\xed\x73\xaa\x00\xfe\x07\x60\x08\x4d\x29\x64\xc0\x21\xc8\xdd\x9c\x23\xf4\x20\x98\x9b\x52\xe6\x40\x2e\x19\x68\x97\xf9\x8c\x30\xcd\x04\x5b\xdd\x9e\xa1\x0a\x08\x40\xa7\x6b\xba\xcc\x5f\xd4\x74\x18\xa0\x97\x6b\x86\x11\x4e\xef\x9f\x13\x4e\x0f\x5b\xd9\x9b\x43\x7b\x81\xd7\x3d\x7b\x8a\xf6\xa6\xc8\x44\xfa\xc1\x3f\xd3\x19\xbf\x52\x35\xa5\xc8\xc7\x6f\x3c\xe6\xa4\x86\x11\x99\xe1\xcb\x07\x8b\x01\x42\x76\x20\xc4\xd1\x3b\x43\x1f\xcb\x23\xbb\x9a\x98\x41\x88\xa4\xa2\x15\xa4\xaf\xae\xfd\x0d\x00\x00\xff\xff\x24\x76\x8a\x2a\x79\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 377, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xcd\x6e\xe2\x30\x10\xc0\xf1\xbb\x9f\x62\x84\xb4\x47\x67\x79\x81\x5c\x16\x22\xc4\x65\x91\x68\xd4\x8f\x53\x64\xe2\x49\xb0\xe2\x8c\x61\x6c\x87\x56\x91\xdf\xbd\x0a\x20\x2a\xaa\xd2\xdb\x24\xf3\x9f\x9f\x1c\xc9\x0c\xc8\x1e\x21\x87\x41\x91\xb1\x56\x89\x16\x03\xd2\x00\x39\x94\x1c\x51\xe0\x3b\xd6\x31\xa8\x9d\x9d\x92\x71\xcc\x8a\xdb\x77\x4a\x42\x71\x1b\x7b\xa4\xe0\x21\x87\x93\xe3\x0e\x19\x38\x12\x48\x59\x3b\x6a\x4c\x3b\xf5\x8b\xf3\x94\x12\x48\x19\x94\xef\xa4\xd1\xd3\xdf\x52\xf9\x6e\xad\x53\x12\xd6\xb5\x17\xf7\xc5\x71\xb7\x34\x9c\xd2\xdf\xda\x91\x76\x2c\x71\x40\x0a\xd2\xba\x56\x20\xb3\xe3\xef\x55\x13\x89\xd0\x4a\x1f\x34\x32\x0b\x17\xc3\x21\x86\xc7\x8d\x8b\x41\xf8\xbd\x8b\x56\x57\x81\x15\xf9\x06\xb9\x6a\x8c\xc5\xe9\xe1\x6f\xc5\x93\x38\xed\x91\xaa\xe0\xbe\x96\x37\x70\xf3\xbf\x2a\x5e\xd7\x65\xb5\xd9\x56\xc5\xf3\x7a\x51\x8a\x71\x34\x0d\x10\x42\xb6\x38\x44\x0f\x73\x90\x29\x89\x71\x3c\xb0\xa1\xd0\xc0\x8c\xf1\x18\xd1\x87\xaa\x9e\x96\x39\xfc\xd1\xb3\x4b\x78\x8e\x24\x20\xe9\xf3\x74\x25\xb6\xaa\x5f\xed\x60\x9e\x3d\x52\x7a\xec\x1d\x7f\x4c\x4e\x36\x6f\x60\xf5\x6f\x76\x3d\xf9\x59\x5b\x1a\xdf\xfd\xca\x69\xe3\xbb\x3b\xec\x72\x71\xa7\x89\x63\xc4\x88\xe2\x33\x00\x00\xff\xff\x5f\xc0\xd7\xf8\x18\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 536, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xcf\x4a\x03\x31\x10\xc7\xf1\xfb\x3e\xc5\xd8\xd2\x63\xb2\xeb\x55\xd8\x8b\xad\x88\x17\x11\x15\x3c\x27\xcd\xa4\x86\xec\x4e\x96\xfc\x41\x21\xcc\xbb\x4b\x77\x17\xa4\x60\xbd\x0d\xc3\x97\xcf\xe1\xb7\xbd\x69\xb5\xa3\x56\xab\xf4\xd9\x6c\x5f\xee\xdf\x40\x3c\x43\xad\xf2\x5d\x25\xff\x64\x98\xd7\x5f\x38\xff\x3e\x42\xf4\x07\x17\x99\x5b\x5b\x88\x70\x10\x29\x9b\x50\xf2\x9a\xe0\xb5\x04\x63\x6c\x6a\x75\x16\x08\x41\xee\xa7\x92\xa0\x03\xc1\xdc\xd4\x3a\x45\x47\xd9\xc2\x66\x01\x06\xa0\x60\x30\xf5\xb7\x77\xd3\x44\xfd\xce\x6c\x96\x7a\x2e\x05\x20\x99\xf9\x5a\x9d\x57\x35\x3e\x6a\xe8\xe4\x35\x6a\xc4\xb1\xdf\xc9\xce\x9e\xf4\x66\x8d\xff\x76\x0e\x2e\xf9\x7f\x21\xeb\x06\xfc\x95\x96\xfc\x82\x6a\x6a\x95\x0f\xdf\x78\x2c\x59\xe9\x01\x99\xe1\x2b\x44\x8f\x11\x62\x21\x10\xe2\x18\xc8\xba\xd3\x79\x9a\xfd\x7c\x31\x83\x10\x59\x25\x2f\x9c\xb9\xd8\xf9\x27\x00\x00\xff\xff\x80\x45\x84\x4d\x88\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 392, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcf\x6a\xc3\x30\x0c\x87\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\xe9\xe8\x76\xdd\x0a\x3b\x3b\x8d\xb2\x79\x6e\x64\x23\xdb\x6c\x60\xf4\xee\x23\x69\xa1\x29\xac\xf4\xf6\xc3\xfe\xf4\xa1\x3f\xab\x87\xba\x33\x54\x77\x3a\x7c\x15\xab\xf7\xcd\xd3\xbe\x7d\x01\xa5\xbe\x5d\xa7\x48\x8f\x08\x39\x57\x7b\x1d\xec\x6b\x2f\xb2\xf8\xa6\xa8\x83\x0d\xf0\xb8\x78\x42\x66\xc7\x13\xfe\xe1\xd8\x6e\x0d\x8b\xd4\x43\x22\xc2\xa3\x0a\xb1\x47\xe6\x05\xea\x52\xf4\x29\xde\x62\x5d\x8a\x45\xce\x66\x00\x42\xa8\x5a\x9f\x02\x34\xa0\x44\x8a\x9c\x3d\x1b\x8a\x03\x94\x17\xd3\xc1\xa7\xa0\x3c\xb2\x9a\xfa\x81\x75\x5f\x9e\x2a\x66\x5a\x01\x52\x3f\xa7\xb3\xeb\x4d\x8f\xbb\x0e\x9a\xea\xb6\x6e\xc4\x11\xd6\x55\x33\xec\x36\xe5\x19\xff\xdf\xb4\x35\xc1\xde\x51\xc5\xd1\x5f\x54\x27\xfe\xca\x55\xe4\x5c\x3d\xff\xe2\x21\x45\xdd\x1d\x51\x04\x7e\x1c\x5b\x64\xe0\x44\xd3\x5c\x8e\x06\xf3\x39\x6d\xa8\x9d\x93\xc8\xa4\xd4\xc1\x2a\xd3\x5f\x9d\xe4\x2f\x00\x00\xff\xff\x36\x8f\xbd\x5a\xbe\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 446, mode: os.FileMode(420), modTime: time.Unix(1509037157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
