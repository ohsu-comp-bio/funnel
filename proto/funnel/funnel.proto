syntax = "proto3";

package funnel;

import "tes.proto";
import "google/api/annotations.proto";

message Resources {
  uint32 cpus = 1;
  // In GB
  double ram_gb = 2;
  // In GB
  double disk_gb = 3;
}

enum WorkerState {
  UNINITIALIZED = 0;
  ALIVE = 1;
  DEAD = 2;
  GONE = 3;
  INITIALIZING = 4;
}

message Worker {
  string id = 1;
  Resources resources = 5;
  Resources available = 6;
  int64 last_ping = 7;
  WorkerState state = 8;
  bool preemptible = 9;
  // TODO where does this get updated?
  repeated int32 active_ports = 10;
  string zone = 11;
  // Hostname of the worker host.
  // TODO
  string hostname  = 13;
  // Version of the record in the database. Used to prevent write conflicts.
  int64 version = 14;
  map<string,string> metadata = 15;
  repeated string task_ids = 16;
}

// TODO is there a nice way to avoid this wrapper? Maybe protobuf extensions?
//      or use metadata field of Task?
message TaskWrapper {
  tes.Task task = 1;
  string auth = 2;
}

message UpdateExecutorLogsRequest {
  string id = 1;
  int64 step = 2;
  tes.ExecutorLog log = 4;
  string worker_id = 5;
}

message UpdateExecutorLogsResponse {}

message ListWorkersRequest {
}

message ListWorkersResponse {
  repeated Worker workers = 1;
}

message UpdateWorkerResponse {}

message GetWorkerRequest {
  string id = 1;
}

message UpdateTaskLogsRequest {
  string id = 1;
  tes.TaskLog task_log = 2;
}

message UpdateTaskLogsResponse {}

message UpdateTaskStateRequest {
  string id = 1;
  tes.State state = 2;
}

message UpdateTaskStateResponse {}

/**
 * Scheduler Service
 */
service SchedulerService {
  rpc UpdateExecutorLogs(UpdateExecutorLogsRequest) returns (UpdateExecutorLogsResponse) {};
  rpc UpdateWorker(Worker) returns (UpdateWorkerResponse) {};
  rpc UpdateTaskLogs(UpdateTaskLogsRequest) returns (UpdateTaskLogsResponse) {};
  rpc UpdateTaskState(UpdateTaskStateRequest) returns (UpdateTaskStateResponse) {};

  rpc ListWorkers(ListWorkersRequest) returns (ListWorkersResponse) {
    option (google.api.http) = {
      get: "/v1/funnel/workers"
    };
  };

  rpc GetWorker(GetWorkerRequest) returns (Worker) {
    option (google.api.http) = {
      get: "/v1/funnel/worker/{id}"
    };
  };
}
