// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x5f\x73\xdb\xb8\x11\x7f\xe7\xa7\xd8\xda\xb9\x99\x64\x46\x94\xed\xcb\x5c\xa7\xa7\x19\x3f\xd8\xb2\xcf\x71\x93\x38\xae\xa5\x34\xed\x93\x07\x24\x96\x22\x4e\x24\xc0\x03\x40\x29\x3a\x37\xdf\xbd\xb3\x0b\x90\x92\x1c\x39\x76\x7b\xce\xf9\x89\x02\x16\xbf\x5d\xec\x3f\xec\xae\xf7\x61\x5a\x22\x68\x51\x23\x98\x02\x7c\x89\x20\x72\xaf\x16\x08\x0e\xed\x02\x2d\x48\xe1\x45\x26\x1c\x42\x26\xf2\x39\x6a\x99\xec\xc3\xc9\x42\xa8\x4a\x64\x55\xbf\xe6\x46\x90\x99\xca\xcb\x6c\x00\x72\xa5\x45\x6d\xe8\x0b\x2b\xe1\xbc\xca\x07\x50\x1b\x3d\x33\x32\x4b\xce\x22\x52\x47\x9c\x24\x0f\xf2\xce\x4d\xdd\xb4\xfe\x31\x9e\x95\xc9\x45\x35\x80\xd2\xe7\x46\x4b\x63\x07\xe0\xaa\xd6\xd6\x03\x68\x32\x37\x80\x99\x55\x12\xf5\x4c\x69\x1c\x40\x2d\x74\x4b\x94\x62\xe9\xd2\x4c\xf8\xbc\x4c\xc6\x81\x41\xc4\xf8\x86\x24\xb8\x40\xed\x61\x69\x95\x47\xdb\xb1\x7e\xe9\x5e\x0d\x1f\x14\x69\x36\x78\x82\x2e\x06\x30\x17\xc5\x5c\x24\xe7\x84\xfe\x89\xc1\xdd\x08\x12\x80\xb4\xd3\x0d\x7d\x56\x66\x96\x24\xef\xcc\x6c\x86\x76\x94\x00\xec\x03\x7d\x2b\x3d\x83\x0a\x17\x58\xb9\x11\x48\xcc\xda\xd9\x00\x94\x2e\xcc\x00\xd0\x5a\x63\x13\x80\x77\xb4\x39\xe2\x45\x3e\xc4\xf0\x84\xe5\xc0\x1b\xf0\xa5\x72\xd0\x08\x5f\x0e\xe1\xb2\x00\xac\x1b\xbf\x1a\x84\x4d\x61\x91\xef\xe9\x51\x13\xa1\xf3\x12\xad\x1d\x26\x00\x1f\x5a\xdf\xb4\xfe\x17\x55\xe1\x08\xf6\xf6\x92\x64\xc2\x8e\x11\x24\x7a\x63\x9c\xdf\xd4\xda\x2f\xad\xd6\x58\x45\xdf\xa1\xc3\x44\x70\x25\xea\x4e\xd3\xa5\x71\x3e\xe1\x93\xd7\xc6\x7a\x68\x1d\x4a\x28\x8c\x85\x37\xd3\xe9\x35\x59\xbd\x6e\xb5\xca\x85\x57\x46\x83\xd0\x92\x21\x97\x98\x81\x14\xae\xcc\x8c\xb0\x92\x21\xa7\xd3\x6b\x3a\x3d\x82\xbf\x1d\x1e\x1e\xee\x42\xbb\xb9\x1e\x6f\x83\xd1\xb1\x9b\xeb\x71\x38\xf5\xf3\xe1\xcf\xf1\xd4\x0d\xfe\xd6\x2a\x4b\xf6\x73\x2a\x07\xd1\xfa\x12\xb5\xef\xf8\x13\x10\xf1\x8f\x71\x70\x72\x7d\xe9\xa0\x75\xa4\x7e\x01\x8d\x70\x6e\x69\x82\x38\xfb\xa4\x48\x62\x4d\x7e\x36\x47\x70\xad\x45\x52\x60\x63\x4d\x83\xb6\x5a\x81\x45\xe7\xad\xca\x3d\x88\x3c\x47\x17\xad\x40\x3e\xae\x0b\x35\x83\x42\x55\xc8\x28\x2f\x71\x38\x1b\x42\x5e\xd6\x46\xc2\x5f\x0f\x0f\xa1\x60\x55\x0e\x03\xd9\x70\x55\x57\xaf\xc2\x4d\x23\xeb\x11\x88\x2c\x3f\xfa\xf1\x75\xb8\xc9\xa5\xce\xab\x56\x22\x08\xd8\x1b\x8b\xbc\xc4\x74\x6c\xb4\xb7\xa6\x1a\x81\x36\xa9\xf3\xc6\xe2\x5e\xd0\x71\x89\x42\xa2\x05\xa5\xe1\x02\xfd\xc1\x3b\xe5\x3c\xc9\xd7\x18\xed\xd0\x31\x12\x4b\x1e\xbc\x3e\x17\x79\x49\xf7\xcd\x56\xa0\xb4\x47\x5b\xa3\x54\xc2\xae\x58\x23\x2a\x47\x47\xb7\x3f\x53\x8e\x42\x80\xb0\x99\xf1\x08\xbc\x6d\x31\xaa\x97\xcc\x50\x29\x86\x32\x5a\x63\xce\x7a\xf5\xaa\x46\xd3\xfa\xa8\x3a\x0d\x5a\x68\xe3\x90\x42\xd8\x45\x33\x8d\xf9\xcc\x34\xd0\x8d\x48\x19\xdd\x1f\xec\xc3\xeb\x43\x88\xd4\x49\x17\xb6\x2e\x2f\x51\xb6\x15\x5d\xcb\xad\x9d\x80\x74\xfc\x9e\x03\xff\x7e\x3a\x19\x42\x32\xe9\x8e\x74\x6e\xbc\x04\x53\x44\xcf\xb7\xad\x06\xb1\x09\xea\xd1\xf6\x5e\xb4\x4b\xe4\x0e\xec\x46\x50\x46\x39\xda\x94\xf6\x28\x0a\xdb\x73\xa9\x85\x5e\x81\x17\x6e\xce\x7e\xd0\x31\x21\x7b\x18\x8d\xdb\xac\x3a\xd8\x71\xd9\xea\x39\xe1\xf6\x20\x95\xd1\x33\x3a\xbe\x14\xca\x43\x86\x7e\x89\xa8\xa1\x6d\xa4\xf0\xe8\x20\xc3\xc2\x58\x84\x5a\xd8\x79\x70\x56\x6d\x24\x82\x44\x21\x1f\x92\xff\xca\x48\xbc\x56\x7a\xf6\x80\xc6\x8f\xa0\x56\xba\xf5\xb8\x9b\x3d\xa9\x3a\xf2\xe0\xac\x21\xac\x1f\xdc\x97\x81\x4c\xf1\x24\x29\x2e\xb5\x5a\xdb\xfd\xf5\xe1\x96\x18\x3f\x45\x31\x5c\x92\x10\xe9\xa8\x0b\xbd\x98\xc3\xa2\x0c\x97\x67\xb0\x54\x55\x05\x19\x52\x3c\x9b\x5a\x50\x3c\x57\xd5\x0a\x66\xa8\x49\xb7\xc8\xfc\x2f\xcf\x42\x2a\x8b\x10\xbd\x7c\xa5\x20\xfd\xa1\x06\x25\x2b\xe4\xab\xd1\x5d\x91\x9c\x49\x68\x26\x8b\xde\x3b\x00\xe5\x03\x23\x57\xb6\x1e\xa4\x59\x46\xef\x48\x8f\xa0\x46\xa1\x1d\x11\x5b\x24\x87\xd4\xa6\x77\x79\x38\xec\x36\xc3\x02\xa8\x9a\x63\xca\x63\xb5\x02\x51\x78\x0c\x5e\x5b\x28\xeb\x3c\x3b\x09\x61\xf6\xfa\x48\x8f\x82\xc0\x27\xac\xaa\xc0\x7d\xfb\x8e\xde\xae\xc8\x08\x12\x3d\xe6\x1e\x96\xa5\xe0\xe0\x36\xad\xcd\x31\xe4\x77\xd1\x3f\x59\xde\x80\xf2\x43\x60\xc0\x33\x2c\x94\x26\x3b\xdd\xf4\xc4\x2a\xdc\x96\x19\x85\x0c\xd4\x06\xc7\x04\xb3\x40\x4b\x4f\xab\x0b\x4f\x49\x86\xa5\x58\x28\xc3\xb9\xbe\x3f\x4e\xb6\x21\xe0\xf1\xf5\x47\xb7\xe6\x39\xec\x56\x9b\xd6\x8d\x80\x53\x30\x67\x89\x93\xf7\x6b\x9a\x01\x67\xa6\xd3\x8e\xf4\x46\xd4\x17\xd9\x08\x0e\x87\x3d\xf5\x99\x72\x73\x70\x8d\xc8\xf1\xc1\x43\x44\xb2\x71\x6a\x1f\x7e\x61\x3b\x2e\x53\x7e\x36\xc1\xb7\x74\xd7\xe1\xd7\x71\xef\x56\x3a\x87\xa5\xf2\xe5\xee\x97\x6c\x97\xcf\x7e\xe4\x98\x0b\x71\xff\xd3\xb6\xb3\xf6\x49\xea\x93\xb1\xf3\x2e\xcf\xd0\x23\xea\x20\xb7\x48\x8e\x08\xb2\xb5\xa4\xf5\xc6\x1a\x7a\x17\xe8\xb3\x73\xdd\xee\x1d\x66\x33\x28\x07\x52\x59\xcc\xbd\xb1\x2b\x62\x4a\x80\x67\xca\x8e\x60\x78\x10\xde\x88\x74\x69\xec\x3c\x95\xca\xfe\x6f\xd7\x45\x7a\x60\x85\x9b\xd3\xf3\xdf\x67\x8f\xf8\x38\x3d\xdb\xed\xe9\xe4\x7b\xf1\x59\xd5\x6d\xbd\x66\xf6\xd2\x79\x69\x5a\x7f\x80\xd6\xbe\x02\xa7\x7e\x0f\x16\xcc\x56\x51\x80\xac\x2d\x0a\xaa\xb6\xb6\x13\x1b\x71\x3c\xe5\x9d\x89\xfa\xbd\xcb\xb3\x94\x9e\x0e\xe1\xed\x69\x60\x74\x65\x6c\x1d\x02\x81\xea\x06\xd6\x3b\x48\xac\x90\x70\x95\x77\xbc\x44\x6a\xee\xd5\x19\x83\x0e\x3f\x63\xde\xfa\x5e\x4d\x53\x52\xb9\x69\xd8\xdd\x65\x78\xdf\xc8\xdb\x85\xdf\xf2\xf6\x77\x28\x16\xd8\xdb\xa2\x10\x95\xc3\x24\xd9\x4f\x9f\xf7\x2f\xd9\x87\xae\x6c\x76\x54\x11\x1d\x18\x0b\x5c\x34\x42\xac\x1a\x0f\xde\x08\x2d\x2b\xb4\xee\xf9\x59\x27\xa7\xa6\xf2\x67\xa7\xa3\x58\x76\x50\x5c\x04\xe7\xe8\x5b\x82\x58\xbb\xd0\xde\x0e\x6f\x8c\xbf\x87\x54\xe9\x9f\x71\x29\xdc\x81\x9d\x0a\x87\x5c\x35\x7a\x43\xef\x35\x27\xda\xae\x58\x06\xcf\xfa\xa6\xc4\x47\x1f\x1d\xe9\x28\xd6\x43\x21\x03\x7e\x9a\x80\xc5\x99\x32\x9a\xb3\x0e\x7d\x70\x3e\xef\xf6\x4e\x42\xa1\x35\xc7\x15\x5c\x9e\x25\x00\x6f\x71\xb5\xb5\x3f\xc1\xdc\xa2\xef\xc8\xde\xe2\x8a\x5e\x5b\x5e\x0b\xcf\xc2\x79\x28\xd7\xe3\xcd\x2d\x16\xea\xf3\xa6\xa8\x4a\x4b\xfc\x8c\x0e\x5e\x92\x43\x0f\x42\x8b\xe0\x06\xfc\x82\x38\x2a\xd2\x2e\x69\x3f\x1c\xdb\x12\xfb\xe3\xcd\xbb\xae\x4e\x8e\x0d\x81\x43\x61\xf3\x72\x23\xcc\x3e\xde\xbc\x1b\x41\xe9\x7d\x33\x3a\x38\xe8\x0b\xe6\xd1\xcf\x3f\x52\x9d\xfb\x9e\x7a\x87\x4e\x85\x27\x52\x5a\x07\xa5\xa9\xa4\x0b\xed\x8a\x94\x16\x1d\x79\xc9\xba\x6e\x45\x19\x91\x39\x76\xf8\x44\xc8\xcc\xe9\x46\x31\xce\x19\xb3\x33\xa8\x72\xdb\x06\x66\x23\x71\x45\x45\x79\x51\x69\x88\x32\x84\xa7\x9e\x9e\xf8\x70\x3d\x3e\xc1\xe5\x60\xdf\xe3\xf5\xf7\xfe\xe8\xd0\x06\x0b\xb2\x05\xd6\xf5\x2b\x69\xfa\x2d\xb5\x41\x23\x56\x3f\x0b\xda\xc9\xc7\xa4\x53\xd3\xa8\xbc\x47\xfa\x1e\xb1\x15\xdb\x40\x38\x8d\x0d\xdc\x77\x08\xa2\x37\xd3\x31\x77\xa7\x74\xb3\x29\xd6\x4d\xc5\xe9\xf2\x3f\x7c\xcf\x56\x2b\xba\x34\xc2\x31\x2c\x84\x56\x55\x25\x78\x79\x86\x1e\xf5\x02\x8e\x61\x4a\xa5\x34\xad\x84\x04\xc5\x0f\xf7\x31\xdc\xdd\x0d\xcf\xfb\xdf\x5f\xbe\x30\x81\xb0\xb3\xb6\x26\x37\x84\xe3\x2e\xf1\x51\x19\x9b\xa6\xb1\xcb\xb8\xbb\x1b\x8e\xf9\xeb\xcb\x17\x48\x53\xf2\xdb\x54\x49\x5a\x9d\x0a\x37\xbf\x94\x11\x85\x72\x33\xe3\xc7\xb4\xf6\xe5\xcb\x41\x68\xad\x53\xf6\xf1\x94\x1a\x52\x16\x87\x5a\xcd\xfb\x94\x31\xfa\x43\xdf\xc8\x64\x86\x1b\xc7\x87\xe9\x4c\xeb\x99\xce\x95\xa6\xad\xe4\xad\xb7\x42\xbb\x02\xed\x6d\xc1\xaf\xe4\x31\xfc\xfb\x7c\xc2\xfb\xcb\x12\xf5\xad\x37\x6b\x82\x1e\xf8\xc3\xd5\xed\xf9\xbf\x2e\xa7\xb7\x1f\x6e\x6e\xcf\xff\x79\x39\x9e\x32\xf9\xdd\x9d\x2a\x40\x23\x0c\xa9\xd0\x80\x43\x48\xe3\xed\xee\xee\x1a\xab\xb4\x2f\x60\xcf\xe2\x6f\x2d\x3a\x7f\x9b\x13\xc1\x31\xfc\x20\xf7\x02\x71\x4f\x98\x02\x6a\xd9\xff\x8a\x70\x5c\x8c\x50\x55\xf1\x0d\xc4\x1a\x6b\x7a\x56\x8e\xe1\x87\xe1\x61\x01\x17\xa7\x7b\xf1\xd8\xb7\x91\x43\xc5\xf2\x08\xb4\xa4\xca\x67\x13\x38\x9c\xfa\x0a\x99\x7f\xfe\xd6\x22\x75\x61\xd7\xa7\x93\x5d\x7e\xb7\xff\x97\x4c\xe9\x83\x4c\xb8\x32\xfc\xbc\x3e\x9d\x40\x7a\x45\x66\xe2\x22\xbc\x93\x2f\xac\x9b\xc7\xcc\x17\xc8\xf0\x31\x6f\x78\xdc\x2c\x01\xa8\x0a\x89\xf4\xf8\x68\xd4\x34\xfa\xf8\x19\x6c\xd3\xc1\xd6\x58\x1f\x93\xf6\x66\xd9\x33\x58\xa5\x03\x25\x5f\x5d\xa3\x7e\xcb\x24\xf7\xc2\xf6\xff\x0c\xd3\xe4\xc2\x2a\x79\xce\x73\xad\xa7\x58\xf6\xc5\x4e\xbb\xbe\x78\x8a\x55\x5f\x3c\xc1\xa6\x44\xd4\xdb\xeb\xa9\x56\x7e\x01\x69\x83\x50\x37\xea\x39\x02\x2f\x48\x50\xde\x2e\x3a\xeb\x5e\x3c\x87\x71\x23\x68\x41\xb5\x69\x8f\xfa\x27\x18\x77\x52\xb5\xb6\xde\x6d\xd7\x83\x6d\xc3\x4e\x4e\x4f\xa6\xe3\x37\x90\xa6\xbf\x9a\x2c\xe5\x67\xfa\x2b\x2b\xf7\x24\x3a\xcc\x1b\x8e\xee\x2d\x87\x2c\xfe\x98\x85\x7b\xf2\x98\x74\x1f\x71\x9b\x27\xd8\xbf\x47\xa4\xf4\x9b\x36\x68\x59\x17\xcf\xe2\x0c\x3d\x74\x8d\x35\x67\xca\x67\xc9\xc0\x6b\x58\x5f\x37\x6b\xd8\x3f\xc1\x1f\xb8\x5c\x3d\x15\x3e\x2f\x41\xa2\xcb\xad\xca\xd0\x6d\x0c\x0f\xbb\x9e\xbc\x2b\xf9\xa8\xb6\x0d\xd4\xf7\x27\x5e\x49\x87\x13\xaa\xc7\xbf\x9b\x2c\x34\xfd\x7c\x3c\x17\x9a\x9a\x4e\x54\xbe\x44\x1e\xe6\xf0\x40\x37\x42\xd6\xe2\x77\xa3\xfb\xd6\x1e\xae\x68\xef\xe5\xc9\xcd\xd5\x2b\x2a\xf7\xb6\x70\x46\xb0\x17\xfd\x81\x7c\x52\x62\xb1\xd7\xf1\xfa\x07\xbd\x46\x7f\x8c\x0d\x43\x6c\x73\xe0\x37\x6e\xef\x5e\x43\xd0\x15\xd8\xae\xc1\x5c\x15\x0a\x25\xfc\x6a\xb2\xf0\x1c\x86\x89\xb2\x89\xed\x37\x53\xd1\x9e\x5c\x2b\x42\x7d\xd5\x4f\xac\x3b\x87\xcd\xfe\xe0\x3b\x54\xa2\x13\x6f\xac\x98\xe1\x77\x28\x40\x79\xc2\xd5\x18\xe7\x14\x8f\x4a\x72\x8b\x12\xb5\x57\xa2\x72\x0f\x4c\xca\xa4\x72\xb9\x59\xa0\x45\x99\xec\x43\x61\x4d\x1d\x3a\x16\xbd\x50\xd6\x68\x2a\x32\x87\x04\xfa\x8e\x3a\x08\x7e\xfe\xc0\xad\x9c\xc7\x7a\x98\xf0\x52\xbc\x48\xf0\xb3\x4f\xa5\xf2\x58\x29\xe7\xc9\x2c\xdc\x73\x6c\xf4\xde\x8d\xf0\xa5\x83\x65\xa9\xf2\xb2\x9b\x37\x28\x07\xa2\xaa\xcc\x12\xd9\x50\x61\x5e\xce\xbd\x4b\x58\x3c\x53\xeb\x0e\x61\x78\x40\x52\xbc\x99\x4e\xaf\x23\xc7\x7e\xf8\xeb\x0d\xcf\xe3\x2a\x23\x24\x34\x6d\x56\xa9\x1c\x42\x45\x69\x74\xff\x0f\x85\x85\x12\x20\xe0\xe2\x7c\x0a\xb1\xbc\x1a\x26\x1b\x50\x41\xf8\x38\x78\xe3\xe8\xa2\x96\xec\xa5\x7b\xb5\x79\xc2\x3d\x34\x16\xd9\x35\xc0\xbc\x37\xb8\x0e\xee\x3e\x79\x3d\x5a\x4f\xd0\x65\x37\x43\x08\x13\x08\x84\x3a\x4e\x4d\x74\x5b\x67\x68\xd9\xaf\x55\xdd\x0d\x22\x44\x27\x45\x6f\x43\x8b\xde\xaa\x38\xfa\x2e\x84\xaa\x5a\x1b\x46\x26\xef\xc5\xe7\x1b\xde\x72\xfd\x08\xf9\x39\x5a\x64\xea\x9d\x42\x0a\x42\xee\x04\xc9\x00\xdd\xbf\xc1\x58\x86\xc9\x6b\x68\xac\x59\x28\x89\xd6\x81\x6b\xf3\x12\x84\x83\xf7\x4a\x2b\xd3\xcd\x31\xc6\xd8\x94\xc9\x3e\x5c\xa0\x46\xab\x72\x52\xc6\x3e\x5b\x76\xad\x10\xfe\x57\x02\x2d\x02\x9c\x6b\xd9\x18\xa5\x03\xf7\xb0\xd4\x89\x1c\x7e\x6d\x0a\x77\x61\xcc\xac\xc2\x0d\x63\xee\xd2\x71\x37\xd1\x10\x79\x6e\x5a\xed\xb7\x02\x83\xfc\x25\x98\xf7\x03\x8f\x81\x44\x35\xfc\x03\x51\x44\x38\xbb\xe3\x08\x48\xc1\xc4\x7d\xe3\xbf\x6b\x4b\x55\xf8\xdd\x32\x53\x27\x7d\xf5\x40\x27\x0d\x70\xd2\xfa\x92\xc7\x07\xa1\x77\x46\x2d\xb4\xdf\xa0\x0e\x0b\x71\xf0\xdd\x65\xb9\x7e\xff\xbf\x01\x00\x00\xff\xff\x74\x13\xc3\x50\x06\x1e\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 7686, mode: os.FileMode(420), modTime: time.Unix(1515017608, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcf\x4a\xc3\x40\x18\xc4\xef\x79\x8a\x31\xb5\xc7\xdd\xe4\x05\x3c\x35\x52\xbc\x78\x10\xc1\xa3\x24\xcd\xb7\x76\x49\xb2\x1b\xf6\x8f\x8a\xcb\xf7\xee\xb2\xdb\x22\x14\x6a\x6f\xc3\xf0\x9b\xdf\x61\x36\x77\xcd\xa0\x4d\x33\xf4\xfe\x58\x6d\xee\x21\x9e\x91\x92\x7c\xed\xfd\xf4\x34\x32\x97\xc6\xe6\xe6\xcd\xba\xa9\xd3\x8e\xb9\x51\xd1\x18\x9a\x85\x0f\xa3\x8d\xa1\x00\xf4\x1f\x40\xce\x55\x29\x69\x05\x43\x90\xbb\x35\x7a\xb4\x10\xcc\x55\x4a\xab\xd3\x26\x28\xd4\x79\xbe\x12\x96\x55\x63\x3b\xd6\x27\xa8\x00\x02\x64\xc6\x92\xce\xf3\x97\x7e\xd9\x0f\x68\xe5\x35\xc3\x8c\xe3\xfb\xe7\x42\xcb\xc3\x56\xb6\x6a\x5f\x9f\xe1\xeb\x9e\x4e\xfb\xe9\xa6\x48\x79\xfd\x43\x7f\xa6\x13\x7e\xa1\xaa\x52\x92\x8f\xdf\x74\x88\xa1\x1f\x66\x62\xc6\x97\x75\x13\x39\xb8\x68\x20\xc4\xc1\x1a\xa5\x3f\xf2\x23\xbb\x92\x98\x21\x44\xc8\x7f\x76\x17\xcf\xfe\x06\x00\x00\xff\xff\x43\xce\xa0\xb4\x78\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 376, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x11\xd2\x5d\x3a\x97\x17\xc8\xe6\x42\x84\xd8\x5c\x24\x1a\xf5\x67\x15\x85\x64\x12\xac\x38\x63\x18\x7b\x42\xab\xc8\xef\x5e\x05\x10\x15\x55\xe9\xee\xd8\xe7\x3b\x9f\x46\xc8\x0c\xc8\x1e\x21\x85\xa1\x24\x63\x6d\xa9\x5a\x0c\x48\x03\xa4\x90\xb3\xa0\xc2\x77\xac\x24\x94\x3b\x3b\x21\xe3\x98\x64\xb7\x77\x8c\xaa\xe4\x56\x7a\xa4\xe0\x21\x85\x93\xe3\x0e\x19\x58\x08\xb4\xae\x1c\x35\xa6\x9d\xf8\xc5\x39\xc5\x08\x5a\x87\xd2\x77\xeb\xe5\xf4\x99\x4f\xa9\x8e\x51\x59\xd7\x5e\xb4\x2f\x8e\xbb\xa5\xe1\x18\xff\x56\x8e\x6a\xc7\x1a\x07\xa4\xa0\xad\x6b\x15\x32\x3b\xfe\x4e\x35\x42\x84\x56\xfb\x50\x23\xb3\x72\x12\x0e\x12\x1e\x33\x4e\x82\xf2\x7b\x27\xb6\x2e\x02\x97\xe4\x1b\xe4\xa2\x31\x16\xa7\xbb\xdf\xb2\x27\x75\xda\x23\x15\xc1\x7d\x95\x37\xe1\xe6\x7f\x91\xbd\xae\xf3\x62\xb3\x2d\xb2\xe7\xf5\x22\x57\xe3\x68\x1a\x20\x84\x64\x71\x10\x0f\x73\xd0\x31\xaa\x71\x3c\xb0\xa1\xd0\xc0\x8c\xf1\x28\xe8\x43\x51\x4d\x65\x0a\x7f\xea\xd9\x05\x3c\x43\x1a\x90\xea\x73\xba\x2a\xb6\x65\xbf\xda\xc1\x3c\x79\x64\xe9\xb1\x77\xfc\x31\x79\x92\x79\x03\xab\x7f\xb3\xeb\xe4\x67\xdb\xd2\xf8\xee\x57\x5d\x6d\x7c\x77\x27\xbb\x2c\xee\x6c\xea\x28\x28\xa8\x3e\x03\x00\x00\xff\xff\xbb\x66\xa4\x8a\x17\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 535, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\x4d\x4b\xc4\x30\x10\xc6\xf1\x7b\x3f\xc5\xd8\x65\x8f\x49\xeb\x55\xe8\xc5\xad\x88\x17\x11\x15\x3c\x37\x9b\xc9\x1a\xda\x4e\x4a\x5e\x50\x08\xf3\xdd\xa5\x2f\x20\x0b\xd6\xdb\x30\xfc\xf9\x1d\x9e\xc3\x4d\xa5\x2c\x55\xaa\x0b\x9f\xc5\xe1\xe5\xfe\x0d\xc4\x33\xe4\x2c\xdf\xbb\xd0\x3f\x69\xe6\xed\xe7\xe6\xdf\x87\xf3\x7d\x6b\x3d\x73\x65\x12\x11\x0e\x22\x44\xed\x52\xdc\x12\xdc\x4b\xd0\xfb\x22\x67\x6b\x80\x10\xe4\x69\x4a\x01\x6a\x10\xcc\x45\xce\x93\xb7\x14\x0d\x94\x2b\x30\x00\x39\x8d\xa1\xb9\xbd\x9b\x26\x6a\x8e\xba\x5c\xeb\xa5\x14\x80\xa4\x97\x6b\x73\x5e\xbb\xf1\x51\x41\x2d\xf7\xa8\x11\xc7\xe6\x28\x6b\x73\x51\xe5\x16\xff\xed\xb4\x36\xf4\xff\x42\xc6\x0e\xf8\x2b\xad\xf9\x15\x55\xe4\x2c\x1f\xbe\xf1\x9c\x62\xa7\x06\x64\x86\x2f\xe7\x7b\xf4\xe0\x13\x81\x10\x67\x47\xc6\x5e\xe6\x69\x4e\xcb\xc5\x0c\x42\xc4\x79\xdc\xf6\x6a\xe6\x9f\x00\x00\x00\xff\xff\xd8\xa6\xd9\x67\x87\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 391, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x6a\xeb\x30\x10\x45\xf7\xfe\x8a\x79\x0e\x59\xca\xf6\xfb\x84\xc6\x2e\x69\xb7\x6d\xa0\x6b\x39\x1e\xb7\xaa\xe3\x91\x18\x49\xb4\x20\xe6\xdf\x8b\x9c\x40\x1c\x68\xe8\xee\x22\x1d\x1d\x34\x73\x37\xff\xea\xde\x50\xdd\x6b\xff\x51\x6c\x5e\x77\x0f\x87\xf6\x09\x94\xfa\xb4\xbd\x22\x3d\x23\xa4\x54\x1d\xb4\x9f\x9e\x07\x91\xd5\x35\x05\xed\x27\x0f\xff\x57\x47\xc8\x6c\x39\xe3\x6f\x96\xa7\xce\xb0\x48\x3d\x46\x22\x3c\x29\x1f\x06\x64\x5e\xa1\x36\x06\x17\xc3\x3d\xd6\xc6\x50\xa4\x64\x46\x20\x84\xaa\x75\xd1\x43\x03\x4a\xa4\x48\xc9\xb1\xa1\x30\x42\x79\x35\x1d\x5d\xf4\xca\x21\xab\xfc\x1f\xd8\x0e\xe5\xf9\xc5\x42\x2b\x40\x1a\x96\x74\x71\xbd\xe8\x79\xdf\x43\x53\xdd\xd7\xcd\x38\xc3\xb6\x6a\xc6\xfd\xae\xbc\xe0\xbf\x9b\x3a\xe3\xa7\x3f\x54\x61\x76\x57\xd5\x99\xbf\x71\x15\x29\x55\x8f\xdf\x78\x8c\x41\xf7\x27\x14\x81\x2f\xcb\x13\x32\x70\xa4\x3c\x97\xa5\xd1\xbc\xe7\x0d\xb5\x4b\x12\xc9\xca\xdc\x43\x77\xd3\xc8\x4f\x00\x00\x00\xff\xff\x46\x53\xad\xe9\xbd\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 445, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
