// Code generated by go-bindata.
// sources:
// examples/file-contents.json
// examples/google-storage.json
// examples/hello-world.json
// examples/log-streaming.json
// examples/md5sum.json
// examples/port-request.json
// examples/resource-request.json
// DO NOT EDIT!

package examples

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplesFileContentsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\xbd\x4e\xc3\x30\x10\xde\xf3\x14\x9f\xb2\x74\xa9\x9a\x89\xa5\x33\x20\x2a\xb1\x31\x30\x40\x55\x99\xf8\xd2\x5a\xf2\x4f\x64\x9f\x05\x55\xd5\x77\x47\xbe\x34\xa4\x54\x55\x61\xc9\xe0\xfb\xfe\x73\xa8\x80\xda\x2b\x47\xf5\x12\xf5\xca\xf7\x99\xd1\x19\x4b\x68\x83\x67\xf2\x9c\xa0\xbc\x46\xc8\x3c\x1e\xea\x79\x21\x68\x4a\x6d\x34\x3d\x9b\xe0\x0b\xef\x9e\x5c\xf0\x89\xa3\x62\x4a\xc8\xc9\xf8\x2d\x78\x47\x98\x8d\x22\x33\x74\x86\xac\x46\x17\x22\x4c\xf1\x48\xe0\x80\x36\x92\x62\x82\x1a\x0c\x83\x17\xce\x2e\x24\x46\xda\x27\x26\x37\x58\x0d\xf8\x7a\x89\xb7\x0a\x00\x0e\xf2\x3d\xcb\xdc\x2a\x1e\x34\x05\x2e\xa7\x8b\x74\x43\x2b\x0e\x70\xfa\x2e\x65\xb7\x40\xc3\xae\x6f\x8c\xc7\xa7\xb1\x16\x1f\x74\x0a\xa2\xaf\x44\x58\x4c\xa2\xbc\xef\xc5\xef\x71\xf5\xfc\x30\xbd\xf6\x8a\x77\xe5\xf5\x24\x39\x1d\xc6\xea\xe5\xf8\x44\xd6\x06\xbc\x86\x68\xf5\xbb\xaf\x05\x71\xac\x80\xb5\xf4\x1b\xb6\xfd\xa3\x60\x62\x1d\x6e\x34\x7c\x91\x33\x42\x07\x59\x23\xa1\x55\x3d\xe7\x48\x32\xb3\x44\x63\x4a\xbc\x11\xcc\xad\x8e\x39\xda\x22\x57\xfe\xc7\xb2\x69\x84\xd8\x2a\xe1\xfd\xda\xf7\x1f\x53\x94\xb4\x17\x45\xe9\x8b\xda\xcc\x21\x5e\xa9\x6a\x9c\xda\xd2\x66\x2c\xac\x6c\x6f\x3c\x9d\x4d\xe9\x74\xa1\x94\x21\xea\xf9\x34\xf5\xfa\x07\x70\x5a\xe7\xba\x77\x75\xac\xbe\x03\x00\x00\xff\xff\xd2\x4c\x48\xc4\xe4\x02\x00\x00")

func examplesFileContentsJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesFileContentsJson,
		"examples/file-contents.json",
	)
}

func examplesFileContentsJson() (*asset, error) {
	bytes, err := examplesFileContentsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/file-contents.json", size: 740, mode: os.FileMode(420), modTime: time.Unix(1503513492, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesGoogleStorageJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x4f\x6b\xe3\x30\x10\xc5\xef\xfe\x14\x0f\x9d\x76\x21\x1b\x7b\x0f\x59\xd8\x5c\x5b\xe8\xa5\xd0\xd2\x34\xa7\x52\xca\x44\x92\x5d\x51\xfd\xc3\x1a\xd1\x90\x90\xef\x5e\xa4\xd4\x0e\xb4\xbd\x18\x8b\x79\xef\x37\xf3\xde\xb1\x01\x84\x27\xa7\xc5\x1a\xe2\x26\x84\xc1\x6a\x5c\xd9\x90\x15\x36\x1c\x46\x1a\x34\xf4\x9e\x5c\xb4\x5a\x2c\x8a\x52\xe9\x24\x47\x13\xd9\x04\x5f\x0c\x8f\x94\xde\x60\x7c\xcc\x9c\x40\x5e\x21\x64\xae\xff\x92\x3c\x76\x1a\x3f\xf2\xb6\x0f\xb7\x69\x79\xa6\xe9\xbd\x96\x99\xc3\x98\xc4\x1a\x4f\x0d\x00\x1c\xeb\x17\x10\xc6\xd1\xa0\x5f\xa6\xc3\xf2\x2e\x7b\xce\xd5\x54\xa7\xd2\xa9\x62\x11\x4e\xad\x52\x76\x62\x01\xd1\xb2\x8b\x6d\x6f\xac\x5e\x1e\x4c\x14\xcf\xb3\x32\xb1\x0a\x99\x0b\xa3\x2a\x3e\x9f\x75\x7a\x6a\x80\x2a\x14\xe7\x04\xdf\x8f\x98\xd6\x1f\x4c\x2c\xe8\xcb\xfe\x2f\x35\x5c\x87\x77\x6f\x03\x29\x10\x62\xde\x59\x23\x51\xe4\xe8\xc7\xe0\xa6\x0e\xa6\xf4\xbf\xb6\x1b\xdc\x13\x6b\xcf\xb8\xeb\x7b\x23\x35\x14\x31\xfd\xbe\xa0\xf3\x68\x0b\x72\x48\xeb\xb6\xcd\x29\x72\xf8\x13\xc9\x8c\x2d\xc5\x68\x8d\xa4\xb2\x31\xb5\xdd\xea\x7f\xd7\x75\x7f\xff\xd5\xac\xb3\x33\x12\xbf\xce\x41\xe7\x2a\x2e\x51\x9b\x53\xf3\x11\x00\x00\xff\xff\x55\xe2\xd5\x01\xee\x01\x00\x00")

func examplesGoogleStorageJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesGoogleStorageJson,
		"examples/google-storage.json",
	)
}

func examplesGoogleStorageJson() (*asset, error) {
	bytes, err := examplesGoogleStorageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/google-storage.json", size: 494, mode: os.FileMode(420), modTime: time.Unix(1503513503, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesHelloWorldJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x41\x6a\xc4\x30\x0c\x45\xf7\x3e\xc5\x47\xeb\xd0\xec\xb3\xee\xa2\x77\x28\xa1\xb8\xb6\x68\x4c\x6d\x2b\x58\x0a\x2d\x84\xdc\xbd\xd8\x9d\x19\x66\x23\x10\x4f\x4f\xff\x9f\x0e\xa0\xea\x0b\xd3\x02\x7a\xe3\x9c\x05\x3f\xd2\x72\xa4\xa9\x83\xc8\x1a\x5a\xda\x2d\x49\xed\xfc\x95\x8b\x54\xb5\xe6\x8d\x15\xb6\x31\x8a\xa8\xe1\xd3\x6b\x0a\xe0\xb0\x09\xcc\xeb\xf7\xcb\xbf\xca\xbf\x1c\x0e\x93\xa6\xb4\xe0\xdd\x01\xc0\x39\x26\x40\xa9\xf8\x2f\xfe\xb8\x87\xfa\xbc\xa7\xca\x43\x1a\x34\x94\xd8\x15\xea\x0f\x69\x02\x6d\x4f\xa5\xd6\xc7\x95\x5a\x94\xc3\xba\x3f\x5b\xd9\xe7\xdb\x3a\xe8\xe5\x80\xd5\x5d\xee\x2f\x00\x00\xff\xff\xbf\x61\x26\xf5\xdb\x00\x00\x00")

func examplesHelloWorldJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesHelloWorldJson,
		"examples/hello-world.json",
	)
}

func examplesHelloWorldJson() (*asset, error) {
	bytes, err := examplesHelloWorldJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/hello-world.json", size: 219, mode: os.FileMode(420), modTime: time.Unix(1503514098, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesLogStreamingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x3f\x6b\x23\x31\x14\xc4\xfb\xfd\x14\x83\x6a\x9f\x97\x6b\xed\xf6\xb8\x2a\x45\xfa\x60\x82\x2c\x0d\xbb\x02\xfd\x59\xde\x7b\x9b\xc4\x18\x7f\xf7\xa0\xb5\x13\xdc\x3c\x18\xfd\x34\xc3\xcc\x75\x00\x5c\xf5\x85\xee\x00\xf7\xd2\x26\xa8\x09\x7d\x49\x75\x72\xbb\x8e\x22\x35\x48\x5a\x2c\xb5\xda\x7f\xfc\x63\x69\x55\x4d\xbc\x51\x61\xb3\x37\xa8\xc5\xb6\xda\x48\x11\xe4\x36\x29\xbc\xf0\x91\xc1\x88\xf3\x05\xd6\x60\x33\xf1\x7f\xad\x95\x19\xd1\xeb\x7c\x6e\x5e\xa2\xee\xf1\x2a\xa9\x9a\x6e\x34\x7a\xe3\x68\xa9\x10\xfc\xa0\x5c\xa0\x0c\xad\xc6\x1d\xd6\x6a\x29\x23\xf8\x1a\x98\x19\xf7\xf7\x4a\xfc\x62\x58\xad\x89\xba\x03\xde\x06\x00\xb8\x6e\x17\x70\xa9\xf8\x89\xef\x3f\x73\x7c\x5e\x52\xe5\x66\xda\x68\x28\xb1\x5b\x9c\xce\x6e\x07\xf7\x27\xf4\xfb\x39\xa7\x4c\x98\xac\x3c\x22\xb6\xad\xc8\x11\x9a\xc9\x05\x7f\xfb\x4b\xa5\x3b\xfd\x06\xdc\xb7\xf6\xe8\xd1\xca\x32\x3e\xe4\x33\xa6\xc8\x33\xee\x72\xa3\xb7\x01\x38\x0d\xb7\xe1\x3b\x00\x00\xff\xff\xa3\x3b\xb9\x65\x6f\x01\x00\x00")

func examplesLogStreamingJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesLogStreamingJson,
		"examples/log-streaming.json",
	)
}

func examplesLogStreamingJson() (*asset, error) {
	bytes, err := examplesLogStreamingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/log-streaming.json", size: 367, mode: os.FileMode(420), modTime: time.Unix(1503513511, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesMd5sumJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x50\xbd\x6a\xf3\x40\x10\xec\xf5\x14\xc3\xd5\xc6\xaa\xbe\xc6\xf5\x97\x80\x21\x5d\xca\x60\xcc\x21\xad\xed\x03\xdd\x0f\xda\x3d\xb0\x31\x7e\xf7\x70\x7b\x72\x14\x1c\x91\x90\x34\x42\xb7\x3b\x33\x3b\x33\xd7\x06\x30\xc1\x7a\x32\x1b\x98\x6d\x48\x59\x60\x43\x8f\x98\xa5\xfc\x1e\xdc\x40\x66\x55\x20\x3d\x71\x37\xba\x24\x2e\x86\x82\xfc\x4f\x3e\x06\x96\xd1\x0a\x31\xdc\x12\x8d\x91\xd9\x85\x23\x2c\xd8\xf9\x34\x10\x7c\xff\x8f\xb3\x47\x17\xbd\xb7\xa1\x5f\x57\x59\xa5\xb2\xd9\xe0\xad\x01\x80\xab\x7e\x3f\x39\x9a\x48\x0a\x53\x86\x6e\x1f\xcc\x54\xdb\x12\xa7\x13\x6b\xb4\xe2\x53\x5b\x1f\xfb\x6a\xce\x67\x16\xd0\xd9\xb1\x20\x06\xc8\x89\x70\x8a\x2c\xe0\x0b\x0b\xf9\xf5\xac\x9c\xc7\xa1\x28\x96\x00\x9b\xb6\xfd\xa2\x33\x03\xe5\x92\xd4\xe0\xf3\xf6\xe5\x69\x9e\x26\x2b\xa7\x32\x55\xa2\x0b\x46\xe7\xb7\x06\xd8\x69\xda\x5a\xcf\xcf\x71\x59\xfa\xf8\x4d\xde\x57\x5d\x23\x1e\xee\x9d\x3a\x46\x67\x93\xe4\x91\xb8\xd4\xa0\xd7\x85\x58\xf6\x0a\xfb\x5b\xde\xea\xf5\x57\x81\x8b\xe7\x87\xc4\x74\xa6\x2e\x4b\x1c\x17\x32\x3b\x6f\x8f\xb4\xbf\x27\xb7\x43\x72\x81\x66\xe1\xce\xf7\x85\x32\x35\x62\x56\x73\xa7\xbb\x0f\xcc\x54\xd3\xf2\xf9\xe6\xd6\xbc\x07\x00\x00\xff\xff\x41\x06\xac\x11\xdc\x02\x00\x00")

func examplesMd5sumJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesMd5sumJson,
		"examples/md5sum.json",
	)
}

func examplesMd5sumJson() (*asset, error) {
	bytes, err := examplesMd5sumJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/md5sum.json", size: 732, mode: os.FileMode(420), modTime: time.Unix(1503513514, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesPortRequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x31\x6a\xc4\x30\x10\x45\x7b\x9d\xe2\x33\xb5\x09\x9b\xce\xb8\xce\x01\xd2\x07\x13\x84\x76\xf0\x0a\x56\x33\x8a\x66\x16\x02\x8b\xef\x1e\xa4\xac\xdd\xa8\x79\xff\x3d\xcd\x33\x00\x24\xb1\x30\x2d\xa0\x4f\x6d\x8e\xc6\x3f\x0f\x36\xa7\xa9\x93\x2b\x5b\x6a\xb9\x7a\x56\xe9\x83\x0f\x2e\x2a\xe6\x2d\x3a\x1b\xa2\x59\xde\x24\xcb\x86\xaa\xcd\x0d\xae\xf0\x1b\x83\x7f\x39\x3d\x5c\x1b\x92\x8a\xc7\x2c\xdc\xde\xfe\x5b\x07\x30\x5a\xf0\x15\x00\xe0\x39\x5e\x80\x72\x89\x1b\x7f\x1f\x67\xc4\x7b\xcd\xc2\x43\x1a\x74\xe4\xbb\x74\xec\x01\xba\xa9\x39\x2d\xb8\x4c\xa0\xf3\x1f\x5a\x30\xcf\xf3\xfc\x1a\xed\xeb\x19\x48\xe5\xda\x75\xb2\x3b\x73\xa5\x09\xf4\x7e\xa1\x75\xc0\x3d\x00\x6b\xd8\xc3\x5f\x00\x00\x00\xff\xff\x96\xf7\xb2\x9c\x07\x01\x00\x00")

func examplesPortRequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesPortRequestJson,
		"examples/port-request.json",
	)
}

func examplesPortRequestJson() (*asset, error) {
	bytes, err := examplesPortRequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/port-request.json", size: 263, mode: os.FileMode(420), modTime: time.Unix(1503513519, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _examplesResourceRequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8f\x39\x6b\xc4\x30\x10\x85\x7b\xff\x8a\xc7\xd4\x22\xd8\xb0\xdb\xb8\xcb\x01\xa9\x02\x61\x21\x55\x58\xcc\x44\x1e\x8c\xd8\xd5\x11\x8d\x0c\x21\xc1\xff\x3d\xc8\x47\xa9\x77\x7c\x4f\xf3\xd7\x00\x14\xd8\x0b\xf5\xa0\x8b\x68\x9c\xb3\x15\x64\xf9\x9e\x45\x0b\x99\xea\x8e\xa2\x36\xbb\x54\x5c\x0c\x35\xf4\x22\x3e\x06\x2d\x99\x8b\x28\x18\x85\xf5\x76\xe4\x5d\x98\x70\xc2\xf3\xfb\x07\x6c\xcc\xa2\x06\xdd\x19\xaf\x4f\xb8\x3c\xbe\x19\x70\x18\xd1\xb5\x6d\x7d\x8f\x4e\x6f\xd0\xc4\x56\x1e\xb6\x85\xbc\xef\x2a\xf5\xa8\x1f\x02\xc8\xa6\x79\x58\x21\xd4\xe3\x64\x36\x2d\xb3\x1f\xa6\x2f\xea\xd1\x9d\x77\x45\xdd\xaf\xec\x52\xdb\x36\xc0\xb2\xe2\xe4\x47\xec\x5c\x62\xae\xdd\xcf\x35\xb8\x41\x01\x72\x9e\x27\x19\x8e\x7b\xf9\x9e\x5c\x10\x32\x87\x6b\xfd\x58\x2b\xa4\x77\x91\x44\x06\xd4\xd1\x75\xf5\x96\x06\xb8\x36\x4b\xf3\x1f\x00\x00\xff\xff\xa4\xd2\x4b\x24\x2e\x01\x00\x00")

func examplesResourceRequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_examplesResourceRequestJson,
		"examples/resource-request.json",
	)
}

func examplesResourceRequestJson() (*asset, error) {
	bytes, err := examplesResourceRequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/resource-request.json", size: 302, mode: os.FileMode(420), modTime: time.Unix(1503513523, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"examples/file-contents.json":    examplesFileContentsJson,
	"examples/google-storage.json":   examplesGoogleStorageJson,
	"examples/hello-world.json":      examplesHelloWorldJson,
	"examples/log-streaming.json":    examplesLogStreamingJson,
	"examples/md5sum.json":           examplesMd5sumJson,
	"examples/port-request.json":     examplesPortRequestJson,
	"examples/resource-request.json": examplesResourceRequestJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"examples": {nil, map[string]*bintree{
		"file-contents.json":    {examplesFileContentsJson, map[string]*bintree{}},
		"google-storage.json":   {examplesGoogleStorageJson, map[string]*bintree{}},
		"hello-world.json":      {examplesHelloWorldJson, map[string]*bintree{}},
		"log-streaming.json":    {examplesLogStreamingJson, map[string]*bintree{}},
		"md5sum.json":           {examplesMd5sumJson, map[string]*bintree{}},
		"port-request.json":     {examplesPortRequestJson, map[string]*bintree{}},
		"resource-request.json": {examplesResourceRequestJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
