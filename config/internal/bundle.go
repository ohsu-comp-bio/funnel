// Code generated by go-bindata.
// sources:
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xbd\x4e\xc3\x30\x14\x85\x77\x3f\xc5\x25\xa5\xa3\x9d\xbc\x00\x53\x8b\x2a\x96\x0e\x2c\x8c\x28\xa9\xaf\xa9\xd5\xe4\x3a\xf2\x0f\x42\x5c\xdd\x77\x47\x71\x2b\x24\xa4\xd0\xed\xe8\xe8\x3b\xdf\x70\x36\x0f\xed\xe0\xa9\x1d\xfa\x74\x56\x9b\x47\xd0\x47\x60\x36\xc7\x60\xf1\xc5\x8a\xd4\x26\x2c\xcd\x5b\x88\x97\xbd\x8f\x22\xad\x2b\x44\x38\xea\x94\x6d\x28\xb9\x02\xf8\x1f\x80\x31\x2a\x66\xef\x80\x10\xcc\x6e\x2e\x09\x3a\xd0\x22\x8a\x79\x8e\x9e\xb2\x83\x66\x99\xcf\x08\xd3\xec\x61\x6b\x9b\x2b\x54\x01\x0d\x48\xb6\xa6\xdb\xfc\xb5\x9f\x0e\x03\x74\x66\xcd\x30\xc2\xf9\xfd\x73\xc2\xe9\x69\x6b\x3a\x77\x68\x6e\xf0\xba\x67\xef\xd3\xe5\xae\xc8\x25\xff\x8d\xbf\xa6\x2b\xfe\x47\xa5\x98\xcd\xf3\x17\x9e\x4a\xee\x87\x11\x45\x80\x82\x45\x48\xb9\x8f\x19\xb4\x3e\x05\x72\xfe\x63\x79\x64\x57\x93\x88\xfa\x09\x00\x00\xff\xff\x30\x08\xbc\xe9\x63\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 355, mode: os.FileMode(420), modTime: time.Unix(1504574926, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xcf\x6e\xfa\x30\x0c\xc0\xf1\x7b\x9e\xc2\x42\xfa\x1d\xdb\x1f\x2f\xd0\xcb\xa0\x42\x5c\x86\xc4\xd0\xfe\x9c\xaa\xd2\x38\x25\x22\x75\xc0\x71\xba\x4d\x55\xde\x7d\x2a\x20\x26\xa6\xb1\x9b\x23\x7f\xfd\x51\x22\xd9\x1e\x39\x20\x14\xd0\xd7\x64\x9d\xab\x55\x8b\x82\xd4\x43\x01\x1b\x8e\xa8\xf0\x03\x9b\x28\xf5\xd6\x8d\xc9\x30\xe4\xe5\xf5\x9d\x92\xaa\xb9\x8d\x1d\x92\x04\x28\x80\xbc\x46\x08\x52\xb3\x40\x96\x35\x9e\x8c\x6d\xc7\x7e\x76\x9a\x52\x52\xce\xb7\x67\xe1\xc5\xf3\x7e\x6e\x39\xa5\xff\x8d\x27\xed\x39\xc3\x1e\x49\x32\xe7\x5b\x85\xcc\x9e\x7f\x56\x26\x12\xa1\xcb\x82\x68\x64\x56\x3e\xca\x21\xca\xfd\xc6\x47\x51\x61\xe7\xa3\xd3\x95\x70\x4d\xc1\x20\x57\xc6\x3a\x1c\xbf\xf8\x56\x3e\xa9\xf7\x1d\x52\x25\xfe\x7b\x79\x05\x57\x8f\x55\xf9\xba\xdc\x54\xab\x75\x55\x3e\x2f\x67\x1b\x35\x0c\xd6\x00\x21\xe4\xb3\x43\x0c\x30\x85\x2c\x25\x35\x0c\x07\xb6\x24\x06\x26\x8c\xc7\x88\x41\xaa\x66\x5c\x16\xf0\x4f\x4f\xce\xe1\x29\xca\x00\x49\x9f\xa6\x0b\xb1\xae\xbb\xc5\x16\xa6\xf9\x3d\xa5\xc3\xce\xf3\xe7\xe8\xe4\x53\x03\x8b\x87\xc9\xe5\xe4\x77\x6d\x6e\xc3\xfe\x4f\x4e\xdb\xb0\xbf\xc1\xce\x17\x37\x9a\x3a\x46\x8c\xa8\xbe\x02\x00\x00\xff\xff\xe4\xa8\xee\x31\x02\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 514, mode: os.FileMode(420), modTime: time.Unix(1504574926, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xc1\x4a\xc4\x30\x10\xc6\xf1\x7b\x9e\x62\xec\xb2\xc7\xa4\xf5\x2a\xf4\xe2\xae\x88\x97\x45\xf4\xe0\xb9\xd9\x4c\xd6\xb0\xed\xa4\x24\x29\x08\xc3\xbc\xbb\x6c\x5b\x10\xc1\x7a\x1b\x3e\xfe\xfc\x20\xd9\xdd\xd5\x36\x50\x6d\xbb\xfc\xa9\x76\xaf\x8f\xef\xa0\x4f\xc0\x6c\x4e\xd1\xe1\x8b\x13\x59\xb7\x78\xdb\x3e\x62\xba\x1e\x43\x12\xa9\xfd\x44\x84\xbd\xce\xc5\xc5\xa9\xac\x09\x6e\x25\x98\x92\x62\x0e\x1e\x08\xc1\x1c\xc6\x29\x43\x03\x5a\x44\x31\x8f\x29\x50\xf1\x50\x2d\x40\x0f\x14\x1d\xe6\xf6\xfe\x61\x1c\xa9\xdd\xbb\x6a\xa9\xe7\x52\x03\x92\x9b\xaf\xd5\x79\xeb\x86\x67\x0b\x8d\xd9\xa2\x06\x1c\xda\xbd\x69\xfc\xc5\x56\x6b\xfc\xb7\x73\x0c\xf9\xfa\x2f\xe4\x43\x8f\x3f\xd2\x92\xff\xa2\x14\xb3\x79\xfa\xc2\xf3\x54\x3a\xdb\xa3\xc8\xfc\x0a\xc8\xa5\x4b\x05\xb4\x3e\x47\xf2\xe1\x72\xfb\x9a\xc3\x7c\x89\xa8\xef\x00\x00\x00\xff\xff\x5b\x97\x19\x4c\x72\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 370, mode: os.FileMode(420), modTime: time.Unix(1504574926, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcd\x6a\xeb\x40\x0c\x46\xf7\x7e\x0a\x5d\x87\x2c\xc7\xf6\x7d\x84\xc6\x29\x69\x37\x5d\xb4\x85\xae\xc7\x19\xb9\x9d\x3a\xf3\x83\x46\x03\x85\x41\xef\x5e\xec\x04\xe2\x42\x43\x77\x1f\xd2\xd1\x41\xd2\xe6\x5f\x3b\x58\xdf\x0e\x3a\x7d\x54\x9b\x97\xdd\xdd\x6b\xff\x00\x4a\x7d\x86\x41\x79\xed\x10\x4a\x69\x9e\x82\xc1\x47\x23\xb2\x6a\x7b\xd6\x69\x4a\xf0\x7f\x55\x42\xa2\x40\x33\xfe\x16\x68\xda\x5b\x12\x69\xc7\xec\x3d\x9e\x54\x62\x83\x44\x2b\x34\x64\x8e\x99\x6f\xb1\x21\x73\x55\x8a\x1d\xc1\x23\x34\x7d\xcc\x09\x3a\x50\x22\x55\x29\x91\xac\xe7\x11\xea\xab\xe9\x18\x73\x52\x11\x49\xcd\xfb\xc0\xd6\xd4\xe7\x89\x85\x56\x80\xde\x2c\xe9\xe2\x7a\xd6\xee\x30\x40\xd7\xdc\xd6\x39\x74\xb0\x6d\xba\xf1\xb0\xab\x2f\xf8\xef\xa6\xbd\x4d\xd3\x1f\x2a\x76\xf1\xaa\x3a\xf3\x3f\x5c\x55\x29\xcd\xfd\x17\x1e\x33\xeb\xe1\x84\x22\xe0\x83\x41\x48\xac\x89\xe7\xbb\x82\x1f\xed\xfb\xfc\xa1\x7e\x49\x22\xd5\x77\x00\x00\x00\xff\xff\x65\xd8\x5a\xa1\xa8\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 424, mode: os.FileMode(420), modTime: time.Unix(1504574926, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
