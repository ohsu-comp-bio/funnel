// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: config/config.proto

package config

import (
	logger "github.com/ohsu-comp-bio/funnel/logger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GridEngine struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Template      string                 `protobuf:"bytes,1,opt,name=Template,proto3" json:"Template,omitempty"`
	TemplateFile  string                 `protobuf:"bytes,2,opt,name=TemplateFile,proto3" json:"TemplateFile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GridEngine) Reset() {
	*x = GridEngine{}
	mi := &file_config_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GridEngine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GridEngine) ProtoMessage() {}

func (x *GridEngine) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GridEngine.ProtoReflect.Descriptor instead.
func (*GridEngine) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *GridEngine) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *GridEngine) GetTemplateFile() string {
	if x != nil {
		return x.TemplateFile
	}
	return ""
}

// Config describes configuration for Funnel.
type Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Component selectors
	EventWriters []string `protobuf:"bytes,1,rep,name=EventWriters,proto3" json:"EventWriters,omitempty"`
	Database     string   `protobuf:"bytes,2,opt,name=Database,proto3" json:"Database,omitempty"`
	Compute      string   `protobuf:"bytes,3,opt,name=Compute,proto3" json:"Compute,omitempty"`
	// Funnel components
	Server    *Server              `protobuf:"bytes,4,opt,name=Server,proto3" json:"Server,omitempty"`
	RPCClient *RPCClient           `protobuf:"bytes,5,opt,name=RPCClient,proto3" json:"RPCClient,omitempty"`
	Scheduler *Scheduler           `protobuf:"bytes,6,opt,name=Scheduler,proto3" json:"Scheduler,omitempty"`
	Node      *Node                `protobuf:"bytes,7,opt,name=Node,proto3" json:"Node,omitempty"`
	Worker    *Worker              `protobuf:"bytes,8,opt,name=Worker,proto3" json:"Worker,omitempty"`
	Logger    *logger.LoggerConfig `protobuf:"bytes,9,opt,name=Logger,proto3" json:"Logger,omitempty"` // Placeholder for logger.Config
	// Databases / event handlers
	BoltDB    *BoltDB    `protobuf:"bytes,10,opt,name=BoltDB,proto3" json:"BoltDB,omitempty"`
	Badger    *Badger    `protobuf:"bytes,11,opt,name=Badger,proto3" json:"Badger,omitempty"`
	DynamoDB  *DynamoDB  `protobuf:"bytes,12,opt,name=DynamoDB,proto3" json:"DynamoDB,omitempty"`
	Elastic   *Elastic   `protobuf:"bytes,13,opt,name=Elastic,proto3" json:"Elastic,omitempty"`
	MongoDB   *MongoDB   `protobuf:"bytes,14,opt,name=MongoDB,proto3" json:"MongoDB,omitempty"`
	Kafka     *Kafka     `protobuf:"bytes,15,opt,name=Kafka,proto3" json:"Kafka,omitempty"`
	PubSub    *PubSub    `protobuf:"bytes,16,opt,name=PubSub,proto3" json:"PubSub,omitempty"`
	Datastore *Datastore `protobuf:"bytes,17,opt,name=Datastore,proto3" json:"Datastore,omitempty"`
	// Compute
	HTCondor   *HPCBackend `protobuf:"bytes,18,opt,name=HTCondor,proto3" json:"HTCondor,omitempty"`
	Slurm      *HPCBackend `protobuf:"bytes,19,opt,name=Slurm,proto3" json:"Slurm,omitempty"`
	PBS        *HPCBackend `protobuf:"bytes,20,opt,name=PBS,proto3" json:"PBS,omitempty"`
	GridEngine *GridEngine `protobuf:"bytes,21,opt,name=GridEngine,proto3" json:"GridEngine,omitempty"`
	AWSBatch   *AWSBatch   `protobuf:"bytes,22,opt,name=AWSBatch,proto3" json:"AWSBatch,omitempty"`
	Kubernetes *Kubernetes `protobuf:"bytes,23,opt,name=Kubernetes,proto3" json:"Kubernetes,omitempty"`
	// Storage
	LocalStorage  *LocalStorage       `protobuf:"bytes,24,opt,name=LocalStorage,proto3" json:"LocalStorage,omitempty"`
	AmazonS3      *AmazonS3Storage    `protobuf:"bytes,25,opt,name=AmazonS3,proto3" json:"AmazonS3,omitempty"`
	GenericS3     []*GenericS3Storage `protobuf:"bytes,26,rep,name=GenericS3,proto3" json:"GenericS3,omitempty"`
	GoogleStorage *GoogleCloudStorage `protobuf:"bytes,27,opt,name=GoogleStorage,proto3" json:"GoogleStorage,omitempty"`
	Swift         *SwiftStorage       `protobuf:"bytes,28,opt,name=Swift,proto3" json:"Swift,omitempty"`
	HTTPStorage   *HTTPStorage        `protobuf:"bytes,29,opt,name=HTTPStorage,proto3" json:"HTTPStorage,omitempty"`
	FTPStorage    *FTPStorage         `protobuf:"bytes,30,opt,name=FTPStorage,proto3" json:"FTPStorage,omitempty"`
	// Plugins
	Plugins       *Plugins `protobuf:"bytes,31,opt,name=Plugins,proto3" json:"Plugins,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_config_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *Config) GetEventWriters() []string {
	if x != nil {
		return x.EventWriters
	}
	return nil
}

func (x *Config) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Config) GetCompute() string {
	if x != nil {
		return x.Compute
	}
	return ""
}

func (x *Config) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Config) GetRPCClient() *RPCClient {
	if x != nil {
		return x.RPCClient
	}
	return nil
}

func (x *Config) GetScheduler() *Scheduler {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

func (x *Config) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *Config) GetWorker() *Worker {
	if x != nil {
		return x.Worker
	}
	return nil
}

func (x *Config) GetLogger() *logger.LoggerConfig {
	if x != nil {
		return x.Logger
	}
	return nil
}

func (x *Config) GetBoltDB() *BoltDB {
	if x != nil {
		return x.BoltDB
	}
	return nil
}

func (x *Config) GetBadger() *Badger {
	if x != nil {
		return x.Badger
	}
	return nil
}

func (x *Config) GetDynamoDB() *DynamoDB {
	if x != nil {
		return x.DynamoDB
	}
	return nil
}

func (x *Config) GetElastic() *Elastic {
	if x != nil {
		return x.Elastic
	}
	return nil
}

func (x *Config) GetMongoDB() *MongoDB {
	if x != nil {
		return x.MongoDB
	}
	return nil
}

func (x *Config) GetKafka() *Kafka {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *Config) GetPubSub() *PubSub {
	if x != nil {
		return x.PubSub
	}
	return nil
}

func (x *Config) GetDatastore() *Datastore {
	if x != nil {
		return x.Datastore
	}
	return nil
}

func (x *Config) GetHTCondor() *HPCBackend {
	if x != nil {
		return x.HTCondor
	}
	return nil
}

func (x *Config) GetSlurm() *HPCBackend {
	if x != nil {
		return x.Slurm
	}
	return nil
}

func (x *Config) GetPBS() *HPCBackend {
	if x != nil {
		return x.PBS
	}
	return nil
}

func (x *Config) GetGridEngine() *GridEngine {
	if x != nil {
		return x.GridEngine
	}
	return nil
}

func (x *Config) GetAWSBatch() *AWSBatch {
	if x != nil {
		return x.AWSBatch
	}
	return nil
}

func (x *Config) GetKubernetes() *Kubernetes {
	if x != nil {
		return x.Kubernetes
	}
	return nil
}

func (x *Config) GetLocalStorage() *LocalStorage {
	if x != nil {
		return x.LocalStorage
	}
	return nil
}

func (x *Config) GetAmazonS3() *AmazonS3Storage {
	if x != nil {
		return x.AmazonS3
	}
	return nil
}

func (x *Config) GetGenericS3() []*GenericS3Storage {
	if x != nil {
		return x.GenericS3
	}
	return nil
}

func (x *Config) GetGoogleStorage() *GoogleCloudStorage {
	if x != nil {
		return x.GoogleStorage
	}
	return nil
}

func (x *Config) GetSwift() *SwiftStorage {
	if x != nil {
		return x.Swift
	}
	return nil
}

func (x *Config) GetHTTPStorage() *HTTPStorage {
	if x != nil {
		return x.HTTPStorage
	}
	return nil
}

func (x *Config) GetFTPStorage() *FTPStorage {
	if x != nil {
		return x.FTPStorage
	}
	return nil
}

func (x *Config) GetPlugins() *Plugins {
	if x != nil {
		return x.Plugins
	}
	return nil
}

// This config matches the funnel plugins repo protobuf
type Plugins struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	Params        map[string]string      `protobuf:"bytes,2,rep,name=Params,proto3" json:"Params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Plugins) Reset() {
	*x = Plugins{}
	mi := &file_config_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plugins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plugins) ProtoMessage() {}

func (x *Plugins) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plugins.ProtoReflect.Descriptor instead.
func (*Plugins) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *Plugins) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Plugins) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

// BasicCredential describes a username and password for use with Funnel's basic auth.
type BasicCredential struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          string                 `protobuf:"bytes,1,opt,name=User,proto3" json:"User,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	Admin         bool                   `protobuf:"varint,3,opt,name=Admin,proto3" json:"Admin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BasicCredential) Reset() {
	*x = BasicCredential{}
	mi := &file_config_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BasicCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicCredential) ProtoMessage() {}

func (x *BasicCredential) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicCredential.ProtoReflect.Descriptor instead.
func (*BasicCredential) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{3}
}

func (x *BasicCredential) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *BasicCredential) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *BasicCredential) GetAdmin() bool {
	if x != nil {
		return x.Admin
	}
	return false
}

// OidcAuth describes OpenID Connect authentication configuration.
type OidcAuth struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ServiceConfigURL string                 `protobuf:"bytes,1,opt,name=ServiceConfigURL,proto3" json:"ServiceConfigURL,omitempty"`
	ClientId         string                 `protobuf:"bytes,2,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	ClientSecret     string                 `protobuf:"bytes,3,opt,name=ClientSecret,proto3" json:"ClientSecret,omitempty"`
	RedirectURL      string                 `protobuf:"bytes,4,opt,name=RedirectURL,proto3" json:"RedirectURL,omitempty"`
	RequireScope     string                 `protobuf:"bytes,5,opt,name=RequireScope,proto3" json:"RequireScope,omitempty"`
	RequireAudience  string                 `protobuf:"bytes,6,opt,name=RequireAudience,proto3" json:"RequireAudience,omitempty"`
	Admins           []string               `protobuf:"bytes,7,rep,name=Admins,proto3" json:"Admins,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *OidcAuth) Reset() {
	*x = OidcAuth{}
	mi := &file_config_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OidcAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OidcAuth) ProtoMessage() {}

func (x *OidcAuth) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OidcAuth.ProtoReflect.Descriptor instead.
func (*OidcAuth) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{4}
}

func (x *OidcAuth) GetServiceConfigURL() string {
	if x != nil {
		return x.ServiceConfigURL
	}
	return ""
}

func (x *OidcAuth) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OidcAuth) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *OidcAuth) GetRedirectURL() string {
	if x != nil {
		return x.RedirectURL
	}
	return ""
}

func (x *OidcAuth) GetRequireScope() string {
	if x != nil {
		return x.RequireScope
	}
	return ""
}

func (x *OidcAuth) GetRequireAudience() string {
	if x != nil {
		return x.RequireAudience
	}
	return ""
}

func (x *OidcAuth) GetAdmins() []string {
	if x != nil {
		return x.Admins
	}
	return nil
}

type TimeoutConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to TimeoutOption:
	//
	//	*TimeoutConfig_Duration
	//	*TimeoutConfig_Disabled
	TimeoutOption isTimeoutConfig_TimeoutOption `protobuf_oneof:"timeout_option"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeoutConfig) Reset() {
	*x = TimeoutConfig{}
	mi := &file_config_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeoutConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeoutConfig) ProtoMessage() {}

func (x *TimeoutConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeoutConfig.ProtoReflect.Descriptor instead.
func (*TimeoutConfig) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{5}
}

func (x *TimeoutConfig) GetTimeoutOption() isTimeoutConfig_TimeoutOption {
	if x != nil {
		return x.TimeoutOption
	}
	return nil
}

func (x *TimeoutConfig) GetDuration() *durationpb.Duration {
	if x != nil {
		if x, ok := x.TimeoutOption.(*TimeoutConfig_Duration); ok {
			return x.Duration
		}
	}
	return nil
}

func (x *TimeoutConfig) GetDisabled() bool {
	if x != nil {
		if x, ok := x.TimeoutOption.(*TimeoutConfig_Disabled); ok {
			return x.Disabled
		}
	}
	return false
}

type isTimeoutConfig_TimeoutOption interface {
	isTimeoutConfig_TimeoutOption()
}

type TimeoutConfig_Duration struct {
	Duration *durationpb.Duration `protobuf:"bytes,1,opt,name=duration,proto3,oneof"`
}

type TimeoutConfig_Disabled struct {
	Disabled bool `protobuf:"varint,2,opt,name=disabled,proto3,oneof"` // Represents an infinite or disabled timeout
}

func (*TimeoutConfig_Duration) isTimeoutConfig_TimeoutOption() {}

func (*TimeoutConfig_Disabled) isTimeoutConfig_TimeoutOption() {}

// RPCClient describes configuration for gRPC clients.
type RPCClient struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Credential    *BasicCredential       `protobuf:"bytes,1,opt,name=Credential,proto3" json:"Credential,omitempty"`
	ServerAddress string                 `protobuf:"bytes,2,opt,name=ServerAddress,proto3" json:"ServerAddress,omitempty"`
	Timeout       *TimeoutConfig         `protobuf:"bytes,3,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	MaxRetries    uint32                 `protobuf:"varint,4,opt,name=MaxRetries,proto3" json:"MaxRetries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RPCClient) Reset() {
	*x = RPCClient{}
	mi := &file_config_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RPCClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCClient) ProtoMessage() {}

func (x *RPCClient) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCClient.ProtoReflect.Descriptor instead.
func (*RPCClient) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{6}
}

func (x *RPCClient) GetCredential() *BasicCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *RPCClient) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *RPCClient) GetTimeout() *TimeoutConfig {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *RPCClient) GetMaxRetries() uint32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

// Server describes configuration for the server.
type Server struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ServiceName      string                 `protobuf:"bytes,1,opt,name=ServiceName,proto3" json:"ServiceName,omitempty"`
	HostName         string                 `protobuf:"bytes,2,opt,name=HostName,proto3" json:"HostName,omitempty"`
	HTTPPort         string                 `protobuf:"bytes,3,opt,name=HTTPPort,proto3" json:"HTTPPort,omitempty"`
	RPCPort          string                 `protobuf:"bytes,4,opt,name=RPCPort,proto3" json:"RPCPort,omitempty"`
	BasicAuth        []*BasicCredential     `protobuf:"bytes,5,rep,name=BasicAuth,proto3" json:"BasicAuth,omitempty"`
	OidcAuth         *OidcAuth              `protobuf:"bytes,6,opt,name=OidcAuth,proto3" json:"OidcAuth,omitempty"`
	DisableHTTPCache bool                   `protobuf:"varint,7,opt,name=DisableHTTPCache,proto3" json:"DisableHTTPCache,omitempty"`
	TaskAccess       string                 `protobuf:"bytes,8,opt,name=TaskAccess,proto3" json:"TaskAccess,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Server) Reset() {
	*x = Server{}
	mi := &file_config_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{7}
}

func (x *Server) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Server) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *Server) GetHTTPPort() string {
	if x != nil {
		return x.HTTPPort
	}
	return ""
}

func (x *Server) GetRPCPort() string {
	if x != nil {
		return x.RPCPort
	}
	return ""
}

func (x *Server) GetBasicAuth() []*BasicCredential {
	if x != nil {
		return x.BasicAuth
	}
	return nil
}

func (x *Server) GetOidcAuth() *OidcAuth {
	if x != nil {
		return x.OidcAuth
	}
	return nil
}

func (x *Server) GetDisableHTTPCache() bool {
	if x != nil {
		return x.DisableHTTPCache
	}
	return false
}

func (x *Server) GetTaskAccess() string {
	if x != nil {
		return x.TaskAccess
	}
	return ""
}

// Scheduler contains Funnel's basic scheduler configuration.
type Scheduler struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ScheduleRate    *durationpb.Duration   `protobuf:"bytes,1,opt,name=ScheduleRate,proto3" json:"ScheduleRate,omitempty"`
	ScheduleChunk   int32                  `protobuf:"varint,2,opt,name=ScheduleChunk,proto3" json:"ScheduleChunk,omitempty"`
	NodePingTimeout *TimeoutConfig         `protobuf:"bytes,3,opt,name=NodePingTimeout,proto3" json:"NodePingTimeout,omitempty"`
	NodeInitTimeout *TimeoutConfig         `protobuf:"bytes,4,opt,name=NodeInitTimeout,proto3" json:"NodeInitTimeout,omitempty"`
	NodeDeadTimeout *TimeoutConfig         `protobuf:"bytes,5,opt,name=NodeDeadTimeout,proto3" json:"NodeDeadTimeout,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Scheduler) Reset() {
	*x = Scheduler{}
	mi := &file_config_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scheduler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler) ProtoMessage() {}

func (x *Scheduler) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler.ProtoReflect.Descriptor instead.
func (*Scheduler) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{8}
}

func (x *Scheduler) GetScheduleRate() *durationpb.Duration {
	if x != nil {
		return x.ScheduleRate
	}
	return nil
}

func (x *Scheduler) GetScheduleChunk() int32 {
	if x != nil {
		return x.ScheduleChunk
	}
	return 0
}

func (x *Scheduler) GetNodePingTimeout() *TimeoutConfig {
	if x != nil {
		return x.NodePingTimeout
	}
	return nil
}

func (x *Scheduler) GetNodeInitTimeout() *TimeoutConfig {
	if x != nil {
		return x.NodeInitTimeout
	}
	return nil
}

func (x *Scheduler) GetNodeDeadTimeout() *TimeoutConfig {
	if x != nil {
		return x.NodeDeadTimeout
	}
	return nil
}

type Resources struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cpus          uint32                 `protobuf:"varint,1,opt,name=Cpus,proto3" json:"Cpus,omitempty"`
	RamGb         float64                `protobuf:"fixed64,2,opt,name=RamGb,proto3" json:"RamGb,omitempty"`
	DiskGb        float64                `protobuf:"fixed64,3,opt,name=DiskGb,proto3" json:"DiskGb,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Resources) Reset() {
	*x = Resources{}
	mi := &file_config_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{9}
}

func (x *Resources) GetCpus() uint32 {
	if x != nil {
		return x.Cpus
	}
	return 0
}

func (x *Resources) GetRamGb() float64 {
	if x != nil {
		return x.RamGb
	}
	return 0
}

func (x *Resources) GetDiskGb() float64 {
	if x != nil {
		return x.DiskGb
	}
	return 0
}

// Node contains the configuration for a node.
type Node struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Resources     *Resources             `protobuf:"bytes,2,opt,name=Resources,proto3" json:"Resources,omitempty"`
	Timeout       *TimeoutConfig         `protobuf:"bytes,3,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	UpdateRate    *durationpb.Duration   `protobuf:"bytes,4,opt,name=UpdateRate,proto3" json:"UpdateRate,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,5,rep,name=Metadata,proto3" json:"Metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_config_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{10}
}

func (x *Node) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Node) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Node) GetTimeout() *TimeoutConfig {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Node) GetUpdateRate() *durationpb.Duration {
	if x != nil {
		return x.UpdateRate
	}
	return nil
}

func (x *Node) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Worker contains worker configuration.
type Worker struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	WorkDir              string                 `protobuf:"bytes,1,opt,name=WorkDir,proto3" json:"WorkDir,omitempty"`
	ScratchPath          string                 `protobuf:"bytes,2,opt,name=ScratchPath,proto3" json:"ScratchPath,omitempty"`
	PollingRate          *durationpb.Duration   `protobuf:"bytes,3,opt,name=PollingRate,proto3" json:"PollingRate,omitempty"`
	LogUpdateRate        *durationpb.Duration   `protobuf:"bytes,4,opt,name=LogUpdateRate,proto3" json:"LogUpdateRate,omitempty"`
	LogTailSize          int64                  `protobuf:"varint,5,opt,name=LogTailSize,proto3" json:"LogTailSize,omitempty"`
	LeaveWorkDir         bool                   `protobuf:"varint,6,opt,name=LeaveWorkDir,proto3" json:"LeaveWorkDir,omitempty"`
	MaxParallelTransfers int32                  `protobuf:"varint,7,opt,name=MaxParallelTransfers,proto3" json:"MaxParallelTransfers,omitempty"`
	Container            *ContainerConfig       `protobuf:"bytes,8,opt,name=Container,proto3" json:"Container,omitempty"`
	DriverCommand        string                 `protobuf:"bytes,9,opt,name=DriverCommand,proto3" json:"DriverCommand,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Worker) Reset() {
	*x = Worker{}
	mi := &file_config_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker) ProtoMessage() {}

func (x *Worker) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worker.ProtoReflect.Descriptor instead.
func (*Worker) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{11}
}

func (x *Worker) GetWorkDir() string {
	if x != nil {
		return x.WorkDir
	}
	return ""
}

func (x *Worker) GetScratchPath() string {
	if x != nil {
		return x.ScratchPath
	}
	return ""
}

func (x *Worker) GetPollingRate() *durationpb.Duration {
	if x != nil {
		return x.PollingRate
	}
	return nil
}

func (x *Worker) GetLogUpdateRate() *durationpb.Duration {
	if x != nil {
		return x.LogUpdateRate
	}
	return nil
}

func (x *Worker) GetLogTailSize() int64 {
	if x != nil {
		return x.LogTailSize
	}
	return 0
}

func (x *Worker) GetLeaveWorkDir() bool {
	if x != nil {
		return x.LeaveWorkDir
	}
	return false
}

func (x *Worker) GetMaxParallelTransfers() int32 {
	if x != nil {
		return x.MaxParallelTransfers
	}
	return 0
}

func (x *Worker) GetContainer() *ContainerConfig {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *Worker) GetDriverCommand() string {
	if x != nil {
		return x.DriverCommand
	}
	return ""
}

// ContainerConfig describes container configuration.
type ContainerConfig struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Image           string                 `protobuf:"bytes,2,opt,name=Image,proto3" json:"Image,omitempty"`
	Name            string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Command         []string               `protobuf:"bytes,4,rep,name=Command,proto3" json:"Command,omitempty"`
	Workdir         string                 `protobuf:"bytes,5,opt,name=Workdir,proto3" json:"Workdir,omitempty"`
	RemoveContainer bool                   `protobuf:"varint,6,opt,name=RemoveContainer,proto3" json:"RemoveContainer,omitempty"`
	Env             map[string]string      `protobuf:"bytes,7,rep,name=Env,proto3" json:"Env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DriverCommand   string                 `protobuf:"bytes,8,opt,name=DriverCommand,proto3" json:"DriverCommand,omitempty"`
	RunCommand      string                 `protobuf:"bytes,9,opt,name=RunCommand,proto3" json:"RunCommand,omitempty"`
	PullCommand     string                 `protobuf:"bytes,10,opt,name=PullCommand,proto3" json:"PullCommand,omitempty"`
	StopCommand     string                 `protobuf:"bytes,11,opt,name=StopCommand,proto3" json:"StopCommand,omitempty"`
	EnableTags      bool                   `protobuf:"varint,12,opt,name=EnableTags,proto3" json:"EnableTags,omitempty"`
	Tags            map[string]string      `protobuf:"bytes,13,rep,name=Tags,proto3" json:"Tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Note: io.Reader and io.Writer (Stdin, Stdout, Stderr) are omitted as they are not serializable in Protobuf
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ContainerConfig) Reset() {
	*x = ContainerConfig{}
	mi := &file_config_config_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerConfig) ProtoMessage() {}

func (x *ContainerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerConfig.ProtoReflect.Descriptor instead.
func (*ContainerConfig) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{12}
}

func (x *ContainerConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContainerConfig) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ContainerConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerConfig) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *ContainerConfig) GetWorkdir() string {
	if x != nil {
		return x.Workdir
	}
	return ""
}

func (x *ContainerConfig) GetRemoveContainer() bool {
	if x != nil {
		return x.RemoveContainer
	}
	return false
}

func (x *ContainerConfig) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *ContainerConfig) GetDriverCommand() string {
	if x != nil {
		return x.DriverCommand
	}
	return ""
}

func (x *ContainerConfig) GetRunCommand() string {
	if x != nil {
		return x.RunCommand
	}
	return ""
}

func (x *ContainerConfig) GetPullCommand() string {
	if x != nil {
		return x.PullCommand
	}
	return ""
}

func (x *ContainerConfig) GetStopCommand() string {
	if x != nil {
		return x.StopCommand
	}
	return ""
}

func (x *ContainerConfig) GetEnableTags() bool {
	if x != nil {
		return x.EnableTags
	}
	return false
}

func (x *ContainerConfig) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// HPCBackend describes the configuration for an HPC scheduler backend.
type HPCBackend struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	DisableReconciler bool                   `protobuf:"varint,1,opt,name=DisableReconciler,proto3" json:"DisableReconciler,omitempty"`
	ReconcileRate     *durationpb.Duration   `protobuf:"bytes,2,opt,name=ReconcileRate,proto3" json:"ReconcileRate,omitempty"`
	Template          string                 `protobuf:"bytes,3,opt,name=Template,proto3" json:"Template,omitempty"`
	TemplateFile      string                 `protobuf:"bytes,4,opt,name=TemplateFile,proto3" json:"TemplateFile,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *HPCBackend) Reset() {
	*x = HPCBackend{}
	mi := &file_config_config_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HPCBackend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HPCBackend) ProtoMessage() {}

func (x *HPCBackend) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HPCBackend.ProtoReflect.Descriptor instead.
func (*HPCBackend) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{13}
}

func (x *HPCBackend) GetDisableReconciler() bool {
	if x != nil {
		return x.DisableReconciler
	}
	return false
}

func (x *HPCBackend) GetReconcileRate() *durationpb.Duration {
	if x != nil {
		return x.ReconcileRate
	}
	return nil
}

func (x *HPCBackend) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *HPCBackend) GetTemplateFile() string {
	if x != nil {
		return x.TemplateFile
	}
	return ""
}

// BoltDB describes the configuration for the BoltDB embedded database.
type BoltDB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoltDB) Reset() {
	*x = BoltDB{}
	mi := &file_config_config_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoltDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoltDB) ProtoMessage() {}

func (x *BoltDB) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoltDB.ProtoReflect.Descriptor instead.
func (*BoltDB) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{14}
}

func (x *BoltDB) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Badger describes configuration for the Badger embedded database.
type Badger struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Badger) Reset() {
	*x = Badger{}
	mi := &file_config_config_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Badger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Badger) ProtoMessage() {}

func (x *Badger) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Badger.ProtoReflect.Descriptor instead.
func (*Badger) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{15}
}

func (x *Badger) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// MongoDB configures access to a MongoDB database.
type MongoDB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addrs         []string               `protobuf:"bytes,1,rep,name=Addrs,proto3" json:"Addrs,omitempty"`
	Database      string                 `protobuf:"bytes,2,opt,name=Database,proto3" json:"Database,omitempty"`
	Timeout       *TimeoutConfig         `protobuf:"bytes,3,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	Username      string                 `protobuf:"bytes,4,opt,name=Username,proto3" json:"Username,omitempty"`
	Password      string                 `protobuf:"bytes,5,opt,name=Password,proto3" json:"Password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MongoDB) Reset() {
	*x = MongoDB{}
	mi := &file_config_config_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongoDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoDB) ProtoMessage() {}

func (x *MongoDB) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoDB.ProtoReflect.Descriptor instead.
func (*MongoDB) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{16}
}

func (x *MongoDB) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *MongoDB) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *MongoDB) GetTimeout() *TimeoutConfig {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *MongoDB) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MongoDB) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Elastic configures access to an Elasticsearch database.
type Elastic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IndexPrefix   string                 `protobuf:"bytes,1,opt,name=IndexPrefix,proto3" json:"IndexPrefix,omitempty"`
	URL           string                 `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
	Username      string                 `protobuf:"bytes,3,opt,name=Username,proto3" json:"Username,omitempty"`
	Password      string                 `protobuf:"bytes,4,opt,name=Password,proto3" json:"Password,omitempty"`
	CloudID       string                 `protobuf:"bytes,5,opt,name=CloudID,proto3" json:"CloudID,omitempty"`
	APIKey        string                 `protobuf:"bytes,6,opt,name=APIKey,proto3" json:"APIKey,omitempty"`
	ServiceToken  string                 `protobuf:"bytes,7,opt,name=ServiceToken,proto3" json:"ServiceToken,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Elastic) Reset() {
	*x = Elastic{}
	mi := &file_config_config_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Elastic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Elastic) ProtoMessage() {}

func (x *Elastic) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Elastic.ProtoReflect.Descriptor instead.
func (*Elastic) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{17}
}

func (x *Elastic) GetIndexPrefix() string {
	if x != nil {
		return x.IndexPrefix
	}
	return ""
}

func (x *Elastic) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *Elastic) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Elastic) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Elastic) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *Elastic) GetAPIKey() string {
	if x != nil {
		return x.APIKey
	}
	return ""
}

func (x *Elastic) GetServiceToken() string {
	if x != nil {
		return x.ServiceToken
	}
	return ""
}

// Kafka configures access to a Kafka topic for task event reading/writing.
type Kafka struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Servers       []string               `protobuf:"bytes,1,rep,name=Servers,proto3" json:"Servers,omitempty"`
	Topic         string                 `protobuf:"bytes,2,opt,name=Topic,proto3" json:"Topic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Kafka) Reset() {
	*x = Kafka{}
	mi := &file_config_config_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Kafka) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kafka) ProtoMessage() {}

func (x *Kafka) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kafka.ProtoReflect.Descriptor instead.
func (*Kafka) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{18}
}

func (x *Kafka) GetServers() []string {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *Kafka) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

// PubSub configures access to Google Cloud Pub/Sub.
type PubSub struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Topic           string                 `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Project         string                 `protobuf:"bytes,2,opt,name=Project,proto3" json:"Project,omitempty"`
	CredentialsFile string                 `protobuf:"bytes,3,opt,name=CredentialsFile,proto3" json:"CredentialsFile,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PubSub) Reset() {
	*x = PubSub{}
	mi := &file_config_config_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PubSub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSub) ProtoMessage() {}

func (x *PubSub) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSub.ProtoReflect.Descriptor instead.
func (*PubSub) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{19}
}

func (x *PubSub) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PubSub) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *PubSub) GetCredentialsFile() string {
	if x != nil {
		return x.CredentialsFile
	}
	return ""
}

// AWSConfig describes the configuration for creating AWS Session instances.
type AWSConfig struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Endpoint                  string                 `protobuf:"bytes,1,opt,name=Endpoint,proto3" json:"Endpoint,omitempty"`
	Region                    string                 `protobuf:"bytes,2,opt,name=Region,proto3" json:"Region,omitempty"`
	MaxRetries                int32                  `protobuf:"varint,3,opt,name=MaxRetries,proto3" json:"MaxRetries,omitempty"`
	Key                       string                 `protobuf:"bytes,4,opt,name=Key,proto3" json:"Key,omitempty"`
	Secret                    string                 `protobuf:"bytes,5,opt,name=Secret,proto3" json:"Secret,omitempty"`
	DisableAutoCredentialLoad bool                   `protobuf:"varint,6,opt,name=DisableAutoCredentialLoad,proto3" json:"DisableAutoCredentialLoad,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *AWSConfig) Reset() {
	*x = AWSConfig{}
	mi := &file_config_config_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSConfig) ProtoMessage() {}

func (x *AWSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSConfig.ProtoReflect.Descriptor instead.
func (*AWSConfig) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{20}
}

func (x *AWSConfig) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *AWSConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AWSConfig) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *AWSConfig) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AWSConfig) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *AWSConfig) GetDisableAutoCredentialLoad() bool {
	if x != nil {
		return x.DisableAutoCredentialLoad
	}
	return false
}

// AWSBatch describes the configuration for the AWS Batch compute backend.
type AWSBatch struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	JobDefinition     string                 `protobuf:"bytes,1,opt,name=JobDefinition,proto3" json:"JobDefinition,omitempty"`
	JobQueue          string                 `protobuf:"bytes,2,opt,name=JobQueue,proto3" json:"JobQueue,omitempty"`
	DisableReconciler bool                   `protobuf:"varint,3,opt,name=DisableReconciler,proto3" json:"DisableReconciler,omitempty"`
	ReconcileRate     *durationpb.Duration   `protobuf:"bytes,4,opt,name=ReconcileRate,proto3" json:"ReconcileRate,omitempty"`
	AWSConfig         *AWSConfig             `protobuf:"bytes,5,opt,name=AWSConfig,proto3" json:"AWSConfig,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AWSBatch) Reset() {
	*x = AWSBatch{}
	mi := &file_config_config_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSBatch) ProtoMessage() {}

func (x *AWSBatch) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSBatch.ProtoReflect.Descriptor instead.
func (*AWSBatch) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{21}
}

func (x *AWSBatch) GetJobDefinition() string {
	if x != nil {
		return x.JobDefinition
	}
	return ""
}

func (x *AWSBatch) GetJobQueue() string {
	if x != nil {
		return x.JobQueue
	}
	return ""
}

func (x *AWSBatch) GetDisableReconciler() bool {
	if x != nil {
		return x.DisableReconciler
	}
	return false
}

func (x *AWSBatch) GetReconcileRate() *durationpb.Duration {
	if x != nil {
		return x.ReconcileRate
	}
	return nil
}

func (x *AWSBatch) GetAWSConfig() *AWSConfig {
	if x != nil {
		return x.AWSConfig
	}
	return nil
}

// Datastore configures access to a Google Cloud Datastore database backend.
type Datastore struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Project         string                 `protobuf:"bytes,1,opt,name=Project,proto3" json:"Project,omitempty"`
	CredentialsFile string                 `protobuf:"bytes,2,opt,name=CredentialsFile,proto3" json:"CredentialsFile,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Datastore) Reset() {
	*x = Datastore{}
	mi := &file_config_config_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Datastore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datastore) ProtoMessage() {}

func (x *Datastore) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datastore.ProtoReflect.Descriptor instead.
func (*Datastore) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{22}
}

func (x *Datastore) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *Datastore) GetCredentialsFile() string {
	if x != nil {
		return x.CredentialsFile
	}
	return ""
}

// DynamoDB describes the configuration for Amazon DynamoDB.
type DynamoDB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableBasename string                 `protobuf:"bytes,1,opt,name=TableBasename,proto3" json:"TableBasename,omitempty"`
	AWSConfig     *AWSConfig             `protobuf:"bytes,2,opt,name=AWSConfig,proto3" json:"AWSConfig,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DynamoDB) Reset() {
	*x = DynamoDB{}
	mi := &file_config_config_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamoDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDB) ProtoMessage() {}

func (x *DynamoDB) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDB.ProtoReflect.Descriptor instead.
func (*DynamoDB) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{23}
}

func (x *DynamoDB) GetTableBasename() string {
	if x != nil {
		return x.TableBasename
	}
	return ""
}

func (x *DynamoDB) GetAWSConfig() *AWSConfig {
	if x != nil {
		return x.AWSConfig
	}
	return nil
}

// LocalStorage describes the directories Funnel can read from and write to.
type LocalStorage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Disabled      bool                   `protobuf:"varint,1,opt,name=Disabled,proto3" json:"Disabled,omitempty"`
	AllowedDirs   []string               `protobuf:"bytes,2,rep,name=AllowedDirs,proto3" json:"AllowedDirs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalStorage) Reset() {
	*x = LocalStorage{}
	mi := &file_config_config_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalStorage) ProtoMessage() {}

func (x *LocalStorage) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalStorage.ProtoReflect.Descriptor instead.
func (*LocalStorage) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{24}
}

func (x *LocalStorage) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *LocalStorage) GetAllowedDirs() []string {
	if x != nil {
		return x.AllowedDirs
	}
	return nil
}

// GoogleCloudStorage describes configuration for the Google Cloud storage backend.
type GoogleCloudStorage struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Disabled        bool                   `protobuf:"varint,1,opt,name=Disabled,proto3" json:"Disabled,omitempty"`
	CredentialsFile string                 `protobuf:"bytes,2,opt,name=CredentialsFile,proto3" json:"CredentialsFile,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GoogleCloudStorage) Reset() {
	*x = GoogleCloudStorage{}
	mi := &file_config_config_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoogleCloudStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudStorage) ProtoMessage() {}

func (x *GoogleCloudStorage) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudStorage.ProtoReflect.Descriptor instead.
func (*GoogleCloudStorage) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{25}
}

func (x *GoogleCloudStorage) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *GoogleCloudStorage) GetCredentialsFile() string {
	if x != nil {
		return x.CredentialsFile
	}
	return ""
}

type SSE struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CustomerKeyFile string                 `protobuf:"bytes,1,opt,name=CustomerKeyFile,proto3" json:"CustomerKeyFile,omitempty"`
	KMSKey          string                 `protobuf:"bytes,2,opt,name=KMSKey,proto3" json:"KMSKey,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SSE) Reset() {
	*x = SSE{}
	mi := &file_config_config_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSE) ProtoMessage() {}

func (x *SSE) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSE.ProtoReflect.Descriptor instead.
func (*SSE) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{26}
}

func (x *SSE) GetCustomerKeyFile() string {
	if x != nil {
		return x.CustomerKeyFile
	}
	return ""
}

func (x *SSE) GetKMSKey() string {
	if x != nil {
		return x.KMSKey
	}
	return ""
}

// AmazonS3Storage describes the configuration for the Amazon S3 storage backend.
type AmazonS3Storage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Disabled      bool                   `protobuf:"varint,1,opt,name=Disabled,proto3" json:"Disabled,omitempty"`
	SSE           *SSE                   `protobuf:"bytes,2,opt,name=SSE,proto3" json:"SSE,omitempty"`
	AWSConfig     *AWSConfig             `protobuf:"bytes,3,opt,name=AWSConfig,proto3" json:"AWSConfig,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AmazonS3Storage) Reset() {
	*x = AmazonS3Storage{}
	mi := &file_config_config_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AmazonS3Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmazonS3Storage) ProtoMessage() {}

func (x *AmazonS3Storage) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmazonS3Storage.ProtoReflect.Descriptor instead.
func (*AmazonS3Storage) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{27}
}

func (x *AmazonS3Storage) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *AmazonS3Storage) GetSSE() *SSE {
	if x != nil {
		return x.SSE
	}
	return nil
}

func (x *AmazonS3Storage) GetAWSConfig() *AWSConfig {
	if x != nil {
		return x.AWSConfig
	}
	return nil
}

// GenericS3Storage describes the configuration for the Generic S3 storage backend.
type GenericS3Storage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Disabled      bool                   `protobuf:"varint,1,opt,name=Disabled,proto3" json:"Disabled,omitempty"`
	Endpoint      string                 `protobuf:"bytes,2,opt,name=Endpoint,proto3" json:"Endpoint,omitempty"`
	Key           string                 `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
	Secret        string                 `protobuf:"bytes,4,opt,name=Secret,proto3" json:"Secret,omitempty"`
	Region        string                 `protobuf:"bytes,5,opt,name=Region,proto3" json:"Region,omitempty"`
	Bucket        string                 `protobuf:"bytes,6,opt,name=Bucket,proto3" json:"Bucket,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenericS3Storage) Reset() {
	*x = GenericS3Storage{}
	mi := &file_config_config_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericS3Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericS3Storage) ProtoMessage() {}

func (x *GenericS3Storage) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericS3Storage.ProtoReflect.Descriptor instead.
func (*GenericS3Storage) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{28}
}

func (x *GenericS3Storage) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *GenericS3Storage) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *GenericS3Storage) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GenericS3Storage) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *GenericS3Storage) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GenericS3Storage) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

// SwiftStorage configures the OpenStack Swift object storage backend.
type SwiftStorage struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Disabled       bool                   `protobuf:"varint,1,opt,name=Disabled,proto3" json:"Disabled,omitempty"`
	UserName       string                 `protobuf:"bytes,2,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Password       string                 `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	AuthURL        string                 `protobuf:"bytes,4,opt,name=AuthURL,proto3" json:"AuthURL,omitempty"`
	TenantName     string                 `protobuf:"bytes,5,opt,name=TenantName,proto3" json:"TenantName,omitempty"`
	TenantID       string                 `protobuf:"bytes,6,opt,name=TenantID,proto3" json:"TenantID,omitempty"`
	RegionName     string                 `protobuf:"bytes,7,opt,name=RegionName,proto3" json:"RegionName,omitempty"`
	ChunkSizeBytes int64                  `protobuf:"varint,8,opt,name=ChunkSizeBytes,proto3" json:"ChunkSizeBytes,omitempty"`
	MaxRetries     int32                  `protobuf:"varint,9,opt,name=MaxRetries,proto3" json:"MaxRetries,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SwiftStorage) Reset() {
	*x = SwiftStorage{}
	mi := &file_config_config_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwiftStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiftStorage) ProtoMessage() {}

func (x *SwiftStorage) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiftStorage.ProtoReflect.Descriptor instead.
func (*SwiftStorage) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{29}
}

func (x *SwiftStorage) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *SwiftStorage) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SwiftStorage) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SwiftStorage) GetAuthURL() string {
	if x != nil {
		return x.AuthURL
	}
	return ""
}

func (x *SwiftStorage) GetTenantName() string {
	if x != nil {
		return x.TenantName
	}
	return ""
}

func (x *SwiftStorage) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *SwiftStorage) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *SwiftStorage) GetChunkSizeBytes() int64 {
	if x != nil {
		return x.ChunkSizeBytes
	}
	return 0
}

func (x *SwiftStorage) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

// HTTPStorage configures the HTTP storage backend.
type HTTPStorage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Disabled      bool                   `protobuf:"varint,1,opt,name=Disabled,proto3" json:"Disabled,omitempty"`
	Timeout       *TimeoutConfig         `protobuf:"bytes,2,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPStorage) Reset() {
	*x = HTTPStorage{}
	mi := &file_config_config_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPStorage) ProtoMessage() {}

func (x *HTTPStorage) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPStorage.ProtoReflect.Descriptor instead.
func (*HTTPStorage) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{30}
}

func (x *HTTPStorage) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *HTTPStorage) GetTimeout() *TimeoutConfig {
	if x != nil {
		return x.Timeout
	}
	return nil
}

// FTPStorage configures the FTP storage backend.
type FTPStorage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Disabled      bool                   `protobuf:"varint,1,opt,name=Disabled,proto3" json:"Disabled,omitempty"`
	Timeout       *TimeoutConfig         `protobuf:"bytes,2,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	User          string                 `protobuf:"bytes,3,opt,name=User,proto3" json:"User,omitempty"`
	Password      string                 `protobuf:"bytes,4,opt,name=Password,proto3" json:"Password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FTPStorage) Reset() {
	*x = FTPStorage{}
	mi := &file_config_config_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FTPStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FTPStorage) ProtoMessage() {}

func (x *FTPStorage) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FTPStorage.ProtoReflect.Descriptor instead.
func (*FTPStorage) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{31}
}

func (x *FTPStorage) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *FTPStorage) GetTimeout() *TimeoutConfig {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *FTPStorage) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *FTPStorage) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Kubernetes describes the configuration for the Kubernetes compute backend.
type Kubernetes struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Executor          string                 `protobuf:"bytes,1,opt,name=Executor,proto3" json:"Executor,omitempty"`
	WorkerTemplate    string                 `protobuf:"bytes,2,opt,name=WorkerTemplate,proto3" json:"WorkerTemplate,omitempty"`
	ExecutorTemplate  string                 `protobuf:"bytes,3,opt,name=ExecutorTemplate,proto3" json:"ExecutorTemplate,omitempty"`
	PVTemplate        string                 `protobuf:"bytes,4,opt,name=PVTemplate,proto3" json:"PVTemplate,omitempty"`
	PVCTemplate       string                 `protobuf:"bytes,5,opt,name=PVCTemplate,proto3" json:"PVCTemplate,omitempty"`
	ConfigMapTemplate string                 `protobuf:"bytes,6,opt,name=ConfigMapTemplate,proto3" json:"ConfigMapTemplate,omitempty"`
	Namespace         string                 `protobuf:"bytes,7,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	JobsNamespace     string                 `protobuf:"bytes,8,opt,name=JobsNamespace,proto3" json:"JobsNamespace,omitempty"`
	ServiceAccount    string                 `protobuf:"bytes,9,opt,name=ServiceAccount,proto3" json:"ServiceAccount,omitempty"`
	DisableReconciler bool                   `protobuf:"varint,10,opt,name=DisableReconciler,proto3" json:"DisableReconciler,omitempty"`
	ReconcileRate     *durationpb.Duration   `protobuf:"bytes,11,opt,name=ReconcileRate,proto3" json:"ReconcileRate,omitempty"`
	DisableJobCleanup bool                   `protobuf:"varint,12,opt,name=DisableJobCleanup,proto3" json:"DisableJobCleanup,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Kubernetes) Reset() {
	*x = Kubernetes{}
	mi := &file_config_config_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Kubernetes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kubernetes) ProtoMessage() {}

func (x *Kubernetes) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kubernetes.ProtoReflect.Descriptor instead.
func (*Kubernetes) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{32}
}

func (x *Kubernetes) GetExecutor() string {
	if x != nil {
		return x.Executor
	}
	return ""
}

func (x *Kubernetes) GetWorkerTemplate() string {
	if x != nil {
		return x.WorkerTemplate
	}
	return ""
}

func (x *Kubernetes) GetExecutorTemplate() string {
	if x != nil {
		return x.ExecutorTemplate
	}
	return ""
}

func (x *Kubernetes) GetPVTemplate() string {
	if x != nil {
		return x.PVTemplate
	}
	return ""
}

func (x *Kubernetes) GetPVCTemplate() string {
	if x != nil {
		return x.PVCTemplate
	}
	return ""
}

func (x *Kubernetes) GetConfigMapTemplate() string {
	if x != nil {
		return x.ConfigMapTemplate
	}
	return ""
}

func (x *Kubernetes) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Kubernetes) GetJobsNamespace() string {
	if x != nil {
		return x.JobsNamespace
	}
	return ""
}

func (x *Kubernetes) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *Kubernetes) GetDisableReconciler() bool {
	if x != nil {
		return x.DisableReconciler
	}
	return false
}

func (x *Kubernetes) GetReconcileRate() *durationpb.Duration {
	if x != nil {
		return x.ReconcileRate
	}
	return nil
}

func (x *Kubernetes) GetDisableJobCleanup() bool {
	if x != nil {
		return x.DisableJobCleanup
	}
	return false
}

var File_config_config_proto protoreflect.FileDescriptor

const file_config_config_proto_rawDesc = "" +
	"\n" +
	"\x13config/config.proto\x12\x06config\x1a\x1egoogle/protobuf/duration.proto\x1a\x13logger/logger.proto\"L\n" +
	"\n" +
	"GridEngine\x12\x1a\n" +
	"\bTemplate\x18\x01 \x01(\tR\bTemplate\x12\"\n" +
	"\fTemplateFile\x18\x02 \x01(\tR\fTemplateFile\"\xf7\n" +
	"\n" +
	"\x06Config\x12\"\n" +
	"\fEventWriters\x18\x01 \x03(\tR\fEventWriters\x12\x1a\n" +
	"\bDatabase\x18\x02 \x01(\tR\bDatabase\x12\x18\n" +
	"\aCompute\x18\x03 \x01(\tR\aCompute\x12&\n" +
	"\x06Server\x18\x04 \x01(\v2\x0e.config.ServerR\x06Server\x12/\n" +
	"\tRPCClient\x18\x05 \x01(\v2\x11.config.RPCClientR\tRPCClient\x12/\n" +
	"\tScheduler\x18\x06 \x01(\v2\x11.config.SchedulerR\tScheduler\x12 \n" +
	"\x04Node\x18\a \x01(\v2\f.config.NodeR\x04Node\x12&\n" +
	"\x06Worker\x18\b \x01(\v2\x0e.config.WorkerR\x06Worker\x12,\n" +
	"\x06Logger\x18\t \x01(\v2\x14.logger.LoggerConfigR\x06Logger\x12&\n" +
	"\x06BoltDB\x18\n" +
	" \x01(\v2\x0e.config.BoltDBR\x06BoltDB\x12&\n" +
	"\x06Badger\x18\v \x01(\v2\x0e.config.BadgerR\x06Badger\x12,\n" +
	"\bDynamoDB\x18\f \x01(\v2\x10.config.DynamoDBR\bDynamoDB\x12)\n" +
	"\aElastic\x18\r \x01(\v2\x0f.config.ElasticR\aElastic\x12)\n" +
	"\aMongoDB\x18\x0e \x01(\v2\x0f.config.MongoDBR\aMongoDB\x12#\n" +
	"\x05Kafka\x18\x0f \x01(\v2\r.config.KafkaR\x05Kafka\x12&\n" +
	"\x06PubSub\x18\x10 \x01(\v2\x0e.config.PubSubR\x06PubSub\x12/\n" +
	"\tDatastore\x18\x11 \x01(\v2\x11.config.DatastoreR\tDatastore\x12.\n" +
	"\bHTCondor\x18\x12 \x01(\v2\x12.config.HPCBackendR\bHTCondor\x12(\n" +
	"\x05Slurm\x18\x13 \x01(\v2\x12.config.HPCBackendR\x05Slurm\x12$\n" +
	"\x03PBS\x18\x14 \x01(\v2\x12.config.HPCBackendR\x03PBS\x122\n" +
	"\n" +
	"GridEngine\x18\x15 \x01(\v2\x12.config.GridEngineR\n" +
	"GridEngine\x12,\n" +
	"\bAWSBatch\x18\x16 \x01(\v2\x10.config.AWSBatchR\bAWSBatch\x122\n" +
	"\n" +
	"Kubernetes\x18\x17 \x01(\v2\x12.config.KubernetesR\n" +
	"Kubernetes\x128\n" +
	"\fLocalStorage\x18\x18 \x01(\v2\x14.config.LocalStorageR\fLocalStorage\x123\n" +
	"\bAmazonS3\x18\x19 \x01(\v2\x17.config.AmazonS3StorageR\bAmazonS3\x126\n" +
	"\tGenericS3\x18\x1a \x03(\v2\x18.config.GenericS3StorageR\tGenericS3\x12@\n" +
	"\rGoogleStorage\x18\x1b \x01(\v2\x1a.config.GoogleCloudStorageR\rGoogleStorage\x12*\n" +
	"\x05Swift\x18\x1c \x01(\v2\x14.config.SwiftStorageR\x05Swift\x125\n" +
	"\vHTTPStorage\x18\x1d \x01(\v2\x13.config.HTTPStorageR\vHTTPStorage\x122\n" +
	"\n" +
	"FTPStorage\x18\x1e \x01(\v2\x12.config.FTPStorageR\n" +
	"FTPStorage\x12)\n" +
	"\aPlugins\x18\x1f \x01(\v2\x0f.config.PluginsR\aPlugins\"\x8d\x01\n" +
	"\aPlugins\x12\x12\n" +
	"\x04Path\x18\x01 \x01(\tR\x04Path\x123\n" +
	"\x06Params\x18\x02 \x03(\v2\x1b.config.Plugins.ParamsEntryR\x06Params\x1a9\n" +
	"\vParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"W\n" +
	"\x0fBasicCredential\x12\x12\n" +
	"\x04User\x18\x01 \x01(\tR\x04User\x12\x1a\n" +
	"\bPassword\x18\x02 \x01(\tR\bPassword\x12\x14\n" +
	"\x05Admin\x18\x03 \x01(\bR\x05Admin\"\xfe\x01\n" +
	"\bOidcAuth\x12*\n" +
	"\x10ServiceConfigURL\x18\x01 \x01(\tR\x10ServiceConfigURL\x12\x1a\n" +
	"\bClientId\x18\x02 \x01(\tR\bClientId\x12\"\n" +
	"\fClientSecret\x18\x03 \x01(\tR\fClientSecret\x12 \n" +
	"\vRedirectURL\x18\x04 \x01(\tR\vRedirectURL\x12\"\n" +
	"\fRequireScope\x18\x05 \x01(\tR\fRequireScope\x12(\n" +
	"\x0fRequireAudience\x18\x06 \x01(\tR\x0fRequireAudience\x12\x16\n" +
	"\x06Admins\x18\a \x03(\tR\x06Admins\"x\n" +
	"\rTimeoutConfig\x127\n" +
	"\bduration\x18\x01 \x01(\v2\x19.google.protobuf.DurationH\x00R\bduration\x12\x1c\n" +
	"\bdisabled\x18\x02 \x01(\bH\x00R\bdisabledB\x10\n" +
	"\x0etimeout_option\"\xbb\x01\n" +
	"\tRPCClient\x127\n" +
	"\n" +
	"Credential\x18\x01 \x01(\v2\x17.config.BasicCredentialR\n" +
	"Credential\x12$\n" +
	"\rServerAddress\x18\x02 \x01(\tR\rServerAddress\x12/\n" +
	"\aTimeout\x18\x03 \x01(\v2\x15.config.TimeoutConfigR\aTimeout\x12\x1e\n" +
	"\n" +
	"MaxRetries\x18\x04 \x01(\rR\n" +
	"MaxRetries\"\xad\x02\n" +
	"\x06Server\x12 \n" +
	"\vServiceName\x18\x01 \x01(\tR\vServiceName\x12\x1a\n" +
	"\bHostName\x18\x02 \x01(\tR\bHostName\x12\x1a\n" +
	"\bHTTPPort\x18\x03 \x01(\tR\bHTTPPort\x12\x18\n" +
	"\aRPCPort\x18\x04 \x01(\tR\aRPCPort\x125\n" +
	"\tBasicAuth\x18\x05 \x03(\v2\x17.config.BasicCredentialR\tBasicAuth\x12,\n" +
	"\bOidcAuth\x18\x06 \x01(\v2\x10.config.OidcAuthR\bOidcAuth\x12*\n" +
	"\x10DisableHTTPCache\x18\a \x01(\bR\x10DisableHTTPCache\x12\x1e\n" +
	"\n" +
	"TaskAccess\x18\b \x01(\tR\n" +
	"TaskAccess\"\xb3\x02\n" +
	"\tScheduler\x12=\n" +
	"\fScheduleRate\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\fScheduleRate\x12$\n" +
	"\rScheduleChunk\x18\x02 \x01(\x05R\rScheduleChunk\x12?\n" +
	"\x0fNodePingTimeout\x18\x03 \x01(\v2\x15.config.TimeoutConfigR\x0fNodePingTimeout\x12?\n" +
	"\x0fNodeInitTimeout\x18\x04 \x01(\v2\x15.config.TimeoutConfigR\x0fNodeInitTimeout\x12?\n" +
	"\x0fNodeDeadTimeout\x18\x05 \x01(\v2\x15.config.TimeoutConfigR\x0fNodeDeadTimeout\"M\n" +
	"\tResources\x12\x12\n" +
	"\x04Cpus\x18\x01 \x01(\rR\x04Cpus\x12\x14\n" +
	"\x05RamGb\x18\x02 \x01(\x01R\x05RamGb\x12\x16\n" +
	"\x06DiskGb\x18\x03 \x01(\x01R\x06DiskGb\"\xa8\x02\n" +
	"\x04Node\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12/\n" +
	"\tResources\x18\x02 \x01(\v2\x11.config.ResourcesR\tResources\x12/\n" +
	"\aTimeout\x18\x03 \x01(\v2\x15.config.TimeoutConfigR\aTimeout\x129\n" +
	"\n" +
	"UpdateRate\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\n" +
	"UpdateRate\x126\n" +
	"\bMetadata\x18\x05 \x03(\v2\x1a.config.Node.MetadataEntryR\bMetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x99\x03\n" +
	"\x06Worker\x12\x18\n" +
	"\aWorkDir\x18\x01 \x01(\tR\aWorkDir\x12 \n" +
	"\vScratchPath\x18\x02 \x01(\tR\vScratchPath\x12;\n" +
	"\vPollingRate\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\vPollingRate\x12?\n" +
	"\rLogUpdateRate\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\rLogUpdateRate\x12 \n" +
	"\vLogTailSize\x18\x05 \x01(\x03R\vLogTailSize\x12\"\n" +
	"\fLeaveWorkDir\x18\x06 \x01(\bR\fLeaveWorkDir\x122\n" +
	"\x14MaxParallelTransfers\x18\a \x01(\x05R\x14MaxParallelTransfers\x125\n" +
	"\tContainer\x18\b \x01(\v2\x17.config.ContainerConfigR\tContainer\x12$\n" +
	"\rDriverCommand\x18\t \x01(\tR\rDriverCommand\"\xaf\x04\n" +
	"\x0fContainerConfig\x12\x0e\n" +
	"\x02Id\x18\x01 \x01(\tR\x02Id\x12\x14\n" +
	"\x05Image\x18\x02 \x01(\tR\x05Image\x12\x12\n" +
	"\x04Name\x18\x03 \x01(\tR\x04Name\x12\x18\n" +
	"\aCommand\x18\x04 \x03(\tR\aCommand\x12\x18\n" +
	"\aWorkdir\x18\x05 \x01(\tR\aWorkdir\x12(\n" +
	"\x0fRemoveContainer\x18\x06 \x01(\bR\x0fRemoveContainer\x122\n" +
	"\x03Env\x18\a \x03(\v2 .config.ContainerConfig.EnvEntryR\x03Env\x12$\n" +
	"\rDriverCommand\x18\b \x01(\tR\rDriverCommand\x12\x1e\n" +
	"\n" +
	"RunCommand\x18\t \x01(\tR\n" +
	"RunCommand\x12 \n" +
	"\vPullCommand\x18\n" +
	" \x01(\tR\vPullCommand\x12 \n" +
	"\vStopCommand\x18\v \x01(\tR\vStopCommand\x12\x1e\n" +
	"\n" +
	"EnableTags\x18\f \x01(\bR\n" +
	"EnableTags\x125\n" +
	"\x04Tags\x18\r \x03(\v2!.config.ContainerConfig.TagsEntryR\x04Tags\x1a6\n" +
	"\bEnvEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xbb\x01\n" +
	"\n" +
	"HPCBackend\x12,\n" +
	"\x11DisableReconciler\x18\x01 \x01(\bR\x11DisableReconciler\x12?\n" +
	"\rReconcileRate\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\rReconcileRate\x12\x1a\n" +
	"\bTemplate\x18\x03 \x01(\tR\bTemplate\x12\"\n" +
	"\fTemplateFile\x18\x04 \x01(\tR\fTemplateFile\"\x1c\n" +
	"\x06BoltDB\x12\x12\n" +
	"\x04Path\x18\x01 \x01(\tR\x04Path\"\x1c\n" +
	"\x06Badger\x12\x12\n" +
	"\x04Path\x18\x01 \x01(\tR\x04Path\"\xa4\x01\n" +
	"\aMongoDB\x12\x14\n" +
	"\x05Addrs\x18\x01 \x03(\tR\x05Addrs\x12\x1a\n" +
	"\bDatabase\x18\x02 \x01(\tR\bDatabase\x12/\n" +
	"\aTimeout\x18\x03 \x01(\v2\x15.config.TimeoutConfigR\aTimeout\x12\x1a\n" +
	"\bUsername\x18\x04 \x01(\tR\bUsername\x12\x1a\n" +
	"\bPassword\x18\x05 \x01(\tR\bPassword\"\xcb\x01\n" +
	"\aElastic\x12 \n" +
	"\vIndexPrefix\x18\x01 \x01(\tR\vIndexPrefix\x12\x10\n" +
	"\x03URL\x18\x02 \x01(\tR\x03URL\x12\x1a\n" +
	"\bUsername\x18\x03 \x01(\tR\bUsername\x12\x1a\n" +
	"\bPassword\x18\x04 \x01(\tR\bPassword\x12\x18\n" +
	"\aCloudID\x18\x05 \x01(\tR\aCloudID\x12\x16\n" +
	"\x06APIKey\x18\x06 \x01(\tR\x06APIKey\x12\"\n" +
	"\fServiceToken\x18\a \x01(\tR\fServiceToken\"7\n" +
	"\x05Kafka\x12\x18\n" +
	"\aServers\x18\x01 \x03(\tR\aServers\x12\x14\n" +
	"\x05Topic\x18\x02 \x01(\tR\x05Topic\"b\n" +
	"\x06PubSub\x12\x14\n" +
	"\x05Topic\x18\x01 \x01(\tR\x05Topic\x12\x18\n" +
	"\aProject\x18\x02 \x01(\tR\aProject\x12(\n" +
	"\x0fCredentialsFile\x18\x03 \x01(\tR\x0fCredentialsFile\"\xc7\x01\n" +
	"\tAWSConfig\x12\x1a\n" +
	"\bEndpoint\x18\x01 \x01(\tR\bEndpoint\x12\x16\n" +
	"\x06Region\x18\x02 \x01(\tR\x06Region\x12\x1e\n" +
	"\n" +
	"MaxRetries\x18\x03 \x01(\x05R\n" +
	"MaxRetries\x12\x10\n" +
	"\x03Key\x18\x04 \x01(\tR\x03Key\x12\x16\n" +
	"\x06Secret\x18\x05 \x01(\tR\x06Secret\x12<\n" +
	"\x19DisableAutoCredentialLoad\x18\x06 \x01(\bR\x19DisableAutoCredentialLoad\"\xec\x01\n" +
	"\bAWSBatch\x12$\n" +
	"\rJobDefinition\x18\x01 \x01(\tR\rJobDefinition\x12\x1a\n" +
	"\bJobQueue\x18\x02 \x01(\tR\bJobQueue\x12,\n" +
	"\x11DisableReconciler\x18\x03 \x01(\bR\x11DisableReconciler\x12?\n" +
	"\rReconcileRate\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\rReconcileRate\x12/\n" +
	"\tAWSConfig\x18\x05 \x01(\v2\x11.config.AWSConfigR\tAWSConfig\"O\n" +
	"\tDatastore\x12\x18\n" +
	"\aProject\x18\x01 \x01(\tR\aProject\x12(\n" +
	"\x0fCredentialsFile\x18\x02 \x01(\tR\x0fCredentialsFile\"a\n" +
	"\bDynamoDB\x12$\n" +
	"\rTableBasename\x18\x01 \x01(\tR\rTableBasename\x12/\n" +
	"\tAWSConfig\x18\x02 \x01(\v2\x11.config.AWSConfigR\tAWSConfig\"L\n" +
	"\fLocalStorage\x12\x1a\n" +
	"\bDisabled\x18\x01 \x01(\bR\bDisabled\x12 \n" +
	"\vAllowedDirs\x18\x02 \x03(\tR\vAllowedDirs\"Z\n" +
	"\x12GoogleCloudStorage\x12\x1a\n" +
	"\bDisabled\x18\x01 \x01(\bR\bDisabled\x12(\n" +
	"\x0fCredentialsFile\x18\x02 \x01(\tR\x0fCredentialsFile\"G\n" +
	"\x03SSE\x12(\n" +
	"\x0fCustomerKeyFile\x18\x01 \x01(\tR\x0fCustomerKeyFile\x12\x16\n" +
	"\x06KMSKey\x18\x02 \x01(\tR\x06KMSKey\"}\n" +
	"\x0fAmazonS3Storage\x12\x1a\n" +
	"\bDisabled\x18\x01 \x01(\bR\bDisabled\x12\x1d\n" +
	"\x03SSE\x18\x02 \x01(\v2\v.config.SSER\x03SSE\x12/\n" +
	"\tAWSConfig\x18\x03 \x01(\v2\x11.config.AWSConfigR\tAWSConfig\"\xa4\x01\n" +
	"\x10GenericS3Storage\x12\x1a\n" +
	"\bDisabled\x18\x01 \x01(\bR\bDisabled\x12\x1a\n" +
	"\bEndpoint\x18\x02 \x01(\tR\bEndpoint\x12\x10\n" +
	"\x03Key\x18\x03 \x01(\tR\x03Key\x12\x16\n" +
	"\x06Secret\x18\x04 \x01(\tR\x06Secret\x12\x16\n" +
	"\x06Region\x18\x05 \x01(\tR\x06Region\x12\x16\n" +
	"\x06Bucket\x18\x06 \x01(\tR\x06Bucket\"\xa0\x02\n" +
	"\fSwiftStorage\x12\x1a\n" +
	"\bDisabled\x18\x01 \x01(\bR\bDisabled\x12\x1a\n" +
	"\bUserName\x18\x02 \x01(\tR\bUserName\x12\x1a\n" +
	"\bPassword\x18\x03 \x01(\tR\bPassword\x12\x18\n" +
	"\aAuthURL\x18\x04 \x01(\tR\aAuthURL\x12\x1e\n" +
	"\n" +
	"TenantName\x18\x05 \x01(\tR\n" +
	"TenantName\x12\x1a\n" +
	"\bTenantID\x18\x06 \x01(\tR\bTenantID\x12\x1e\n" +
	"\n" +
	"RegionName\x18\a \x01(\tR\n" +
	"RegionName\x12&\n" +
	"\x0eChunkSizeBytes\x18\b \x01(\x03R\x0eChunkSizeBytes\x12\x1e\n" +
	"\n" +
	"MaxRetries\x18\t \x01(\x05R\n" +
	"MaxRetries\"Z\n" +
	"\vHTTPStorage\x12\x1a\n" +
	"\bDisabled\x18\x01 \x01(\bR\bDisabled\x12/\n" +
	"\aTimeout\x18\x02 \x01(\v2\x15.config.TimeoutConfigR\aTimeout\"\x89\x01\n" +
	"\n" +
	"FTPStorage\x12\x1a\n" +
	"\bDisabled\x18\x01 \x01(\bR\bDisabled\x12/\n" +
	"\aTimeout\x18\x02 \x01(\v2\x15.config.TimeoutConfigR\aTimeout\x12\x12\n" +
	"\x04User\x18\x03 \x01(\tR\x04User\x12\x1a\n" +
	"\bPassword\x18\x04 \x01(\tR\bPassword\"\xf5\x03\n" +
	"\n" +
	"Kubernetes\x12\x1a\n" +
	"\bExecutor\x18\x01 \x01(\tR\bExecutor\x12&\n" +
	"\x0eWorkerTemplate\x18\x02 \x01(\tR\x0eWorkerTemplate\x12*\n" +
	"\x10ExecutorTemplate\x18\x03 \x01(\tR\x10ExecutorTemplate\x12\x1e\n" +
	"\n" +
	"PVTemplate\x18\x04 \x01(\tR\n" +
	"PVTemplate\x12 \n" +
	"\vPVCTemplate\x18\x05 \x01(\tR\vPVCTemplate\x12,\n" +
	"\x11ConfigMapTemplate\x18\x06 \x01(\tR\x11ConfigMapTemplate\x12\x1c\n" +
	"\tNamespace\x18\a \x01(\tR\tNamespace\x12$\n" +
	"\rJobsNamespace\x18\b \x01(\tR\rJobsNamespace\x12&\n" +
	"\x0eServiceAccount\x18\t \x01(\tR\x0eServiceAccount\x12,\n" +
	"\x11DisableReconciler\x18\n" +
	" \x01(\bR\x11DisableReconciler\x12?\n" +
	"\rReconcileRate\x18\v \x01(\v2\x19.google.protobuf.DurationR\rReconcileRate\x12,\n" +
	"\x11DisableJobCleanup\x18\f \x01(\bR\x11DisableJobCleanupB(Z&github.com/ohsu-comp-bio/funnel/configb\x06proto3"

var (
	file_config_config_proto_rawDescOnce sync.Once
	file_config_config_proto_rawDescData []byte
)

func file_config_config_proto_rawDescGZIP() []byte {
	file_config_config_proto_rawDescOnce.Do(func() {
		file_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_config_config_proto_rawDesc), len(file_config_config_proto_rawDesc)))
	})
	return file_config_config_proto_rawDescData
}

var file_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_config_config_proto_goTypes = []any{
	(*GridEngine)(nil),          // 0: config.GridEngine
	(*Config)(nil),              // 1: config.Config
	(*Plugins)(nil),             // 2: config.Plugins
	(*BasicCredential)(nil),     // 3: config.BasicCredential
	(*OidcAuth)(nil),            // 4: config.OidcAuth
	(*TimeoutConfig)(nil),       // 5: config.TimeoutConfig
	(*RPCClient)(nil),           // 6: config.RPCClient
	(*Server)(nil),              // 7: config.Server
	(*Scheduler)(nil),           // 8: config.Scheduler
	(*Resources)(nil),           // 9: config.Resources
	(*Node)(nil),                // 10: config.Node
	(*Worker)(nil),              // 11: config.Worker
	(*ContainerConfig)(nil),     // 12: config.ContainerConfig
	(*HPCBackend)(nil),          // 13: config.HPCBackend
	(*BoltDB)(nil),              // 14: config.BoltDB
	(*Badger)(nil),              // 15: config.Badger
	(*MongoDB)(nil),             // 16: config.MongoDB
	(*Elastic)(nil),             // 17: config.Elastic
	(*Kafka)(nil),               // 18: config.Kafka
	(*PubSub)(nil),              // 19: config.PubSub
	(*AWSConfig)(nil),           // 20: config.AWSConfig
	(*AWSBatch)(nil),            // 21: config.AWSBatch
	(*Datastore)(nil),           // 22: config.Datastore
	(*DynamoDB)(nil),            // 23: config.DynamoDB
	(*LocalStorage)(nil),        // 24: config.LocalStorage
	(*GoogleCloudStorage)(nil),  // 25: config.GoogleCloudStorage
	(*SSE)(nil),                 // 26: config.SSE
	(*AmazonS3Storage)(nil),     // 27: config.AmazonS3Storage
	(*GenericS3Storage)(nil),    // 28: config.GenericS3Storage
	(*SwiftStorage)(nil),        // 29: config.SwiftStorage
	(*HTTPStorage)(nil),         // 30: config.HTTPStorage
	(*FTPStorage)(nil),          // 31: config.FTPStorage
	(*Kubernetes)(nil),          // 32: config.Kubernetes
	nil,                         // 33: config.Plugins.ParamsEntry
	nil,                         // 34: config.Node.MetadataEntry
	nil,                         // 35: config.ContainerConfig.EnvEntry
	nil,                         // 36: config.ContainerConfig.TagsEntry
	(*logger.LoggerConfig)(nil), // 37: logger.LoggerConfig
	(*durationpb.Duration)(nil), // 38: google.protobuf.Duration
}
var file_config_config_proto_depIdxs = []int32{
	7,  // 0: config.Config.Server:type_name -> config.Server
	6,  // 1: config.Config.RPCClient:type_name -> config.RPCClient
	8,  // 2: config.Config.Scheduler:type_name -> config.Scheduler
	10, // 3: config.Config.Node:type_name -> config.Node
	11, // 4: config.Config.Worker:type_name -> config.Worker
	37, // 5: config.Config.Logger:type_name -> logger.LoggerConfig
	14, // 6: config.Config.BoltDB:type_name -> config.BoltDB
	15, // 7: config.Config.Badger:type_name -> config.Badger
	23, // 8: config.Config.DynamoDB:type_name -> config.DynamoDB
	17, // 9: config.Config.Elastic:type_name -> config.Elastic
	16, // 10: config.Config.MongoDB:type_name -> config.MongoDB
	18, // 11: config.Config.Kafka:type_name -> config.Kafka
	19, // 12: config.Config.PubSub:type_name -> config.PubSub
	22, // 13: config.Config.Datastore:type_name -> config.Datastore
	13, // 14: config.Config.HTCondor:type_name -> config.HPCBackend
	13, // 15: config.Config.Slurm:type_name -> config.HPCBackend
	13, // 16: config.Config.PBS:type_name -> config.HPCBackend
	0,  // 17: config.Config.GridEngine:type_name -> config.GridEngine
	21, // 18: config.Config.AWSBatch:type_name -> config.AWSBatch
	32, // 19: config.Config.Kubernetes:type_name -> config.Kubernetes
	24, // 20: config.Config.LocalStorage:type_name -> config.LocalStorage
	27, // 21: config.Config.AmazonS3:type_name -> config.AmazonS3Storage
	28, // 22: config.Config.GenericS3:type_name -> config.GenericS3Storage
	25, // 23: config.Config.GoogleStorage:type_name -> config.GoogleCloudStorage
	29, // 24: config.Config.Swift:type_name -> config.SwiftStorage
	30, // 25: config.Config.HTTPStorage:type_name -> config.HTTPStorage
	31, // 26: config.Config.FTPStorage:type_name -> config.FTPStorage
	2,  // 27: config.Config.Plugins:type_name -> config.Plugins
	33, // 28: config.Plugins.Params:type_name -> config.Plugins.ParamsEntry
	38, // 29: config.TimeoutConfig.duration:type_name -> google.protobuf.Duration
	3,  // 30: config.RPCClient.Credential:type_name -> config.BasicCredential
	5,  // 31: config.RPCClient.Timeout:type_name -> config.TimeoutConfig
	3,  // 32: config.Server.BasicAuth:type_name -> config.BasicCredential
	4,  // 33: config.Server.OidcAuth:type_name -> config.OidcAuth
	38, // 34: config.Scheduler.ScheduleRate:type_name -> google.protobuf.Duration
	5,  // 35: config.Scheduler.NodePingTimeout:type_name -> config.TimeoutConfig
	5,  // 36: config.Scheduler.NodeInitTimeout:type_name -> config.TimeoutConfig
	5,  // 37: config.Scheduler.NodeDeadTimeout:type_name -> config.TimeoutConfig
	9,  // 38: config.Node.Resources:type_name -> config.Resources
	5,  // 39: config.Node.Timeout:type_name -> config.TimeoutConfig
	38, // 40: config.Node.UpdateRate:type_name -> google.protobuf.Duration
	34, // 41: config.Node.Metadata:type_name -> config.Node.MetadataEntry
	38, // 42: config.Worker.PollingRate:type_name -> google.protobuf.Duration
	38, // 43: config.Worker.LogUpdateRate:type_name -> google.protobuf.Duration
	12, // 44: config.Worker.Container:type_name -> config.ContainerConfig
	35, // 45: config.ContainerConfig.Env:type_name -> config.ContainerConfig.EnvEntry
	36, // 46: config.ContainerConfig.Tags:type_name -> config.ContainerConfig.TagsEntry
	38, // 47: config.HPCBackend.ReconcileRate:type_name -> google.protobuf.Duration
	5,  // 48: config.MongoDB.Timeout:type_name -> config.TimeoutConfig
	38, // 49: config.AWSBatch.ReconcileRate:type_name -> google.protobuf.Duration
	20, // 50: config.AWSBatch.AWSConfig:type_name -> config.AWSConfig
	20, // 51: config.DynamoDB.AWSConfig:type_name -> config.AWSConfig
	26, // 52: config.AmazonS3Storage.SSE:type_name -> config.SSE
	20, // 53: config.AmazonS3Storage.AWSConfig:type_name -> config.AWSConfig
	5,  // 54: config.HTTPStorage.Timeout:type_name -> config.TimeoutConfig
	5,  // 55: config.FTPStorage.Timeout:type_name -> config.TimeoutConfig
	38, // 56: config.Kubernetes.ReconcileRate:type_name -> google.protobuf.Duration
	57, // [57:57] is the sub-list for method output_type
	57, // [57:57] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_config_config_proto_init() }
func file_config_config_proto_init() {
	if File_config_config_proto != nil {
		return
	}
	file_config_config_proto_msgTypes[5].OneofWrappers = []any{
		(*TimeoutConfig_Duration)(nil),
		(*TimeoutConfig_Disabled)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_config_config_proto_rawDesc), len(file_config_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_config_proto_goTypes,
		DependencyIndexes: file_config_config_proto_depIdxs,
		MessageInfos:      file_config_config_proto_msgTypes,
	}.Build()
	File_config_config_proto = out.File
	file_config_config_proto_goTypes = nil
	file_config_config_proto_depIdxs = nil
}
