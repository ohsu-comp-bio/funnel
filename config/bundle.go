// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x6f\x53\x1b\x39\x93\x7f\x3f\x9f\xa2\x0f\xb2\x55\x49\x95\x6d\x60\x53\x7b\x75\xeb\x2a\x5e\x80\x61\x09\x17\x42\x38\xec\x5c\xee\x5e\x51\x9a\x51\x8f\x47\x8b\x46\x9a\x95\x34\x18\x87\x27\xdf\xfd\xa9\x6e\x69\xc6\x36\x81\xc0\x3e\x4b\xb6\x1e\xbf\x1a\x6b\x5a\xad\xfe\xdf\xfd\xd3\x6c\xc3\xac\x42\x30\xa2\x46\xb0\x25\x84\x0a\x41\x14\x41\xdd\x20\x78\x74\x37\xe8\x40\x8a\x20\x72\xe1\x11\x72\x51\x5c\xa3\x91\xd9\x36\x1c\xdc\x08\xa5\x45\xae\xfb\x35\x3f\x86\xdc\xea\x20\xf3\x01\xc8\xa5\x11\xb5\xa5\x27\xd4\xc2\x07\x55\x0c\xa0\xb6\x66\x6e\x65\x9e\x1d\x25\x4e\x1d\x71\x96\x3d\x7a\x76\x61\xeb\xa6\x0d\x4f\x9d\xa9\x6d\x21\xf4\x00\xaa\x50\x58\x23\xad\x1b\x80\xd7\xad\xab\x07\xd0\xe4\x7e\x00\x73\xa7\x24\x9a\xb9\x32\x38\x80\x5a\x98\x96\x28\xc5\xc2\x0f\x73\x11\x8a\x2a\x9b\xc4\x03\x12\x8f\xef\x48\x82\x37\x68\x02\x2c\x9c\x0a\xe8\xba\xa3\x5f\xfb\x37\xa3\x47\x45\x9a\x0f\x9e\x61\x8b\x01\x5c\x8b\xf2\x5a\x64\xc7\xc4\xfd\x33\x33\xf7\x63\xc8\x00\x86\x9d\x6d\xe8\x51\xdb\x79\x96\x9d\xd9\xf9\x1c\xdd\x38\x03\xd8\x06\x7a\x56\x66\x0e\x1a\x6f\x50\xfb\x31\x48\xcc\xdb\xf9\x00\x94\x29\xed\x00\xd0\x39\xeb\x32\x80\x33\x7a\x39\xe6\x45\xde\xc4\xec\x89\x97\x87\x60\x21\x54\xca\x43\x23\x42\x35\x82\xd3\x12\xb0\x6e\xc2\x72\x10\x5f\x0a\x87\xac\x67\x40\x43\x84\x3e\x48\x74\x6e\x94\x01\x7c\x6c\x43\xd3\x86\xdf\x94\xc6\x31\x6c\x6d\x65\xd9\x94\x03\x23\x4a\xf4\xce\xfa\xb0\x6e\xb5\xdf\x5a\x63\x50\xa7\xd8\xa1\xcd\x44\x70\x2e\xea\xce\xd2\x95\xf5\x21\xe3\x9d\x17\xd6\x05\x68\x3d\x4a\x28\xad\x83\x77\xb3\xd9\x05\x79\xbd\x6e\x8d\x2a\x44\x50\xd6\x80\x30\x92\x59\x2e\x30\x07\x29\x7c\x95\x5b\xe1\x24\xb3\x9c\xcd\x2e\x68\xf7\x18\xfe\x6b\x77\x77\xf7\x21\x6e\x97\x17\x93\x4d\x66\xb4\xed\xf2\x62\x12\x77\xfd\xba\xfb\x6b\xda\x75\x89\x7f\xb4\xca\x91\xff\xbc\x2a\x40\xb4\xa1\x42\x13\xba\xf3\x89\x11\x9d\x9f\xf2\xe0\xe0\xe2\xd4\x43\xeb\xc9\xfc\x02\x1a\xe1\xfd\xc2\x46\x71\xb6\xc9\x90\x74\x34\xc5\xd9\x35\x82\x6f\x1d\x92\x01\x1b\x67\x1b\x74\x7a\x09\x0e\x7d\x70\xaa\x08\x20\x8a\x02\x7d\xf2\x02\xc5\xb8\x29\xd5\x1c\x4a\xa5\x91\xb9\xbc\xc6\xd1\x7c\x04\x45\x55\x5b\x09\xff\xb9\xbb\x0b\x25\x9b\x72\x14\xc9\x46\xcb\x5a\xbf\x89\x9a\xa6\xa3\xc7\x20\xf2\x62\xef\xe7\xb7\x51\x93\x53\x53\xe8\x56\x22\x08\xd8\x9a\x88\xa2\xc2\xe1\xc4\x9a\xe0\xac\x1e\x83\xb1\x43\x1f\xac\xc3\xad\x68\xe3\x0a\x85\x44\x07\xca\xc0\x09\x86\x9d\x33\xe5\x03\xc9\xd7\x58\xe3\xd1\x33\x27\x96\x3c\x46\x7d\x21\x8a\x8a\xf4\xcd\x97\xa0\x4c\x40\x57\xa3\x54\xc2\x2d\xd9\x22\xaa\x40\x4f\xda\x1f\x29\x4f\x29\x40\xbc\xf9\xe0\x31\x04\xd7\x62\x32\x2f\xb9\x41\x2b\x66\x65\x8d\xc1\x82\xed\x1a\x54\x8d\xb6\x0d\xc9\x74\x06\x8c\x30\xd6\x23\xa5\xb0\x4f\x6e\x9a\xf0\x9e\x59\xa4\x1b\x93\x31\xba\x1f\x6c\xc3\xdb\x5d\x48\xd4\xf1\x10\xca\xdb\x5a\xdc\xaa\xba\xad\xc1\xb4\x75\x8e\x8e\x63\x51\xd5\xe8\x21\x54\x22\x80\x00\x87\x7f\xb4\xe8\x03\x2c\x94\xd6\x90\x23\x38\x0c\x4e\xa5\x50\x29\x85\xd2\xad\x8b\xba\x6c\x03\x9d\x09\x39\x86\x05\xa2\x49\x64\x1e\x4a\xab\xb5\x5d\x78\x10\x06\xf0\xb6\xb1\x86\x62\x44\x68\x4e\x7a\x5b\x96\xe0\x83\x70\x81\xc3\x22\xc0\x2f\xbd\x6c\xc4\xad\x6d\xc8\x9a\x7b\x50\x2b\xd3\x06\x5c\xd7\xed\x83\xb8\xbd\x8c\xdc\xc7\xb0\xb7\x9b\x75\xf5\xc7\x17\x15\xca\x56\x93\x7f\xfc\x2a\x9a\x29\x58\x3e\x70\x05\xbb\x5f\x17\x47\x90\x4d\xbb\x2d\x5d\x3e\x2e\xc0\x96\x29\x85\x5d\x6b\x40\xac\x33\x0d\xe8\xfa\x74\x78\xc8\xf6\x1d\xb3\x4b\x41\xa5\x71\x6f\xdd\xec\x7b\x49\xb3\xfe\x94\x5a\x98\x25\x04\xe1\xaf\x39\xa0\xbb\x43\x28\xb0\xac\xc1\xcd\xa3\x3a\xb6\x93\xaa\x35\xd7\xac\x70\xc7\x44\x5b\x33\xa7\xed\x0b\xa1\x42\x6f\xf7\xb6\x91\x22\xa0\x87\x1c\x4b\xeb\xc8\xb9\xee\x3a\x66\x9d\xb1\x12\x41\xa2\x90\x8f\xc9\x7f\x6e\x25\x5e\x28\x33\x7f\x24\x74\xd6\x3c\xf1\xc0\xf1\x64\xea\x74\x06\x97\x3f\xe1\xc2\xe0\xbe\x0c\xe4\x8a\x67\x49\x71\x6a\xd4\x2a\x80\xdf\xee\x6e\x88\xf1\x4b\x12\xc3\x67\x19\x91\x8e\xbb\x1a\x92\x8a\x71\x92\xe1\xf4\xa8\x8f\x57\xd1\x06\x5b\x0b\x2a\x4c\x5a\x2f\x61\x8e\x86\x6c\x8b\x7c\xfe\xe9\x51\xac\xc9\x89\x45\x2f\x5f\x25\xc8\x7e\x68\x40\x49\x8d\xac\x1a\xe9\x8a\x14\x4c\xc2\x30\x59\x4a\xc3\x01\xa8\x94\x18\xbe\x6a\x03\x48\xbb\x48\xd1\x31\xdc\x83\x1a\x85\xa1\x24\x42\x87\x14\x90\xc6\xf6\xb9\x0b\xbb\xdd\xcb\xb8\x00\xaa\xe6\xe2\x10\x50\x2f\x41\x94\x01\x63\xd4\x96\xca\xf9\xc0\x41\x42\x3c\x7b\x7b\x0c\xf7\xa2\xc0\x07\x6c\xaa\x78\xfa\xa6\x8e\xc1\x2d\xc9\x09\x12\x03\x16\x01\x16\x94\xc6\x0e\xbd\x6d\x5d\x81\xb1\x51\x89\xbe\xf7\x06\x0b\x2a\x8c\x80\x19\x1e\x61\xa9\x0c\xf9\xe9\xb2\x27\x56\x51\x5b\x3e\x28\x96\xd2\x36\x06\x26\xd8\x1b\x74\x34\x23\xf8\xd8\x13\x73\xac\xc4\x8d\xb2\xdc\xb4\xfa\xed\xe4\x1b\x62\x3c\xb9\xf8\xe4\x57\x67\x8e\xba\xd5\xa6\xf5\x63\xe0\x5e\xc2\xe5\xee\xe0\xc3\x8a\x66\xc0\x25\xf6\xb0\x23\xbd\x14\xf5\x49\x3e\x86\xdd\x51\x4f\x7d\xa4\xfc\x35\xf8\x46\x14\xf8\xe8\x26\x22\x59\xdb\xb5\x0d\xbf\xb1\x1f\x17\x43\xee\xff\x10\x5a\xd2\x75\xf4\x6d\xde\xfb\xa5\x29\x60\xa1\x42\xf5\x70\x4b\x7e\x28\x66\x3f\x71\xce\xc5\xbc\xff\x65\x33\x58\xfb\x6a\xfb\xd9\xba\xeb\xae\xce\xd0\x34\xe0\xa1\x70\x48\x81\x08\xb2\x75\x64\xf5\xc6\x59\x6a\x70\xf4\xd8\x85\x6e\x37\x50\xb0\x1b\x94\x07\xa9\x1c\x16\xc1\xba\x25\x1d\x4a\x0c\x8f\x94\x1b\xc3\x68\x27\x36\xbb\xe1\xc2\xba\xeb\xa1\x54\xee\x4f\xa9\xdb\x58\xad\x39\xc4\x0b\x61\x0a\xd2\x54\xcd\x8d\xd0\xfe\x11\x4d\x2f\xac\xd6\xca\xcc\xbf\xaf\xea\x9f\x31\x36\x1a\x49\xc3\x92\x6d\xc3\x0e\x3a\xc7\xd1\x4e\x03\x55\x5f\xc6\x52\xbb\x7f\xc0\x0d\x53\x0c\x21\x56\x15\xc5\x64\xbb\xd1\x6c\x0e\x7d\xab\x43\x8a\x5c\x4f\x59\x84\x5a\x52\x80\x12\x6d\xe4\x2a\xa9\xae\x2b\x33\xd7\x31\x8f\x99\xdb\x2a\xed\xf0\x16\x8b\x36\x58\x07\x78\xab\x82\x7f\xcc\xe5\x67\x76\xfe\x1c\xaf\xd3\xe6\x0f\xe2\x16\xf2\x65\x52\x86\xa7\x09\xb6\xf7\x9a\xd6\x29\xcd\x3a\xe5\x13\xff\x99\x50\x7a\xaa\xbe\x74\xbd\x84\x4a\xf0\x2e\xbc\x3f\x8c\x4c\xcf\xad\xab\x63\xb2\xd3\x90\xc7\xb1\x05\x12\x35\xd2\x31\x2a\x78\x5e\x22\x8d\xfb\x90\x49\x1a\x46\xed\x7a\x67\xcc\xc8\x78\xb6\xe1\x94\x96\x71\x18\x49\x8d\x7f\x3d\xa3\xcf\x50\xdc\x60\x1f\x6f\xa5\xd0\x1e\xb3\x6c\x7b\xf8\xb2\xbf\x6c\x1b\x3a\x8c\x43\xd3\x82\xdc\xb1\x0e\x78\xc2\x87\x34\xe2\xef\xbc\x13\x46\x6a\x74\xfe\xe5\x8f\xce\x0e\xad\x0e\x47\x87\xe3\x34\x23\x52\xee\xc7\xb8\xeb\xf1\x5b\x1a\x34\xe9\xdd\x03\x19\x97\xfe\x8f\x08\x96\x1d\x31\x6e\xe9\x98\x1d\x0a\x8f\x3c\xe2\x07\x4b\x33\x09\x7b\xbe\x43\x36\x10\xd8\xde\x54\xdc\xe9\xa1\x23\x1d\xa7\xe1\x35\x56\xf9\xcf\x53\x70\x38\x57\xd6\x70\x65\xa5\x07\xee\x59\xdd\xbb\x83\x38\x15\x5f\xe3\x12\x4e\x8f\x32\x80\xf7\xb8\xdc\x78\x3f\xc5\xc2\x61\xe8\xc8\xde\xe3\x92\x26\x0a\x5e\x8b\xad\xef\x38\x62\xab\xa4\xb9\xc3\x52\xdd\xae\x8b\xaa\x8c\xc4\x5b\xf4\xf0\x9a\x62\x73\x10\xf1\x9c\x1f\x70\x97\xf4\x34\x51\x9f\xd2\xfb\xb8\x6d\x43\xec\x4f\x97\x67\x1d\xa8\x49\xe8\xcd\xa3\x70\x45\xb5\x96\xc1\x9f\x2e\xcf\xc6\x50\x85\xd0\x8c\x77\x76\x7a\x74\x33\xfe\xf5\x67\x02\x25\xdb\x70\x62\x2d\xe5\xe7\x44\xdb\x56\x72\x5c\xc4\xc4\xe1\x14\xe9\x9c\x32\xca\xfa\x17\x24\xff\x85\xb3\xbf\x63\x11\x7a\xf5\x3b\x3f\x8a\xa2\xb0\x2d\x4d\xd1\x0e\x65\x9c\x3e\x3d\xbb\x33\x66\xc0\x47\x0e\x7e\xa1\x19\xd1\x35\xd6\x7b\xc5\xad\x64\x9d\xf8\xe1\x49\x42\x2a\x5f\x50\x17\xc4\x38\xd5\x95\xce\xd6\x51\x5f\x73\xa3\x9c\x35\x35\x1a\x9e\xd2\x27\x2b\x46\x3d\x08\x04\xc8\x3e\x10\x94\xed\x82\xe4\x40\x4a\xe7\xa1\xb2\x54\xa8\x18\x3d\x4b\xe9\xd0\x7b\x9e\x9e\x3b\x18\x85\x32\xd9\x8e\xcb\x0f\xef\x88\xfd\x75\xb8\x86\x0d\xb9\xef\x75\x21\xab\xfc\x66\x08\x73\x18\xf2\x5c\x4c\xdd\x4d\x19\x48\x32\xac\x95\xa5\x58\x65\x69\x07\xa3\x93\xfe\xca\x61\xcd\xb3\xb3\x6e\x66\x49\xa2\xd6\x6c\xdb\x04\x1a\xee\x8d\x83\x09\xfc\xd1\x30\xcd\x28\x49\xc2\xa2\x42\x13\xcd\xc5\xc3\x4d\x07\x6c\x68\x40\x35\x12\x18\x37\x12\x5c\xa0\xe1\x9f\xf0\x1f\xcf\x1a\xfd\x18\xe2\xa9\x3d\x5a\x43\x9e\x8a\x60\x6b\x25\xca\x17\x74\x76\x10\x81\xa1\xd0\x1a\x6a\xb1\x84\x5c\xdb\xe2\x9a\x04\x41\x92\x81\xa4\xa2\x63\xa2\x60\x2b\x40\xd5\xa1\xb6\x1c\x01\x3d\xe5\xa3\xf2\x55\x1c\x0e\x9f\x1e\x40\x39\xd0\x3d\x3a\x36\x2c\xc9\xdf\xa1\x4b\xbe\x3e\x70\x31\x1c\x36\xa2\x2e\x79\x53\x19\xc5\x20\x68\x13\x33\x33\x3f\x49\xf3\xbf\x35\x9b\x9e\x93\x34\x99\xa1\x24\x28\x49\xeb\x47\xab\xa2\x84\x9a\x65\xed\xa4\x48\xd1\xb5\x42\xb9\x94\xe2\xef\x45\x79\x2d\xc6\x9c\xf7\x1c\x3f\x5d\xd8\x30\xe9\xcc\x36\xaa\xe8\x1d\xfc\x23\x8a\x7a\xba\x2c\x82\xc3\x74\xcd\xf3\x03\xaa\xf7\xbb\xd9\x84\xef\xb0\x48\xb3\x19\xd6\x8d\xe6\x9e\xfc\x0f\xd6\xb3\x35\x8a\x94\x46\xd8\x87\x1b\x61\x94\xd6\x82\x97\xe7\x18\xd0\xdc\xc0\x3e\xcc\x08\x70\xd3\x4a\xec\x8c\x3c\x15\xef\xc3\xdd\xdd\xe8\xb8\xff\xff\xf5\x2b\x13\x08\x37\x6f\x29\xab\x3d\xec\x77\x1d\x97\x30\xe2\x70\x98\xee\x22\xee\xee\x46\x13\x7e\xfa\xfa\x15\x86\x43\xaa\x54\x43\x25\x69\x75\x26\xfc\xf5\xa9\x4c\x5c\x68\xb8\x61\xfe\xa9\x9f\x7e\xfd\xba\x13\x2f\xe0\x86\x5c\x5c\x87\xda\xce\xa3\x38\xce\x59\x77\x9f\x32\xb5\x9d\x78\xbb\xc4\x64\x96\xaf\x97\x1e\xa7\xb3\x6d\x60\x3a\x5f\xd9\x56\xcb\xab\xe0\x84\xf1\x25\xba\xab\x92\x47\xd0\x7d\xf8\xff\xe3\x29\xbf\xa7\xc4\xbc\x0a\x76\x45\xd0\x33\xfe\x78\x7e\x75\xfc\x7f\xa7\xb3\xab\x8f\x97\x57\xc7\xff\x7b\x3a\x99\x31\xf9\xdd\x9d\x2a\xc1\x20\x8c\x68\x8a\x87\x5d\x18\x26\xed\xee\xee\x1a\xa7\x4c\x28\x61\x2b\x5d\x1b\x5c\x15\x44\xb0\x0f\x3f\xc9\xad\x48\xdc\x13\x0e\x01\x8d\xec\xff\x25\x76\x3c\xe9\xd3\xc8\xfe\x1d\x8e\x35\xd6\x34\xcf\xec\xc3\x4f\xa3\xdd\x12\x4e\x0e\xb7\xd2\xb6\xef\x73\x8e\x70\xe0\x09\xd6\x92\x60\xc5\x3a\xe3\xb8\xeb\x1b\xce\xfc\xf7\x8f\x16\x5b\xcc\xb2\x8b\xc3\xe9\x43\x71\xb7\xfd\x1f\xb9\x32\x3b\xb9\xf0\x55\xfc\x7b\x71\x38\x85\xe1\x39\xb9\x89\x11\x6e\x27\x5f\x5c\xb7\x4f\xb9\x2f\x92\xe1\x53\xd1\xf0\xb4\x5b\x22\x23\x1d\x3b\xf8\xfe\xde\xb8\x69\xcc\xfe\x0b\xf8\xa6\x63\x5b\x63\xbd\x4f\xd6\x9b\xe7\x2f\xe0\x95\x8e\x29\xc5\xea\x8a\xeb\xf7\x5c\x72\x2f\x6d\xff\xc5\x34\xcd\x4e\x9c\x92\xc7\x7c\xfb\xfd\x1c\xcf\xbe\x7a\xd0\xaf\xaf\x9e\xe3\xd5\x57\xcf\xf0\x29\x11\xf5\xfe\x7a\xae\x97\x5f\xc1\xb0\x41\xa8\x1b\xf5\x12\x89\x17\x25\xa8\xae\x6e\x3a\xef\x9e\xbc\x84\x73\x13\xd3\xd2\xab\x2f\xd8\x73\xfd\x1b\x9c\x3b\xd5\xad\xab\x1f\xf6\xeb\xce\xa6\x63\xa7\x87\x07\xb3\xc9\x3b\x18\x0e\x7f\xb7\xf9\x90\x9b\xfc\x37\x5e\xee\x49\x4c\xbc\xcc\xdb\xbb\xb7\x1c\xab\xf8\x53\x1e\xee\xc9\x53\xd1\x7d\x22\x6c\x9e\xe1\xff\x9e\x23\x95\xdf\x61\x83\x8e\x6d\xf1\x22\xc1\xd0\xb3\xae\xb1\xe6\x4a\xf9\x22\x15\x78\xc5\x36\xd4\xcd\x8a\xed\xdf\x10\x0f\x8c\x93\x0e\x45\x28\x2a\x90\xe8\x0b\xa7\x72\xf4\x6b\x9f\x18\xba\x0b\xaf\x6e\x76\x23\x50\x15\xa9\xef\x5f\x27\x67\x1d\x9f\x38\xd4\xff\xb7\xcd\xe3\x8d\x1a\x6f\x2f\x84\xe1\x19\x53\x85\x0a\xf9\xa6\x94\x3f\xfb\x24\x96\xb5\xf8\x62\x4d\x7f\x6f\x06\xe7\xf4\xee\xf5\xc1\xe5\xf9\x1b\x9a\xed\x36\xf8\x8c\x61\x2b\xc5\x03\xc5\xa4\xc4\x72\xab\x3b\xeb\x7f\xa8\x1b\xfd\xb5\x63\x98\xc5\xe6\x09\xdc\xe3\xb6\xee\x21\xd1\x0e\xd9\xf9\x06\x0b\x55\x2a\x94\xf0\xbb\xcd\x63\x3b\x8c\xdf\x9d\x6c\xba\xdb\x62\x2a\x7a\x27\x57\x86\x50\xdf\x00\xd9\x15\x64\x5d\x07\xa6\x3f\x60\x12\x9d\x06\xeb\xc4\x1c\x7f\xc0\x00\xba\xfd\x17\xc0\xe3\x63\xd0\x31\xdb\x86\x33\x02\x76\xdc\xfe\xc0\x2f\x7d\xc0\x7a\x94\xf1\x52\x52\x24\xc6\xd9\xe7\x4a\x05\xd4\xca\x33\x08\x63\x28\xb8\x76\xe9\xd3\x88\x50\x79\x58\x54\xaa\xa8\xba\x3b\x34\xe5\x41\x10\xc6\x42\x99\xc0\x31\xfa\x08\x29\xe3\xe2\x91\x5a\x21\x84\xd1\x0e\x49\xf1\x6e\x36\xbb\x48\x27\xf6\x5f\x56\x82\xe5\xcb\x6e\x6d\x85\x84\xa6\xcd\xb5\x2a\x20\x4e\x94\x09\xba\x2c\x30\x87\x1b\x25\x40\xc0\xc9\xf1\xac\xfb\x84\x34\xca\xd6\x58\x8d\x37\xd0\x24\x65\x57\x15\x42\xf3\xda\xbf\x59\xdf\xf1\xe8\xf5\xdb\x43\xe0\xec\xde\xe7\xad\x18\xee\xd3\xb7\xe3\xd5\x77\x36\xd9\x5d\x5e\xbd\xf0\xa7\xaf\x7b\x1f\xa4\x5e\xea\x6e\x86\xb0\x53\x2c\x41\xc8\x00\x9d\x1c\xd0\x7d\x2c\x67\x19\xa6\x6f\xa1\x71\xf6\x46\x49\x74\x1e\x7c\x5b\x54\x20\x3c\x7c\x50\x46\xd9\xee\x02\x6d\x82\x4d\x95\x6d\xc3\x09\x1a\x74\xaa\x20\x63\x6c\xb3\x67\x57\x06\xe1\x0f\x8e\xb4\x08\x70\x6c\x64\x63\x95\x89\xa7\xc7\xa5\x4e\xe4\xf8\x6f\x5d\xb8\x78\x41\xb3\xe6\xcc\x87\x6c\xfc\xef\x7b\x05\x93\x4d\x17\xaa\x0c\x0f\xcb\x4d\x68\xfa\xfc\x11\x34\x0d\x70\xd0\x86\x8a\xef\xae\x22\x7e\x46\x23\x4c\x58\xa3\x8e\x0b\xe9\xcb\x52\x57\xe9\xfa\xf7\xff\x0c\x00\x00\xff\xff\x20\x3c\xcd\x31\x30\x22\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 8752, mode: os.FileMode(420), modTime: time.Unix(1518635863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcf\x4a\xc3\x40\x18\xc4\xef\x79\x8a\x31\xb5\xc7\xdd\xe4\x05\x3c\x35\x52\xbc\x78\x10\xc1\xa3\x24\xcd\xb7\x76\x49\xb2\x1b\xf6\x8f\x8a\xcb\xf7\xee\xb2\xdb\x22\x14\x6a\x6f\xc3\xf0\x9b\xdf\x61\x36\x77\xcd\xa0\x4d\x33\xf4\xfe\x58\x6d\xee\x21\x9e\x91\x92\x7c\xed\xfd\xf4\x34\x32\x97\xc6\xe6\xe6\xcd\xba\xa9\xd3\x8e\xb9\x51\xd1\x18\x9a\x85\x0f\xa3\x8d\xa1\x00\xf4\x1f\x40\xce\x55\x29\x69\x05\x43\x90\xbb\x35\x7a\xb4\x10\xcc\x55\x4a\xab\xd3\x26\x28\xd4\x79\xbe\x12\x96\x55\x63\x3b\xd6\x27\xa8\x00\x02\x64\xc6\x92\xce\xf3\x97\x7e\xd9\x0f\x68\xe5\x35\xc3\x8c\xe3\xfb\xe7\x42\xcb\xc3\x56\xb6\x6a\x5f\x9f\xe1\xeb\x9e\x4e\xfb\xe9\xa6\x48\x79\xfd\x43\x7f\xa6\x13\x7e\xa1\xaa\x52\x92\x8f\xdf\x74\x88\xa1\x1f\x66\x62\xc6\x97\x75\x13\x39\xb8\x68\x20\xc4\xc1\x1a\xa5\x3f\xf2\x23\xbb\x92\x98\x21\x44\xc8\x7f\x76\x17\xcf\xfe\x06\x00\x00\xff\xff\x43\xce\xa0\xb4\x78\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 376, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x11\xd2\x5d\x3a\x97\x17\xc8\xe6\x42\x84\xd8\x5c\x24\x1a\xf5\x67\x15\x85\x64\x12\xac\x38\x63\x18\x7b\x42\xab\xc8\xef\x5e\x05\x10\x15\x55\xe9\xee\xd8\xe7\x3b\x9f\x46\xc8\x0c\xc8\x1e\x21\x85\xa1\x24\x63\x6d\xa9\x5a\x0c\x48\x03\xa4\x90\xb3\xa0\xc2\x77\xac\x24\x94\x3b\x3b\x21\xe3\x98\x64\xb7\x77\x8c\xaa\xe4\x56\x7a\xa4\xe0\x21\x85\x93\xe3\x0e\x19\x58\x08\xb4\xae\x1c\x35\xa6\x9d\xf8\xc5\x39\xc5\x08\x5a\x87\xd2\x77\xeb\xe5\xf4\x99\x4f\xa9\x8e\x51\x59\xd7\x5e\xb4\x2f\x8e\xbb\xa5\xe1\x18\xff\x56\x8e\x6a\xc7\x1a\x07\xa4\xa0\xad\x6b\x15\x32\x3b\xfe\x4e\x35\x42\x84\x56\xfb\x50\x23\xb3\x72\x12\x0e\x12\x1e\x33\x4e\x82\xf2\x7b\x27\xb6\x2e\x02\x97\xe4\x1b\xe4\xa2\x31\x16\xa7\xbb\xdf\xb2\x27\x75\xda\x23\x15\xc1\x7d\x95\x37\xe1\xe6\x7f\x91\xbd\xae\xf3\x62\xb3\x2d\xb2\xe7\xf5\x22\x57\xe3\x68\x1a\x20\x84\x64\x71\x10\x0f\x73\xd0\x31\xaa\x71\x3c\xb0\xa1\xd0\xc0\x8c\xf1\x28\xe8\x43\x51\x4d\x65\x0a\x7f\xea\xd9\x05\x3c\x43\x1a\x90\xea\x73\xba\x2a\xb6\x65\xbf\xda\xc1\x3c\x79\x64\xe9\xb1\x77\xfc\x31\x79\x92\x79\x03\xab\x7f\xb3\xeb\xe4\x67\xdb\xd2\xf8\xee\x57\x5d\x6d\x7c\x77\x27\xbb\x2c\xee\x6c\xea\x28\x28\xa8\x3e\x03\x00\x00\xff\xff\xbb\x66\xa4\x8a\x17\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 535, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\x4d\x4b\xc4\x30\x10\xc6\xf1\x7b\x3f\xc5\xd8\x65\x8f\x49\xeb\x55\xe8\xc5\xad\x88\x17\x11\x15\x3c\x37\x9b\xc9\x1a\xda\x4e\x4a\x5e\x50\x08\xf3\xdd\xa5\x2f\x20\x0b\xd6\xdb\x30\xfc\xf9\x1d\x9e\xc3\x4d\xa5\x2c\x55\xaa\x0b\x9f\xc5\xe1\xe5\xfe\x0d\xc4\x33\xe4\x2c\xdf\xbb\xd0\x3f\x69\xe6\xed\xe7\xe6\xdf\x87\xf3\x7d\x6b\x3d\x73\x65\x12\x11\x0e\x22\x44\xed\x52\xdc\x12\xdc\x4b\xd0\xfb\x22\x67\x6b\x80\x10\xe4\x69\x4a\x01\x6a\x10\xcc\x45\xce\x93\xb7\x14\x0d\x94\x2b\x30\x00\x39\x8d\xa1\xb9\xbd\x9b\x26\x6a\x8e\xba\x5c\xeb\xa5\x14\x80\xa4\x97\x6b\x73\x5e\xbb\xf1\x51\x41\x2d\xf7\xa8\x11\xc7\xe6\x28\x6b\x73\x51\xe5\x16\xff\xed\xb4\x36\xf4\xff\x42\xc6\x0e\xf8\x2b\xad\xf9\x15\x55\xe4\x2c\x1f\xbe\xf1\x9c\x62\xa7\x06\x64\x86\x2f\xe7\x7b\xf4\xe0\x13\x81\x10\x67\x47\xc6\x5e\xe6\x69\x4e\xcb\xc5\x0c\x42\xc4\x79\xdc\xf6\x6a\xe6\x9f\x00\x00\x00\xff\xff\xd8\xa6\xd9\x67\x87\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 391, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x6a\xeb\x30\x10\x45\xf7\xfe\x8a\x79\x0e\x59\xca\xf6\xfb\x84\xc6\x2e\x69\xb7\x6d\xa0\x6b\x39\x1e\xb7\xaa\xe3\x91\x18\x49\xb4\x20\xe6\xdf\x8b\x9c\x40\x1c\x68\xe8\xee\x22\x1d\x1d\x34\x73\x37\xff\xea\xde\x50\xdd\x6b\xff\x51\x6c\x5e\x77\x0f\x87\xf6\x09\x94\xfa\xb4\xbd\x22\x3d\x23\xa4\x54\x1d\xb4\x9f\x9e\x07\x91\xd5\x35\x05\xed\x27\x0f\xff\x57\x47\xc8\x6c\x39\xe3\x6f\x96\xa7\xce\xb0\x48\x3d\x46\x22\x3c\x29\x1f\x06\x64\x5e\xa1\x36\x06\x17\xc3\x3d\xd6\xc6\x50\xa4\x64\x46\x20\x84\xaa\x75\xd1\x43\x03\x4a\xa4\x48\xc9\xb1\xa1\x30\x42\x79\x35\x1d\x5d\xf4\xca\x21\xab\xfc\x1f\xd8\x0e\xe5\xf9\xc5\x42\x2b\x40\x1a\x96\x74\x71\xbd\xe8\x79\xdf\x43\x53\xdd\xd7\xcd\x38\xc3\xb6\x6a\xc6\xfd\xae\xbc\xe0\xbf\x9b\x3a\xe3\xa7\x3f\x54\x61\x76\x57\xd5\x99\xbf\x71\x15\x29\x55\x8f\xdf\x78\x8c\x41\xf7\x27\x14\x81\x2f\xcb\x13\x32\x70\xa4\x3c\x97\xa5\xd1\xbc\xe7\x0d\xb5\x4b\x12\xc9\xca\xdc\x43\x77\xd3\xc8\x4f\x00\x00\x00\xff\xff\x46\x53\xad\xe9\xbd\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 445, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
