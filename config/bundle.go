// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6f\x6f\x1b\x37\xd2\x7f\xaf\x4f\x31\x8f\x9d\x07\x97\x00\x5a\x59\x6e\xd1\x43\x2b\xc0\x2f\x64\xd9\x71\xd4\xda\x8e\x2a\x29\xf5\xdd\xbd\x31\xb8\xbb\xb3\xbb\xac\x77\xc9\x0d\xc9\x95\xaa\xf8\xf2\xdd\x0f\xc3\x3f\xbb\x92\x23\xc7\xee\xd5\x28\x0e\xb8\x33\x90\x40\x4b\x0e\x7f\x33\x9c\x19\xce\x70\x86\x0b\x54\x2b\x54\xa3\x1e\xc0\x21\xbc\x93\xda\x08\x56\x21\xc8\x0c\x4c\x81\xf0\xb6\x11\x02\x4b\xd0\x96\x64\x00\x57\x8c\x8b\x72\xd3\x07\x53\x70\x0d\x5c\x43\xa3\x31\x85\x78\x03\xac\x31\x32\xd2\x09\x2b\x51\x69\x8b\x63\x24\x24\x52\x64\x3c\x6f\x14\xc2\x5a\xaa\x3b\x54\x7a\xd0\x03\x8b\x7f\xcd\x2a\x1c\x41\x29\x13\x56\x16\x52\x9b\x9e\x5d\x30\x93\xca\x38\xb8\x4c\x2a\x78\xb7\x5c\xce\x20\x91\x55\xd5\x08\x9e\x30\xc3\xa5\x00\x26\x52\x2b\xd1\x1a\x63\x48\x99\x2e\x62\xc9\x54\x6a\x21\x97\xcb\x19\xad\x1e\xc1\xf7\xc3\xe1\x70\x1f\xda\x7c\x36\xd9\x05\xa3\x65\xf3\xd9\xc4\xad\xfa\x61\xf8\x83\x5f\x35\xc7\x8f\x0d\x57\x08\x31\xd3\x3c\xa1\x3d\x15\x28\x4c\xe0\x4f\x40\xc4\xdf\xa9\x02\xc6\xb3\x29\x6d\x9f\x8b\x1c\x18\xd4\x4c\xeb\xb5\x74\xe2\x1c\xc2\x34\xb3\xac\xfb\x50\xb1\x3b\x04\x4d\x1a\x30\x12\x6a\x25\x6b\x54\xe5\x06\x14\x6a\xa3\x78\x62\x80\x25\x09\x6a\x4d\x73\x84\xeb\xd4\x05\x19\x2f\xd1\xa2\xbc\xc6\x41\x3e\x80\xa4\xa8\x64\x0a\x7f\x1d\x0e\x21\xb3\x96\x18\x38\xb2\xc1\xa6\x2a\xdf\xb8\x9d\x7a\xd6\x23\x60\x71\x72\xfc\xcd\xb7\x6e\x27\x53\x91\x94\x4d\x8a\xc0\xe0\x60\xc2\x92\x02\xa3\x89\x14\x46\xc9\x72\x04\x42\x46\xda\x48\x85\x07\x4e\xc7\x05\xb2\x14\x15\x70\x01\x17\x68\x8e\x2e\xb9\x36\x24\x5f\x2d\x85\xc6\xd6\x90\xb5\xc2\x15\x0a\x03\x09\x4b\x0a\xda\x6f\xbc\x01\x2e\x0c\xaa\x0a\x53\xce\xd4\xc6\x6a\x84\x27\x68\xed\x7b\xc6\x35\x8b\x4b\x24\x6c\xcb\x78\x04\x46\x35\xe8\x84\xba\xe4\x15\x37\x4e\x87\xfc\x93\xf3\x30\xa6\xef\x00\x7f\xc3\xa4\x31\x52\x41\x29\x73\x0d\xaf\xb5\x49\x65\x63\x8e\x50\xa9\x37\x7d\x92\x2b\xde\x18\x07\x7d\xc5\x7e\x3b\xf7\xa4\x97\x32\x5f\xf0\x4f\x38\x82\xe3\xe1\x70\x38\x84\x43\x38\x1e\xc2\x4f\xa7\x8e\xcb\xb2\x40\xd8\xf6\x60\x96\x18\xbe\x6a\xcd\x96\x32\xc3\x62\xa6\xc9\xc6\xc9\x1d\x8a\xd4\x2e\x19\xaf\x18\x2f\x49\xec\x30\xaa\x47\x10\xcb\xd2\xa4\x71\x1f\xd2\x8d\x60\x95\x4c\x63\xda\x9b\x5f\x1b\x26\xb7\x86\x34\x9d\x1e\x80\x53\x59\x9a\xb3\x53\xf7\xdb\x19\xc7\x14\xc1\xbe\x2d\x67\x6f\x61\xfa\xa3\xf9\x11\x0c\x8e\x9c\x6d\x23\x3a\x27\x51\xca\x95\xff\x1e\xa4\x71\xaf\xe7\x80\xce\xac\x14\x01\xfa\xd0\xfe\x3b\x65\x1a\xed\x46\x8d\x24\x7f\xb3\x0e\x1a\xa4\x05\x43\xdb\xd1\x2d\xf5\x92\x3e\xc3\x82\x11\x1c\x38\x06\x07\x5b\x68\xe3\x9b\x05\x28\xcc\xb9\x14\xed\xe0\xdc\x7e\x8e\xe0\xa0\xa3\x9b\x28\x4c\xe9\x4c\xb0\x52\x77\xa2\x84\xe5\x63\xe7\xcf\x77\xb8\x81\xe9\xd9\xd6\xec\x4f\xb8\xd9\x01\x09\xf4\x0b\x4c\x14\x9a\xb0\xec\x27\xdc\x6c\x51\xb8\x39\xbb\xac\x07\x70\x29\xf3\xdc\x45\x28\xeb\x47\x32\xcf\xc9\x0f\x4b\x5c\x61\xa9\x47\x90\x62\xdc\xe4\xe4\x2b\x99\xec\x03\x2a\x25\x95\x25\xbc\xa4\xe9\x91\x1d\xf6\x0b\x6f\x14\x37\xe8\xdc\xcc\x1a\x85\x6b\xa8\x99\x29\x06\x74\x62\xb1\xaa\xcd\xa6\xef\x26\x19\xc5\x2c\xc5\x8d\x41\x41\x84\xda\xa4\xa8\xd4\xc0\x82\xbc\x6f\x4c\xdd\x98\xb7\xbc\x44\x27\x9b\xf3\x37\x9d\x14\x98\x36\x25\x1d\x24\xdd\x85\x1d\xb2\xfa\xc5\xe4\xbc\x0f\xef\x6b\x14\xda\xb0\xe4\xae\x6f\xa3\xd8\x15\x13\x0d\x2b\x29\x22\xd5\x8d\xe9\x7c\x6e\x00\xbd\x45\xc0\x09\xc1\x78\x0d\x32\xf3\x52\xa8\x46\x00\xdb\xe6\x64\x50\xb5\xc1\x8c\x4e\x3c\x08\x26\xa4\xc6\x44\x12\x56\x0f\x20\x80\xcd\x99\x09\x27\x65\x18\x8e\x0b\x38\xba\x96\x4b\xc5\xc4\xc6\x9e\x46\xab\x99\xc0\x84\x8e\x9f\x14\xb8\xcb\x2a\xc0\x4e\x8a\x46\xdc\x11\x6e\x0b\x52\x4a\x91\xd3\xf2\x35\xe3\x06\x62\x34\x6b\x44\x01\x4d\x9d\x32\x83\x1a\x62\xcc\xa4\x42\xa8\x98\xba\x73\x31\x53\xc8\x14\x21\x45\x96\x3e\x26\xff\xb5\x4c\x71\xc6\x45\xbe\xe4\x15\xca\xc6\x8c\x28\x0a\xee\xec\xa1\xe2\xa2\x31\xb8\x9f\x3d\xe9\xdf\xf3\xb0\x16\x64\xca\xf4\x1f\xca\x40\xf6\x79\x96\x14\x53\xc1\x4d\x2b\xc5\xb7\xc3\x1d\x31\xbe\xf3\x62\x68\x4f\x1b\x9c\xb4\x73\x29\x2f\xc6\xf4\x0c\xd6\xbc\x2c\x21\x46\x9b\x2d\x2b\x46\x99\xa5\x2c\x37\x90\xa3\x20\xf5\x62\xea\x3c\x6c\x7a\x16\xbc\x9e\x60\xc8\xd3\x34\x24\x0a\x89\x00\xd2\x46\x91\xe0\xb5\x92\x74\x64\xe8\x67\x80\x0c\xee\xca\x85\xf3\xeb\x94\x2b\x4c\x8c\x54\x1b\x07\x7a\x23\xd5\xdd\x19\x57\x7b\x62\x4d\x27\x6e\xab\x8e\x82\x91\xb9\x08\x2c\x2d\x5d\x58\x21\xd5\x22\x39\x34\x13\x96\xcc\x38\x65\xf4\x81\x1b\x27\x81\x2e\x1a\x03\xa9\x5c\x8b\x81\xc7\x8b\x8e\xa1\x42\x26\x34\x91\x2b\xa4\x63\x21\x64\x58\x36\x80\x61\x98\x74\x03\xc0\x2b\x9b\x4b\x0c\x96\x1b\x60\x99\x41\x77\x76\x32\xae\xb4\xb1\x5e\xe9\x50\x5b\x13\x44\xc7\x41\x3d\x63\xab\x73\x27\xc3\xae\x56\x8d\xda\x90\xe5\x53\x34\x98\x18\x58\x17\xcc\x26\x36\xd9\xa8\x04\xdd\x01\x67\x6d\xd0\x37\x12\xb8\x19\x40\x08\xb5\x98\x71\x41\xaa\x9d\xb7\xe4\xdc\xed\xda\xb2\x0a\xb7\x1a\x77\x29\x90\x2b\x54\x8a\xa7\xa8\x9d\xd6\x63\x2c\xd8\x8a\x4b\x1f\x2b\x5a\x80\x2e\x21\x4c\x66\x1f\x74\xc7\x79\xd0\x8d\xd7\x8d\x1e\xc1\xb0\xd7\x0e\xcc\xc7\x57\x1d\x9d\xcd\x83\x17\xa7\x1d\xf9\x9c\x55\x17\xf1\x08\x86\x83\xad\x15\x67\x5c\xdf\x81\xae\x59\x82\x5f\x59\x48\x44\x5f\xac\x7c\x6b\x2d\xbc\x8e\x6c\x3c\x05\xd3\xd0\xee\xbb\x25\x3b\x41\x48\x6f\x44\x02\x6b\x4e\x59\xed\x8b\xcb\x61\xbb\xe2\xcb\x43\x44\x7f\x1f\x6c\x20\x70\xc1\xe8\xbb\xdd\x13\xe4\x29\xbb\xed\xcd\x26\xad\x6b\x90\xfb\xb9\x18\x72\x64\x99\x93\x75\x9f\xc7\xaa\x75\x97\xfd\xa1\xcf\xd3\x6e\xa7\x96\xdf\x95\x5e\xf6\xa5\x98\x17\x4b\x33\xfb\x52\x4d\xef\xd1\xbb\xcd\x83\x4c\xd2\xdb\x7f\xa3\xb1\x17\xee\x3e\x14\x86\xb6\x2f\x55\x1f\x74\xd9\xa8\xaa\x0f\x75\xac\xfb\x90\x93\x17\x8b\x9c\x0b\xa4\x6b\x2b\xe5\xa7\x3e\xe4\x09\xf6\x41\x86\xdc\xd5\x3b\x75\x48\x1e\x88\xc4\x69\xd3\x55\xe0\xe2\x4f\x47\x20\xb5\x8e\xff\x6e\x39\xb1\xfc\x9c\x8a\x97\x58\xd5\xa5\xf5\x81\x7f\xfa\x8d\x36\x82\xaf\x50\x69\x84\x13\x58\x31\xc1\xcb\x92\xf9\x89\x1c\x0d\x8a\x15\x9c\xc0\x92\x6e\x90\x6e\xcc\xdd\x15\xed\xc6\x4e\xe0\xfe\x7e\x70\xde\x7e\x7f\xfe\xec\x49\x98\xca\x9b\x0a\x85\xd1\x70\xe2\x0b\x0f\x9b\x3a\xa3\xc8\x5f\xb0\xef\xef\x07\x13\xfb\xeb\xf3\x67\x88\x22\x8a\x2e\x11\x4f\x69\x74\xc9\xf4\xdd\x34\x6d\x71\x4a\x99\x3b\x1e\x3e\x76\x7e\xfe\x7c\xe4\x14\x17\xd9\xdb\x70\x54\xca\x3c\x08\x45\x3e\xf1\x90\xd6\x87\x59\x67\x54\x4f\x28\xad\x45\x1f\xa7\x94\x8d\xf1\x94\xba\x90\x4d\x99\xde\x1a\xc5\x84\xce\x50\xdd\x66\x36\x0d\x9c\xc0\xdf\xcf\x17\x9e\x62\x5d\xa0\xb8\x35\xb2\x23\x69\xc1\xdf\x5f\xdf\x9e\xff\x6d\xba\xbc\x7d\x3f\xbf\x3d\xff\x65\x3a\x59\xfa\x05\xf7\xf7\x3c\x03\x81\x30\xa0\x58\x03\x43\x88\xda\x9d\xde\xdf\xd7\x8a\x0b\x93\xc1\x81\xc2\x8f\x0d\x6a\x73\x9b\x10\xc9\x09\xfc\x7f\x7a\xe0\xc8\xb7\x48\x23\x40\x91\x6e\x7d\x7b\x50\x1b\x91\x28\xac\x7c\x15\xb7\xc2\x4a\xaa\x0d\x21\x0f\x86\x19\x5c\x9c\x1e\xf8\x85\x4f\xe3\xbb\xc0\xf5\x24\x83\x94\x82\xe0\x36\xbc\x5b\xb7\x07\xdf\x0f\x7c\x6c\xd0\x95\x27\xb3\xd3\xc5\x63\x1e\x7a\xf8\x7f\x31\x17\x47\x31\xd3\x45\x18\x98\x9d\x2e\x20\xba\x26\x33\xda\xeb\x41\x27\xaf\x9b\x91\x4f\x1b\xd8\x11\xe2\xd3\x3e\xf3\x1c\xb3\x39\xb0\xd2\x66\x6f\x7d\x72\x3c\xaa\x6b\x71\xf2\x62\xb6\x0b\xe0\x15\x56\x27\xa4\xd7\x3c\x7e\x31\xab\x05\x68\xf2\xee\x0e\xfb\x29\x93\x3d\x38\xf6\xff\xe6\x21\xef\x01\x5c\x28\x9e\x9e\xdb\x98\xf7\x7c\xcb\xbf\x7a\xc4\xee\xaf\x9e\x67\xf5\x57\xcf\xb2\x39\x91\xb5\xd6\xfc\x3d\x7e\xf0\x0a\xa2\x1a\xa1\xaa\xf9\xcb\x1d\x5d\x27\x4b\x71\xbb\x0a\xf6\xbf\x78\x39\xf3\x7b\xe8\x4c\xf3\x4f\xd8\x62\xff\x39\xe6\x07\xba\xee\x2d\x2e\x3f\xcc\xaf\x1e\xb7\xfd\xd1\x43\xe3\x2f\x4e\xc7\xcb\xc9\x3b\x88\xa2\x5f\x65\x1c\xd9\x3c\xbc\xc7\x13\x5a\x22\xe1\xea\xa9\xe3\x2f\x26\x5c\xbe\x78\xda\x0b\xda\x05\x3e\xb4\x3f\xe9\x5e\xcf\xf2\x91\x16\x95\x82\x7c\x54\xa3\xb2\xfa\x79\x41\x87\x69\x19\x54\x58\xd9\x48\xfc\x82\x71\xbe\x03\x37\x55\xdd\x81\xff\x79\x21\x63\x72\x1e\x0a\xbc\xd0\xdb\x61\x49\x22\x1b\x61\xa8\x46\x0b\xad\x11\x1b\xd0\x06\x5d\x65\x55\x4b\xad\xb9\xbd\x8e\xdb\xcb\xe0\xfe\x32\x30\xe5\x3a\xa1\x72\x22\xd4\x81\x63\x87\xdb\xde\xff\x1c\xda\x85\x94\x79\x89\x30\x29\x65\x93\x52\x1d\xf8\x2b\x55\x37\xd3\xb3\x3f\xca\x6c\xe6\x90\x1e\x63\xf4\x49\x8a\x3f\xbc\x9f\x7f\x48\xd1\x6d\xe4\x06\x79\x5e\x98\xad\xc2\x68\xa6\x30\x43\xe5\x62\x1e\xd5\x99\xc6\xd5\xec\xd0\xd4\xf0\xb1\xe1\xc9\x5d\xb9\xe9\x2e\xfd\xd7\x1d\x91\x2d\xe4\x4a\x85\x2c\xdd\x80\x14\x25\x17\x54\xbd\xae\x10\x38\xdd\x59\x85\x07\x69\x6a\x5b\x4d\x04\x00\xc7\xea\x67\x42\x5d\xb8\xe9\x11\x1c\x0f\x86\x7e\x7b\xdb\x9d\x84\x84\x25\xae\x85\x03\xe3\xd9\x94\xca\xc7\xa6\x34\x1a\x5e\x57\xb6\x0f\x8a\x50\x72\x6d\xfa\x60\x7c\xe4\xd0\x7d\x40\x93\xbc\xf1\x30\xbe\xd5\xa0\x30\x53\xa8\x8b\xb6\xa0\xb2\x3d\xd1\xe5\xf2\xf2\xd1\x66\x46\xcf\x75\xf6\x4c\x52\x40\x8a\x3a\x51\x3c\xb6\x5b\x7d\x58\x77\x86\xf6\xd2\xf8\x66\xe1\xa9\x1f\xd4\x00\xc4\xce\x4e\x04\x77\xfd\x51\xc6\x67\x98\x39\x0f\x07\x85\xb5\x42\x6d\x2f\xc9\x0f\xea\xd9\x6c\x17\x36\xec\x86\x69\x24\x04\x5f\x1c\x87\x56\x10\x78\xd4\x60\xc6\xeb\xed\xe6\xa2\x0d\x92\x29\x66\x07\x7e\x72\x5a\xb1\x9c\x66\x53\x99\xdc\xa1\x1a\x70\x79\x24\x0b\xdd\x44\x24\x77\x14\x73\xe9\x03\xda\xc8\xaa\xd2\x84\x45\x67\x98\xb1\xa6\x34\x57\xf6\xde\x38\x82\xe3\x6f\xbe\xdf\x9d\xf8\x25\xb1\x85\x73\x1b\x64\x7f\x94\xf1\x5c\x96\x38\x56\xdb\x6d\xcb\x1f\x65\xfc\x33\x5d\xf3\x20\x61\x82\xfc\x14\xb9\x29\xd0\xb6\x87\x6c\x29\xe5\x35\x59\xb1\x4f\x52\xb4\x35\xbb\xdd\x0b\xbc\x1e\xcf\xaf\xdf\xb4\x3b\xb5\x20\x5b\xb8\x5d\xcb\x34\xe8\x4d\xd7\x98\xf0\x8c\x63\x0a\xbf\xca\xd8\xdd\x2d\xdd\xbb\x85\xf4\x2d\x1c\x4b\x45\x73\x69\xab\x48\xe0\xc2\x77\x0b\x76\xba\xad\x5f\x74\x5a\x77\xfb\xa8\xbb\x1d\xd2\xde\x8d\x0d\x68\xae\x6b\xf8\x22\x2d\xa3\xaf\x34\x8c\x5a\x26\xa0\x8d\x54\x2c\x47\xd0\x1b\x6d\xb0\xb2\xe5\xf7\xa1\xef\xc1\x87\xe7\xa1\xc6\xc6\x02\x8d\xe6\x41\x74\x88\x37\x4e\x61\xa1\x82\xec\x43\xdc\x18\xd8\xc8\x06\x2a\x8a\x0c\x20\x10\x53\x2b\x96\xc5\xe3\x19\x4d\xfd\x45\xa1\x3b\xd0\xae\x81\xe8\x83\xb8\xab\x56\x5d\x7c\x58\x38\x81\xba\x46\x71\xc2\xdc\xed\xd2\x8b\xe8\x4c\x69\x87\xbb\xd0\x73\x53\x70\x83\x74\x96\xc9\x8a\xb6\xb6\xed\x54\x61\x0b\x77\x0d\xeb\x82\x27\x45\x68\x77\x70\x0d\xac\x2c\xe5\x1a\x53\x1f\xfe\x51\xb7\x9d\x87\xb1\x9b\x38\xe3\x4a\x77\x2d\x85\x08\x06\x47\xa1\x61\xb5\xf8\xb6\xeb\x9b\x3f\xd2\x4c\x7f\xaa\x9d\xbe\xaf\xa1\xfe\x9c\x96\xfa\xc3\xa6\xba\x8d\xf2\x8b\xdd\x36\xfe\x73\x93\x9a\xfb\xff\x7d\x4d\x0e\xcc\xca\xc1\x6e\x52\xd8\x5e\xf4\x54\x6e\xd8\xc1\xcb\x94\xac\xac\x5b\xa0\x58\x71\x25\x05\x95\xf1\x1d\xc7\x68\x27\x25\xee\x2c\x1c\xef\x45\xdf\x95\xfe\xab\xd8\x00\x6f\x95\xac\xce\xc5\xaa\x7b\xaf\xb2\xd6\x5a\xf3\xcc\x74\xac\x3e\x68\x54\x36\xc6\xb5\x23\xed\xeb\x5b\x3b\x32\x6e\x4c\xf1\x61\x7e\xd9\x0d\x2c\x51\x30\x61\x76\x97\xb9\xb1\xe9\x59\x37\xe2\x4e\xbf\xa3\xea\x7d\xad\x29\xf7\xb0\x21\x87\x14\x5e\xe8\x02\x57\xca\xbc\x6d\xb6\xfb\x27\xa7\x2f\xfa\x73\xfb\x1a\x66\xcf\xe8\xcb\xd9\x95\x57\xec\x37\x5e\x35\x55\xc7\x6c\xfb\xa5\xce\xbe\xe8\x75\xcf\x75\x24\x40\xdc\x64\x94\xd1\x1f\xbc\x03\xd8\xbc\x64\x67\x7e\xef\x03\x9e\xe5\xab\xdc\x73\xe5\x56\x92\xdb\xdf\xeb\x52\x75\xb2\xf3\x74\x47\x77\xb8\xb9\x5d\x6b\xe7\x76\x46\xda\xc3\x47\x9f\xfe\x11\xc4\x05\x80\x72\xe3\xdc\x26\xbc\xbe\x0d\xa0\x6d\x12\xff\x77\xbf\xc7\x3d\x6a\x24\xf7\x50\x4c\x99\xe5\xd9\x56\x2a\x65\xbe\x63\xaa\xb1\x45\x3a\x27\x20\xdb\x48\x55\x7a\xe4\xb4\x1e\x79\xcb\xd1\x2f\xd7\x7c\xdb\x21\xf2\xc2\xba\xe6\xab\x95\x43\xdb\xf6\x3c\xe4\xf3\xd9\xc4\x65\xd8\xd9\xa4\x8b\xfa\x7f\x5e\x8f\xf9\x10\x96\x8a\x09\x4d\x17\x9b\x20\x17\xdd\x09\xec\x2b\x3c\xe9\x8e\x2b\xba\x84\x19\x52\x1c\x17\x9d\xaf\xfd\xcf\xd3\xfe\xa3\x5f\x7e\xff\x15\x00\x00\xff\xff\x16\x67\x37\xd5\x35\x23\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 9013, mode: os.FileMode(420), modTime: time.Unix(1507853247, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\x03\x31\x14\x85\xf7\xf3\x14\xd7\xa9\x5d\x26\x33\x2f\xe0\xaa\x95\xe2\xc6\x85\x08\x2e\x25\xd3\xdc\xd8\x4b\x66\x92\x21\x3f\x2a\x86\xfb\xee\x32\x69\x11\x0a\x63\x77\x87\xc3\x77\xbe\xc5\xd9\xdc\x75\x03\xb9\x6e\x50\xf1\xd4\x6c\xee\x41\x3c\x43\x29\xf2\x55\x45\xfb\xa4\x99\x6b\xe3\x97\xe6\xcd\x07\xbb\xa7\xc0\xdc\x99\xec\x1c\x8e\x22\x26\xed\x73\xaa\x00\xfe\x07\x60\x08\x4d\x29\x64\xc0\x21\xc8\xdd\x9c\x23\xf4\x20\x98\x9b\x52\xe6\x40\x2e\x19\x68\x97\xf9\x8c\x30\xcd\x04\x5b\xdd\x9e\xa1\x0a\x08\x40\xa7\x6b\xba\xcc\x5f\xd4\x74\x18\xa0\x97\x6b\x86\x11\x4e\xef\x9f\x13\x4e\x0f\x5b\xd9\x9b\x43\x7b\x81\xd7\x3d\x7b\x8a\xf6\xa6\xc8\x44\xfa\xc1\x3f\xd3\x19\xbf\x52\x35\xa5\xc8\xc7\x6f\x3c\xe6\xa4\x86\x11\x99\xe1\xcb\x07\x8b\x01\x42\x76\x20\xc4\xd1\x3b\x43\x1f\xcb\x23\xbb\x9a\x98\x41\x88\xa4\xa2\x15\xa4\xaf\xae\xfd\x0d\x00\x00\xff\xff\x24\x76\x8a\x2a\x79\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 377, mode: os.FileMode(420), modTime: time.Unix(1505922697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xcd\x6e\xe2\x30\x10\xc0\xf1\xbb\x9f\x62\x84\xb4\x47\x67\x79\x81\x5c\x16\x22\xc4\x65\x91\x68\xd4\x8f\x53\x64\xe2\x49\xb0\xe2\x8c\x61\x6c\x87\x56\x91\xdf\xbd\x0a\x20\x2a\xaa\xd2\xdb\x24\xf3\x9f\x9f\x1c\xc9\x0c\xc8\x1e\x21\x87\x41\x91\xb1\x56\x89\x16\x03\xd2\x00\x39\x94\x1c\x51\xe0\x3b\xd6\x31\xa8\x9d\x9d\x92\x71\xcc\x8a\xdb\x77\x4a\x42\x71\x1b\x7b\xa4\xe0\x21\x87\x93\xe3\x0e\x19\x38\x12\x48\x59\x3b\x6a\x4c\x3b\xf5\x8b\xf3\x94\x12\x48\x19\x94\xef\xa4\xd1\xd3\xdf\x52\xf9\x6e\xad\x53\x12\xd6\xb5\x17\xf7\xc5\x71\xb7\x34\x9c\xd2\xdf\xda\x91\x76\x2c\x71\x40\x0a\xd2\xba\x56\x20\xb3\xe3\xef\x55\x13\x89\xd0\x4a\x1f\x34\x32\x0b\x17\xc3\x21\x86\xc7\x8d\x8b\x41\xf8\xbd\x8b\x56\x57\x81\x15\xf9\x06\xb9\x6a\x8c\xc5\xe9\xe1\x6f\xc5\x93\x38\xed\x91\xaa\xe0\xbe\x96\x37\x70\xf3\xbf\x2a\x5e\xd7\x65\xb5\xd9\x56\xc5\xf3\x7a\x51\x8a\x71\x34\x0d\x10\x42\xb6\x38\x44\x0f\x73\x90\x29\x89\x71\x3c\xb0\xa1\xd0\xc0\x8c\xf1\x18\xd1\x87\xaa\x9e\x96\x39\xfc\xd1\xb3\x4b\x78\x8e\x24\x20\xe9\xf3\x74\x25\xb6\xaa\x5f\xed\x60\x9e\x3d\x52\x7a\xec\x1d\x7f\x4c\x4e\x36\x6f\x60\xf5\x6f\x76\x3d\xf9\x59\x5b\x1a\xdf\xfd\xca\x69\xe3\xbb\x3b\xec\x72\x71\xa7\x89\x63\xc4\x88\xe2\x33\x00\x00\xff\xff\x5f\xc0\xd7\xf8\x18\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 536, mode: os.FileMode(420), modTime: time.Unix(1505922697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xcf\x4a\x03\x31\x10\xc7\xf1\xfb\x3e\xc5\xd8\xd2\x63\xb2\xeb\x55\xd8\x8b\xad\x88\x17\x11\x15\x3c\x27\xcd\xa4\x86\xec\x4e\x96\xfc\x41\x21\xcc\xbb\x4b\x77\x17\xa4\x60\xbd\x0d\xc3\x97\xcf\xe1\xb7\xbd\x69\xb5\xa3\x56\xab\xf4\xd9\x6c\x5f\xee\xdf\x40\x3c\x43\xad\xf2\x5d\x25\xff\x64\x98\xd7\x5f\x38\xff\x3e\x42\xf4\x07\x17\x99\x5b\x5b\x88\x70\x10\x29\x9b\x50\xf2\x9a\xe0\xb5\x04\x63\x6c\x6a\x75\x16\x08\x41\xee\xa7\x92\xa0\x03\xc1\xdc\xd4\x3a\x45\x47\xd9\xc2\x66\x01\x06\xa0\x60\x30\xf5\xb7\x77\xd3\x44\xfd\xce\x6c\x96\x7a\x2e\x05\x20\x99\xf9\x5a\x9d\x57\x35\x3e\x6a\xe8\xe4\x35\x6a\xc4\xb1\xdf\xc9\xce\x9e\xf4\x66\x8d\xff\x76\x0e\x2e\xf9\x7f\x21\xeb\x06\xfc\x95\x96\xfc\x82\x6a\x6a\x95\x0f\xdf\x78\x2c\x59\xe9\x01\x99\xe1\x2b\x44\x8f\x11\x62\x21\x10\xe2\x18\xc8\xba\xd3\x79\x9a\xfd\x7c\x31\x83\x10\x59\x25\x2f\x9c\xb9\xd8\xf9\x27\x00\x00\xff\xff\x80\x45\x84\x4d\x88\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 392, mode: os.FileMode(420), modTime: time.Unix(1505922697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcf\x6a\xc3\x30\x0c\x87\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\xe9\xe8\x76\xdd\x0a\x3b\x3b\x8d\xb2\x79\x6e\x64\x23\xdb\x6c\x60\xf4\xee\x23\x69\xa1\x29\xac\xf4\xf6\xc3\xfe\xf4\xa1\x3f\xab\x87\xba\x33\x54\x77\x3a\x7c\x15\xab\xf7\xcd\xd3\xbe\x7d\x01\xa5\xbe\x5d\xa7\x48\x8f\x08\x39\x57\x7b\x1d\xec\x6b\x2f\xb2\xf8\xa6\xa8\x83\x0d\xf0\xb8\x78\x42\x66\xc7\x13\xfe\xe1\xd8\x6e\x0d\x8b\xd4\x43\x22\xc2\xa3\x0a\xb1\x47\xe6\x05\xea\x52\xf4\x29\xde\x62\x5d\x8a\x45\xce\x66\x00\x42\xa8\x5a\x9f\x02\x34\xa0\x44\x8a\x9c\x3d\x1b\x8a\x03\x94\x17\xd3\xc1\xa7\xa0\x3c\xb2\x9a\xfa\x81\x75\x5f\x9e\x2a\x66\x5a\x01\x52\x3f\xa7\xb3\xeb\x4d\x8f\xbb\x0e\x9a\xea\xb6\x6e\xc4\x11\xd6\x55\x33\xec\x36\xe5\x19\xff\xdf\xb4\x35\xc1\xde\x51\xc5\xd1\x5f\x54\x27\xfe\xca\x55\xe4\x5c\x3d\xff\xe2\x21\x45\xdd\x1d\x51\x04\x7e\x1c\x5b\x64\xe0\x44\xd3\x5c\x8e\x06\xf3\x39\x6d\xa8\x9d\x93\xc8\xa4\xd4\xc1\x2a\xd3\x5f\x9d\xe4\x2f\x00\x00\xff\xff\x36\x8f\xbd\x5a\xbe\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 446, mode: os.FileMode(420), modTime: time.Unix(1505922697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml": configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt": configHtcondorTemplateTxt,
	"config/pbs-template.txt": configPbsTemplateTxt,
	"config/slurm-template.txt": configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"default-config.yaml": &bintree{configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": &bintree{configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt": &bintree{configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt": &bintree{configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt": &bintree{configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

