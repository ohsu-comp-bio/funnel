package mocks

import context "golang.org/x/net/context"
import pbf "funnel/proto/funnel"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() {
	_m.Called()
}

// GetQueueInfo provides a mock function with given fields: ctx, in, opts
func (_m *Client) GetQueueInfo(ctx context.Context, in *pbf.QueuedTaskInfoRequest, opts ...grpc.CallOption) (pbf.Scheduler_GetQueueInfoClient, error) {
	ret := _m.Called(ctx, in, opts)

	var r0 pbf.Scheduler_GetQueueInfoClient
	if rf, ok := ret.Get(0).(func(context.Context, *pbf.QueuedTaskInfoRequest, ...grpc.CallOption) pbf.Scheduler_GetQueueInfoClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pbf.Scheduler_GetQueueInfoClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pbf.QueuedTaskInfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorker provides a mock function with given fields: ctx, in, opts
func (_m *Client) GetWorker(ctx context.Context, in *pbf.GetWorkerRequest, opts ...grpc.CallOption) (*pbf.Worker, error) {
	ret := _m.Called(ctx, in, opts)

	var r0 *pbf.Worker
	if rf, ok := ret.Get(0).(func(context.Context, *pbf.GetWorkerRequest, ...grpc.CallOption) *pbf.Worker); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbf.Worker)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pbf.GetWorkerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkers provides a mock function with given fields: ctx, in, opts
func (_m *Client) GetWorkers(ctx context.Context, in *pbf.GetWorkersRequest, opts ...grpc.CallOption) (*pbf.GetWorkersResponse, error) {
	ret := _m.Called(ctx, in, opts)

	var r0 *pbf.GetWorkersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pbf.GetWorkersRequest, ...grpc.CallOption) *pbf.GetWorkersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbf.GetWorkersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pbf.GetWorkersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobLogs provides a mock function with given fields: ctx, in, opts
func (_m *Client) UpdateJobLogs(ctx context.Context, in *pbf.UpdateJobLogsRequest, opts ...grpc.CallOption) (*pbf.UpdateJobLogsResponse, error) {
	ret := _m.Called(ctx, in, opts)

	var r0 *pbf.UpdateJobLogsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pbf.UpdateJobLogsRequest, ...grpc.CallOption) *pbf.UpdateJobLogsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbf.UpdateJobLogsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pbf.UpdateJobLogsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorker provides a mock function with given fields: ctx, in, opts
func (_m *Client) UpdateWorker(ctx context.Context, in *pbf.Worker, opts ...grpc.CallOption) (*pbf.UpdateWorkerResponse, error) {
	ret := _m.Called(ctx, in, opts)

	var r0 *pbf.UpdateWorkerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pbf.Worker, ...grpc.CallOption) *pbf.UpdateWorkerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbf.UpdateWorkerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pbf.Worker, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
