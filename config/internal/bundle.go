// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// config/htcondor-template.txt
// config/slurm-template.txt
// config/kubernetes-template.yaml
// config/gridengine-template.txt
// config/default-config.yaml
// config/pbs-template.txt
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x11\xd2\x5d\x26\x97\x17\xc8\xa6\x80\x10\x9b\x22\xd1\xa8\x3f\x2b\xcb\xe0\x49\xb0\xe2\x8c\x61\xec\x09\xad\xa2\xbc\x7b\x15\x40\xad\xa8\x4a\x77\x47\x3e\xdf\xf9\x3c\x42\xae\x43\x8e\x08\x05\x74\x86\x9c\xf7\x46\xd5\x98\x90\x3a\x28\xa0\x64\x41\x85\xef\xb8\x93\x64\xb6\x7e\x44\x2a\x21\x42\xaf\x0c\xd7\xd2\x22\xa5\x08\x05\x9c\x02\x37\xc8\xc0\x42\x90\x65\xc9\xc4\x66\x35\x87\xbe\xcf\xcb\x31\xd9\x61\x50\x3e\xd4\x50\x8c\x2f\x2f\x81\x9b\xb9\xe3\x61\xf8\xbf\x0b\x64\x03\x67\xd8\x21\xa5\xcc\x87\x5a\x21\x73\xe0\x9f\xd4\xe5\xaf\x2c\x26\x8b\xcc\x2a\x48\x3a\x48\xba\xcf\x04\x49\x2a\xee\x83\x78\xab\x13\x1b\x8a\x15\xb2\xae\x9c\xc7\xf1\xc4\xb7\xc5\x93\x3a\xed\x91\x74\x0a\xdf\xe5\x97\x70\xfd\xa8\x17\xaf\xab\x52\xaf\x37\x7a\xf1\xbc\x9a\x95\xaa\xef\x5d\x05\x84\x90\xcf\x0e\x12\x61\x0a\xd9\x30\xa8\xbe\x3f\xb0\xa3\x54\xc1\x84\xf1\x28\x18\x93\xde\x8d\x65\x01\xff\xec\xe4\x02\x9e\xa1\x0c\x90\xec\x39\x5d\x15\x1b\xd3\x2e\xb7\x30\xcd\xef\x59\x5a\x6c\x03\x7f\x8c\x9e\x7c\x5a\xc1\xf2\x61\x72\x9d\xfc\x6e\x9b\xbb\xd8\xfc\xa9\xb3\x2e\x36\x37\xb2\xcb\xe2\xc6\xa6\x8e\x82\x82\xea\x33\x00\x00\xff\xff\x61\xe0\x01\xde\xf9\x01\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 505, mode: os.FileMode(416), modTime: time.Unix(1706586711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x8b\xea\x30\x10\xc7\xef\xfd\x14\xf3\xaa\xe2\x29\x8d\x5e\x1f\xbc\x83\x5a\x50\x1f\xef\xb1\x8b\xba\xec\x51\xda\x26\xd5\x6c\x4d\x5a\x66\x12\xf6\x50\xf2\xdd\x97\xb4\x82\x5d\x51\xf6\x36\xe4\xff\x9b\x5f\x86\x99\xd1\x2f\x9e\x2b\xc3\xf3\x8c\xce\xd1\x68\xbf\x5c\x1c\x56\x1b\x60\xec\xa3\xce\x99\xc9\xb4\x84\xb6\x4d\x0e\x19\x55\x5b\xe1\xfd\x20\x36\x36\xa3\x8a\x60\x3e\x78\x92\x88\x35\x06\xfc\xbd\xc6\x2a\x55\xe8\x3d\x2f\x9d\x31\xf2\xc2\xc8\x0a\x89\x38\x40\x6b\x67\x1b\x67\x9f\xb1\xb5\xb3\x03\xf6\x84\x92\x40\x28\xaa\x7e\xcf\xa3\xb6\x55\x25\x18\x09\xc9\xaa\x71\x04\x33\x60\xde\x47\x6d\xdb\xa0\x32\xb6\x84\xf8\xd6\x53\x34\x8e\x58\x23\x91\x85\x29\x61\x22\xe2\xbe\xa3\xa3\x19\x48\x23\xba\xea\xea\xda\x65\x7a\x9d\xc3\x2c\x79\xae\xd3\x52\xc3\x24\x99\x95\xeb\x65\x7c\xc5\x1f\x9b\x52\x45\xd5\x0f\x2a\xab\x9b\x9b\xaa\xe7\xbf\xb9\x22\x42\x67\x80\x3b\x42\x7e\xa9\x8b\xec\xd2\x9d\x46\x57\x42\x21\xa3\x02\x33\x5b\x9c\x13\x3a\x47\xfb\xd5\x2e\xf8\x8e\xaf\x8b\xc3\xe6\x4f\xcc\xb5\xb1\xfc\x9a\xf2\x71\xbb\xff\xf7\xb6\xfb\x7f\xfc\xfb\xb2\x3c\x6e\x53\x1f\x47\x85\x80\xf1\x90\xef\x7f\x08\xd7\x06\x56\xc0\xb4\x5f\x3b\x7c\xd6\x58\x49\x84\x10\xb1\x6e\x6b\xdb\x74\x78\xf9\x50\x2f\xf0\x44\xde\x4f\x43\x2e\x75\xc3\x84\xc2\x3b\x71\x21\x80\x3d\x9c\x1f\xf5\xdd\xfc\x5f\x01\x00\x00\xff\xff\x1e\x00\x5c\xc6\x73\x02\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 627, mode: os.FileMode(416), modTime: time.Unix(1711568413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configKubernetesTemplateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xcd\x6e\xdb\x3c\x10\xbc\xeb\x29\x16\x0e\x72\x94\xa5\x5c\xbe\x03\x6f\x41\x1c\xe4\x4b\x51\x2b\x46\x11\xf4\x4e\xd1\x2b\x9b\x90\xf8\x53\x72\xe9\xd6\x30\xf4\xee\x85\x44\x29\x90\xac\x3a\x2d\x4f\xe4\x8e\x76\x66\xb8\x1c\x71\x2b\xbf\xa3\xf3\xd2\x68\x06\x25\x27\x71\xcc\x4e\x0f\x49\x2d\xf5\x9e\xc1\x17\x53\x26\x0a\x89\xef\x39\x71\x96\x00\xdc\xdd\xc1\xe6\x0d\x8a\xb7\x77\x78\xfa\xff\xb1\x78\x79\x86\xe2\x71\xfb\x9c\x00\x68\xae\x90\xc1\xe5\xb2\x7e\xe7\xbe\x7e\xdd\xb7\xed\x50\xf3\x96\x8b\x08\x14\xe3\xa9\x6d\x13\x6f\x51\x30\x48\x00\x4a\x2e\x6a\x53\x55\x5f\xa5\x92\xc4\x20\x4f\x00\x84\x51\xb6\x41\x92\x46\x7b\x06\x0f\x09\x00\xa1\xb2\x0d\x27\xec\xd4\x01\xfa\xce\x7e\x07\xe0\xd0\x13\x77\xb4\x33\x8d\x14\x67\x06\x05\x9e\xd0\x0d\x90\x30\x9a\xb8\xd4\xe8\x7c\x2f\x13\x57\xfa\xe1\xd2\x3a\xa9\xa9\x82\x55\x15\xb4\xc6\x26\xfd\x69\x5c\x8d\x2e\xbd\xf7\x2b\x98\xfa\x1f\x97\x54\xfc\x80\x0c\xcc\xd1\x87\xce\x5d\x29\x4d\x36\x34\xd6\xa1\x44\xa7\x91\xd0\x0f\x1c\xac\x73\xea\xe9\xba\x79\x17\x9a\x66\xb4\xf9\x5a\x15\x86\x76\x0e\x3d\xea\xe9\x77\xdc\x1d\x3c\x9b\x9c\x3b\xbb\x83\xbf\xd5\x75\x39\x6a\x2d\xca\x2e\xe8\x45\x2d\x4d\x85\xd1\x95\x3c\x2c\x80\x0c\x49\x64\x11\xcb\xe6\x63\x88\xc5\xf5\x59\x2d\x85\xd3\x94\xba\xf1\x6c\xae\x81\xf9\xbb\x8f\xcb\xa1\x37\xc1\x09\xbc\xba\x57\x07\xfc\x08\xe8\x69\x51\x07\x10\x36\x74\xef\x23\x2b\xd0\x08\xeb\x27\x1b\x3c\xe4\x90\xb6\xed\xe5\xd2\x1f\xba\x0d\x60\xe3\x11\xba\xdd\xea\x21\xcf\xd5\xaa\xdb\xa1\x9e\x2b\xc7\xa5\x50\x19\x77\x9e\xf0\x7d\xe3\xea\xa5\x84\x7c\x3d\x50\x8e\x29\xb8\x5f\xe7\xd5\xcb\x6a\x80\x7b\xba\xc6\x63\x14\xf8\x6f\xfb\x09\x3f\xda\x23\x2a\x74\xbc\x49\x3d\x19\xd7\x67\xe4\x43\x6a\x23\x7d\xfd\x99\x56\xc4\xe7\x62\x79\xfe\x67\xb5\x93\x69\x82\xc2\xad\x09\xfa\x7a\x64\x37\x13\x3d\x18\xba\x19\xe9\x7e\x3c\x1d\xe1\x8e\xd3\x71\xda\x9f\x19\x4b\x43\x1e\xa6\xb1\x48\xf7\xd2\x65\xb7\xc9\x46\x1f\x31\x3a\x69\x34\x7c\x5b\x6e\x92\xbd\xc9\x47\x1e\x45\x70\x92\xce\x4f\x46\x13\xfe\xa2\xf9\x4d\xad\x93\x27\xd9\xe0\x01\xf7\x0c\xc8\x05\x4c\x92\xe9\x6c\xfe\xe9\x2f\xff\xdb\x4c\x50\x59\x3a\x6f\xa4\x63\x70\x69\x17\x6c\xb7\x6e\x16\xeb\x5b\x6e\xe7\x76\x63\xd3\x20\x3c\xdc\xf4\x77\x00\x00\x00\xff\xff\x89\x49\x01\x9b\x66\x05\x00\x00")

func configKubernetesTemplateYamlBytes() ([]byte, error) {
	return bindataRead(
		_configKubernetesTemplateYaml,
		"config/kubernetes-template.yaml",
	)
}

func configKubernetesTemplateYaml() (*asset, error) {
	bytes, err := configKubernetesTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/kubernetes-template.yaml", size: 1382, mode: os.FileMode(416), modTime: time.Unix(1706586711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\xc4\x30\x14\x85\xf7\x79\x8a\x6b\xc7\x59\x26\xed\x0b\xb8\xb2\x30\xb8\x71\x21\x82\x4b\x69\xc9\x0d\x13\x32\xf9\xe1\x26\x51\x30\xe4\xdd\xa5\x69\x11\x0a\x75\x76\x97\xc3\x77\x3e\xb8\xe7\xf4\xd0\xcf\xda\xf5\xf3\x14\xaf\xec\xf4\x08\xfc\x15\x4a\x11\xef\x53\x34\x2f\xb2\xd6\x96\xf8\x25\xf9\xf0\x64\x46\x4d\xb5\xf6\x2a\x3b\x87\x37\x1e\x93\xf4\x39\x35\x00\xff\x03\x90\x88\x95\xa2\x15\x38\x04\xf1\x1c\x72\x84\x01\x78\xad\xac\x94\x40\xda\x25\x05\xdd\x52\x0f\x08\x36\x68\x38\xcb\x6e\x85\x1a\xc0\x01\x9d\x6c\xd7\x56\x7f\x9b\xec\x65\x86\x41\x1c\x19\x6e\x70\xfd\xfc\xb2\x68\x9f\xce\x62\x50\x97\x6e\x83\x8f\x3d\xa3\x8e\xe6\xae\x48\x45\xfd\x83\x7f\xa6\x15\xdf\xa9\xd8\xfa\x20\x7c\x7b\x32\x48\x40\xd9\x01\xe7\x69\x59\x6c\xdc\x6d\xf7\x1b\x00\x00\xff\xff\xcf\x92\x30\x7f\x5a\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 346, mode: os.FileMode(416), modTime: time.Unix(1706586711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x73\x1b\x39\x72\x7f\x9f\x4f\xd1\x11\xf7\x2a\xbb\x55\xfc\xa7\xdd\xf2\x25\xc7\x2a\x3d\x48\x94\xd6\x56\x2c\x7b\x19\x91\x8e\x93\x27\x17\x66\xd0\xe4\x60\x89\x01\x66\x01\x8c\x68\xda\xf1\x77\x4f\x75\x03\x33\x1c\x4a\xf2\xda\x77\x27\x57\x6d\x92\xf3\x8b\x45\x4c\xa3\xd1\xe8\xbf\xbf\xee\x99\x01\xac\x4a\x04\x23\x2a\x04\xbb\x86\x50\x22\x88\x22\xa8\x3b\x04\x8f\xee\x0e\x1d\x48\x11\x44\x2e\x3c\x42\x2e\x8a\x2d\x1a\x99\x0d\xe0\xfc\x4e\x28\x2d\x72\xdd\xad\xf9\x19\xe4\x56\x07\x99\x0f\x21\x17\x72\x83\x6e\xc8\xdb\x7c\xb0\x0e\x87\x20\xf7\x46\x54\x96\x1e\xa2\x16\x3e\xa8\x62\x08\x95\x35\x1b\x2b\xf3\xec\x32\x31\x6f\xf7\x67\xd9\x67\xc5\x29\x6c\x55\x37\xe1\x4b\x62\x68\x5b\x08\x3d\x84\x32\x14\xd6\x48\xeb\x86\xe0\x75\xe3\xaa\x21\xd4\xb9\x1f\xc2\xc6\x29\x89\x66\xa3\x0c\x0e\xa1\x12\xa6\x21\x4a\xb1\xf3\xa3\x5c\x84\xa2\xcc\xe6\xf1\x80\xc4\xe3\x77\x24\xc1\x3b\x34\x01\x76\x4e\x05\x74\xed\xd1\xdf\xfb\x1f\xc6\x9f\x15\x69\x33\xfc\xdb\xd4\x33\x84\xad\x58\x6f\x45\x76\x45\x07\xbe\xe5\xf3\xfc\x0c\x32\x80\x51\xab\x2e\xfa\x53\xdb\x4d\x96\xdd\xd8\xcd\x06\xdd\x2c\x03\x18\x00\xfd\xad\xcc\x06\x34\xde\xa1\xf6\x33\x90\x98\x37\x9b\x21\x28\xb3\xb6\x43\x40\xe7\xac\xcb\x00\x6e\xe8\xe1\x8c\x17\x79\x13\xb3\x27\x5e\x1e\x82\x85\x50\x2a\x0f\xb5\x08\xe5\x18\xae\xd7\x80\x55\x1d\xf6\xc3\xf8\x50\x38\xe4\xab\x07\x34\x44\xe8\x83\x44\xe7\xc6\x19\xc0\x2f\x4d\xa8\x9b\xf0\xb3\xd2\x38\x83\x93\x93\x2c\x5b\xb2\xfb\x44\x89\x5e\x58\x1f\xfa\x8a\xfc\xb9\x31\x06\x75\xf2\x30\xda\x4c\x04\xaf\x45\xd5\x2a\xbf\xb4\x3e\x64\xbc\x73\x61\x5d\x80\xc6\xa3\x84\xb5\x75\xf0\x62\xb5\x5a\x90\x23\x54\x8d\x51\x85\x08\xca\x1a\x10\x46\x32\xcb\x1d\xe6\x20\x85\x2f\x73\x2b\x9c\x64\x96\xab\xd5\x82\x76\xcf\xe0\x5f\xa7\xd3\xe9\x63\xdc\x6e\x17\xf3\x63\x66\xb4\xed\x76\x31\x8f\xbb\xfe\x32\xfd\x4b\xda\x75\x8b\xbf\x35\xca\x91\x49\xbd\x2a\x40\x34\xa1\x44\x13\xda\xf3\x89\x11\x9d\x9f\xa2\xe5\x7c\x71\xed\xa1\xf1\xa4\x7e\x01\xb5\xf0\x7e\x67\xa3\x38\x03\x52\x24\x1d\x4d\xae\xb7\x45\xf0\x8d\x43\x52\x60\xed\x6c\x8d\x4e\xef\xc1\xa1\x0f\x4e\x15\x01\x44\x51\xa0\x4f\x56\x20\xb7\x37\x6b\xb5\x81\xb5\xd2\xc8\x5c\xbe\xc7\xf1\x66\x0c\x45\x59\x59\x09\x7f\x9e\x4e\x61\xcd\xaa\x1c\x47\xb2\xf1\xbe\xd2\x3f\x30\xd9\x05\xc9\x7a\xde\x84\x32\x1a\x80\xfc\xe4\x8d\x47\x37\x23\x11\xdc\x69\x5a\x03\x58\x24\x09\x67\x20\xf2\xe2\xf4\xc7\x9f\x1e\x21\xfe\xf1\x11\xe2\xb5\xb5\xb9\x70\x51\x3b\xd7\xa6\xd0\x8d\x44\x10\x70\x32\x17\x45\x89\xa3\xb9\x35\xc1\x59\x3d\x03\x63\x47\xec\xe2\x27\xd1\x6e\x25\x0a\x89\x0e\x94\x81\xe7\x18\x26\x37\xca\x07\xba\x73\x6d\x8d\x47\xcf\x9c\x58\x1b\x31\xb8\x0a\x51\x94\xa4\xc3\x7c\x0f\xca\x04\x74\x15\x4a\x25\xdc\x9e\xb5\xac\x0a\xf4\xa4\xd1\x4b\xe5\x29\xd2\x88\x37\x1f\x3c\x83\xe0\x1a\xcc\xb2\xdb\xc5\x7c\xae\x15\x9a\x10\xaf\x4e\x56\x4e\xc6\x11\x52\x3a\x52\x6d\x06\x10\xbd\xf3\x3c\x2e\xf4\xbc\x6e\x76\x30\xfb\xdc\xa1\x24\x43\x0b\xed\xd9\xca\x17\xff\x8b\xcc\x1f\xcd\x17\x1f\x46\xcf\xbf\x6f\x68\x5e\x2d\xac\x31\x58\xf0\x45\x82\xaa\xd0\x36\x81\x64\x5d\xc5\x3f\x67\xf0\xe7\xa9\x8f\x74\x94\x08\x2b\xf1\x5e\x55\x4d\x05\xa6\xa9\x72\x74\x1c\xc9\xaa\x42\x0f\xa1\x14\x01\x04\x38\xfc\xad\x41\x1f\x60\xa7\xb4\x86\x1c\xc1\x61\x70\x2a\x05\xda\x5a\x28\xdd\xb8\x68\xb5\x01\xb3\x87\x1c\xc3\x0e\xd1\x24\x32\x52\xb0\xd6\x76\xe7\x41\x18\xc0\xf7\xb5\x35\x51\xf1\x9c\x45\xed\x7a\x0d\x3e\x08\x17\x58\xab\x01\x9e\x81\x47\xca\xee\xd1\x69\x9a\x9a\x54\x75\x0a\x95\x32\x4d\x20\x1d\xbd\x12\xef\x6f\x23\xd3\x19\x9c\x4e\xdb\x34\xee\x8b\x12\x65\xa3\xc9\xff\xfc\x21\x03\x90\x86\x5f\x71\x21\xb8\x5f\x5e\xc6\x90\x2d\xdb\x2d\x6d\x0e\xdb\x81\x5d\xa7\xb4\xe7\x1a\x03\xa2\xcf\x34\xa0\xeb\x52\x48\xbb\xf1\x56\x50\x35\x39\xf5\xdd\xf6\x4a\x98\x3d\x04\xe1\xb7\x6c\xde\x76\x37\x45\x84\x35\xf8\x38\x8f\x79\xd9\x98\x2d\x5f\xa4\x65\xa2\xad\xd9\xd0\xf6\x9d\x50\xa1\x53\x63\x53\x4b\x11\xd0\x43\x8e\x6b\xeb\xc8\x56\x6e\x1b\x7d\xd0\x58\x89\x20\x51\xb0\x13\xbe\xb6\x12\x17\xca\x6c\x3a\x03\x9f\x56\x8f\xb3\x25\xdd\xa4\xbd\x9c\xe3\x85\x0b\xc3\xfb\xbc\x49\x77\x0f\xb8\x5f\x1b\x15\x3a\xee\xcf\xaa\x2c\xa3\xc5\x59\xeb\xff\xa9\x8e\x24\xce\xd7\x97\x9d\xb3\x88\x26\xd8\x4a\x50\x50\x69\xbd\x87\x0d\x1a\xd2\x04\x32\xd7\xeb\xcb\x58\x4e\x12\x8b\xee\xd4\x52\xd0\x6d\xd1\x80\x92\x1a\x59\x60\xba\x01\x92\x4d\x85\x61\xb2\xe4\xd1\x43\x50\xc9\x2b\x7d\xd9\x04\x90\x76\x67\xa2\x1f\x8e\x4e\xa1\x42\x61\xc8\x83\xd1\x21\xf9\x85\xb1\x5d\x18\xc0\xb4\x7d\x18\x17\x40\x55\x9c\x83\x02\xea\x3d\x88\x75\xc0\xe8\x3c\x6b\xe5\x7c\x60\x93\x1e\x05\xce\xe8\x34\x05\xce\x39\x6b\x25\x1e\x7f\x7c\xc9\xe0\xf6\xa4\x5b\x89\x01\x8b\x00\x3b\x0a\x22\x87\xde\x36\xae\xc0\x58\x64\x45\x07\x25\x82\x05\x15\xc6\xc0\x0c\x2f\x71\xad\x0c\xa9\xff\xb6\x23\x56\xf1\xba\x7c\x50\xcc\x03\x4d\xf4\x23\xb0\x77\xe8\x08\xf2\xf8\x58\xcf\x73\x2c\xc5\x9d\xb2\x5c\x70\xbb\xed\x64\x1c\xce\x76\x8b\x37\xfe\x70\xe6\xb8\x5d\xad\x1b\x3f\x03\x4e\x88\x9c\x4b\xcf\x5f\x1d\x68\x86\x9c\xca\x2f\x5a\xd2\x5b\x51\x3d\xcf\x67\x30\x1d\x77\xd4\x97\xca\x6f\xc1\xd7\xa2\xc0\xcf\x6e\x22\x92\xde\xae\x01\xfc\xcc\x86\xdc\x8d\x18\xbb\x40\x68\xe8\xae\xe3\x87\xf1\xe7\xf7\xa6\x80\x9d\x0a\xe5\xe3\x70\xe2\x0d\x87\x43\x8c\xbf\x67\x3e\xcb\xde\x5a\xb7\x6d\xe3\x98\x10\x8a\x87\xc2\x21\x79\x18\xc8\xc6\x91\x36\x6b\x67\x29\xeb\xd2\x9f\xad\x4f\xb6\x20\x87\xd5\xab\x3c\x48\xe5\xb0\x08\xd6\xed\xe9\x00\x62\x78\xa9\xdc\x0c\xc6\x93\x98\x64\x47\x3b\xeb\xb6\x23\xa9\xdc\x5f\x75\x8d\xda\x6a\xcd\xbe\x5b\x08\x53\xd0\x0d\xd4\xc6\x08\x4d\x09\x63\x61\xb5\x56\x66\x73\xb8\xc2\x5f\xa3\x1c\x34\x92\x80\x99\x6d\xc2\x04\x9d\x63\xf7\x24\xf0\xd6\x65\x89\x54\x5b\x1e\xa8\x6d\x00\x4b\x0c\x21\x06\xb7\x62\xb2\x69\x54\x87\x43\xdf\xe8\x90\x3c\xcd\x93\xdb\xa3\x96\xe4\x50\x44\x1b\xb9\x4a\xca\x87\xca\x6c\x74\x0c\x3c\xe6\x76\x88\x13\x7c\x8f\x45\x13\xac\x03\x7c\xaf\x02\xd7\x81\x1b\xbb\xb9\x6f\x25\xda\xf2\x4a\xbc\x87\x7c\x9f\x84\x64\xf4\xc0\xfa\xe9\xdd\x26\xb9\x7b\x7b\xa9\xc4\x6b\x25\x94\x5e\xaa\x0f\x94\x6f\xa7\xd3\xe9\x14\x06\x70\x3a\x85\x97\x17\x91\xe9\x6b\xeb\xaa\x18\x74\x04\x14\xd9\x17\x40\xa2\x46\x3a\x46\x05\xcf\x4b\x74\x93\xce\xc4\x49\xf2\x28\x75\xa7\xe4\x15\x29\xc5\xd6\x1c\x5a\x32\x82\x8f\x54\xfe\xfa\x91\x75\x83\xe2\x0e\x3b\xff\x58\x0b\xed\x31\x4a\x71\xa3\x2a\x15\x62\x02\xeb\x4a\x68\x61\x4d\xd1\x38\x47\x90\x87\x12\x93\xb6\x42\xfa\x49\x53\xf3\xff\xb1\x96\x2d\x84\x13\x5a\xa3\x5e\x39\x61\xfc\x9a\x1b\x00\xae\x6a\xa3\xa7\xfd\x97\x0d\xa0\xed\xc5\xa8\x08\xcb\x89\x75\xc0\x6d\x07\xa4\xbe\x63\xf2\x42\x18\xa9\xd1\xf9\xa7\x3f\x3a\xbb\xb0\x3a\x5c\x5e\xcc\x12\x50\xa1\xa0\x8e\x0e\xda\xb5\x9e\x09\xfe\xd0\xb3\x47\x42\x2e\xfd\x1e\x53\xfb\x78\xc9\xcd\x54\xcb\xec\x42\x78\xe4\xbe\x23\x58\x2a\xfa\xec\x4a\x6d\xbb\x05\x81\x0d\x48\x69\x9b\xfe\x68\x49\x8f\x50\xd3\xf9\xdb\x25\x38\xdc\x28\x6b\x38\x65\xd2\x1f\x5c\x8d\xda\x67\xe7\x11\xab\x6d\x71\x0f\xd7\x97\x19\xc0\x4b\xdc\x1f\x3d\x5f\x62\xe1\x30\xb4\x64\x2f\x71\xcf\xc8\x93\xd6\x62\x51\xbb\x8a\x0d\x5f\xba\xb9\xc3\xb5\x7a\xdf\x17\x55\x19\x89\xef\xd1\xc3\xf7\xe4\xec\xc3\xd8\x77\xfa\x21\xd7\x3f\x4f\x38\xef\x9a\x9e\xc7\x6d\x47\x62\xbf\xb9\xbd\x69\x3b\xad\xd4\x52\x7a\x14\xae\x28\xfb\x19\xf2\xf6\x66\x06\x65\x08\xf5\x6c\x32\xe9\x81\xdf\x1f\xa7\x8c\x98\x9e\x5b\x4b\x81\x3c\xd7\xb6\x91\xec\x17\x31\x12\x39\xe6\x5a\xa3\x8c\xb3\xee\x01\xc9\xbf\x70\xf6\x57\x2c\x42\x77\xfd\xd6\x8e\xa2\x28\x6c\x43\x88\xbe\x8f\xa6\x55\xac\x30\x03\xf8\x85\xa3\x49\x68\x6e\x33\x6b\xeb\xbd\xe2\x1a\xd1\x27\x7e\x1c\x23\x48\xe5\x0b\x2a\x6f\x28\x99\xcf\xda\xd9\x2a\xde\xd7\xdc\x29\x67\x4d\x85\x86\xa1\x6c\x0f\xc3\x77\x9d\x29\x40\xf6\x8a\xfa\xeb\xd6\x49\xa8\x09\xf0\x50\x5a\xca\x68\xdc\xe5\xc7\xa6\x00\x7d\x0f\xdc\xa3\x4c\xba\xe3\xdc\xc5\x3b\x62\xe1\x1c\xb5\xbd\x7a\x5f\x8f\xb1\x52\xb7\xce\xab\xfc\xb1\x33\xb3\x43\x32\x04\xa5\x02\xa6\x0c\x24\x69\x7a\x19\x2f\x26\x66\xda\xc1\x8d\x4e\x37\x24\xe9\xd9\x78\xd5\xe2\x92\x24\x74\xc5\x5a\x4e\xa8\xfc\x1e\x90\x4b\xcd\x09\xe1\x56\x6e\xb8\x24\xec\x4a\x34\x51\x71\x0c\x60\xda\x3e\x80\x20\xa3\x91\xc0\x7d\x0d\xe1\x71\x42\xd7\xd4\x9f\x30\x9c\xe8\x90\x86\xa7\x4a\x69\x0d\xd9\x2c\xf6\x6d\x07\x51\x3e\xa0\xb3\xc3\xd8\xb8\x08\xad\xa1\x12\x7b\xc8\xb5\x2d\xb6\x24\x08\x92\x0c\x24\x15\x1d\x13\x05\x3b\xf4\x1f\x6d\x03\x98\x23\xa0\xa7\xc8\x54\xbe\x8c\x00\xb0\x0f\x27\xdb\xd6\x86\x55\x48\x92\xb6\x6d\x0d\xcf\x31\x5c\x74\x81\xe2\x5e\xdf\x46\x6b\xca\x28\xee\x27\x8e\xbb\x37\xe6\x27\x09\x7b\x5b\x73\x6c\x23\x49\x30\x0b\x25\xf5\x9f\xb4\x7e\x79\x48\x44\xa8\x59\xaa\x56\x8a\xe4\x51\x87\xf6\x8a\xc2\xfa\xa5\x58\x6f\xc5\xac\xeb\x32\x3b\x57\x61\xd2\x95\xad\x55\xd1\x99\xf2\x5b\x24\xf2\x34\xc8\x82\x8b\x34\x82\xfa\x06\x19\xfb\xc5\x6a\xce\xf3\xb5\x18\x41\xab\xc6\x19\xa0\x36\x8d\x13\x84\x0f\x22\x50\xff\x47\xb5\x4d\x69\x74\x63\x78\x5b\xa2\x01\x34\x94\x66\xe5\xb0\x85\x1d\x87\xc9\x0b\xfa\x03\x94\x7b\xb1\x98\x33\xcb\x43\x6b\x15\x2c\xac\x95\x91\x6d\xdf\xc4\xdd\xa6\x43\xf0\xa1\x29\xb6\xe4\x91\x02\x7e\x6b\xb0\xa1\x00\xe5\x73\x09\x63\x38\x67\x1d\x01\x12\x23\x53\x8b\x98\x60\x4f\x0b\x1b\x22\x25\x65\x26\x27\x09\xb2\xec\x7b\xe3\x84\xdb\x4e\xee\x34\x4f\x88\x13\xa0\xb4\x48\x60\x85\xfc\xbc\x3c\xe0\xad\xf2\xc1\x68\x92\x7f\x0b\x87\x3e\x1e\xc4\x71\x13\x2f\xfd\xcf\xbe\x1b\x5f\x26\x7f\x0f\xa5\xf5\xa4\xac\xda\xba\x70\xf0\xb7\x03\xd1\xd1\xc9\x54\xfa\x29\x08\x56\x58\xd5\x5a\x04\xec\xa5\xb4\x76\x69\x06\xff\xcd\xce\xd6\x18\x45\x9e\x87\x70\x06\x77\xc2\x28\xad\x05\x2f\x6f\x30\xa0\xb9\x83\x33\x58\xc5\xab\x41\xc2\x38\xdc\x67\x9c\xc1\xc7\x8f\xe3\xab\xee\xf7\xa7\x4f\x4c\x20\xdc\xa6\xa1\x74\xea\xe1\xac\xc5\x4e\xd4\xfd\x8e\x46\x69\x34\xf1\xf1\xe3\x78\xce\x7f\x7d\xfa\x04\xa3\x11\xe9\x77\xa4\x24\xad\xae\x84\xdf\x5e\xcb\xc4\x85\xe0\x27\xf3\x4f\xc8\xe8\xd3\xa7\x49\x9c\xd0\x8e\xb8\xaa\x8d\xb4\xdd\x44\x71\xc8\x76\xf7\x29\x53\xbd\x8f\xb3\x46\x26\xb3\x3c\x6c\xfc\x3c\x9d\x6d\x02\xd3\xf9\xd2\x36\x5a\xbe\x0b\x09\x3c\xbd\x5b\x33\xf8\x3f\x83\xff\xba\x5a\xf2\x73\xca\x83\xef\x82\x3d\x10\x74\x8c\x7f\x79\xfd\xee\xea\x3f\xaf\x57\xef\x7e\xb9\x7d\x77\xf5\x1f\xd7\xf3\x15\x93\x7f\xfc\xa8\xd6\x60\x10\xc6\xd4\x17\xc1\x14\x46\xe9\x76\x1f\x3f\xd6\x4e\x99\xb0\x86\x93\x34\x06\x79\x57\x10\xc1\x19\xfc\x49\x9e\x44\xe2\x8e\x70\x04\x68\x64\xf7\x2b\xb1\xe3\xde\x89\x9a\xa0\xdf\xe1\x58\x61\x45\xc8\xf4\x0c\xfe\x34\x9e\xae\xe1\xf9\xc5\x49\xda\xf6\xfb\x9c\x63\x83\xf5\x05\xd6\x92\x1a\xb5\x3e\xe3\xb8\xeb\x01\x67\xfe\xc9\xd1\x96\x65\x8b\x8b\xe5\x3f\x82\xff\x0f\x1a\xfc\x83\x7f\xca\x95\x99\xe4\xc2\x97\xf1\xe7\xe2\x62\x09\xa3\xd7\x0f\x62\x32\xae\xdb\x2f\xc5\x50\x24\xc3\x2f\x85\xe4\x97\x63\x23\x32\xd2\x11\xbf\x9e\x9d\xce\xea\xda\x9c\x3d\x41\x80\xb4\x6c\x2b\xac\xce\xc8\x85\x37\xf9\x13\x84\x46\xcb\x94\x12\xc6\x81\xeb\xef\xc5\xc5\xbd\xdc\xf9\x95\xb9\xf2\xfa\xf2\xc8\x2c\xd9\x73\xa7\xe4\x15\xbf\xa2\x9a\xfd\x6d\xb6\xfe\xee\x51\x4b\x7f\xf7\x35\x76\xfe\xee\x2b\xac\x4c\x44\x9d\x05\xbf\xd6\xee\xdf\xc1\xa8\x46\xa8\x6a\xf5\x14\xf9\x30\x4a\x50\xbe\xbb\x6b\xed\xfd\xfc\x29\xcc\x9d\x98\xae\xbd\xfa\x80\x1d\xd7\x6f\x6f\xee\xa5\x6e\x5c\xf5\x7f\x3b\x8f\xc6\x09\xc8\x1f\x2a\x91\x3e\xf3\x5f\x1b\x5b\x93\xe3\xe0\x5a\x5e\x9c\xaf\xe6\x2f\x60\x34\xfa\xd5\xe6\x23\x6e\x42\x1e\x44\x5a\x47\x62\xa2\xae\x4f\xef\x2d\x47\x80\xf3\xa5\x28\xeb\xc8\x13\x1e\xf9\x42\xe8\x7e\x45\x0c\x76\x1c\x09\x99\x8c\x6a\x74\xec\x8f\x4f\x12\x90\x1d\xeb\x0a\x2b\x06\x11\x4f\x02\x4e\x0e\x6c\x43\x55\x1f\xd8\x7e\xfb\x98\xe4\xd1\xcd\x85\x08\x45\x09\x12\x7d\xe1\x54\x9e\xdc\xfe\x78\xb8\xde\xb6\x96\xe7\x6f\x97\x10\xa9\xef\xbf\x42\xca\x5a\x3e\x4f\x1a\xe0\xdd\x79\xad\xf3\xdf\x0f\x6c\xc3\x8d\x36\xbf\xb4\x89\xf1\x7b\x88\xdd\x3f\x3c\xfe\xe9\x5f\xee\x51\xf4\x33\x80\x7f\xb3\x79\x7c\x09\xc2\x56\x28\x84\xe1\x99\x81\x0a\x25\xf2\x3b\x2b\xfe\xca\x20\x59\xa6\x12\x1f\xac\xe9\x5e\x75\xc0\x6b\x7a\xf6\xfd\xf9\xed\xeb\x1f\xe8\xca\x47\x7c\x66\x70\x92\xa2\x8a\x22\x5b\xe2\xfa\xa4\x3d\xeb\xdf\x29\x2f\xfe\x7d\xc7\x30\x8b\xe3\x13\x38\xdb\x9e\xdc\x9b\x31\xb6\x33\x3b\x5f\x63\xa1\xd6\x0a\x25\xfc\x6a\xf3\x98\x98\xe3\x67\x0e\x36\xbd\xb6\x60\x2a\x7a\x26\x0f\x8a\x50\x0f\x46\x94\x87\x61\x64\x7f\xe4\x38\x80\x97\x4d\x8e\xce\xf0\xf0\xfb\x6b\xfc\xbb\x47\xfe\xc0\xc1\x0f\xcf\x9e\xd4\xc5\x0f\x6c\x3f\xe7\xe3\xff\xdf\x9b\x80\x23\x2b\x92\xc3\xc5\xd7\x6c\xc1\x82\xaf\xc5\xce\x90\x73\xf8\x34\x5e\xcc\xe0\x40\xd0\x4d\x67\x63\xc2\x22\x17\x0a\xa9\xe6\x8d\x61\x89\x18\x47\xc2\x7e\x36\x99\x6c\x3b\xf6\x63\x65\x27\xd2\x16\x7e\xe2\x70\x8d\x0e\x4d\x81\x93\xee\x05\x6d\x8f\x6c\x24\x6a\x35\xb9\x3b\x1d\x9f\xfe\xcb\x64\x40\x1e\x7e\x77\x9a\x3e\xab\xea\x97\xd5\x74\x7a\xbf\xf4\xb6\x03\xcc\xba\x37\xf7\x3f\x92\xeb\xb1\x52\xfd\x2d\xa6\x66\xcb\x60\x9d\xd8\xe0\x37\x18\x96\x0d\xfe\x8e\xe1\xf6\xe7\x46\xdb\xd9\x00\x6e\x6c\x21\x62\x83\x02\x7e\xef\x03\x56\xe3\x8c\x97\xd2\x45\x62\x44\xbe\x2d\x55\x40\xad\x3c\x8f\x86\x79\x40\xdd\x7b\xcb\x45\x3a\xf7\xb0\x2b\x55\x51\xb6\xc1\xa8\x3c\x08\xad\xed\x0e\x65\x1a\xde\xa3\x8f\x23\xef\xb8\x78\xa9\x0e\xd3\xcc\xf1\x84\xa4\x78\xb1\x5a\x2d\xd2\x89\xdd\xa7\x15\xc1\x76\x6f\xb3\xa0\x6e\x72\xad\x0a\x88\x83\x97\x34\x66\xdd\x61\x0e\x77\x4a\x80\x80\xe7\x57\xab\xf6\xcb\x91\x71\xd6\x63\x35\x3b\x9a\x71\x53\x2a\x22\xc7\xfc\xde\xff\xd0\xdf\xe1\x8f\xc6\xc3\x3f\x4d\x7d\x96\xc5\x5c\xbc\xfc\x69\x76\x08\x67\xd9\x87\xa0\x4f\xf8\x21\xcb\xbd\xef\x4c\x9e\xea\x95\xd0\x00\xe6\x29\x0d\x23\xbf\x0d\x20\xbd\xb6\xdf\x12\xb2\x0c\xcb\x9f\xa0\x76\xf6\x4e\x49\x74\x1e\x7c\x53\x94\x20\x3c\xbc\x52\x46\xd9\xf6\xbd\xdd\x1c\xeb\x32\x1b\xc0\x73\x8a\x52\x55\x90\x32\xe2\x37\x5d\x07\x85\x70\x5a\x8b\x1f\x75\x5d\x19\x59\x5b\x65\xe2\xe9\x71\xa9\x15\x39\xfe\xea\x0b\x17\xdf\x0b\xf5\x6c\xf4\x98\x8e\xff\xb8\x6f\x7e\xb2\xe5\x4e\xad\xc3\xe3\x72\xbf\xf1\xe8\x5e\x7f\x66\xa0\x0f\x70\xde\x84\x92\x5f\x99\xa5\x3e\xc1\x08\x13\x7a\xd4\x71\x21\x7d\xaa\xd2\x96\xe1\xde\xf3\x01\x3c\x9b\x4e\xe1\xd5\x05\xc9\x55\x36\x66\xbb\x54\x1f\xf0\x62\x4f\x65\x93\x1e\xc4\x7f\x59\xf6\xf3\x91\xfb\x3f\x14\xf1\xf0\xd9\xce\xd4\x27\x89\x67\x70\x22\x8c\x35\xfb\xca\x36\xfe\x9e\xd8\xbd\xf5\xff\x09\x00\x00\xff\xff\xb8\xc1\x46\x1e\xe3\x2b\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 11235, mode: os.FileMode(416), modTime: time.Unix(1711589160, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xc1\x4a\xc4\x30\x10\xc6\xf1\x7b\x9f\x62\xec\xb2\xc7\xb4\xf5\x2a\xf4\xa2\x05\xf1\x22\xa2\x82\xe7\x86\x4c\x34\xa4\x9d\x84\x49\x82\x87\x90\x77\x97\xdd\x04\x64\xc1\xf5\x16\x86\x3f\x3f\xc8\x77\xb8\x19\xa5\xa1\x51\xae\xe1\xab\x3b\xbc\xdc\xbf\x81\x78\x86\x9c\x87\xf7\x35\xd8\x27\x55\x4a\xbb\xb9\xd3\xed\xc3\xb1\x5d\x0c\x97\x32\xea\x44\x84\x9b\x08\x51\xb9\x14\x5b\x82\xd7\x12\x64\xee\x72\x36\x1a\x08\x61\x78\xf0\x29\xc0\x04\xa2\x94\x2e\x67\xcf\x86\xa2\x86\xbe\x02\x1b\x90\x53\x18\xe6\xdb\x3b\xef\x69\x3e\xaa\xbe\xd6\xe7\x52\x00\x92\x3a\xbf\x9a\xf3\xba\xee\x8f\x12\xa6\xe1\x1a\xb5\xe3\x3e\x1f\x87\x49\x7f\xca\xbe\xc5\x7f\x3b\x8b\x09\xf6\x5f\x48\x9b\x0d\x7f\xa5\x9a\x5f\x50\x5d\xfd\x29\x7c\x3b\xb6\xc8\xc0\x89\x40\x88\x78\x9a\x6f\xb9\x18\xf2\x27\x00\x00\xff\xff\x94\x91\x42\x0b\x69\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 361, mode: os.FileMode(416), modTime: time.Unix(1706586711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/htcondor-template.txt":    configHtcondorTemplateTxt,
	"config/slurm-template.txt":       configSlurmTemplateTxt,
	"config/kubernetes-template.yaml": configKubernetesTemplateYaml,
	"config/gridengine-template.txt":  configGridengineTemplateTxt,
	"config/default-config.yaml":      configDefaultConfigYaml,
	"config/pbs-template.txt":         configPbsTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":      {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt":  {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":    {configHtcondorTemplateTxt, map[string]*bintree{}},
		"kubernetes-template.yaml": {configKubernetesTemplateYaml, map[string]*bintree{}},
		"pbs-template.txt":         {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":       {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
