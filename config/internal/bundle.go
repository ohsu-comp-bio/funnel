// Code generated by go-bindata. DO NOT EDIT.
// sources:
// config/kubernetes-pvc.yaml (309B)
// config/gridengine-template.txt (346B)
// config/pbs-template.txt (361B)
// config/slurm-template.txt (415B)
// config/kubernetes-pv.yaml (560B)
// config/kubernetes-executor-template.yaml (1.408kB)
// config/datastore/index.yaml (882B)
// config/kubernetes-configmap-template.yaml (419B)
// config/default-config.yaml (13.791kB)
// config/htcondor-template.txt (505B)
// config/kubernetes-template.yaml (1.754kB)

package config

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configKubernetesPvcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\x6a\xf3\x30\x10\x84\xef\x7a\x8a\x81\xff\xec\xfc\xe4\xaa\x6b\x28\xa5\x87\x84\x50\x8a\x73\xde\xca\xd3\x22\x6c\x4b\xaa\x56\x32\x2d\x26\xef\x5e\x6c\x6c\x4a\x8e\xb3\x3b\xf3\xc1\xf7\x0f\xb7\x98\x7b\xe6\xff\x4f\xdf\x74\xb5\xc4\x8c\x6b\x7b\x32\x92\x7c\xcb\xac\x3e\x06\x8b\xe9\x68\x7a\x1f\x3a\x8b\xeb\x72\xd1\xc2\x50\xda\x38\xd4\x91\xa7\x41\xfc\x68\x46\x16\xe9\xa4\x88\x35\x40\x90\x91\x16\x1f\x35\x04\x0e\x4d\x9a\x5c\x33\xcf\x87\x37\xd1\xfe\xa5\xbb\xdf\xb7\xb7\x26\x71\xb4\x98\x67\x1c\x2e\x7b\xc4\xfa\x1d\xe4\x9d\x83\x2e\x18\x40\x52\xda\x39\x6b\x2e\x2b\x64\x99\xfd\xf1\x34\xd1\x2d\x6d\x71\x8e\xaa\xe7\xd8\x71\x1b\x37\x78\xa5\x74\xb7\xec\x0b\xcf\x12\x7e\x0c\x90\xa9\xb1\x66\xb7\x17\x32\xbf\x2a\xb5\x6c\x09\xd0\x12\xb3\x7c\xd2\xe2\xf8\xec\x0d\x30\xad\x76\x97\x47\x97\x07\x95\xdf\x00\x00\x00\xff\xff\x01\x27\x69\xed\x35\x01\x00\x00")

func configKubernetesPvcYamlBytes() ([]byte, error) {
	return bindataRead(
		_configKubernetesPvcYaml,
		"config/kubernetes-pvc.yaml",
	)
}

func configKubernetesPvcYaml() (*asset, error) {
	bytes, err := configKubernetesPvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/kubernetes-pvc.yaml", size: 309, mode: os.FileMode(0644), modTime: time.Unix(1742330478, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe9, 0xc, 0x1f, 0x92, 0xa1, 0xb3, 0x7, 0x8, 0xb0, 0x29, 0x2f, 0x8e, 0x77, 0x9d, 0x10, 0x18, 0xc6, 0xcd, 0x90, 0xbf, 0xdf, 0x92, 0xf6, 0xf5, 0x81, 0x70, 0x47, 0xb6, 0x35, 0x85, 0x1a, 0x9d}}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\xc4\x30\x14\x85\xf7\x79\x8a\x6b\xc7\x59\x26\xed\x0b\xb8\xb2\x30\xb8\x71\x21\x82\x4b\x69\xc9\x0d\x13\x32\xf9\xe1\x26\x51\x30\xe4\xdd\xa5\x69\x11\x0a\x75\x76\x97\xc3\x77\x3e\xb8\xe7\xf4\xd0\xcf\xda\xf5\xf3\x14\xaf\xec\xf4\x08\xfc\x15\x4a\x11\xef\x53\x34\x2f\xb2\xd6\x96\xf8\x25\xf9\xf0\x64\x46\x4d\xb5\xf6\x2a\x3b\x87\x37\x1e\x93\xf4\x39\x35\x00\xff\x03\x90\x88\x95\xa2\x15\x38\x04\xf1\x1c\x72\x84\x01\x78\xad\xac\x94\x40\xda\x25\x05\xdd\x52\x0f\x08\x36\x68\x38\xcb\x6e\x85\x1a\xc0\x01\x9d\x6c\xd7\x56\x7f\x9b\xec\x65\x86\x41\x1c\x19\x6e\x70\xfd\xfc\xb2\x68\x9f\xce\x62\x50\x97\x6e\x83\x8f\x3d\xa3\x8e\xe6\xae\x48\x45\xfd\x83\x7f\xa6\x15\xdf\xa9\xd8\xfa\x20\x7c\x7b\x32\x48\x40\xd9\x01\xe7\x69\x59\x6c\xdc\x6d\xf7\x1b\x00\x00\xff\xff\xcf\x92\x30\x7f\x5a\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 346, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0xf2, 0xbf, 0x61, 0x66, 0xfc, 0x3e, 0xf3, 0xf9, 0x1f, 0x77, 0x7b, 0xa2, 0xfa, 0x90, 0x1d, 0xf1, 0x81, 0x31, 0xca, 0xc2, 0x64, 0x2, 0x29, 0x41, 0x39, 0xe9, 0xac, 0x46, 0x4, 0x46, 0x43}}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xc1\x4a\xc4\x30\x10\xc6\xf1\x7b\x9f\x62\xec\xb2\xc7\xb4\xf5\x2a\xf4\xa2\x05\xf1\x22\xa2\x82\xe7\x86\x4c\x34\xa4\x9d\x84\x49\x82\x87\x90\x77\x97\xdd\x04\x64\xc1\xf5\x16\x86\x3f\x3f\xc8\x77\xb8\x19\xa5\xa1\x51\xae\xe1\xab\x3b\xbc\xdc\xbf\x81\x78\x86\x9c\x87\xf7\x35\xd8\x27\x55\x4a\xbb\xb9\xd3\xed\xc3\xb1\x5d\x0c\x97\x32\xea\x44\x84\x9b\x08\x51\xb9\x14\x5b\x82\xd7\x12\x64\xee\x72\x36\x1a\x08\x61\x78\xf0\x29\xc0\x04\xa2\x94\x2e\x67\xcf\x86\xa2\x86\xbe\x02\x1b\x90\x53\x18\xe6\xdb\x3b\xef\x69\x3e\xaa\xbe\xd6\xe7\x52\x00\x92\x3a\xbf\x9a\xf3\xba\xee\x8f\x12\xa6\xe1\x1a\xb5\xe3\x3e\x1f\x87\x49\x7f\xca\xbe\xc5\x7f\x3b\x8b\x09\xf6\x5f\x48\x9b\x0d\x7f\xa5\x9a\x5f\x50\x5d\xfd\x29\x7c\x3b\xb6\xc8\xc0\x89\x40\x88\x78\x9a\x6f\xb9\x18\xf2\x27\x00\x00\xff\xff\x94\x91\x42\x0b\x69\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 361, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0x79, 0x28, 0x19, 0xf9, 0xa3, 0x7b, 0xf0, 0x79, 0x32, 0xc3, 0xcd, 0x53, 0x5d, 0x65, 0xb0, 0xc4, 0xdb, 0x64, 0x16, 0x86, 0xa3, 0x9f, 0x80, 0x59, 0xed, 0x48, 0xa6, 0xb1, 0x14, 0xc4, 0x5f}}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\x0d\x74\xbb\x6e\x85\x9d\x9d\x45\x61\x9e\x67\xd9\x48\x36\x3b\x18\xbf\xfb\x48\x53\x68\x0a\x0b\xbb\x19\xeb\xfb\x3f\xa4\x7f\xf7\xd0\x0e\x86\xda\x41\xcb\x67\xb5\x7b\x3b\x3c\x9d\x8f\xcf\xa0\xd4\x97\x1f\x14\x69\x87\x90\x73\x73\xd6\x62\x5f\xc6\x52\x56\x63\x8a\x5a\xac\xc0\xe3\xea\x0b\x99\x3d\xcf\xf8\xbb\x67\xdb\x1b\x2e\xa5\x9d\x12\x11\x7e\x2b\x89\x23\x32\xaf\x50\x9f\x62\x48\x71\x8b\xf5\x29\x56\x39\x9b\x09\x08\xa1\x39\x86\x24\xd0\x81\x2a\xa5\xca\x39\xb0\xa1\x38\x41\x7d\x33\x7d\x84\x24\x2a\x20\xab\x79\x1f\xd8\x8f\xf5\x92\xb8\xd0\x0a\x90\xc6\xcb\xeb\xea\x7a\xd5\xee\x34\x40\xd7\x6c\xeb\x1c\x3a\xd8\x37\xdd\x74\x3a\xd4\x57\xfc\x6f\x53\x6f\xc4\xfe\xa3\x8a\x2e\xdc\x54\x0b\x7f\xe7\xaa\x96\x83\xe1\xc7\xb3\x45\x06\x4e\x34\x87\xe6\xa6\xfb\xbb\xce\x7f\x03\x00\x00\xff\xff\x71\x9e\x5b\xbd\x9f\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 415, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbc, 0x36, 0xd7, 0x29, 0x50, 0x7c, 0xe3, 0x2b, 0x54, 0x30, 0x8d, 0x8, 0x41, 0x58, 0xaa, 0xa0, 0x48, 0x6f, 0x0, 0xf2, 0x68, 0xed, 0xbe, 0x7e, 0x9e, 0xb0, 0xe4, 0x7f, 0x86, 0x7d, 0xdf, 0x2d}}
	return a, nil
}

var _configKubernetesPvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x91\x41\xab\xdb\x30\x0c\xc7\xef\xfe\x14\x82\x9d\x93\xed\x31\x1e\x03\xc3\x3b\x6c\x30\xb6\x1d\xda\x95\x30\xda\xb3\x6a\xab\x45\xc4\xb1\x8d\xad\xa4\x2b\xa1\xdf\x7d\xd8\x69\xc6\x6b\x6f\x96\xf4\xd3\x5f\xfa\x5b\x1f\xe0\x10\x52\x4f\xe9\xe3\xf7\xbf\x64\x46\x09\x09\x76\x7b\x85\x91\xf7\x94\x32\x07\xaf\x61\x7a\x51\x3d\x7b\xab\x61\x57\x32\x59\xc8\xcb\x3e\xb8\x71\x20\x35\x90\xa0\x45\x41\xad\x00\x3c\x0e\xa4\xe1\x34\x7a\x4f\xae\x89\x53\x33\xcf\xed\x1f\xcc\xfd\x2f\x7b\xbb\x29\x00\x87\x47\x72\xb9\x70\x00\x18\xe3\x0a\xd6\x58\x2a\xa6\xe1\x7d\x47\x8e\x64\x0a\x6d\x30\xa2\x61\xb9\x2e\x9d\x59\x42\xc2\x33\x69\x78\xf9\xc1\x0a\x00\x8d\xa1\x9c\x37\xc1\xd2\x5d\xb9\x81\x8e\xd0\x1e\x12\x0b\x6d\xd0\x5f\x15\x40\x7c\x5a\xb9\x23\xe3\x90\x87\x5d\x70\x6c\xae\x1a\x3a\x12\x64\xaf\x00\x86\x30\x7a\xf9\x1d\x85\x83\xff\xaf\x85\xce\x85\x4b\x63\xc9\x91\xd0\x43\x2a\x4c\x94\x2e\x65\xc8\x3d\x9b\xe8\xcc\xc1\xbf\xcd\x73\xdb\xd5\x57\x75\x5c\x0a\x27\x76\xd4\x0c\xc1\xd2\xdb\xa7\x2f\xaf\xaf\xc5\x4e\xe6\x45\xdd\x26\x9e\x28\x69\xc8\x9f\x5b\x93\xb9\xc5\x4b\x6e\x4d\x18\x6a\x69\xaa\x8b\xfe\x44\x6f\x1d\x15\xa0\x31\x99\x9f\x7e\x73\x85\xbe\x8a\x24\x3e\x8e\xb2\xfa\x07\x38\x8e\xa6\x27\xd9\xd6\x5b\xcc\x73\xfb\xad\x86\xb5\xa7\xfa\xee\xe8\xb4\x90\xe5\x5a\x39\xa2\x59\xb0\xed\x1a\xdd\xd5\x9f\x6e\x69\x1e\xc6\xff\x0b\x00\x00\xff\xff\x33\x84\x08\xef\x30\x02\x00\x00")

func configKubernetesPvYamlBytes() ([]byte, error) {
	return bindataRead(
		_configKubernetesPvYaml,
		"config/kubernetes-pv.yaml",
	)
}

func configKubernetesPvYaml() (*asset, error) {
	bytes, err := configKubernetesPvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/kubernetes-pv.yaml", size: 560, mode: os.FileMode(0644), modTime: time.Unix(1742330478, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa9, 0x15, 0x2e, 0x42, 0x94, 0x68, 0xc1, 0xf2, 0x27, 0xfe, 0xb7, 0xa7, 0xe8, 0x8d, 0x53, 0x1a, 0x1b, 0x36, 0xb0, 0x5c, 0xc, 0x59, 0xb4, 0x7d, 0x16, 0x9c, 0x2b, 0x72, 0xfc, 0x17, 0x7c, 0x20}}
	return a, nil
}

var _configKubernetesExecutorTemplateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x49\x4f\x1b\x4d\x10\xbd\xfb\x57\x94\xc6\x7c\x37\xc6\x8c\x2f\xdf\xa1\xa5\x1c\x90\x21\x2c\x0a\x06\x05\x44\x0e\x51\x0e\x35\xed\x1a\xbb\xe3\xde\xe8\xc5\x60\x8d\xfc\xdf\xa3\xf6\x2c\x8c\x81\x90\x39\x95\xeb\xbd\x7e\xf5\xaa\xba\xda\x63\x78\x40\xbf\x86\xf3\x17\xe2\x31\x18\x37\x42\x2b\x1e\xc9\x79\x61\x34\x83\x12\x03\x5f\x9d\x6c\xa6\xa3\xb5\xd0\x0b\x06\xd7\xa6\x1c\x29\x0a\xb8\xc0\x80\x6c\x04\xa0\x51\x11\x83\xba\x9e\x24\x85\xab\xc5\x6e\x97\xd7\xf5\xe4\xda\x94\x29\x6c\x61\x6f\x91\x37\x9c\x79\xf7\x6b\x8f\x49\x2c\x49\xfa\x24\x02\x80\xd6\x32\xa8\xa2\xd6\x24\x73\xea\x6c\x24\xe0\xb7\x29\xf3\x4f\x6b\x78\x4b\x3c\x69\x94\xc8\xd7\xa6\xaa\xbe\x09\x25\x02\x83\x69\x31\x02\xe0\x46\x59\x49\x41\x18\xed\x19\x4c\x47\x00\x81\x94\x95\x18\xa8\xa9\xd9\x9d\x4c\x9f\x36\x0b\xba\x27\x49\x3c\x18\xd7\xe5\x00\x9c\x91\xc4\xe0\xd9\xb8\x75\x25\xcd\x73\x9b\x0e\x46\x92\xc3\x46\xb5\x67\xe6\xb0\xa6\x2d\x83\x2c\x9d\xc8\xfa\x2c\x80\xb1\x89\x6b\x1c\x83\xec\xfc\x29\xa2\x1c\x62\x1b\x94\x91\x18\x64\x9d\xfe\x10\xa3\xaa\x22\x1e\x18\x64\x73\x73\xcf\x57\xb4\x88\xaf\xb2\x8e\x7c\x40\x17\xee\x8c\x14\x7c\xcb\xe0\x56\x7f\x45\x21\xa3\xa3\x16\xf6\xe4\x36\x82\xd3\x29\xe7\x26\xea\x30\xdf\x8f\xae\x1d\xac\xc7\x96\xc3\x8d\x0e\x28\x34\xb9\xbe\x83\xbc\xbd\xc8\x96\x99\x2c\x91\xcb\x07\x23\xef\xbd\x09\x85\xcb\xe6\x36\xae\x52\xf4\x16\xb9\x8b\x52\x76\xd6\x4e\xe5\x33\x6e\x7d\x8f\x73\xa3\x14\xa6\x1d\xfa\x99\x9d\x94\x42\x9f\xf8\x55\x76\x0c\x59\xce\xb3\x5f\x3d\x05\xdd\xd2\xef\xb5\x67\x0d\x77\xa0\x9e\x2c\x09\xbd\x3c\x13\x6e\x4f\xf8\x61\xdc\x7a\x21\xdc\x80\xe0\xc8\x9b\xe8\x38\x0d\x6e\x25\x25\x9f\x22\xf9\x70\x90\x03\xe0\x36\x26\x11\x51\x81\x26\x98\xcc\x6c\xf4\x50\x40\xbe\xdb\xa5\xc2\x36\xfa\x14\x00\x49\x4f\x90\xa2\x6c\x5a\x14\x2a\x4b\x11\x1d\x18\x4a\x9f\x22\x65\xdc\x76\xa0\xf5\x1d\xd5\x45\x09\xc5\xa4\x95\xb3\x4e\xe8\x50\x41\xf6\xdf\xa4\xa8\x2e\xb2\x16\xde\x4b\x49\x4f\x8d\xf8\xff\x37\x7f\xd1\x26\xbb\x22\x45\x0e\x65\xee\x83\x71\xed\xd0\xdb\x32\x67\xc2\xaf\x3f\xab\xd3\xe0\x87\x85\x8a\xe2\xa3\x4a\x7d\xb0\x31\x32\x2a\xba\x49\x4b\x33\x98\xd6\x78\x3c\x86\xb3\x5b\x98\xdf\x3e\xc0\xec\xf2\x74\x7e\x71\x0e\x0f\x97\x57\xf7\x3d\x5c\xd7\x0e\xf5\x92\xe0\x48\x2c\x5e\x8e\xe1\x48\x04\x52\xc0\xbe\xc0\xe4\x71\x2f\xe6\x07\x75\xde\x2c\x58\xdb\x52\x5e\xd7\x47\xef\x57\x0c\x40\x25\x1b\x77\x18\x56\xa9\xe7\xbd\xec\x64\xd6\xed\x6c\x4a\x1f\x90\x7d\x2c\x7b\x6a\x2f\xf6\xaf\x63\xdd\x1c\x46\xc3\xee\x3d\x83\x8f\xdf\xc3\xab\xdd\xf7\x6e\x6d\xfa\xa7\xf4\x81\x74\x68\xba\x9e\x49\x14\x6a\xb8\x6f\x3c\x25\x0e\x1e\xa2\xdd\xf0\x03\xa9\x3f\x01\x00\x00\xff\xff\x55\x78\x9e\xea\x80\x05\x00\x00")

func configKubernetesExecutorTemplateYamlBytes() ([]byte, error) {
	return bindataRead(
		_configKubernetesExecutorTemplateYaml,
		"config/kubernetes-executor-template.yaml",
	)
}

func configKubernetesExecutorTemplateYaml() (*asset, error) {
	bytes, err := configKubernetesExecutorTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/kubernetes-executor-template.yaml", size: 1408, mode: os.FileMode(0644), modTime: time.Unix(1742330478, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0xd7, 0x4b, 0x82, 0x87, 0x23, 0xd1, 0xf6, 0x97, 0xab, 0x5, 0x5, 0xdf, 0x26, 0x59, 0x30, 0x96, 0x52, 0xb9, 0x52, 0x5a, 0x8d, 0xbf, 0xec, 0x45, 0xd7, 0x2b, 0x73, 0xfd, 0x9c, 0xf4, 0x4a}}
	return a, nil
}

var _configDatastoreIndexYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x91\x3f\x4f\xc3\x30\x10\xc5\x77\x7f\x8a\x27\x75\x81\x21\x74\xf7\x1a\x24\x84\x84\xc4\xd0\xb0\xf7\x1a\x5f\xdd\x53\x93\xbb\xc8\x3e\x04\x7c\x7b\x94\x16\x50\x66\xd4\x76\xf3\xfb\x23\xff\x6c\xbd\x15\xba\x03\x57\x86\x68\xe2\xcf\x26\xf1\x5e\x54\x5c\x4c\x2b\x94\x39\xc1\x0d\x3b\x86\x8c\x93\x15\x3f\xcb\x47\x72\xaa\x6e\x85\x71\x27\x7b\x6c\x13\x39\xed\xa8\x72\x44\xfa\x0d\xb6\xf7\x61\x85\xb7\x2a\x9a\xf1\x64\x96\x07\x46\x3b\xd8\x7b\x42\xfb\xf2\x1c\x91\xfb\xd3\xf9\xaf\x7c\x06\x73\x45\x5f\x98\x9c\x31\x91\x1f\xd6\x6e\xeb\x93\xfd\xf0\x45\xe3\x10\xc2\x4f\x25\x86\xd0\xe0\x28\x9a\x22\x3a\xaa\xc7\x00\x4c\xc5\x26\x2e\x2e\x73\x06\x34\x50\x1a\x39\xe2\xf5\x43\xb9\x2c\xf4\xc6\xc9\x79\xa1\x3b\xca\x1b\x2f\xa2\xb9\x2e\xcc\x76\xc6\x8b\x69\x27\xe3\xdc\x05\x92\x14\xee\x67\x27\x22\x71\xed\x2f\xc4\xbe\x12\xe6\x96\x5f\xba\xd0\xb5\xb7\x5c\xe5\x4a\x2b\xfc\xef\xc9\xdf\x01\x00\x00\xff\xff\x60\x88\x85\xd9\x72\x03\x00\x00")

func configDatastoreIndexYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDatastoreIndexYaml,
		"config/datastore/index.yaml",
	)
}

func configDatastoreIndexYaml() (*asset, error) {
	bytes, err := configDatastoreIndexYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/datastore/index.yaml", size: 882, mode: os.FileMode(0644), modTime: time.Unix(1742330478, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4f, 0xc3, 0x65, 0x96, 0xdd, 0x15, 0xe8, 0xf, 0xd, 0xe4, 0xaf, 0x98, 0x9a, 0x1e, 0x52, 0x16, 0x5e, 0x75, 0xc3, 0xaf, 0x72, 0xc9, 0xf0, 0x97, 0x67, 0xeb, 0x61, 0x48, 0x1, 0xff, 0x54, 0xe1}}
	return a, nil
}

var _configKubernetesConfigmapTemplateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x3f\x6b\xc3\x30\x10\xc5\x77\x7d\x8a\x07\x59\x92\xc1\x0a\xa5\x9b\xd7\x42\xa1\x43\xbb\x34\xb4\x6b\x2e\xd6\x25\x11\xb6\x4e\x42\x7f\x1a\x82\xf1\x77\x2f\xb6\x1c\xda\xf1\x49\xef\xee\xfd\xee\x6d\x70\xb8\xda\x04\x9b\x90\xaf\x8c\xce\xcb\xd9\x5e\x70\xf6\x71\x91\xaf\x45\x84\x07\x7c\xfb\xd8\x73\x54\x1b\x35\x9b\x79\x95\x0f\x6f\x49\x5c\x67\x33\xbb\x30\x50\x66\x58\xc1\xb1\x7e\xee\xfb\x72\xe2\x28\x9c\x39\x35\xf5\xc5\x51\x68\x1e\x46\x7d\x27\x37\x1c\xd5\x06\xd9\xc3\xdc\x85\x9c\xed\x68\x18\xee\xe8\x22\xcf\x6b\x08\xc2\x37\xbc\x2c\x63\xef\x14\x16\x28\xa6\xee\x8a\x4c\xa9\xc7\xb6\xa6\xb8\x50\x32\xff\x8b\xd9\x9f\xa8\xeb\x59\x8c\xbe\xf8\xe3\x4e\xaf\xc8\xf5\x3e\xe3\x85\xe7\xa8\x54\x42\xf0\x31\x23\x70\x6c\x4a\xe2\x58\xf7\x55\xbc\x12\x29\x5b\x2f\x09\x5b\xd6\x17\x8d\xcf\xe7\x19\xc6\xb0\x64\x4b\x43\xda\x69\xa5\x28\xd8\x2f\x8e\xc9\x7a\x69\xf1\xf3\xa4\x7a\x2b\xa6\xfd\x63\x54\x8e\x33\x19\xca\xd4\x2a\x40\xc8\x71\x8b\xf3\x52\x61\x73\x5b\x3a\x5b\x4b\x68\xc6\x51\x1f\x28\xf5\x6f\x06\xd3\xb4\x3a\x53\xa0\x8e\x5b\x8c\x23\xf4\xc7\x43\x62\x9a\xa0\x80\xdf\x00\x00\x00\xff\xff\x09\x38\x37\x72\xa3\x01\x00\x00")

func configKubernetesConfigmapTemplateYamlBytes() ([]byte, error) {
	return bindataRead(
		_configKubernetesConfigmapTemplateYaml,
		"config/kubernetes-configmap-template.yaml",
	)
}

func configKubernetesConfigmapTemplateYaml() (*asset, error) {
	bytes, err := configKubernetesConfigmapTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/kubernetes-configmap-template.yaml", size: 419, mode: os.FileMode(0644), modTime: time.Unix(1742592240, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x73, 0xf2, 0xd4, 0x3a, 0x5a, 0x33, 0x8b, 0x84, 0xc, 0xa8, 0x1, 0xc9, 0x21, 0xc6, 0x51, 0xe4, 0x1e, 0x68, 0x6f, 0xba, 0x6f, 0x81, 0xa4, 0xb0, 0xd8, 0x8e, 0x6, 0xd9, 0x9d, 0x95, 0x9a, 0xda}}
	return a, nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x93\x1b\xb7\x72\x7e\x9f\x5f\xd1\xe1\xfa\x94\x57\x55\xe4\x90\x6b\xc7\x27\x31\x53\xaa\xca\xde\x2c\xed\xd1\x6d\xb3\xa4\xa2\xe4\x49\x85\x19\x34\x39\x30\x67\x80\x31\x80\x59\x2e\xa5\xe8\xbf\xa7\xba\x81\xb9\x90\xbb\xb2\x64\x9f\x75\x95\x53\x39\x7a\xf1\x72\xd0\x68\x34\x1a\x7d\xf9\xba\x01\x1f\xc1\xb2\x40\xd0\xa2\x42\x30\x2b\xf0\x05\x82\xc8\xbd\xba\x45\x70\x68\x6f\xd1\x82\x14\x5e\x64\xc2\x21\x64\x22\xdf\xa0\x96\xc9\x11\x9c\xde\x0a\x55\x8a\xac\xec\xbe\xb9\x39\x64\xa6\xf4\x32\x1b\x43\x26\xe4\x1a\xed\x98\xa7\x39\x6f\x2c\x8e\x41\xee\xb4\xa8\x0c\x0d\x62\x29\x9c\x57\xf9\x18\x2a\xa3\xd7\x46\x66\xc9\x45\x64\xde\xce\x4f\x92\xcf\x8a\x93\x9b\xaa\x6e\xfc\x97\xc4\x28\x4d\x2e\xca\x31\x14\x3e\x37\x5a\x1a\x3b\x06\x57\x36\xb6\x1a\x43\x9d\xb9\x31\xac\xad\x92\xa8\xd7\x4a\xe3\x18\x2a\xa1\x1b\xa2\x14\x5b\x37\xc9\x84\xcf\x8b\x31\x6c\x9a\x0c\xad\x46\x8f\x2e\x39\x0f\x8b\x45\x7e\xbf\x22\x15\xde\xa2\xf6\xb0\xb5\xca\xa3\x6d\xc5\x38\x76\x4f\xd2\xcf\x8a\xb7\x1e\xff\x3e\x55\x8d\x61\x23\x56\x1b\x91\x5c\xd2\x82\xef\x78\x3d\x37\x4f\x00\x26\xad\xe6\xe8\xcf\xd2\xac\x93\xe4\xa5\x59\xaf\xd1\xd2\xd8\x11\xd0\xdf\x4a\xaf\xa1\xc4\x5b\x2c\xdd\x1c\x24\x66\xcd\x7a\x0c\x4a\xaf\xcc\x18\xd0\x5a\x63\x13\x80\x97\x34\x38\xe7\x8f\x3c\x89\xb9\x13\x2f\x07\xde\x80\x2f\x94\x83\x5a\xf8\x22\x85\xab\x15\x60\x55\xfb\xdd\x38\x0c\x0a\x8b\xbc\x73\x8f\x9a\x08\x9d\x97\x68\x6d\x9a\x00\xbc\x69\x7c\xdd\xf8\x9f\x54\x89\x73\x18\x8d\x92\x64\xc1\x96\x14\x24\x7a\x6e\x9c\x1f\xea\xf1\xa7\x46\x6b\x2c\xa3\xb1\xd1\x64\x22\x78\x2d\xaa\x56\xf7\x85\x71\x3e\xe1\x99\xd7\xc6\x7a\x68\x1c\x4a\x58\x19\x0b\xcf\x97\xcb\x6b\xb2\x89\xaa\xd1\x2a\x17\x5e\x19\x0d\x42\x4b\x66\xb9\xc5\x0c\xa4\x70\x45\x66\x84\x95\xcc\x72\xb9\xbc\xa6\xd9\x73\xf8\xd7\xd9\x6c\xf6\x10\xb7\x9b\xeb\xf3\x7d\x66\x34\xed\xe6\xfa\x3c\xcc\xfa\x71\xf6\x63\x9c\x75\x83\xbf\x34\xca\xd2\x89\x3a\x95\x83\x68\x7c\x81\xda\xb7\xeb\x13\x23\x5a\x3f\x3a\xce\xe9\xf5\x95\x83\xc6\x91\xfa\x05\xd4\xc2\xb9\xad\x09\xe2\x1c\x91\x22\x69\x69\xb2\xc2\x0d\x82\x6b\x2c\x92\x02\x6b\x6b\x6a\xb4\xe5\x0e\x2c\x3a\x6f\x55\xee\x41\xe4\x39\xba\x78\x0a\xe4\x01\x7a\xa5\xd6\xb0\x52\x25\x32\x97\x63\x4c\xd7\x29\xe4\x45\x65\x24\xfc\x75\x36\x83\x15\xab\x32\x0d\x64\xe9\xae\x2a\x9f\x30\xd9\x19\xc9\x7a\xda\xf8\x22\x1c\x00\xd9\xc9\x5b\x87\x76\x0e\x42\x56\x4a\xc7\x6f\x00\xd7\x51\xc2\x39\x18\xfc\x79\x35\xfb\xee\xfb\xca\xfc\xd2\x0d\x9e\x12\xe9\x1c\xbc\x6d\xf0\x80\x49\xe3\xd0\x9e\x3c\xc0\x44\x64\xf9\xc9\x77\xdf\x3f\x40\xfc\xdd\x03\xc4\x2b\x63\x32\x61\xf7\x55\x7c\x86\xc2\xa2\x85\xbf\xbd\x5b\x7e\x85\x9e\x83\x5a\x83\x9d\xc1\xd6\xe8\x6f\x3d\x94\xa2\xd1\x79\x01\xdb\x02\x75\xd4\x5c\x63\xc3\xfc\xb7\x37\x2f\x21\x17\x5a\x1b\x0f\x19\xd9\xb9\x90\x18\xcf\xe5\x8d\x92\x7b\x9a\x3a\x62\xda\x68\xa9\x6f\xae\x2e\xce\x79\x4d\x95\xe3\x01\xc7\x63\x8e\x06\xc2\xa3\x0b\x54\x7b\xa3\x4f\x7a\x6e\x97\x77\xa2\xaa\xc9\x2b\x0a\xef\x6b\x37\x9f\x4e\x31\x7c\x48\x8d\x5d\x4f\x8d\x92\xf9\x34\xdd\x62\x59\x4e\x36\x7a\x6b\xf4\xd4\xd4\xa8\x95\x9c\xec\x31\x8b\xac\x16\x41\x8c\x73\x1e\x7a\x7b\xf3\xb2\x5f\xe2\xbc\x54\x14\x91\xae\x2e\xd8\x1d\x1c\xe6\x16\x3d\x7b\xaa\xe3\x40\xa5\x7c\xc1\x9b\xf1\x66\x83\x1a\x94\xf6\xd6\xb8\x1a\x73\xde\x85\xc5\x5f\x1a\x74\x3e\xb2\x0a\x8c\xae\xe4\x7c\xef\xf7\x82\x19\xf6\xcb\x51\x58\x24\x1d\x6d\x0b\xb4\xad\x8a\x0a\xd3\x94\x12\x2c\x4a\x65\x91\x8c\x78\x45\xb1\xb1\x34\x6b\xa5\xe1\x78\x83\x58\xb3\x00\x14\x51\xe0\xdb\x29\x7f\xfe\xf6\x49\xe4\x77\x13\xe7\xd0\x8e\x60\x44\x4a\x9a\x4f\xa7\x5d\x18\x98\x93\xf7\x86\x19\xa3\x4e\x80\x37\x35\xc9\x2e\x28\x7e\xad\x80\xb6\xa2\x56\x8a\x3c\x8b\xc3\x96\xcb\x4d\x8d\x70\x2b\xca\x06\xa1\x6a\x1c\x9f\xb7\xd2\xbd\x02\xe6\xdd\xba\x6c\x73\x0b\x22\x9f\x7f\x1d\x6b\xd1\x48\x85\x3a\xff\x0d\xdc\x4f\xe3\x8c\x7e\x81\x97\xca\x79\xb2\x2e\x72\x0b\x8a\x89\x0e\x8e\xc9\xdc\x5d\x93\x4d\xf2\x52\xa8\xea\x09\x79\x7e\x86\xb0\xb6\x42\x7b\x94\xc1\x0b\x27\xd6\x94\x1d\x0f\xfe\xe2\xe6\x9d\x4b\x4d\x82\x53\xa7\x2d\xc7\xd4\x68\xfc\xf7\x81\x91\x7d\x9e\xd0\x6f\xcd\x1e\x61\x88\x53\x3a\x2f\x1b\x89\x20\x60\x74\x2e\xf2\x02\x27\xe7\x86\x2c\xa6\x9c\x83\x36\x13\x4e\x59\xa3\x10\x88\x0b\x14\x12\x2d\xed\xfe\x19\xfa\x29\xef\xcb\xa2\xab\x8d\x76\xe8\x98\x13\x87\xb7\x90\x2c\x73\x91\x17\x14\x14\xb3\x1d\xd9\x1f\xda\x0a\xa5\x12\x76\xd7\xba\x16\xfb\xf2\x85\x72\x94\x39\x89\x37\x2f\x1c\x43\x0f\xb3\xba\xc0\x95\xd2\xe8\xc0\x0b\xb7\x69\x23\x24\xd9\xfa\xad\x72\x2a\x53\xa5\xf2\x3b\x62\x6d\xf8\xf0\xa2\x6a\x46\xa7\x65\x39\x82\x63\x89\x2b\xd1\x94\xfe\x09\xed\xbe\x2c\x99\x41\xc8\x62\x3c\xb5\xe4\x20\x8c\xb7\x68\x77\x46\x87\x30\x37\x7a\xb3\xd5\x68\x47\x30\x79\x98\x96\x4e\x9a\x14\xe8\x60\x5b\x18\xc8\x2d\x0a\x3a\x25\x5f\x60\x35\x98\xfd\xc6\xf2\x21\x11\x13\xbc\xf3\x04\x03\x3a\xb6\xd9\x8e\xe4\x30\x5b\xd2\x46\x38\xdb\xc0\xcd\x21\x06\x39\x3c\x29\x2a\x44\x26\x9a\x01\xca\x75\x6b\x72\x0e\x15\xce\x99\x5c\xf1\xaa\xbd\x67\x0b\xb7\x49\xfb\x39\x0e\x8e\x3b\xf3\x7a\x02\x5b\xf2\x52\x0a\x7c\x16\x73\x63\x25\x49\x6b\xe2\xde\x32\x5c\x19\xdb\xe5\xe3\x59\x7a\x72\x92\x9e\x10\x9f\xa5\x70\x9b\x53\xd6\xf2\x1c\x4e\xcb\x32\x49\x6e\xae\xcf\x43\x2c\x08\xba\xa5\xd4\x19\x23\xb1\x90\xd2\xa2\xa3\x03\x0f\x91\xf8\x34\xfc\x1e\x64\xf2\x79\x9f\x4a\xcf\x2d\x4a\x0a\xea\xa2\x74\x1c\xd1\xcf\xfe\x0f\xa5\xd4\x90\xcd\xc2\x60\x40\x13\x87\x79\x8f\xbf\xe6\x46\xeb\x18\x5b\xbd\xaa\xd0\x34\x9e\x15\x1a\xfe\x9c\xc3\x5f\x67\x2e\xd0\x51\x10\xad\xc4\x9d\xaa\x9a\x0a\x74\x53\x65\x68\x39\xe7\x28\x8a\x08\xbe\x10\x1e\x44\x1b\x9b\x61\xab\xca\x92\x42\x82\x45\x6f\x55\x04\x2f\x2b\xa1\xca\xc6\x62\x4c\x82\xc4\x1e\x32\xf4\x5b\x44\x1d\xc9\x48\xc1\x64\x67\xe4\x27\x80\x77\xb5\xd1\x41\xf1\x0c\x4c\xcd\x6a\x05\xce\x0b\xeb\x59\xab\x1e\x7e\xa0\xa4\x61\xb4\x0c\x7e\xdb\xd4\xa4\xaa\x13\xa8\x94\x6e\x3c\xe9\xe8\x95\xb8\xbb\x09\x4c\xe7\x70\x32\x6b\x91\xb1\xcb\x0b\x94\x4d\x19\x4c\xb4\x43\x55\xa4\xe1\x57\x8c\xb3\x0f\xd1\x7b\x9a\x2c\xda\x19\x2d\x2c\xdc\x82\x59\x45\x24\x69\x1b\x0d\x62\xc8\xd3\xa3\xed\x50\x59\x3b\xf1\x46\x10\x3e\x3f\x71\xdd\xf4\x4a\xe8\x5d\xb4\x65\x42\xa3\x91\x8c\x62\x92\xd1\xf8\x30\x8f\xf3\xa2\xd1\x1b\xde\x47\xcb\xa4\x34\x7a\x4d\xd3\xb7\x42\xf9\x4e\x8b\x4d\x2d\x39\xb7\x47\x17\xa9\x84\xdd\x04\x13\xd4\x46\x22\x48\x14\x6c\x83\xaf\x8d\xc4\x6b\xa5\xd7\xdd\xf9\x9e\x54\x0f\xb3\x25\xd5\xc4\xb9\x0c\x9b\x85\xf5\xe3\x43\xde\xa4\xba\x7b\xdc\xaf\xb4\xf2\x1d\xf7\x1f\xaa\x24\xa1\x8f\xf3\xd6\xfc\x23\x34\x8f\x9c\xaf\x2e\x3a\x5b\x11\x8d\x37\x95\x20\x9f\x2a\xcb\x1d\xac\x51\x93\x26\x02\xe4\xb9\xba\x08\x08\x3d\xb2\xe8\x56\x2d\x04\xed\x96\x10\x82\x2c\x91\x05\xa6\x1d\x20\x1d\xa9\x88\x19\x2e\xc8\x31\x06\x15\x8d\xd2\x15\x8d\x07\x69\xb6\x3a\x98\xe1\xe4\x04\x2a\x14\x9a\x03\x96\x45\x32\x0b\x6d\x3a\x2f\x80\x59\x3b\x18\x3e\x80\xaa\x38\x0b\x78\x2c\x77\x11\x2f\xd0\x1a\x2b\x65\x9d\xef\x02\x5a\xb7\xf3\xc9\x49\xf4\x9b\x53\xd6\x4a\x58\x7e\x7f\x93\xde\xee\x48\xb7\x12\x3d\x21\x90\x2d\xf9\x90\x45\x67\x1a\x9b\x63\x88\xe2\xa2\x2b\xce\xbc\x01\xe5\xd3\x3e\xb3\x90\xf6\x6f\x3a\xda\x98\xcf\x79\x9d\x7d\xcc\x67\x6e\xd1\x52\x3d\xe9\x02\x1e\xc8\xb0\x10\xb7\xca\x70\x09\xd3\x4d\xa7\xb3\xe1\x58\x77\xfd\xd6\xf5\x4b\xa6\xed\xd7\xba\x71\x73\xe0\x70\xc8\x81\xf4\xf4\x55\x4f\x33\xe6\x5c\x7a\xd6\x92\xde\x88\xea\x59\x36\x87\x59\xda\x51\x5f\x28\xb7\x01\x57\x8b\x1c\x3f\x3b\x89\x48\x06\xb3\x8e\xe0\x27\x3e\xc7\xed\x84\xab\x41\xf0\x0d\xed\x35\xbd\xef\x7e\x6e\xa7\xf3\x3e\x9f\xdc\x2b\xd0\xde\xb2\x37\x04\xf7\xfb\xc1\x25\xc9\x3b\x63\x37\xad\x1b\x53\xcd\xe7\xba\x4c\x28\x1b\x4b\xda\xac\xad\xa1\x98\x4b\x7f\xb6\x26\xd9\x96\x8d\xac\x5e\xe5\x20\xc0\x3e\x63\x77\xb4\x00\x31\xbc\x50\x76\x0e\xe9\x34\x84\xd8\xc9\xd6\xd8\xcd\x44\x2a\xfb\x9b\xb6\x51\x9b\xb2\x64\xd3\xcd\x85\xce\x69\x07\x6a\xad\x45\x49\xf1\xe2\xda\x94\xa5\xd2\xeb\x7e\x0b\xbf\x45\x39\x48\xb0\xda\x4b\xd3\xf8\x29\x5a\x1b\x50\x48\x69\xd6\x5d\x90\x88\x99\xe5\x9e\xda\xa8\x3c\xf1\x3e\xf8\xb6\x62\xb2\x59\x50\x87\x45\xd7\x94\x3e\x5a\x9a\x23\xab\xc7\x52\x92\x41\x11\x6d\xe0\x2a\x29\x1c\x2a\xbd\x2e\x83\xdf\x31\xb7\xde\x4d\xf0\x0e\xf3\xc6\x1b\x0b\x78\xa7\x3c\x67\x81\x97\x66\x7d\x78\x4a\x34\xe5\x95\xb8\x83\x6c\x17\x85\x64\xf8\xc6\xfa\x19\xec\xa6\x85\xaf\x71\x53\x91\xd7\x52\xa8\x72\xa1\x3e\x50\xb8\x9d\xcd\x66\x33\x38\x82\x93\x19\xbc\x38\x0b\x4c\x5f\x1b\x5b\x05\x9f\xa3\xd2\x9b\x6d\x01\x24\x96\x48\xcb\x28\xef\xf8\x13\xed\xa4\x3b\xe2\x28\x79\x90\xba\x53\xf2\x92\x94\x12\x40\x1b\xc8\x80\xfe\x62\xf2\x1b\x7a\xd6\x4b\x14\xb7\xd8\xd9\xc7\x4a\x94\x2e\x82\xc2\x97\xaa\x52\x3e\xc4\xaf\x2e\x81\xe6\x46\xe7\x8d\xb5\x84\x39\x29\x2e\x51\xa1\xe7\xa6\x4d\xcd\xff\x0d\x99\xec\x5a\x58\x51\x96\x58\x2e\xad\xd0\x6e\x85\x36\xe6\xb4\xeb\xb2\x59\x47\x58\x1d\x81\xa8\x6c\x01\xe8\xd1\xe4\x71\xff\x25\x47\xd0\xf6\xc0\x18\xc5\x4e\x8d\x05\x6e\xf1\x40\xec\xf1\x4c\x9f\x0b\x2d\x4b\xb4\xee\xf1\x97\x4e\xce\x4c\xe9\x2f\xce\xe6\x11\xc1\x90\xbf\x07\xdb\xed\x5a\x7e\x11\x17\xd1\xd8\x03\xde\x18\x7f\xa7\x32\x4b\x92\x0b\x6e\x5c\xb5\xcc\xce\x84\x43\x06\xa8\xde\x10\x1a\x60\x2b\x6b\x5b\x5b\xe0\xf9\x6c\x19\x59\x66\x25\xb6\xa4\x7b\x70\xea\xf4\xdd\x02\x2c\xae\x43\xbd\x7b\xc3\x7f\x70\x9e\x6a\xc7\x02\x1e\x85\x0d\xee\xe0\xea\x22\x01\x78\x81\xbb\xbd\xf1\x50\xa5\xb6\x64\x2f\x70\xc7\x90\x94\x2b\x57\x4e\x77\x97\xa1\xb9\x16\x77\x6e\x71\xa5\xee\x86\xa2\x2a\x2d\xf1\x8e\xaa\x31\xf2\x83\x71\xe8\xf1\xb9\x31\x67\x46\x47\x00\xf0\x8a\xc6\xc3\xb4\x3d\xb1\x07\xcd\x82\xd8\xbe\x73\x28\x6c\x5e\x0c\x83\x27\x55\xb6\xf7\x0a\xdb\x1f\xbf\x9b\x05\x08\xd2\x96\x9c\x29\x43\x4c\x56\x61\xd7\xec\x0a\x00\xf9\x74\x0f\x20\x33\xcb\x48\x39\x3f\xe0\xd0\x62\xd2\x2f\x73\xe8\xd0\xeb\x01\x87\x4b\x2d\x6b\xa3\xb4\xef\xc0\x5c\xd4\x5b\xdb\x7e\x80\xe3\xae\x8f\x11\x06\xd2\xdc\x4c\xf3\xd2\x34\xf2\x09\xb1\x3d\xa7\xbf\xae\x2e\x0e\xb9\xd2\x89\xff\xf5\x9f\x27\xa8\x73\x13\x0a\x90\x0d\x06\xa0\x4f\xd8\xdf\x58\xf5\x81\xe5\xfa\x37\x2e\xba\xd1\x8f\x07\x89\xb6\x2d\x64\xa6\x2d\xf4\x8f\x3d\x8e\x20\x0c\x33\xa2\x75\x4f\xaf\xaf\xc8\x20\x0e\x96\x5d\x0c\xc9\x7e\xe7\x7a\x69\xd2\xb5\x5e\x96\xa1\xc2\x4f\x8e\xe0\x99\x31\x14\x98\x79\xb7\xec\xcc\x21\xb2\x72\x0c\x6d\x3d\x29\x4d\xba\x01\x92\xeb\xda\x9a\x9f\x31\xf7\x9d\xcd\xb6\xce\x27\xf2\xdc\x34\x54\x22\x0f\x6b\x23\x15\x10\xc3\x70\x2f\x57\x2b\xa8\x8d\xe3\x3a\x74\xbc\x47\xfc\x30\xe4\x93\xca\xe5\xb4\x2b\x94\xcc\x67\x65\x4d\x15\x8c\x54\xdf\x2a\x6b\x74\x85\x9a\x01\xd0\xa0\x22\xeb\x7b\xb7\xaf\x8c\x5e\x77\x7e\x4d\x05\x9d\x83\xc2\x50\x7e\xe2\x26\x78\x28\xf0\xd0\x0d\x0a\x35\x94\xd1\xdc\x39\x13\xf1\x8c\x00\x83\x26\x83\x86\x2e\xc3\x93\x36\xca\xc4\xaa\xb6\x8b\x3a\x6c\xf6\x5c\x44\x10\x08\x51\x1a\xa2\x0c\x83\xac\x15\x92\x2b\xcd\xe0\x6e\x41\x77\x8b\x30\x70\xc6\x65\x0b\x2d\xa3\xa8\x15\x6b\x36\xd6\x55\x07\x58\x3c\x96\x97\x54\x7a\x70\xd7\x42\x72\xdb\x30\x28\x8b\x31\x68\x5b\xc9\x11\xea\xd7\x12\xb8\x32\xa5\x8a\x8a\xea\x23\xaa\x30\xd9\x84\x3a\xb4\xe8\x08\xed\x18\x4d\xe7\x14\x9a\x1f\xbd\x28\x1f\xd0\x9a\x71\x28\x3d\x45\x59\x42\x25\x76\x90\x95\x26\xdf\x90\x20\xc8\xcd\x4b\xa1\x78\x99\x20\x58\x5f\x41\xb6\x5d\x94\x0c\x01\x1d\x85\x50\xe5\x8a\x80\xe1\x87\x15\x41\x5b\x9c\x86\xee\x80\x96\x7d\x10\x50\x7a\x65\x6c\x38\xf6\xfc\xa0\xf2\xa6\x6f\x4a\x2b\xae\x08\xf7\xeb\x6f\xe6\x27\xa9\x7c\x32\x7a\xff\x8c\x24\x37\x61\x24\x64\x21\xef\x5f\xf4\x19\x03\x4b\xb9\x17\x95\x82\x8d\xf7\x05\x32\x19\xd5\x0b\xb1\xda\x88\x79\xd7\x27\xe8\x0c\x84\x49\x97\xa6\x56\x79\x77\x94\x7f\x44\xc6\x8d\xb7\x3b\x70\x16\xef\x65\xfe\x80\xd4\xfa\x7c\x79\xce\x17\x50\xc1\x6f\x96\x8d\xd5\x40\x85\x36\x07\x05\xe7\x85\x47\xee\xc0\xe8\x5c\x95\x68\x53\x78\x57\xa0\x06\xd4\x8c\x34\xc6\x2d\x74\xec\xef\x23\xd0\xf5\x70\xfc\xf9\xf5\x39\xb3\xec\xab\x63\x6f\x60\xa5\xb4\x6c\x4b\x5f\xee\x17\x58\x04\xe7\x9b\x7c\x43\x16\x29\xe0\x97\x06\x1b\x72\x4b\x5e\x97\x70\xa2\xb5\xc6\x22\x47\xcf\x58\xe4\x47\xe8\xda\x42\xbf\x40\x49\xd1\xc8\x4a\x82\x9d\xbb\x41\x4f\xee\xa6\x93\x7b\x70\x1f\xd0\x7d\x24\xc0\x49\x76\x5e\xf4\x98\xb9\xb8\x77\x77\xc7\xbf\x85\x45\x17\x16\x62\xbf\x09\x9b\xfe\xd6\x75\xf7\x7b\xd1\xde\x7d\x61\x1c\x29\xab\x36\xd6\xf7\xf6\xd6\x13\xed\xad\x4c\xf0\x8d\x9c\x60\x89\x55\x5d\x0a\x8f\x5d\x18\xeb\x3f\xcd\xe1\x7f\xd8\xd8\x1a\xad\xc8\xf2\x10\x9e\xc2\xad\xd0\xaa\x2c\x05\x7f\x5e\xa3\x47\x7d\x0b\x4f\x61\x19\xb6\x06\x11\xa7\x72\xa9\xf8\x14\x3e\x7e\x4c\x2f\xbb\xdf\x9f\x3e\x31\x81\xb0\xeb\x86\x42\xa8\x83\xa7\x2d\xfe\xb5\x8d\x86\x49\x6c\xdc\xd3\x9c\xd0\xa7\xff\xf4\x09\x26\x13\xd2\xef\x44\x49\xfa\xba\x14\x6e\x73\x25\x23\x17\x2a\x21\x98\x7f\x44\xb7\x9f\x3e\x4d\xc3\x15\xe6\x84\xe1\xc7\xa4\x34\xeb\x20\x0e\x9d\xdd\x21\x65\x04\x66\xe1\x06\x8e\xc9\x0c\x5f\xc1\x7d\x9e\xce\x34\x9e\xe9\x42\xb3\xfe\xbd\x8f\x00\xf8\xfd\x8a\x0b\xb8\xa7\xf0\xdf\x97\x0b\x1e\xa7\x38\xf8\xde\x9b\x9e\xa0\x63\xfc\xe6\xf5\xfb\xcb\xff\xba\x5a\xbe\x7f\x73\xf3\xfe\xf2\x3f\xaf\xce\x97\x4c\xfe\xf1\xa3\x5a\x81\x46\x48\xa9\xb6\x85\x19\x4c\xe2\xee\x3e\x7e\xac\xad\xd2\x7e\x05\xa3\xd8\xc8\x7a\x9f\x13\xc1\x53\xf8\x8b\x1c\x05\xe2\x8e\x70\x02\xa8\x65\xf7\x2b\xb2\xe3\xfa\x97\x0a\xd9\x5f\xe1\x58\x61\x45\xd5\xc5\x53\xf8\x4b\x3a\x5b\xc1\xb3\xb3\x51\x9c\xf6\xeb\x9c\x43\x91\xfc\x05\xd6\x92\x8a\xed\x21\xe3\x30\xeb\x1e\x67\xfe\xc9\xde\x96\x24\xd7\x67\x8b\x7f\x38\xff\x9f\xd4\xf9\x8f\xfe\x29\x53\x7a\x9a\x09\x57\x84\x9f\xd7\x67\x0b\x98\xbc\xbe\xe7\x93\xe1\xbb\xf9\x92\x0f\x05\x32\xfc\x92\x4b\x7e\xd9\x37\x02\xa3\x32\x14\x1a\x4f\x4f\xe6\x75\xad\x9f\x3e\x82\x83\xb4\x6c\x2b\xac\x9e\x92\x09\xaf\xb3\x47\x70\x8d\x96\x29\x05\x8c\x9e\xeb\xaf\xf9\xc5\x41\xec\xfc\xca\x58\x79\x75\xb1\x77\x2c\xc9\x33\xab\xe4\x25\xbf\xe1\x98\xff\xbe\xb3\xfe\xe6\xc1\x93\xfe\xe6\x6b\xce\xf9\x9b\xaf\x38\x65\x22\xea\x4e\xf0\x6b\xcf\xfd\x1b\x98\xd4\x08\x55\xad\x1e\x23\x1e\x06\x09\x8a\xf7\xb7\xed\x79\x3f\x7b\x8c\xe3\x8e\x4c\x57\x4e\x7d\xc0\x8e\xeb\x1f\x7f\xdc\x8b\xb2\xb1\xd5\x3f\xe2\xe8\x9f\x36\x8e\x4e\xf7\x9d\x6b\x71\x76\xba\x3c\x7f\x0e\x93\xc9\xcf\x26\x9b\x70\x11\x72\xcf\xd3\x3a\x12\x1d\x74\x7d\x72\xf0\x39\x00\x9c\x2f\x79\x59\x47\x1e\xf1\xc8\x17\x5c\xf7\x2b\x7c\xb0\xe3\x48\xc8\x64\x52\xa3\x65\x7b\x7c\x14\x87\xec\x58\x57\x58\x31\x88\x78\x14\x70\xd2\xb3\xf5\x55\xdd\xb3\xfd\xe3\x7d\x92\x7b\x6c\x67\xc2\xe7\x05\x48\x74\xb9\x55\x59\x34\xfb\xfd\x0b\x92\xb6\xb4\x3c\x7d\xb7\x80\x40\x7d\xef\x12\xb0\xe5\xf3\xa8\x0e\xde\xad\xd7\x5a\xff\xa1\x63\x6b\x2e\xb4\xf9\xde\x2d\xf8\x6f\xef\xbb\x7f\x7a\xbf\x1d\x6e\xee\x41\xaf\x3d\x82\xbf\x99\x2c\x5c\x64\xf1\x29\xe4\x42\x73\xcf\x40\xf9\x02\xf9\xda\x91\xdf\xde\xc5\x93\xa9\xc4\x07\xa3\xbb\xeb\x2a\x78\x4d\x63\xc7\xa7\x37\xaf\xb9\x7d\xb7\xc7\x67\x0e\xa3\xe8\x55\xe4\xd9\x12\x57\xa3\x76\xad\xff\xa0\xb8\xf8\xf7\x2d\xc3\x2c\xf6\x57\xe0\x68\x3b\x3a\x68\x06\xb7\xcd\xd5\xee\x2d\x0e\xfc\x6c\xb2\x10\x98\xc3\xe3\xbf\xf6\x11\x06\x53\xd1\x98\xec\x15\xa1\xee\xf5\x92\xfb\xae\xf1\xb0\x37\x7c\x04\x2f\xba\x77\xa0\x5f\x65\xdf\x03\xf2\x7b\x06\xde\x8f\xcd\xbb\x9b\xfe\xee\xba\x86\x5b\x5c\xde\xc4\x0f\x21\x6b\xb8\x74\xf0\x6e\xb4\xa5\x74\x73\x90\x26\xdf\xa0\xdd\x7b\xa3\x0a\x70\x19\xc7\xe7\x30\x0a\xe3\xa3\xc7\xf4\xa3\x17\xc3\xa5\x1e\x74\xa4\xff\xef\x19\x72\xcf\x54\xc8\xaa\xc3\x7d\xac\x37\xe0\x6a\xb1\xd5\x64\x81\x2e\xf6\x30\x13\xe8\x09\xe8\xb8\xc2\x4b\xa4\xd1\x21\x93\xd8\x5c\x3e\x8d\x7d\xe0\xc1\x9d\x44\xb4\xe8\xbe\x01\x1d\x69\x7a\xb7\x71\x62\x14\x6f\xf9\x5c\x78\x8c\x4c\x21\x97\x9c\xc0\xc7\xac\x9d\xc2\x02\x07\x6f\x0f\x7b\x53\x4a\x95\x99\x4a\x93\xbb\xa9\xc5\x15\x5a\xd4\x39\x4e\xbb\x57\x02\x03\xb2\x89\xa8\xd5\xf4\xf6\x24\x3d\xf9\x97\xe9\x11\xf9\xe8\xed\x49\x78\x39\xbd\x07\x0c\x62\x47\x7b\x08\x1e\xda\x16\x6c\x3d\xb8\x62\xaa\x82\x90\x7b\xe2\x3d\x84\x39\xc2\x53\xa1\xfd\x8b\xf7\xd5\xa1\xdb\xb5\x7e\x92\x26\x6d\x50\xea\x98\xf6\x8f\x51\xba\xfb\xc6\xce\xfe\xb8\x41\xdd\xfa\xd0\xbd\x1d\x1c\x0e\x7c\x6e\x27\x9d\x3b\x0f\xf7\xf1\xd0\xe4\x18\x5e\x1e\xbb\xd5\x78\x04\x0b\x6f\xac\x58\xe3\x1f\xd0\xc5\x3c\xfa\x3b\x6e\x1a\x3e\x77\xcf\x90\x1c\xc1\x4b\x93\x8b\x50\x39\x82\xdb\x39\x8f\x55\x9a\xf0\xa7\xb8\x91\x10\x2a\xdf\x15\xca\x63\x19\x5f\x48\xf2\xcd\xc1\xe0\x0a\x99\x0e\xc0\xc1\xb6\x50\x79\xd1\x06\x30\xe5\xc2\x63\xba\x10\x53\xc3\x33\x2f\xbe\x81\x08\x1f\x2f\x54\xdf\x66\x4e\xa7\x24\xc5\xf3\xe5\xf2\x3a\xae\xd8\xbd\x5a\xf2\xa6\xbb\x2a\x86\xba\xc9\x4a\x95\x43\xe8\x88\xc5\xfe\xf7\x16\x33\xb8\x55\x02\x04\x3c\xbb\x5c\xb6\x8f\xb2\xd2\x64\xc0\x6a\xbe\x77\xf9\x40\x86\x47\xfe\x76\xec\x9e\x0c\x67\xb8\xbd\xbe\xfd\xf7\x33\x97\x24\x21\x49\x2e\xbe\xdf\xbf\x74\x0e\x37\xdc\x8f\xfc\x46\xec\xe0\x09\xd7\x23\x5d\xaa\x42\xff\x00\x7b\xa1\x24\xc2\xa5\xce\xed\x2e\xdc\xe7\x1f\x2f\x16\x97\x4f\xc0\x85\xe7\x0f\xfc\x3c\x70\x71\xd9\x3d\x8d\x69\x9c\x37\x15\x5a\xb8\xb6\xe6\x56\x49\x94\x91\x33\x8d\x59\x5c\xf5\xe1\x8a\x02\x54\x2a\xb6\x2e\x15\xac\xa9\x34\x37\xd5\xb4\x55\xda\x94\x7c\xcc\xf9\x69\xe3\xd0\xae\x1b\x25\x71\x1a\x24\x21\x41\x7a\x39\xda\xa5\x5e\xe0\xce\xa5\x85\xaf\x4a\x5e\x66\xf0\x75\x50\xe9\x70\x5c\x7e\xb5\x78\x1c\x61\xde\x3a\xa5\xd7\x2f\x5e\x2d\x7a\x51\xfa\xe5\x5f\xbc\x5a\xb4\x8a\x4e\xfa\x48\x87\x7c\xd1\x45\x96\xd9\xfe\xbf\x23\x7c\x8a\x8b\xef\xa1\x0e\x6a\xb2\x0e\x5c\x93\x17\x20\x1c\xbc\x52\x5a\x99\xf6\xed\xc0\x39\xd6\x45\x72\x04\xcf\x28\x7c\xab\x9c\xcc\x29\xbc\xbf\x3f\x78\xc7\x10\x1e\x01\xb7\xf7\xbb\xbc\x7a\xf8\xd4\xca\x12\x7e\x0d\x71\x51\xb8\xe6\x1c\x58\xf9\x43\x56\xfa\x27\xbe\xc8\x5c\x6c\xd5\xca\x3f\x2c\xf7\x5b\x87\xf6\xf5\x67\xee\xaa\x80\xef\xcb\xc3\x83\xf4\x50\x02\x6b\xa1\xfd\x80\x3a\x7c\x88\x0f\xe9\x5a\x84\x39\x18\x3f\x82\x1f\x66\x33\x78\x75\x46\x72\x15\x8d\xde\x2c\xd4\x07\x3c\xdb\x11\x22\xa4\x81\xf0\x2f\x49\x7e\xda\x0b\x20\xf7\x45\xec\x1f\x15\xce\x5c\x94\x78\x0e\x23\xa1\x8d\xde\x55\xa6\x71\x07\x62\x0f\xbe\xff\x6f\x00\x00\x00\xff\xff\xfa\x24\xc0\xa4\xdf\x35\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 13791, mode: os.FileMode(0644), modTime: time.Unix(1742330838, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5c, 0xf0, 0xe2, 0x85, 0x4a, 0x81, 0x8b, 0x4, 0xb9, 0xeb, 0x16, 0xdc, 0x29, 0x2, 0xbf, 0xa0, 0x49, 0x74, 0x14, 0x1d, 0xf2, 0x51, 0xac, 0xb9, 0x8, 0xc5, 0x71, 0x25, 0x6f, 0xc3, 0x6d, 0xe0}}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x11\xd2\x5d\x26\x97\x17\xc8\xa6\x80\x10\x9b\x22\xd1\xa8\x3f\x2b\xcb\xe0\x49\xb0\xe2\x8c\x61\xec\x09\xad\xa2\xbc\x7b\x15\x40\xad\xa8\x4a\x77\x47\x3e\xdf\xf9\x3c\x42\xae\x43\x8e\x08\x05\x74\x86\x9c\xf7\x46\xd5\x98\x90\x3a\x28\xa0\x64\x41\x85\xef\xb8\x93\x64\xb6\x7e\x44\x2a\x21\x42\xaf\x0c\xd7\xd2\x22\xa5\x08\x05\x9c\x02\x37\xc8\xc0\x42\x90\x65\xc9\xc4\x66\x35\x87\xbe\xcf\xcb\x31\xd9\x61\x50\x3e\xd4\x50\x8c\x2f\x2f\x81\x9b\xb9\xe3\x61\xf8\xbf\x0b\x64\x03\x67\xd8\x21\xa5\xcc\x87\x5a\x21\x73\xe0\x9f\xd4\xe5\xaf\x2c\x26\x8b\xcc\x2a\x48\x3a\x48\xba\xcf\x04\x49\x2a\xee\x83\x78\xab\x13\x1b\x8a\x15\xb2\xae\x9c\xc7\xf1\xc4\xb7\xc5\x93\x3a\xed\x91\x74\x0a\xdf\xe5\x97\x70\xfd\xa8\x17\xaf\xab\x52\xaf\x37\x7a\xf1\xbc\x9a\x95\xaa\xef\x5d\x05\x84\x90\xcf\x0e\x12\x61\x0a\xd9\x30\xa8\xbe\x3f\xb0\xa3\x54\xc1\x84\xf1\x28\x18\x93\xde\x8d\x65\x01\xff\xec\xe4\x02\x9e\xa1\x0c\x90\xec\x39\x5d\x15\x1b\xd3\x2e\xb7\x30\xcd\xef\x59\x5a\x6c\x03\x7f\x8c\x9e\x7c\x5a\xc1\xf2\x61\x72\x9d\xfc\x6e\x9b\xbb\xd8\xfc\xa9\xb3\x2e\x36\x37\xb2\xcb\xe2\xc6\xa6\x8e\x82\x82\xea\x33\x00\x00\xff\xff\x61\xe0\x01\xde\xf9\x01\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 505, mode: os.FileMode(0644), modTime: time.Unix(1716941027, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0x3, 0xc3, 0xc4, 0x14, 0xdf, 0x97, 0x3b, 0x68, 0xaf, 0x9e, 0xee, 0x13, 0x1, 0xbd, 0x3, 0x61, 0x3c, 0x95, 0x4b, 0x8f, 0x27, 0xcf, 0x52, 0x2d, 0x11, 0x2d, 0x67, 0x54, 0xd2, 0x1, 0x79}}
	return a, nil
}

var _configKubernetesTemplateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x6f\xdb\x3c\x0c\xbe\xfb\x57\x10\x2e\xde\xa3\x1d\xe7\xf2\x62\xd0\xad\x68\xd7\xa2\x43\xdb\x15\xeb\xd0\x9d\x19\x99\x6e\x84\xe8\xab\xfa\x48\x17\x64\xf9\xef\x83\x2c\xa7\xb5\xd3\x34\xc0\x7c\x92\xf8\x90\x0f\xf9\x90\x54\x72\x06\x57\x51\x6b\x92\xf0\xcb\xb8\x15\xb9\x02\xad\x78\x22\xe7\x85\xd1\x0c\x16\x18\xf8\x72\xb6\x9e\x17\x2b\xa1\x5b\x06\xdf\xcc\xa2\x50\x14\xb0\xc5\x80\xac\x00\xd0\xa8\x88\xc1\x76\x5b\xff\x44\xbf\xba\x69\x77\xbb\xc1\xe6\x2d\xf2\x0c\xdc\xef\x6f\x3d\x26\x71\x41\xd2\xa7\x48\x00\xb4\x96\x41\xd7\x67\xae\x5e\x73\xe6\x64\x0e\xe8\x57\x95\x68\x0f\x59\x01\xce\xe0\x22\xfa\x60\x14\xdc\xf6\x24\xe0\xa3\xb5\xc6\x85\x1e\xdb\x6e\x2b\x10\x9a\xcb\xd8\x12\x94\x35\xfd\x0e\x0e\xb3\x57\x09\x35\xfc\x01\x2d\x74\x4b\x3a\xc0\x17\xd8\xed\x0a\x6f\x89\x33\x28\x00\x16\xc8\x57\xa6\xeb\x6e\x85\x12\x81\xc1\xbc\x29\x00\xb8\x51\x56\x52\x10\x46\x7b\x06\xf3\x02\x20\x90\xb2\x12\x03\xe5\x92\xc7\xd2\xd3\x37\x96\x73\x42\xd2\x49\x59\x7d\x39\x83\x9b\x36\x2d\x3d\x92\x24\x1e\x8c\x7b\x67\x75\x46\x12\x83\xc4\xd7\x49\xf3\x3a\x98\x83\x91\xe4\x30\x57\xfa\xe6\x59\xc1\x8a\x36\x0c\xca\x14\x51\xbe\x59\x01\x8c\x4d\xbe\xc6\x31\x28\xbf\xbe\x44\x94\x63\x6c\x8d\x32\x12\x83\x72\xcf\x3f\xc6\xa8\xeb\x88\x07\x06\xe5\xbd\x79\xe4\x4b\x6a\xe3\x3b\xad\x27\xb7\x16\x9c\xce\x39\x37\x51\x87\xfb\x7e\x0f\x06\xe5\x1e\x07\x1f\x47\x3e\xa0\x0b\x0f\x46\x0a\xbe\x61\xf0\x5d\x5f\xa1\x90\xd1\xd1\x00\x73\xa3\x03\x0a\x4d\xce\xf7\xe3\xd8\x4b\xd0\x63\xae\xdc\xc5\xea\xb0\x69\xf9\x13\x0a\x9f\x89\xc1\x4b\xc4\x4d\x2d\xcc\xcc\x2c\x7d\xac\xd2\x04\xab\x85\x30\xb3\x4c\xc0\x5a\x5a\x93\x34\x56\x91\x0e\x87\x91\x0f\x51\xca\x7d\x6d\xe7\xf2\x15\x37\x7e\xe4\x81\xee\x79\xd4\xd8\x5c\x59\x99\xab\x29\x0f\xcd\x2e\xea\x0f\xb6\xaa\xe2\x46\x77\xe2\xf9\x03\x30\xa3\xc0\x67\x19\x9b\x4d\x44\xd6\x1b\x54\xf2\x08\x4f\xda\x9c\x9b\xcb\x43\xe0\x78\x47\x1c\x79\x13\x1d\xa7\x83\xd2\x1d\xbd\x44\xf2\xe1\xc0\x0a\xc0\x6d\x4c\x0b\x29\x3a\xd0\x04\xf5\x85\x8d\x1e\x1a\xa8\x76\xbb\xed\xb6\xbf\xa4\x03\x90\xf4\x04\xe9\x54\xce\x9b\x46\x95\xe9\x44\x7a\x9a\x15\xfa\xa7\xa1\x8c\xdb\x8c\xd8\x7e\xa0\xba\x5e\x40\x53\x0f\x84\xd6\x09\x1d\x3a\x28\xff\xab\x9b\xee\xba\x1c\xe0\x9e\x4c\x7a\xca\xf4\xff\xdf\x7d\xca\x4e\x76\x49\x8a\x1c\xca\xca\x07\xe3\xfa\xa9\xbf\x25\xba\x14\x7e\x75\x2a\x53\xc6\xa7\xa9\x9a\xe6\x78\xae\xb5\x91\x51\xd1\x5d\x5a\xe9\x49\xb3\xf6\x5b\x99\xe7\x56\x65\xb7\x49\x8d\x2a\xc5\x3c\x60\x58\x32\x18\x4d\x78\xe4\x72\x84\x6d\xff\x5e\xb2\xa4\x4f\x96\x7c\x4a\x6d\x6c\x18\xb6\x66\xbc\x3c\x55\x2b\xdc\xec\xb3\x70\x1f\x17\x39\x78\xec\x50\x8c\xf5\xbe\xbf\xbf\xd3\x3a\xb3\xf5\x0e\xed\xb8\x35\xc7\x9e\xeb\x10\x7e\x24\xe1\x3f\x48\xb7\xe9\x3f\xc8\x07\xd2\xe1\xa9\x2f\xe3\x42\xa2\x50\xe3\xcc\x3c\x19\x26\xbf\x3c\x76\xcd\x27\x54\x7f\x03\x00\x00\xff\xff\xb2\xda\xa9\xfe\xda\x06\x00\x00")

func configKubernetesTemplateYamlBytes() ([]byte, error) {
	return bindataRead(
		_configKubernetesTemplateYaml,
		"config/kubernetes-template.yaml",
	)
}

func configKubernetesTemplateYaml() (*asset, error) {
	bytes, err := configKubernetesTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/kubernetes-template.yaml", size: 1754, mode: os.FileMode(0644), modTime: time.Unix(1742845339, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8d, 0xfa, 0x20, 0x93, 0x82, 0xbd, 0x96, 0x87, 0x35, 0x9b, 0x86, 0x81, 0xed, 0xcc, 0x78, 0x12, 0x45, 0x80, 0xff, 0x5d, 0x2c, 0xd5, 0xbb, 0x95, 0x1b, 0xd, 0x41, 0xe3, 0x66, 0x13, 0x79, 0xfc}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/kubernetes-pvc.yaml":                configKubernetesPvcYaml,
	"config/gridengine-template.txt":            configGridengineTemplateTxt,
	"config/pbs-template.txt":                   configPbsTemplateTxt,
	"config/slurm-template.txt":                 configSlurmTemplateTxt,
	"config/kubernetes-pv.yaml":                 configKubernetesPvYaml,
	"config/kubernetes-executor-template.yaml":  configKubernetesExecutorTemplateYaml,
	"config/datastore/index.yaml":               configDatastoreIndexYaml,
	"config/kubernetes-configmap-template.yaml": configKubernetesConfigmapTemplateYaml,
	"config/default-config.yaml":                configDefaultConfigYaml,
	"config/htcondor-template.txt":              configHtcondorTemplateTxt,
	"config/kubernetes-template.yaml":           configKubernetesTemplateYaml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"datastore": {nil, map[string]*bintree{
			"index.yaml": {configDatastoreIndexYaml, map[string]*bintree{}},
		}},
		"default-config.yaml":                {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt":            {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":              {configHtcondorTemplateTxt, map[string]*bintree{}},
		"kubernetes-configmap-template.yaml": {configKubernetesConfigmapTemplateYaml, map[string]*bintree{}},
		"kubernetes-executor-template.yaml":  {configKubernetesExecutorTemplateYaml, map[string]*bintree{}},
		"kubernetes-pv.yaml":                 {configKubernetesPvYaml, map[string]*bintree{}},
		"kubernetes-pvc.yaml":                {configKubernetesPvcYaml, map[string]*bintree{}},
		"kubernetes-template.yaml":           {configKubernetesTemplateYaml, map[string]*bintree{}},
		"pbs-template.txt":                   {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":                 {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
