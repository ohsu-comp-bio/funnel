// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tes.proto

/*
Package tes is a generated protocol buffer package.

It is generated from these files:
	tes.proto

It has these top-level messages:
	Task
	Input
	Output
	Executor
	Resources
	CustomResource
	AWSResources
	EC2Resources
	GCEResources
	TaskLog
	ExecutorLog
	OutputFileLog
	CreateTaskResponse
	GetTaskRequest
	ListTasksRequest
	ListTasksResponse
	CancelTaskRequest
	CancelTaskResponse
	ServiceInfoRequest
	ServiceInfo
*/
package tes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FileType int32

const (
	FileType_FILE      FileType = 0
	FileType_DIRECTORY FileType = 1
)

var FileType_name = map[int32]string{
	0: "FILE",
	1: "DIRECTORY",
}
var FileType_value = map[string]int32{
	"FILE":      0,
	"DIRECTORY": 1,
}

func (x FileType) String() string {
	return proto.EnumName(FileType_name, int32(x))
}
func (FileType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// OUTPUT ONLY
//
// Task states.
type State int32

const (
	// The state of the task is unknown.
	//
	// This provides a safe default for messages where this field is missing,
	// for example, so that a missing field does not accidentally imply that
	// the state is QUEUED.
	State_UNKNOWN State = 0
	// The task is queued.
	State_QUEUED State = 1
	// The task has been assigned to a worker and is currently preparing to run.
	// For example, the worker may be turning on, downloading input files, etc.
	State_INITIALIZING State = 2
	// The task is running. Input files are downloaded and the first Executor
	// has been started.
	State_RUNNING State = 3
	// The task is paused.
	//
	// An implementation may have the ability to pause a task, but this is not required.
	State_PAUSED State = 4
	// The task has completed running. Executors have exited without error
	// and output files have been successfully uploaded.
	State_COMPLETE State = 5
	// The task encountered an error in one of the Executor processes. Generally,
	// this means that an Executor exited with a non-zero exit code.
	State_EXECUTOR_ERROR State = 6
	// The task was stopped due to a system error, but not from an Executor,
	// for example an upload failed due to network issues, the worker's ran out
	// of disk space, etc.
	State_SYSTEM_ERROR State = 7
	// The task was canceled by the user.
	State_CANCELED State = 8
)

var State_name = map[int32]string{
	0: "UNKNOWN",
	1: "QUEUED",
	2: "INITIALIZING",
	3: "RUNNING",
	4: "PAUSED",
	5: "COMPLETE",
	6: "EXECUTOR_ERROR",
	7: "SYSTEM_ERROR",
	8: "CANCELED",
}
var State_value = map[string]int32{
	"UNKNOWN":        0,
	"QUEUED":         1,
	"INITIALIZING":   2,
	"RUNNING":        3,
	"PAUSED":         4,
	"COMPLETE":       5,
	"EXECUTOR_ERROR": 6,
	"SYSTEM_ERROR":   7,
	"CANCELED":       8,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}
func (State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// TaskView affects the fields returned by the ListTasks endpoint.
//
// Some of the fields in task can be large strings (e.g. logs),
// which can be a burden on the network. In the default BASIC view,
// these heavyweight fields are not included, however, a client may
// request the FULL version to include these fields.
type TaskView int32

const (
	// Task message will include ONLY the fields:
	//   Task.Id
	//   Task.State
	TaskView_MINIMAL TaskView = 0
	// Task message will include all fields EXCEPT:
	//   Task.ExecutorLog.stdout
	//   Task.ExecutorLog.stderr
	//   Input.content
	//   TaskLog.system_logs
	TaskView_BASIC TaskView = 1
	// Task message includes all fields.
	TaskView_FULL TaskView = 2
)

var TaskView_name = map[int32]string{
	0: "MINIMAL",
	1: "BASIC",
	2: "FULL",
}
var TaskView_value = map[string]int32{
	"MINIMAL": 0,
	"BASIC":   1,
	"FULL":    2,
}

func (x TaskView) String() string {
	return proto.EnumName(TaskView_name, int32(x))
}
func (TaskView) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Task describes an instance of a task.
type Task struct {
	// OUTPUT ONLY
	//
	// Task identifier assigned by the server.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// OUTPUT ONLY
	State State `protobuf:"varint,2,opt,name=state,enum=tes.State" json:"state,omitempty"`
	// OPTIONAL
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// OPTIONAL
	Description string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	// OPTIONAL
	//
	// Input files.
	// Inputs will be downloaded and mounted into the executor container.
	Inputs []*Input `protobuf:"bytes,6,rep,name=inputs" json:"inputs,omitempty"`
	// OPTIONAL
	//
	// Output files.
	// Outputs will be uploaded from the executor container to long-term storage.
	Outputs []*Output `protobuf:"bytes,7,rep,name=outputs" json:"outputs,omitempty"`
	// OPTIONAL
	//
	// Request that the task be run with these resources.
	Resources *Resources `protobuf:"bytes,8,opt,name=resources" json:"resources,omitempty"`
	// REQUIRED
	//
	// A list of executors to be run, sequentially. Execution stops
	// on the first error.
	Executors []*Executor `protobuf:"bytes,9,rep,name=executors" json:"executors,omitempty"`
	// OPTIONAL
	//
	// Volumes are directories which may be used to share data between
	// Executors. Volumes are initialized as empty directories by the
	// system when the task starts and are mounted at the same path
	// in each Executor.
	//
	// For example, given a volume defined at "/vol/A",
	// executor 1 may write a file to "/vol/A/exec1.out.txt", then
	// executor 2 may read from that file.
	//
	// (Essentially, this translates to a `docker run -v` flag where
	// the container path is the same for each executor).
	Volumes []string `protobuf:"bytes,10,rep,name=volumes" json:"volumes,omitempty"`
	// OPTIONAL
	//
	// A key-value map of arbitrary tags.
	Tags map[string]string `protobuf:"bytes,11,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// OUTPUT ONLY
	//
	// Task logging information.
	// Normally, this will contain only one entry, but in the case where
	// a task fails and is retried, an entry will be appended to this list.
	Logs []*TaskLog `protobuf:"bytes,12,rep,name=logs" json:"logs,omitempty"`
	// OUTPUT ONLY, REQUIRED
	//
	// Date + time the task was created, in RFC 3339 format.
	// This is set by the system, not the client.
	CreationTime string `protobuf:"bytes,13,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetState() State {
	if m != nil {
		return m.State
	}
	return State_UNKNOWN
}

func (m *Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Task) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Task) GetInputs() []*Input {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *Task) GetOutputs() []*Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *Task) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Task) GetExecutors() []*Executor {
	if m != nil {
		return m.Executors
	}
	return nil
}

func (m *Task) GetVolumes() []string {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *Task) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Task) GetLogs() []*TaskLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *Task) GetCreationTime() string {
	if m != nil {
		return m.CreationTime
	}
	return ""
}

// Input describes Task input files.
type Input struct {
	// OPTIONAL
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// OPTIONAL
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// REQUIRED, unless "content" is set.
	//
	// URL in long term storage, for example:
	// s3://my-object-store/file1
	// gs://my-bucket/file2
	// file:///path/to/my/file
	// /path/to/my/file
	// etc...
	Url string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	// REQUIRED
	//
	// Path of the file inside the container.
	// Must be an absolute path.
	Path string `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	// REQUIRED
	//
	// Type of the file, FILE or DIRECTORY
	Type FileType `protobuf:"varint,5,opt,name=type,enum=tes.FileType" json:"type,omitempty"`
	// OPTIONAL
	//
	// File content literal.
	// Implementations should support a minimum of 128 KiB in this field and may define its own maximum.
	// UTF-8 encoded
	//
	// If content is not empty, "url" must be ignored.
	Content string `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
}

func (m *Input) Reset()                    { *m = Input{} }
func (m *Input) String() string            { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()               {}
func (*Input) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Input) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Input) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Input) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Input) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Input) GetType() FileType {
	if m != nil {
		return m.Type
	}
	return FileType_FILE
}

func (m *Input) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// Output describes Task output files.
type Output struct {
	// OPTIONAL
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// OPTIONAL
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// REQUIRED
	//
	// URL in long term storage, for example:
	// s3://my-object-store/file1
	// gs://my-bucket/file2
	// file:///path/to/my/file
	// /path/to/my/file
	// etc...
	Url string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	// REQUIRED
	//
	// Path of the file inside the container.
	// Must be an absolute path.
	Path string `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	// REQUIRED
	//
	// Type of the file, FILE or DIRECTORY
	Type FileType `protobuf:"varint,5,opt,name=type,enum=tes.FileType" json:"type,omitempty"`
}

func (m *Output) Reset()                    { *m = Output{} }
func (m *Output) String() string            { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()               {}
func (*Output) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Output) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Output) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Output) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Output) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Output) GetType() FileType {
	if m != nil {
		return m.Type
	}
	return FileType_FILE
}

// Executor describes a command to be executed, and its environment.
type Executor struct {
	// REQUIRED
	//
	// Name of the container image, for example:
	// ubuntu
	// quay.io/aptible/ubuntu
	// gcr.io/my-org/my-image
	// etc...
	Image string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	// REQUIRED
	//
	// A sequence of program arguments to execute, where the first argument
	// is the program to execute (i.e. argv).
	Command []string `protobuf:"bytes,2,rep,name=command" json:"command,omitempty"`
	// OPTIONAL
	//
	// The working directory that the command will be executed in.
	// Defaults to the directory set by the container image.
	Workdir string `protobuf:"bytes,3,opt,name=workdir" json:"workdir,omitempty"`
	// OPTIONAL
	//
	// Path inside the container to a file which will be piped
	// to the executor's stdin. Must be an absolute path.
	Stdin string `protobuf:"bytes,6,opt,name=stdin" json:"stdin,omitempty"`
	// OPTIONAL
	//
	// Path inside the container to a file where the executor's
	// stdout will be written to. Must be an absolute path.
	Stdout string `protobuf:"bytes,4,opt,name=stdout" json:"stdout,omitempty"`
	// OPTIONAL
	//
	// Path inside the container to a file where the executor's
	// stderr will be written to. Must be an absolute path.
	Stderr string `protobuf:"bytes,5,opt,name=stderr" json:"stderr,omitempty"`
	// OPTIONAL
	//
	// Enviromental variables to set within the container.
	Env map[string]string `protobuf:"bytes,8,rep,name=env" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Executor) Reset()                    { *m = Executor{} }
func (m *Executor) String() string            { return proto.CompactTextString(m) }
func (*Executor) ProtoMessage()               {}
func (*Executor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Executor) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Executor) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *Executor) GetWorkdir() string {
	if m != nil {
		return m.Workdir
	}
	return ""
}

func (m *Executor) GetStdin() string {
	if m != nil {
		return m.Stdin
	}
	return ""
}

func (m *Executor) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *Executor) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

func (m *Executor) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

// Resources describes the resources requested by a task.
type Resources struct {
	// OPTIONAL
	//
	// Requested number of CPUs
	CpuCores uint32 `protobuf:"varint,1,opt,name=cpu_cores,json=cpuCores" json:"cpu_cores,omitempty"`
	// OPTIONAL
	//
	// Requested RAM required in gigabytes (GB)
	RamGb float64 `protobuf:"fixed64,3,opt,name=ram_gb,json=ramGb" json:"ram_gb,omitempty"`
	// OPTIONAL
	//
	// Requested disk size in gigabytes (GB)
	DiskGb float64               `protobuf:"fixed64,4,opt,name=disk_gb,json=diskGb" json:"disk_gb,omitempty"`
	Extra  *google_protobuf1.Any `protobuf:"bytes,6,opt,name=extra" json:"extra,omitempty"`
}

func (m *Resources) Reset()                    { *m = Resources{} }
func (m *Resources) String() string            { return proto.CompactTextString(m) }
func (*Resources) ProtoMessage()               {}
func (*Resources) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Resources) GetCpuCores() uint32 {
	if m != nil {
		return m.CpuCores
	}
	return 0
}

func (m *Resources) GetRamGb() float64 {
	if m != nil {
		return m.RamGb
	}
	return 0
}

func (m *Resources) GetDiskGb() float64 {
	if m != nil {
		return m.DiskGb
	}
	return 0
}

func (m *Resources) GetExtra() *google_protobuf1.Any {
	if m != nil {
		return m.Extra
	}
	return nil
}

type CustomResource struct {
	Queue    string `protobuf:"bytes,1,opt,name=queue" json:"queue,omitempty"`
	Priority int32  `protobuf:"varint,2,opt,name=priority" json:"priority,omitempty"`
}

func (m *CustomResource) Reset()                    { *m = CustomResource{} }
func (m *CustomResource) String() string            { return proto.CompactTextString(m) }
func (*CustomResource) ProtoMessage()               {}
func (*CustomResource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CustomResource) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *CustomResource) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type AWSResources struct {
	JobQueue string  `protobuf:"bytes,1,opt,name=job_queue,json=jobQueue" json:"job_queue,omitempty"`
	Bid      float32 `protobuf:"fixed32,2,opt,name=bid" json:"bid,omitempty"`
}

func (m *AWSResources) Reset()                    { *m = AWSResources{} }
func (m *AWSResources) String() string            { return proto.CompactTextString(m) }
func (*AWSResources) ProtoMessage()               {}
func (*AWSResources) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AWSResources) GetJobQueue() string {
	if m != nil {
		return m.JobQueue
	}
	return ""
}

func (m *AWSResources) GetBid() float32 {
	if m != nil {
		return m.Bid
	}
	return 0
}

type EC2Resources struct {
	AmiName string `protobuf:"bytes,1,opt,name=ami_name,json=amiName" json:"ami_name,omitempty"`
}

func (m *EC2Resources) Reset()                    { *m = EC2Resources{} }
func (m *EC2Resources) String() string            { return proto.CompactTextString(m) }
func (*EC2Resources) ProtoMessage()               {}
func (*EC2Resources) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *EC2Resources) GetAmiName() string {
	if m != nil {
		return m.AmiName
	}
	return ""
}

type GCEResources struct {
	Preemptible bool     `protobuf:"varint,1,opt,name=preemptible" json:"preemptible,omitempty"`
	Zones       []string `protobuf:"bytes,2,rep,name=zones" json:"zones,omitempty"`
}

func (m *GCEResources) Reset()                    { *m = GCEResources{} }
func (m *GCEResources) String() string            { return proto.CompactTextString(m) }
func (*GCEResources) ProtoMessage()               {}
func (*GCEResources) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GCEResources) GetPreemptible() bool {
	if m != nil {
		return m.Preemptible
	}
	return false
}

func (m *GCEResources) GetZones() []string {
	if m != nil {
		return m.Zones
	}
	return nil
}

// OUTPUT ONLY
//
// TaskLog describes logging information related to a Task.
type TaskLog struct {
	// REQUIRED
	//
	// Logs for each executor
	Logs []*ExecutorLog `protobuf:"bytes,1,rep,name=logs" json:"logs,omitempty"`
	// OPTIONAL
	//
	// Arbitrary logging metadata included by the implementation.
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// OPTIONAL
	//
	// When the task started, in RFC 3339 format.
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// OPTIONAL
	//
	// When the task ended, in RFC 3339 format.
	EndTime string `protobuf:"bytes,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	// REQUIRED
	//
	// Information about all output files. Directory outputs are
	// flattened into separate items.
	Outputs []*OutputFileLog `protobuf:"bytes,5,rep,name=outputs" json:"outputs,omitempty"`
	// OPTIONAL
	//
	// System logs are any logs the system decides are relevant,
	// which are not tied directly to an Executor process.
	// Content is implementation specific: format, size, etc.
	//
	// System logs may be collected here to provide convenient access.
	//
	// For example, the system may include the name of the host
	// where the task is executing, an error message that caused
	// a SYSTEM_ERROR state (e.g. disk is full), etc.
	//
	// System logs are only included in the FULL task view.
	SystemLogs []string `protobuf:"bytes,6,rep,name=system_logs,json=systemLogs" json:"system_logs,omitempty"`
}

func (m *TaskLog) Reset()                    { *m = TaskLog{} }
func (m *TaskLog) String() string            { return proto.CompactTextString(m) }
func (*TaskLog) ProtoMessage()               {}
func (*TaskLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TaskLog) GetLogs() []*ExecutorLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *TaskLog) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *TaskLog) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *TaskLog) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *TaskLog) GetOutputs() []*OutputFileLog {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *TaskLog) GetSystemLogs() []string {
	if m != nil {
		return m.SystemLogs
	}
	return nil
}

// OUTPUT ONLY
//
// ExecutorLog describes logging information related to an Executor.
type ExecutorLog struct {
	// OPTIONAL
	//
	// Time the executor started, in RFC 3339 format.
	StartTime string `protobuf:"bytes,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// OPTIONAL
	//
	// Time the executor ended, in RFC 3339 format.
	EndTime string `protobuf:"bytes,3,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	// OPTIONAL
	//
	// Stdout content.
	//
	// This is meant for convenience. No guarantees are made about the content.
	// Implementations may chose different approaches: only the head, only the tail,
	// a URL reference only, etc.
	//
	// In order to capture the full stdout users should set Executor.stdout
	// to a container file path, and use Task.outputs to upload that file
	// to permanent storage.
	Stdout string `protobuf:"bytes,4,opt,name=stdout" json:"stdout,omitempty"`
	// OPTIONAL
	//
	// Stderr content.
	//
	// This is meant for convenience. No guarantees are made about the content.
	// Implementations may chose different approaches: only the head, only the tail,
	// a URL reference only, etc.
	//
	// In order to capture the full stderr users should set Executor.stderr
	// to a container file path, and use Task.outputs to upload that file
	// to permanent storage.
	Stderr string `protobuf:"bytes,5,opt,name=stderr" json:"stderr,omitempty"`
	// REQUIRED
	//
	// Exit code.
	ExitCode int32 `protobuf:"varint,6,opt,name=exit_code,json=exitCode" json:"exit_code,omitempty"`
}

func (m *ExecutorLog) Reset()                    { *m = ExecutorLog{} }
func (m *ExecutorLog) String() string            { return proto.CompactTextString(m) }
func (*ExecutorLog) ProtoMessage()               {}
func (*ExecutorLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ExecutorLog) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *ExecutorLog) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *ExecutorLog) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *ExecutorLog) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

func (m *ExecutorLog) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

// OUTPUT ONLY
//
// OutputFileLog describes a single output file. This describes
// file details after the task has completed successfully,
// for logging purposes.
type OutputFileLog struct {
	// REQUIRED
	//
	// URL of the file in storage, e.g. s3://bucket/file.txt
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// REQUIRED
	//
	// Path of the file inside the container. Must be an absolute path.
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	// REQUIRED
	//
	// Size of the file in bytes.
	SizeBytes int64 `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
}

func (m *OutputFileLog) Reset()                    { *m = OutputFileLog{} }
func (m *OutputFileLog) String() string            { return proto.CompactTextString(m) }
func (*OutputFileLog) ProtoMessage()               {}
func (*OutputFileLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *OutputFileLog) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *OutputFileLog) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *OutputFileLog) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

// OUTPUT ONLY
//
// CreateTaskResponse describes a response from the CreateTask endpoint.
type CreateTaskResponse struct {
	// REQUIRED
	//
	// Task identifier assigned by the server.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateTaskResponse) Reset()                    { *m = CreateTaskResponse{} }
func (m *CreateTaskResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTaskResponse) ProtoMessage()               {}
func (*CreateTaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CreateTaskResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// GetTaskRequest describes a request to the GetTask endpoint.
type GetTaskRequest struct {
	// REQUIRED
	//
	// Task identifier.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// OPTIONAL
	//
	// Affects the fields included in the returned Task messages.
	// See TaskView below.
	View TaskView `protobuf:"varint,2,opt,name=view,enum=tes.TaskView" json:"view,omitempty"`
}

func (m *GetTaskRequest) Reset()                    { *m = GetTaskRequest{} }
func (m *GetTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTaskRequest) ProtoMessage()               {}
func (*GetTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetTaskRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetTaskRequest) GetView() TaskView {
	if m != nil {
		return m.View
	}
	return TaskView_MINIMAL
}

// ListTasksRequest describes a request to the ListTasks service endpoint.
type ListTasksRequest struct {
	// OPTIONAL
	//
	// Number of tasks to return in one page.
	// Must be less than 2048. Defaults to 256.
	PageSize uint32 `protobuf:"varint,3,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// OPTIONAL
	//
	// Page token is used to retrieve the next page of results.
	// If unspecified, returns the first page of results.
	// See ListTasksResponse.next_page_token
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	// OPTIONAL
	//
	// Affects the fields included in the returned Task messages.
	// See TaskView below.
	View TaskView `protobuf:"varint,5,opt,name=view,enum=tes.TaskView" json:"view,omitempty"`
	// OPTIONAL
	//
	// Filter tasks by state.
	// Filtering by the UNKNOWN state is not allowed.
	State State `protobuf:"varint,6,opt,name=state,enum=tes.State" json:"state,omitempty"`
	// OPTIONAL
	//
	// Filter tasks based on the Task.tags field.
	// A tag filter matches a Task tag if both the key and value are exact matches.
	//
	//   Filter                            Tags                          Match?
	//   ----------------------------------------------------------------------
	//   {"foo": "bar"}                    {"foo": "bar"}                Yes
	//   {"foo": ""}                       {"foo": ""}                   Yes
	//   {"foo": "bar", "baz": "bat"}      {"foo": "bar", "baz": "bat"}  Yes
	//   {"foo": "bar"}                    {"foo": "bar", "baz": "bat"}  Yes
	//   {"foo": "bar", "baz": "bat"}      {"foo": "bar"}                No
	//   {"foo": ""}                       {"foo": "bar"}                No
	Tags map[string]string `protobuf:"bytes,7,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ListTasksRequest) Reset()                    { *m = ListTasksRequest{} }
func (m *ListTasksRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTasksRequest) ProtoMessage()               {}
func (*ListTasksRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ListTasksRequest) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListTasksRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListTasksRequest) GetView() TaskView {
	if m != nil {
		return m.View
	}
	return TaskView_MINIMAL
}

func (m *ListTasksRequest) GetState() State {
	if m != nil {
		return m.State
	}
	return State_UNKNOWN
}

func (m *ListTasksRequest) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// OUTPUT ONLY
//
// ListTasksResponse describes a response from the ListTasks endpoint.
type ListTasksResponse struct {
	// REQUIRED
	//
	// List of tasks.
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
	// OPTIONAL
	//
	// Token used to return the next page of results.
	// See TaskListRequest.next_page_token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (m *ListTasksResponse) Reset()                    { *m = ListTasksResponse{} }
func (m *ListTasksResponse) String() string            { return proto.CompactTextString(m) }
func (*ListTasksResponse) ProtoMessage()               {}
func (*ListTasksResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ListTasksResponse) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *ListTasksResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// CancelTaskRequest describes a request to the CancelTask endpoint.
type CancelTaskRequest struct {
	// REQUIRED
	//
	// Task identifier.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *CancelTaskRequest) Reset()                    { *m = CancelTaskRequest{} }
func (m *CancelTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelTaskRequest) ProtoMessage()               {}
func (*CancelTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CancelTaskRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// OUTPUT ONLY
//
// CancelTaskResponse describes a response from the CancelTask endpoint.
type CancelTaskResponse struct {
}

func (m *CancelTaskResponse) Reset()                    { *m = CancelTaskResponse{} }
func (m *CancelTaskResponse) String() string            { return proto.CompactTextString(m) }
func (*CancelTaskResponse) ProtoMessage()               {}
func (*CancelTaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

// ServiceInfoRequest describes a request to the ServiceInfo endpoint.
type ServiceInfoRequest struct {
}

func (m *ServiceInfoRequest) Reset()                    { *m = ServiceInfoRequest{} }
func (m *ServiceInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*ServiceInfoRequest) ProtoMessage()               {}
func (*ServiceInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

// OUTPUT ONLY
//
// ServiceInfo describes information about the service,
// such as storage details, resource availability,
// and other documentation.
type ServiceInfo struct {
	// Returns the name of the service, e.g. "ohsu-compbio-funnel".
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Returns a documentation string, e.g. "Hey, we're OHSU Comp. Bio!".
	Doc string `protobuf:"bytes,2,opt,name=doc" json:"doc,omitempty"`
	// Lists some, but not necessarily all, storage locations supported by the service.
	//
	// Must be in a valid URL format.
	// e.g.
	// file:///path/to/local/funnel-storage
	// s3://ohsu-compbio-funnel/storage
	// etc.
	Storage []string `protobuf:"bytes,3,rep,name=storage" json:"storage,omitempty"`
}

func (m *ServiceInfo) Reset()                    { *m = ServiceInfo{} }
func (m *ServiceInfo) String() string            { return proto.CompactTextString(m) }
func (*ServiceInfo) ProtoMessage()               {}
func (*ServiceInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ServiceInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceInfo) GetDoc() string {
	if m != nil {
		return m.Doc
	}
	return ""
}

func (m *ServiceInfo) GetStorage() []string {
	if m != nil {
		return m.Storage
	}
	return nil
}

func init() {
	proto.RegisterType((*Task)(nil), "tes.Task")
	proto.RegisterType((*Input)(nil), "tes.Input")
	proto.RegisterType((*Output)(nil), "tes.Output")
	proto.RegisterType((*Executor)(nil), "tes.Executor")
	proto.RegisterType((*Resources)(nil), "tes.Resources")
	proto.RegisterType((*CustomResource)(nil), "tes.CustomResource")
	proto.RegisterType((*AWSResources)(nil), "tes.AWSResources")
	proto.RegisterType((*EC2Resources)(nil), "tes.EC2Resources")
	proto.RegisterType((*GCEResources)(nil), "tes.GCEResources")
	proto.RegisterType((*TaskLog)(nil), "tes.TaskLog")
	proto.RegisterType((*ExecutorLog)(nil), "tes.ExecutorLog")
	proto.RegisterType((*OutputFileLog)(nil), "tes.OutputFileLog")
	proto.RegisterType((*CreateTaskResponse)(nil), "tes.CreateTaskResponse")
	proto.RegisterType((*GetTaskRequest)(nil), "tes.GetTaskRequest")
	proto.RegisterType((*ListTasksRequest)(nil), "tes.ListTasksRequest")
	proto.RegisterType((*ListTasksResponse)(nil), "tes.ListTasksResponse")
	proto.RegisterType((*CancelTaskRequest)(nil), "tes.CancelTaskRequest")
	proto.RegisterType((*CancelTaskResponse)(nil), "tes.CancelTaskResponse")
	proto.RegisterType((*ServiceInfoRequest)(nil), "tes.ServiceInfoRequest")
	proto.RegisterType((*ServiceInfo)(nil), "tes.ServiceInfo")
	proto.RegisterEnum("tes.FileType", FileType_name, FileType_value)
	proto.RegisterEnum("tes.State", State_name, State_value)
	proto.RegisterEnum("tes.TaskView", TaskView_name, TaskView_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TaskService service

type TaskServiceClient interface {
	// GetServiceInfo provides information about the service,
	// such as storage details, resource availability, and
	// other documentation.
	GetServiceInfo(ctx context.Context, in *ServiceInfoRequest, opts ...grpc.CallOption) (*ServiceInfo, error)
	// Create a new task.
	CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	// List tasks.
	// TaskView is requested as such: "v1/tasks?view=BASIC"
	// Filter examples:
	// "v1/tasks?view=MINIMAL&tags[workflowID]=e59fb57a-eb87-4c02-b7e2-562b586b5db3"
	// "v1/tasks?state=RUNNING"
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	// Get a task.
	// TaskView is requested as such: "v1/tasks/{id}?view=FULL"
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error)
	// Cancel a task.
	CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*CancelTaskResponse, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) GetServiceInfo(ctx context.Context, in *ServiceInfoRequest, opts ...grpc.CallOption) (*ServiceInfo, error) {
	out := new(ServiceInfo)
	err := grpc.Invoke(ctx, "/tes.TaskService/GetServiceInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := grpc.Invoke(ctx, "/tes.TaskService/CreateTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	out := new(ListTasksResponse)
	err := grpc.Invoke(ctx, "/tes.TaskService/ListTasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := grpc.Invoke(ctx, "/tes.TaskService/GetTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*CancelTaskResponse, error) {
	out := new(CancelTaskResponse)
	err := grpc.Invoke(ctx, "/tes.TaskService/CancelTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskService service

type TaskServiceServer interface {
	// GetServiceInfo provides information about the service,
	// such as storage details, resource availability, and
	// other documentation.
	GetServiceInfo(context.Context, *ServiceInfoRequest) (*ServiceInfo, error)
	// Create a new task.
	CreateTask(context.Context, *Task) (*CreateTaskResponse, error)
	// List tasks.
	// TaskView is requested as such: "v1/tasks?view=BASIC"
	// Filter examples:
	// "v1/tasks?view=MINIMAL&tags[workflowID]=e59fb57a-eb87-4c02-b7e2-562b586b5db3"
	// "v1/tasks?state=RUNNING"
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	// Get a task.
	// TaskView is requested as such: "v1/tasks/{id}?view=FULL"
	GetTask(context.Context, *GetTaskRequest) (*Task, error)
	// Cancel a task.
	CancelTask(context.Context, *CancelTaskRequest) (*CancelTaskResponse, error)
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_GetServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tes.TaskService/GetServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetServiceInfo(ctx, req.(*ServiceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tes.TaskService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tes.TaskService/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tes.TaskService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tes.TaskService/CancelTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CancelTask(ctx, req.(*CancelTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tes.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceInfo",
			Handler:    _TaskService_GetServiceInfo_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _TaskService_CreateTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _TaskService_ListTasks_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TaskService_GetTask_Handler,
		},
		{
			MethodName: "CancelTask",
			Handler:    _TaskService_CancelTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tes.proto",
}

func init() { proto.RegisterFile("tes.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4b, 0x6f, 0xdb, 0x56,
	0x16, 0x0e, 0x45, 0x3d, 0xc8, 0xa3, 0xc7, 0x30, 0x77, 0x1c, 0x87, 0x51, 0x26, 0x13, 0x85, 0xc9,
	0xcc, 0x78, 0x3c, 0x19, 0x19, 0xe3, 0x00, 0x99, 0x22, 0x45, 0x17, 0x8a, 0x4c, 0x1b, 0x42, 0x65,
	0x39, 0xb9, 0x92, 0x9b, 0xa6, 0x0d, 0x20, 0x50, 0xe2, 0x8d, 0xca, 0x58, 0x24, 0x15, 0xde, 0x4b,
	0x27, 0x4a, 0xd1, 0x45, 0x8b, 0x02, 0x5d, 0x75, 0xd5, 0xfe, 0x80, 0xa2, 0xfb, 0xfe, 0x9a, 0x2e,
	0xfa, 0x07, 0xfa, 0x33, 0xba, 0x28, 0xee, 0x83, 0x7a, 0xd8, 0x49, 0x80, 0x74, 0xd3, 0x1d, 0xcf,
	0x77, 0xce, 0xfd, 0xee, 0x79, 0xdd, 0x73, 0x08, 0x26, 0x23, 0xb4, 0x39, 0x4b, 0x62, 0x16, 0x23,
	0x9d, 0x11, 0x5a, 0xff, 0xdb, 0x24, 0x8e, 0x27, 0x53, 0xb2, 0xe3, 0xcd, 0x82, 0x1d, 0x2f, 0x8a,
	0x62, 0xe6, 0xb1, 0x20, 0x8e, 0x94, 0x49, 0xfd, 0x8a, 0xd2, 0x0a, 0x69, 0x94, 0x3e, 0xdd, 0xf1,
	0xa2, 0xb9, 0x54, 0x39, 0xbf, 0xe8, 0x90, 0x1f, 0x78, 0xf4, 0x04, 0xd5, 0x20, 0x17, 0xf8, 0xb6,
	0xd6, 0xd0, 0xb6, 0x4c, 0x9c, 0x0b, 0x7c, 0xd4, 0x80, 0x02, 0x65, 0x1e, 0x23, 0x76, 0xae, 0xa1,
	0x6d, 0xd5, 0x76, 0xa1, 0xc9, 0x6f, 0xec, 0x73, 0x04, 0x4b, 0x05, 0x42, 0x90, 0x8f, 0xbc, 0x90,
	0xd8, 0xba, 0x38, 0x23, 0xbe, 0x51, 0x03, 0xca, 0x3e, 0xa1, 0xe3, 0x24, 0x98, 0xf1, 0xfb, 0xed,
	0x82, 0x50, 0xad, 0x42, 0xc8, 0x81, 0x62, 0x10, 0xcd, 0x52, 0x46, 0xed, 0x62, 0x43, 0xdf, 0x2a,
	0x2b, 0xe2, 0x0e, 0x87, 0xb0, 0xd2, 0xa0, 0x7f, 0x40, 0x29, 0x4e, 0x99, 0x30, 0x2a, 0x09, 0xa3,
	0xb2, 0x30, 0x3a, 0x12, 0x18, 0xce, 0x74, 0xe8, 0x36, 0x98, 0x09, 0xa1, 0x71, 0x9a, 0x8c, 0x09,
	0xb5, 0x8d, 0x86, 0xb6, 0x55, 0xde, 0xad, 0x09, 0x43, 0x9c, 0xa1, 0x78, 0x69, 0x80, 0xfe, 0x03,
	0x26, 0x79, 0x49, 0xc6, 0x29, 0x8b, 0x13, 0x6a, 0x9b, 0x82, 0xb6, 0x2a, 0xac, 0x5d, 0x85, 0xe2,
	0xa5, 0x1e, 0xd9, 0x50, 0x3a, 0x8d, 0xa7, 0x69, 0x48, 0xa8, 0x0d, 0x0d, 0x7d, 0xcb, 0xc4, 0x99,
	0x88, 0xfe, 0x05, 0x79, 0xe6, 0x4d, 0xa8, 0x5d, 0x16, 0x0c, 0x7f, 0x15, 0x0c, 0x3c, 0x81, 0xcd,
	0x81, 0x37, 0xa1, 0x6e, 0xc4, 0x92, 0x39, 0x16, 0x06, 0xa8, 0x01, 0xf9, 0x69, 0x3c, 0xa1, 0x76,
	0x45, 0x18, 0x56, 0x16, 0x86, 0xdd, 0x78, 0x82, 0x85, 0x06, 0xdd, 0x84, 0xea, 0x38, 0x21, 0xa2,
	0x52, 0x43, 0x16, 0x84, 0xc4, 0xae, 0x8a, 0x74, 0x55, 0x32, 0x70, 0x10, 0x84, 0xa4, 0xfe, 0x7f,
	0x30, 0x17, 0xcc, 0xc8, 0x02, 0xfd, 0x84, 0xcc, 0x55, 0x95, 0xf8, 0x27, 0xda, 0x80, 0xc2, 0xa9,
	0x37, 0x4d, 0x65, 0x99, 0x4c, 0x2c, 0x85, 0x7b, 0xb9, 0xf7, 0x34, 0xe7, 0x07, 0x0d, 0x0a, 0x22,
	0xad, 0x8b, 0x42, 0x69, 0x6f, 0x2e, 0x54, 0xee, 0x7c, 0xa1, 0x2c, 0xd0, 0xd3, 0x64, 0xaa, 0xaa,
	0xcb, 0x3f, 0x39, 0xcf, 0xcc, 0x63, 0x9f, 0xd9, 0x79, 0xc9, 0xc3, 0xbf, 0xd1, 0x0d, 0xc8, 0xb3,
	0xf9, 0x8c, 0x88, 0x4a, 0xd7, 0x54, 0x42, 0xf7, 0x83, 0x29, 0x19, 0xcc, 0x67, 0x04, 0x0b, 0x15,
	0xcf, 0xe5, 0x38, 0x8e, 0x18, 0x89, 0x98, 0x5d, 0x14, 0x27, 0x33, 0xd1, 0xf9, 0x46, 0x83, 0xa2,
	0x2c, 0xea, 0x9f, 0xec, 0xa3, 0xf3, 0x9b, 0x06, 0x46, 0xd6, 0x07, 0x3c, 0xa7, 0x41, 0xe8, 0x4d,
	0x32, 0x67, 0xa4, 0x20, 0xc3, 0x08, 0x43, 0x2f, 0xf2, 0xed, 0x9c, 0x6c, 0x09, 0x25, 0x72, 0xcd,
	0x8b, 0x38, 0x39, 0xf1, 0x83, 0x44, 0x79, 0x92, 0x89, 0x9c, 0x89, 0x32, 0x3f, 0x88, 0x54, 0xe0,
	0x52, 0x40, 0x9b, 0x50, 0xa4, 0xcc, 0x8f, 0x53, 0xa6, 0xbc, 0x54, 0x92, 0xc2, 0x49, 0x92, 0xa8,
	0x77, 0xa3, 0x24, 0xb4, 0x05, 0x3a, 0x89, 0x4e, 0x6d, 0x43, 0x34, 0xd2, 0xe6, 0x5a, 0xcf, 0x36,
	0xdd, 0xe8, 0x54, 0x36, 0x1d, 0x37, 0xa9, 0xdf, 0x05, 0x23, 0x03, 0xde, 0xa9, 0x57, 0xbe, 0xd6,
	0xc0, 0x5c, 0x3c, 0x1a, 0x74, 0x15, 0xcc, 0xf1, 0x2c, 0x1d, 0x8e, 0xe3, 0x84, 0x50, 0x71, 0xbe,
	0x8a, 0x8d, 0xf1, 0x2c, 0x6d, 0x73, 0x19, 0x5d, 0x82, 0x62, 0xe2, 0x85, 0xc3, 0xc9, 0x48, 0xc4,
	0xaa, 0xe1, 0x42, 0xe2, 0x85, 0x07, 0x23, 0x74, 0x19, 0x4a, 0x7e, 0x40, 0x4f, 0x38, 0x9e, 0x17,
	0x78, 0x91, 0x8b, 0x07, 0x23, 0xb4, 0x0d, 0x05, 0xf2, 0x92, 0x25, 0x9e, 0x48, 0x41, 0x79, 0x77,
	0xa3, 0x29, 0x67, 0x51, 0x33, 0x9b, 0x45, 0xcd, 0x56, 0x34, 0xc7, 0xd2, 0xc4, 0xb9, 0x0f, 0xb5,
	0x76, 0x4a, 0x59, 0x1c, 0x66, 0xbe, 0x70, 0x97, 0x9f, 0xa7, 0x24, 0x5d, 0x94, 0x42, 0x08, 0xa8,
	0x0e, 0xc6, 0x2c, 0x09, 0xe2, 0x24, 0x60, 0x73, 0x11, 0x4b, 0x01, 0x2f, 0x64, 0xe7, 0x03, 0xa8,
	0xb4, 0x1e, 0xf5, 0xd7, 0x82, 0x79, 0x16, 0x8f, 0x86, 0xab, 0x2c, 0xc6, 0xb3, 0x78, 0xf4, 0x50,
	0x10, 0x59, 0xa0, 0x8f, 0x02, 0x5f, 0x70, 0xe4, 0x30, 0xff, 0x74, 0xfe, 0x0d, 0x15, 0xb7, 0xbd,
	0xbb, 0x3c, 0x7e, 0x05, 0x0c, 0x2f, 0x0c, 0x86, 0x2b, 0xbd, 0x59, 0xf2, 0xc2, 0xa0, 0xe7, 0x85,
	0xc4, 0xd9, 0x87, 0xca, 0x41, 0xdb, 0x5d, 0x9a, 0x36, 0xa0, 0x3c, 0x4b, 0x08, 0x09, 0x67, 0x2c,
	0x18, 0x4d, 0xa5, 0xb5, 0x81, 0x57, 0x21, 0x1e, 0xcd, 0xab, 0x38, 0x22, 0x54, 0x35, 0x90, 0x14,
	0x9c, 0x9f, 0x72, 0x50, 0x52, 0x83, 0x01, 0xdd, 0x52, 0x43, 0x43, 0x13, 0xb5, 0xb6, 0xd6, 0x6a,
	0xbd, 0x1c, 0x1c, 0x77, 0xc1, 0x08, 0x09, 0xf3, 0x7c, 0x8f, 0x79, 0x82, 0xaa, 0xbc, 0x5b, 0x5f,
	0x1d, 0x2f, 0xcd, 0x43, 0xa5, 0x94, 0x9d, 0xb1, 0xb0, 0x45, 0xd7, 0x00, 0x28, 0xf3, 0x12, 0x26,
	0xa7, 0x8d, 0xec, 0x55, 0x53, 0x20, 0x7c, 0xd4, 0xf0, 0x58, 0x49, 0xe4, 0x4b, 0xa5, 0xec, 0xcc,
	0x12, 0x89, 0x7c, 0xa1, 0xba, 0xbd, 0x9c, 0xc8, 0x05, 0x71, 0x21, 0x5a, 0x99, 0xc8, 0xfc, 0x2d,
	0x71, 0xe7, 0x16, 0x83, 0xf9, 0x3a, 0x94, 0xe9, 0x9c, 0x32, 0x12, 0x0e, 0x45, 0x30, 0x45, 0x11,
	0x2d, 0x48, 0xa8, 0x1b, 0x4f, 0x68, 0xfd, 0x7d, 0xa8, 0xae, 0xf9, 0xf8, 0x4e, 0xcd, 0xfa, 0xbd,
	0x06, 0xe5, 0x95, 0x9c, 0x9c, 0x89, 0x2a, 0xf7, 0xb6, 0xa8, 0xf4, 0xf5, 0xa8, 0xde, 0xf5, 0x21,
	0x5e, 0xe5, 0x2b, 0x24, 0x60, 0xc3, 0x71, 0xec, 0x13, 0xd1, 0xcf, 0x05, 0x6c, 0x70, 0xa0, 0x1d,
	0xfb, 0xc4, 0x19, 0x40, 0x75, 0x2d, 0x1d, 0xd9, 0x70, 0xd2, 0xce, 0x0f, 0xa7, 0xdc, 0xca, 0x70,
	0xe2, 0xde, 0x07, 0xaf, 0xc8, 0x70, 0x34, 0x67, 0x84, 0x0a, 0x07, 0x75, 0x6c, 0x72, 0xe4, 0x3e,
	0x07, 0x9c, 0x5b, 0x80, 0xda, 0x7c, 0x1d, 0x10, 0x5e, 0x5b, 0x4c, 0xe8, 0x2c, 0x8e, 0x28, 0x39,
	0xbb, 0xac, 0x9d, 0x36, 0xd4, 0x0e, 0x08, 0x93, 0x26, 0xcf, 0x53, 0x42, 0xd9, 0xb9, 0x75, 0x7e,
	0x03, 0xf2, 0xa7, 0x01, 0x79, 0xa1, 0xb6, 0x79, 0x75, 0xd1, 0x2e, 0x1f, 0x05, 0xe4, 0x05, 0x16,
	0x2a, 0xe7, 0xcb, 0x1c, 0x58, 0xdd, 0x80, 0x0a, 0x1a, 0x9a, 0xf1, 0x5c, 0x05, 0x73, 0xe6, 0x4d,
	0xc8, 0x90, 0x7b, 0x24, 0xbc, 0xab, 0x62, 0x83, 0x03, 0xfd, 0xe0, 0x15, 0xe1, 0xbe, 0x0b, 0x25,
	0x8b, 0x4f, 0x48, 0xa4, 0x72, 0x28, 0xcc, 0x07, 0x1c, 0x58, 0xdc, 0x59, 0x78, 0xe3, 0x9d, 0xcb,
	0xbf, 0x8c, 0xe2, 0x9b, 0xfe, 0x32, 0xee, 0xa8, 0x7d, 0x2b, 0x7f, 0x04, 0xae, 0x0b, 0x83, 0xb3,
	0x5e, 0x9e, 0xdd, 0xbd, 0x7f, 0x7c, 0x69, 0x3e, 0x81, 0x8b, 0x2b, 0xe4, 0x2a, 0xdb, 0xd7, 0xa1,
	0xc0, 0x38, 0xa0, 0x5e, 0xa5, 0xb9, 0x08, 0x04, 0x4b, 0x1c, 0xfd, 0x13, 0xfe, 0x12, 0x91, 0x97,
	0x6c, 0xb8, 0x92, 0x0c, 0xc9, 0x5c, 0xe5, 0xf0, 0x83, 0x2c, 0x21, 0xce, 0x4d, 0xb8, 0xd8, 0xf6,
	0xa2, 0x31, 0x99, 0xbe, 0xa5, 0x52, 0xce, 0x06, 0xa0, 0x55, 0x23, 0xe9, 0x03, 0x47, 0xfb, 0x24,
	0x39, 0x0d, 0xc6, 0xa4, 0x13, 0x3d, 0x8d, 0xd5, 0x59, 0xe7, 0x10, 0xca, 0x2b, 0xe8, 0x6b, 0x97,
	0xa8, 0x05, 0xba, 0x1f, 0x8f, 0x95, 0x3f, 0xfc, 0x93, 0xaf, 0x2b, 0xca, 0xe2, 0x84, 0x2f, 0x38,
	0x5d, 0x2e, 0x32, 0x25, 0x6e, 0xdf, 0x04, 0x23, 0xdb, 0x8b, 0xc8, 0x80, 0xfc, 0x7e, 0xa7, 0xeb,
	0x5a, 0x17, 0x50, 0x15, 0xcc, 0xbd, 0x0e, 0x76, 0xdb, 0x83, 0x23, 0xfc, 0xd8, 0xd2, 0xb6, 0xbf,
	0xd5, 0xa0, 0x20, 0x2a, 0x84, 0xca, 0x50, 0x3a, 0xee, 0x7d, 0xd8, 0x3b, 0x7a, 0xd4, 0xb3, 0x2e,
	0x20, 0x80, 0xe2, 0xc3, 0x63, 0xf7, 0xd8, 0xdd, 0xb3, 0x34, 0x64, 0x41, 0xa5, 0xd3, 0xeb, 0x0c,
	0x3a, 0xad, 0x6e, 0xe7, 0x93, 0x4e, 0xef, 0xc0, 0xca, 0x71, 0x53, 0x7c, 0xdc, 0xeb, 0x71, 0x41,
	0xe7, 0xa6, 0x0f, 0x5a, 0xc7, 0x7d, 0x77, 0xcf, 0xca, 0xa3, 0x0a, 0x18, 0xed, 0xa3, 0xc3, 0x07,
	0x5d, 0x77, 0xe0, 0x5a, 0x05, 0x84, 0xa0, 0xe6, 0x7e, 0xec, 0xb6, 0x8f, 0x07, 0x47, 0x78, 0xe8,
	0x62, 0x7c, 0x84, 0xad, 0x22, 0x27, 0xeb, 0x3f, 0xee, 0x0f, 0xdc, 0x43, 0x85, 0x94, 0xc4, 0x99,
	0x56, 0xaf, 0xed, 0x76, 0xdd, 0x3d, 0xcb, 0xd8, 0xbe, 0x0d, 0x46, 0xd6, 0x54, 0xfc, 0x9a, 0xc3,
	0x4e, 0xaf, 0x73, 0xd8, 0xea, 0x5a, 0x17, 0x90, 0x09, 0x85, 0xfb, 0xad, 0x7e, 0xa7, 0x6d, 0x69,
	0x22, 0x98, 0xe3, 0x6e, 0xd7, 0xca, 0xed, 0xfe, 0xa8, 0x43, 0x99, 0x9b, 0xab, 0xb4, 0xa1, 0x4f,
	0xc5, 0xcb, 0x59, 0x4d, 0xe2, 0x65, 0xd9, 0x83, 0xe7, 0x92, 0x5d, 0xb7, 0xce, 0x2a, 0x9c, 0xbf,
	0x7f, 0xf5, 0xf3, 0xaf, 0xdf, 0xe5, 0x6c, 0xb4, 0xb9, 0x73, 0xfa, 0xbf, 0x1d, 0xd1, 0x0a, 0x3b,
	0x54, 0xaa, 0xff, 0x1b, 0x70, 0xaa, 0x7d, 0x80, 0xe5, 0xe3, 0x45, 0xcb, 0xbe, 0xa9, 0xcb, 0x3b,
	0xce, 0x3f, 0x6c, 0x67, 0x43, 0x30, 0xd6, 0x1c, 0x73, 0xc1, 0x78, 0x4f, 0xdb, 0x46, 0x87, 0x60,
	0x2e, 0xba, 0x12, 0x5d, 0x7a, 0xed, 0x13, 0xa8, 0x6f, 0x9e, 0x85, 0x15, 0xe3, 0x45, 0xc1, 0x58,
	0x46, 0x4b, 0x46, 0xd4, 0x82, 0x92, 0x9a, 0x16, 0x48, 0xfe, 0xbf, 0xae, 0xcf, 0x8e, 0xfa, 0xd2,
	0x51, 0x67, 0x53, 0x9c, 0xb6, 0x50, 0x6d, 0x19, 0xe1, 0xe7, 0x81, 0xff, 0x05, 0x7a, 0x02, 0xb0,
	0x6c, 0x52, 0x24, 0xef, 0x3e, 0xd7, 0xda, 0x59, 0x98, 0xe7, 0xbb, 0xf9, 0x9a, 0xa0, 0xbd, 0xec,
	0x5c, 0x5a, 0xa7, 0xbd, 0x37, 0x16, 0xa6, 0xa3, 0xa2, 0xf8, 0x39, 0xb8, 0xf3, 0x7b, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x37, 0x28, 0xbd, 0x96, 0xe6, 0x0c, 0x00, 0x00,
}
