// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\x5f\x73\xdb\xb8\x11\x7f\xe7\xa7\xd8\x5a\xb9\xe9\xdd\x8c\x28\xcb\x93\xb9\x4e\x4f\x33\x7e\xb0\x65\xc7\xf1\x9c\x93\xa8\x96\xd2\xb4\x7d\xf1\x80\xc4\x92\xc4\x19\x04\x18\xfc\x91\xa2\xb8\xf9\xee\x1d\xfc\x21\x29\x29\xb2\xa3\x34\xbe\x37\x11\xd8\xfd\xed\x02\xbb\x58\x60\x7f\x1a\xc0\x8c\x98\x0a\x8c\x04\x53\x21\x50\x62\x48\x46\x34\x42\xc1\x38\x8e\x92\x8b\x73\x37\x39\x81\xd1\x71\x61\x85\x40\x9e\xae\xa4\xba\x4f\x29\x53\xf1\x7b\x44\xb3\x64\x00\x33\xa9\x0c\x58\x8d\x14\x0a\xa9\xe0\xf5\x62\x31\x83\x5c\xd6\xb5\x15\x2c\x27\x86\x49\x01\x44\x50\x8f\xbe\xc2\x0c\x28\xd1\x55\x26\x89\xa2\xa3\xc4\x49\x3a\xdd\x09\xfc\x7d\x3c\x1e\x7f\x05\x74\x3b\x9b\x6e\xe3\x8c\x92\xdb\xd9\x34\x28\xfc\x36\xfe\xcd\x29\x7c\x90\xea\x9e\x89\xd2\x7b\xab\x21\x57\x48\x0c\x52\xa0\x56\xb9\xc1\x46\xc9\x1c\xb5\x76\x3f\x57\x8c\x73\xc8\x10\x56\x8a\x19\x83\x02\x98\x00\x53\x31\x0d\x94\x29\xcc\x8d\x54\xeb\x51\xe2\xa0\x2e\x98\xda\xb3\xd6\x64\x00\xaf\xa5\x36\x82\xd4\x08\xb2\xf0\x0b\x79\xe5\x25\x40\xa3\x5a\xa2\x1a\xc1\x1b\xc2\x04\x5f\x0f\x03\x26\xd3\x61\x09\xd9\x1a\x88\x35\x32\xd5\x39\xe1\xa8\x74\x32\x70\x7b\x9c\x4b\x51\xb0\xd2\x2a\x04\x87\x8e\x4a\x8f\x12\x87\xfd\x96\xd4\x38\x01\x2e\x73\xc2\x2b\xa9\x4d\x72\x23\xcb\x12\xd5\x24\x01\x18\x80\xfb\xed\xd6\xc0\x71\x89\x5c\x4f\x80\x62\x66\xcb\x21\x30\x51\xc8\x21\xa0\x52\x52\x25\x00\x37\x6e\x72\xe2\x07\xbd\xd2\x07\xc5\x0c\x02\x97\xa5\x0e\x91\x65\x1a\x1a\x62\xaa\x11\x5c\x17\x80\x75\x63\xd6\xc3\x30\x49\x54\xbf\x29\x46\x82\x36\x14\x95\x1a\x25\x00\xef\xac\x69\xac\x79\xc5\x38\x4e\xe0\xe8\x28\x19\xc0\x0d\xab\x99\xf1\x8b\xd7\xec\x73\xd8\x08\xa2\xef\x01\x3f\x61\x6e\x8d\x54\x01\xee\x67\x6d\xa8\xb4\xe6\x18\x95\xfa\xc5\xb9\x08\xd9\xda\xa0\x1e\x25\x6f\xc8\xa7\xcb\x28\x78\x23\xcb\x39\xfb\x8c\x13\x38\x19\x8f\xc7\x63\x18\xc0\xc9\x18\x7e\x3f\xf7\x7b\xbc\x02\x59\x44\x47\x94\x15\x40\x40\xe7\x15\x52\xcb\x51\x01\x33\xa8\x62\x0e\x0c\xe0\x5a\x80\x20\x42\x6a\xcc\xa5\xa0\x7a\x94\xcc\xa3\xd8\x2d\x31\x2d\xee\xb8\x05\x87\x20\x15\xf1\x6b\x22\xd6\xde\x6f\xbf\x2d\x2d\xbc\x73\x54\x0a\xdc\x34\xd2\x42\x4e\x2b\x2b\xee\x1d\x66\x04\xe0\x52\x94\x4e\x75\x45\x98\x81\x0c\xcd\x0a\x51\x80\x6d\x28\x31\xa8\x21\xc3\x42\x2a\x84\x9a\x84\xa4\x24\x31\xc6\x40\x91\xd0\x7d\x7e\x7f\xf0\xd3\x33\x26\xca\x05\xab\x51\x5a\x33\x81\xbf\x8d\xb7\xbd\xaf\x99\xb0\x06\xf7\x19\x77\x27\xa4\xb3\xe0\x43\x47\x94\x19\xee\xfa\xe0\x4f\xdd\x21\x5e\x5c\x0b\x66\x3a\x2f\x5e\x8e\xb7\xdc\xf8\x35\xba\xa1\xbd\x76\xce\x2d\x45\x20\x70\x34\x25\x79\x85\xe9\x54\x0a\xa3\x24\x9f\x80\x90\xa9\x36\x52\xe1\x51\xa8\x00\x15\x12\xea\x02\x27\xe0\x0a\xcd\xf1\x0d\xd3\x06\x14\xea\x46\x0a\x8d\xf1\x2c\x34\x0a\x97\x28\x0c\xe4\x24\xaf\x9c\xaf\xd9\x1a\x98\x30\xa8\x6a\xa4\x8c\xa8\xb5\x3f\x5d\x2c\x77\xe9\x73\xc1\x34\xc9\x38\x3a\x5c\x6f\x74\x02\x46\x59\x4c\x92\x01\xb8\x04\x05\x67\x96\x94\x08\x7a\xad\x0d\xd6\x2e\x21\xc2\x40\x7b\x7e\x72\xc2\x7d\x85\x88\x02\x2e\xbd\xfd\xa0\x9b\xf7\x87\xa5\x62\x06\xb9\xf3\x50\x16\xe1\x10\xf6\x85\xc1\x1f\x1b\x0d\xab\x8a\xe5\x55\x7b\xec\x99\x06\xc2\xb9\x5c\x21\x75\xcb\x20\xb9\xab\x32\x23\x8f\x75\x16\x86\x2f\x98\xd2\x01\x1c\x20\xdd\x53\x3c\xa3\xc3\x89\xf7\x6f\xfe\x32\xf8\xe9\x44\x2f\x05\x6d\x24\x13\xa6\x1d\x01\xf8\x1d\xd7\xfd\xc7\x1c\x73\x85\x66\x12\xf4\xae\xa4\x2c\x39\xc2\x94\x4b\x4b\x21\xae\x38\x4c\xcc\x7b\xc0\xbe\xba\x93\x3c\x97\xd6\xed\xb6\x42\x8a\xc2\x30\xc2\x75\x2c\xf2\x2d\xfa\x00\xde\x35\x2e\xfb\x09\xf7\x65\xa2\x91\x5a\xb3\x8c\x63\x2c\x6b\x6d\x09\x75\x35\xad\x26\x86\xe5\x84\xf3\x35\x50\xa6\x73\xb9\x44\x85\xb4\xc7\x39\x0b\x96\x7c\xed\xd8\x00\x3f\xdb\xab\xb8\xed\x8f\x92\xb5\x4f\x59\x14\x4b\xa6\xa4\xa8\x51\x98\x1e\xf7\x95\x92\xf5\xa5\x58\xf6\xc1\x5f\x54\x08\x9b\x55\x99\xe4\x86\x2d\x71\xa3\x6a\x64\x24\xbf\x47\x7f\xf8\xcf\x96\x84\x71\x97\x43\xed\x98\x8e\xe5\x76\xe8\x4a\x32\x95\x6a\x08\x65\x8e\x43\x90\x0d\x0a\x6d\x48\x7e\xdf\x55\x00\x15\x05\x9d\xc1\xf9\x2e\x72\xac\xe7\xc9\x79\x0b\x9a\x00\xbc\x5e\x4c\x3d\x62\x48\x80\x05\xd6\x0d\xf7\x75\xe9\xbf\x31\x21\xac\x60\x4b\x54\x1a\xe1\x14\x96\x44\x30\xce\x49\x9c\x28\xd1\xa0\x58\xc2\x29\x2c\xdc\xfa\xc2\x58\x28\xaf\xde\xf1\x53\x78\x78\x18\x5d\x76\xdf\x5f\xbe\x44\x11\xa2\x4a\xeb\x36\x4a\xc3\x69\x7b\xd4\xd3\x34\xf8\xe5\x34\xc2\xf1\x9e\xfa\xef\x4e\x87\xcb\x32\xe0\xc5\x5b\xef\xcb\x97\xe3\xb0\x0d\xa9\x3f\x92\x29\x97\x65\xeb\x80\xbb\x60\x76\x65\x37\xf2\x19\x55\x1a\x2e\x8d\x28\x2f\xfd\xbd\xf1\x4d\x05\x69\x4d\x54\xd0\x95\xb4\x9c\xde\x19\x45\x84\x2e\x50\xdd\x85\xab\xfc\x14\xfe\x7d\x39\x8f\x12\xab\x0a\xc5\x9d\x91\xbd\x48\x67\xe3\xdd\xdb\xbb\xcb\x7f\x5d\x2f\xee\xde\xdd\xde\x5d\xfe\xf3\x7a\xba\x88\x0a\x0f\x0f\xac\x00\x81\x30\x9a\x36\x56\xc3\x18\xd2\x6e\xdd\x0f\x0f\x8d\x62\xc2\x14\x70\xa4\xf0\xa3\x45\x6d\xee\x72\x27\x72\x0a\x3f\xd1\xa3\x20\xbe\x21\x9a\x02\x0a\xba\xf1\x1d\x41\x6f\x49\x7d\x95\xc1\x78\xf4\x34\x6e\x8d\xb5\xab\x1e\xa7\xf0\xd3\x68\x5c\xc0\xd5\xf9\x51\x54\xfc\x36\xfe\x05\xd3\xf7\x07\x18\xa0\x4c\xdf\x6f\xc1\x07\xbd\x3d\xf8\x71\xe0\xa3\x45\xeb\x4b\xce\xec\x7c\xfe\x58\x6e\x0e\xfe\x92\x31\x71\x9c\x11\x5d\xb5\x03\xb3\xf3\x39\xa4\x6f\xfb\x44\xba\xee\x3d\x0e\x73\xf2\xe0\x48\x07\x79\x3c\x38\x95\x0e\x09\x63\xc0\xe4\x20\x24\x45\x7d\x7a\x32\x69\x1a\x71\xfa\x6c\xb1\x6c\xc1\x6b\xac\x4f\xdd\x3e\x97\xd9\xb3\x45\xb1\x85\x76\xd9\xde\x63\x7f\x2b\x84\x3b\x05\xe0\x80\xe3\x9e\x00\x5c\x29\x46\x2f\x45\xc9\x04\x1e\x1e\xf5\x17\x8f\xc6\xfc\xc5\x77\x45\xfc\xc5\xf7\xc4\xdb\x49\x77\x91\xfc\x9e\x1c\x78\x01\x69\x83\x50\x37\xec\xf9\x8e\x71\xf0\xa5\xba\x5b\xb6\xb1\xbf\x7a\xbe\xd0\x47\xe8\xc2\xbd\xa3\x3b\xec\xe7\x0f\x3d\x40\x02\x30\xbf\x79\x7f\xfb\xe6\xf1\xb8\x1f\xef\x06\x7e\x7e\x7e\xb6\x98\xbe\x86\x34\xfd\x43\x66\xa9\xbf\x5b\xf7\x66\x41\x27\x26\xc2\x63\xfa\xe4\xab\x89\x70\x6f\x1c\x1c\xfa\x4e\x2f\xd6\xf6\x43\x33\xec\xa0\xfc\xe8\xc0\x5d\xb1\x4f\x1b\x54\xa9\x6f\x5d\x9e\x2f\x59\x3a\x03\x35\xd6\xbe\x22\x3f\x63\xbd\xef\xc1\x4d\xdd\xf4\xe0\x7f\x4e\xa9\x98\x5e\xb6\x6f\xe2\x43\x9e\x8d\x4e\xee\xff\x7b\x28\x6e\x3f\x12\x5d\x83\x19\xd0\xb6\xde\xb4\x8d\x92\x7f\x60\x6e\xe0\xfa\xe2\x47\x8d\xcd\x02\xd2\x63\x86\x3e\x4b\xf1\xc3\xeb\xf9\x8f\x14\xfd\x42\x3e\x20\x2b\x2b\xd3\xb5\x00\x03\x98\x29\x2c\x50\xb5\x3d\x3f\x98\x8a\x98\xd0\xb0\x81\x6d\xe0\xa3\x65\xf9\x3d\x5f\x8f\x3a\xe9\x0f\x9b\x62\xae\x43\x27\x5c\x21\xa1\x6b\x90\x82\x33\x81\x50\x91\xa5\xeb\x59\xb5\x21\x22\xc2\xd8\x06\x0c\xab\xb1\x85\x08\xe6\xfe\xe1\x70\xe7\x61\x7a\x02\x27\xa3\x71\x5c\xe2\x66\x2b\xe9\x7a\x2f\x74\x71\x87\xb3\xd9\xb5\x6b\xd0\x2c\x37\x1a\x7e\xae\x7d\x4b\x86\xe0\x9a\xa2\x21\x98\x58\x39\xf4\x10\xd0\xe4\xbf\x44\x98\xd8\x69\x2a\x2c\x14\x6a\xd7\xc0\x05\xeb\xbe\x41\x5b\x2c\x6e\x1e\xed\x65\x63\xc3\x19\x5a\x83\x9e\x8e\xe8\x7a\xd9\xeb\x8b\x47\xb6\xbc\x44\xe1\xfa\xf3\xb0\xe3\xd7\x17\x71\xb7\x07\x9e\x27\x22\x94\x2a\xd4\x7a\x2f\x3f\xe3\xca\xa0\xff\x71\x16\x84\x36\x88\x96\x89\xe7\x91\x1c\xc8\xab\x1f\x67\x90\x00\x9e\xe0\x90\xe2\x62\x37\xfa\xf1\x8a\x68\xc8\xd0\x41\x51\x8e\xbe\x9d\x77\x41\x71\xcd\x7c\x45\x84\x17\x34\xa1\x1f\x1f\x02\x33\xc1\xbe\xae\xac\x01\x2a\x57\x22\x34\x45\xe9\x09\xd4\x48\x84\x4b\x14\x54\xe8\xda\x52\x21\x5b\xa5\x11\x8c\xdb\xc9\x30\x00\xac\xf6\x8d\xb5\x41\xbe\x06\x52\x18\x6f\x08\xa1\x60\x4a\x1b\x4f\x89\x38\xcc\x8e\x01\x48\x4f\xbc\x85\x37\xe4\x13\xab\x6d\x1d\xa8\x1e\xd7\x34\x6c\x12\x3c\x9e\x08\xda\x64\x79\x5c\x5b\x5d\x2e\x08\xe3\xfb\x08\x9e\x6e\x97\xbf\x6e\xd7\x01\x06\x7e\x76\xd1\xd1\x67\xd6\x07\x5c\xa3\xd9\x49\x81\x6c\x1d\x18\xa8\xb6\x0f\x1b\x42\x66\x0d\xac\xa5\x85\xda\x9d\x38\x10\xe8\x7a\xf2\x8a\x69\x8f\xc7\x0a\x37\xf5\x57\x85\xe1\x90\x6c\x71\x32\x35\x11\xde\x88\xb3\xbe\x41\x17\x3c\x4a\x18\x6c\x51\x06\xcf\x4b\x1a\xec\xa5\x0d\x9e\x26\x0e\xc2\x9d\xf9\xb2\xf5\x78\x87\x39\x88\x0d\x73\xa4\x0e\xe2\xd7\x06\x77\xf0\x04\x7b\x00\x30\xb8\x9a\xf7\x5a\x87\xde\x02\xf0\x18\x75\xb0\xa9\xf0\xad\x42\xda\x61\x3d\x46\x03\xf8\x9c\xdf\xa5\x17\x82\xca\x0f\x90\x0b\x01\x60\x87\x5c\xf0\xa9\x1c\x29\xd8\x83\x49\xd8\x5d\x1a\xf6\x59\x88\xd8\xaf\xa8\x58\x9f\xda\xef\x96\xa8\x14\xa3\x08\xa4\x23\x36\x14\x6a\x69\x55\x1e\x0e\xe2\x6d\xfb\xd1\x2e\x60\x3a\x7b\xaf\x7b\xe1\x76\xdd\xee\xf5\x33\x81\x71\x9b\x14\xb7\x67\x6f\x7a\x19\x7f\xb2\xaf\xce\x5b\x51\xff\x9a\x99\xb8\x67\x4a\x2b\xed\x9e\x20\xa0\x1b\x92\xe3\xa3\x4a\xe1\x95\xd2\x69\x0d\xe0\x95\x2f\x73\xab\xd4\xef\x23\x18\x2b\xe2\xbd\x11\xaa\x78\x5b\xaa\x5c\x31\x0c\xa4\xea\xb1\x5e\x8b\x1c\x5c\x54\x83\xd4\x2e\x79\x09\xf0\xde\xcb\x75\x85\x6b\x3f\xfb\xfb\xb4\xe9\x2d\xe6\xd9\x1b\x5c\x31\x97\xf7\x5f\x11\xfd\x4f\xba\x10\xd8\xe7\x5f\xb7\x89\xd3\x28\xf5\x5d\x0e\xa0\xa0\x7d\xc1\x6d\xb9\xe5\xf8\xff\xcc\x41\xfe\xdc\xc8\xf2\x00\x97\xfe\x17\x00\x00\xff\xff\xf2\x17\x15\x7e\xf9\x19\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 6649, mode: os.FileMode(420), modTime: time.Unix(1498606006, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd0\xbd\x4e\xc3\x30\x10\xc0\xf1\xdd\x4f\x71\xa4\x74\xb4\x93\x17\x60\x6a\x51\xc5\xc2\xc0\xc2\x88\x92\xe6\x4c\x4f\x4d\x6c\xcb\x1f\x80\x38\xdd\xbb\x23\x9c\x02\x42\x8a\x60\xb3\x4f\x3f\xff\x25\xdf\xe6\xaa\x1d\xc8\xb5\x43\x9f\x4e\x6a\x73\x0d\xfa\x1e\x98\xcd\xa3\x8f\x67\x8c\x77\xa3\x48\x9d\xf9\xaf\xd9\x9e\xa2\x48\x6b\x8b\x73\x38\xe9\xd7\x8a\x74\xca\xa3\x2f\xb9\x3a\xfc\xc7\x61\x8c\x8a\x99\x2c\x38\x04\xb3\x0b\x25\x41\x07\x5a\x44\x31\x87\x48\x2e\x5b\x68\x3e\x2b\x01\x61\x0e\x04\xdb\xb1\x59\x50\x05\x1a\xd0\x8d\xf5\x74\x79\xfe\xd0\xcf\x87\x01\x3a\xb3\x56\x98\xe0\xf4\xf4\x32\xe3\x7c\xb3\x35\x9d\x3d\x34\x17\xbc\xde\xd9\x53\x3a\xff\x19\xb2\x89\xde\xf1\xbb\xb4\xf0\x5f\x29\xc5\x6c\x6e\xdf\xf0\x58\x72\x3f\x4c\x28\x02\xcb\x87\x41\xeb\xa3\x77\x96\x9e\x7f\x16\xba\xab\x77\x11\xf5\x11\x00\x00\xff\xff\xd6\x3f\x3a\x3d\x75\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 373, mode: os.FileMode(420), modTime: time.Unix(1498675263, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\xcb\x6e\xea\x30\x10\x86\xf7\x7e\x8a\x11\xd2\x59\x3a\x87\x17\xc8\xe6\x40\x84\xd8\x1c\x24\x8a\x7a\x59\x59\x21\x19\x07\x0b\x67\x0c\x63\x3b\xb4\x8a\xfc\xee\x55\x12\x44\x45\xd5\xcb\xce\x33\xff\xf7\x7f\x9e\x48\xa6\x43\xf6\x08\x39\x74\x25\x19\x6b\x4b\xd1\x60\x40\xea\x20\x87\x1d\x47\x14\xf8\x8a\x55\x0c\xe5\xde\x0e\x48\xdf\x67\xc5\x6d\x4e\x49\x94\xdc\xc4\x16\x29\x78\xc8\xe1\xe2\xf8\x88\x0c\x52\x56\x8e\xb4\x69\x06\xf6\x69\x5c\x2d\xc6\x39\x25\x61\x5d\x33\x39\x86\xfd\xd2\x70\x4a\x7f\x2b\x47\xb5\x63\x89\x1d\x52\x90\xd6\x35\x02\x99\x1d\x7f\xa6\x74\x24\x42\x2b\xa7\x1f\xa4\x0f\x35\x32\x0b\x17\xc3\x29\x86\x5f\x51\x17\x83\xf0\x07\x17\x6d\xad\x02\x97\xe4\x35\xb2\xd2\xc6\xe2\x70\xf2\x4b\xf1\x20\x2e\x07\x24\x15\xdc\x47\x78\xf3\x6e\xfe\xab\xe2\x79\xbd\x53\x9b\xad\x2a\x1e\xd7\x8b\x9d\xe8\x7b\xa3\x81\x10\xb2\xc5\x29\x7a\x98\x83\x4c\x49\xf4\xfd\x89\x0d\x05\x0d\x33\xc6\x73\x44\x1f\x54\x35\x84\x39\xfc\xa9\x67\x13\x38\x42\x12\x90\xea\xf1\x75\x55\x6c\xcb\x76\xb5\x87\x79\xf6\x9d\xa5\xc5\xd6\xf1\xdb\xe0\xc9\xe6\x1a\x56\xff\x66\xd7\xca\xd7\xb6\xa5\xf1\xc7\x1f\x75\xb5\xf1\xc7\x3b\xd9\xd4\xb8\xb3\x89\x73\xc4\x88\xe2\x3d\x00\x00\xff\xff\x76\x31\x5e\xa4\x12\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 530, mode: os.FileMode(420), modTime: time.Unix(1498675429, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd0\xcf\x4a\xc4\x30\x10\xc7\xf1\x7b\x9e\x62\xec\xb2\xc7\xa4\xf5\x2a\xf4\xe2\xae\x88\x17\x11\x3d\x78\x6e\x36\x93\x35\x6c\x3b\x29\x49\x8b\xc2\x30\xef\x2e\xb4\x91\x22\xf8\xe7\x96\xfc\xf8\xf2\x81\x64\x77\x55\xdb\x40\xb5\xed\xf2\x9b\xda\x3d\xdd\xbe\x80\x7e\x04\x66\xf3\x1a\xd3\x05\xd3\x83\x13\x29\x6b\xfc\x5a\x8f\x21\x89\xd4\x7e\x26\xc2\x5e\xbf\x2f\x99\xce\x93\x8b\xf3\x54\x4a\xfc\xa7\xc4\x94\x14\x73\xf0\x40\x08\xe6\x30\xce\x19\x1a\xd0\x22\x8a\x79\x4c\x81\x26\x0f\xd5\xea\xf4\x40\xd1\x61\x6e\xaf\x6f\xc6\x91\xda\xbd\xab\xd6\x7a\x29\x35\x20\xb9\xe5\x54\x9c\xe7\x6e\xb8\xb7\xd0\x98\xdf\xa8\x01\x87\x76\x6f\x1a\x7f\xb6\x55\x89\x7f\x76\x8e\x21\x5f\xfe\x84\x7c\xe8\x71\x93\xd6\xfc\x1b\xa5\x98\xcd\xdd\x07\x9e\xe6\xa9\xb3\x3d\x8a\xc0\xfa\x72\xd0\xfa\x14\xc9\x87\xf3\xf6\xbb\x87\xe5\x2e\xa2\x3e\x03\x00\x00\xff\xff\x8e\xd5\xb6\xb3\x84\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 388, mode: os.FileMode(420), modTime: time.Unix(1498675490, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd1\x4d\x4e\xc3\x30\x10\x05\xe0\x7d\x4e\x31\xa4\xea\xd2\x49\x38\x02\x4d\x51\x61\x0b\x48\xac\xed\x66\x0c\x26\xf5\x8f\xc6\xb6\x40\xb2\xe6\xee\xa8\x49\x51\x82\x04\xea\xce\xb6\xde\xfb\x64\x7b\x36\x37\xad\x32\xae\x55\x32\xbe\x57\x9b\xe7\xdd\xdd\x4b\xff\x00\x42\x7c\x78\x25\x9c\xb4\x08\xa5\x34\xaf\x9e\x46\xa4\xc7\x81\x79\x15\x70\x49\xc6\x31\xc2\xed\xea\x08\x89\x3c\xfd\x14\xf6\x86\x98\x5b\x9d\x9d\xc3\x93\xf8\x9c\x04\x11\xd3\x80\x44\xab\x86\xcf\x29\xe4\x74\xa5\xe2\x73\xaa\x4a\x31\x1a\x1c\x42\xd3\x87\x1c\xa1\x03\xc1\x5c\x95\x12\xc8\xb8\xa4\xa1\x5e\xc0\x63\xc8\x51\x04\x24\x71\xbe\x1d\x6c\x87\x7a\x6e\x4c\x69\x01\xe8\x86\x69\x75\xb1\x9e\xa4\x3d\x28\xe8\x9a\xff\x39\x8b\x16\xb6\x4d\xa7\x0f\xbb\xfa\x12\xff\x5b\xda\x9b\x38\x5e\xa1\x92\x0d\x0b\x35\xe7\x7f\x59\x55\x29\xcd\xfd\x17\x1e\x73\x92\xea\x84\xcc\x30\x7f\xc0\xf9\x4d\xde\x69\xf3\xb6\x0c\xa2\x9f\xf6\xcc\xd5\x77\x00\x00\x00\xff\xff\xd0\x3c\x1b\x60\xba\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 442, mode: os.FileMode(420), modTime: time.Unix(1498675457, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
