package mocks

import context "golang.org/x/net/context"
import mock "github.com/stretchr/testify/mock"
import scheduler "github.com/ohsu-comp-bio/funnel/proto/scheduler"
import tes "github.com/ohsu-comp-bio/funnel/proto/tes"

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// AssignTask provides a mock function with given fields: _a0, _a1
func (_m *Database) AssignTask(_a0 *tes.Task, _a1 *scheduler.Node) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*tes.Task, *scheduler.Node) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckNodes provides a mock function with given fields:
func (_m *Database) CheckNodes() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListNodes provides a mock function with given fields: _a0, _a1
func (_m *Database) ListNodes(_a0 context.Context, _a1 *scheduler.ListNodesRequest) (*scheduler.ListNodesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *scheduler.ListNodesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *scheduler.ListNodesRequest) *scheduler.ListNodesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scheduler.ListNodesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *scheduler.ListNodesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadQueue provides a mock function with given fields: n
func (_m *Database) ReadQueue(n int) []*tes.Task {
	ret := _m.Called(n)

	var r0 []*tes.Task
	if rf, ok := ret.Get(0).(func(int) []*tes.Task); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*tes.Task)
		}
	}

	return r0
}

// UpdateNode provides a mock function with given fields: _a0, _a1
func (_m *Database) UpdateNode(_a0 context.Context, _a1 *scheduler.Node) (*scheduler.UpdateNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *scheduler.UpdateNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *scheduler.Node) *scheduler.UpdateNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scheduler.UpdateNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *scheduler.Node) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
