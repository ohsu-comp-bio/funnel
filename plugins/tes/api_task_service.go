/*
Task Execution Service

## Executive Summary The Task Execution Service (TES) API is a standardized schema and API for describing and executing batch execution tasks. A task defines a set of input files, a set of containers and commands to run, a set of output files and some other logging and metadata.  TES servers accept task documents and execute them asynchronously on available compute resources. A TES server could be built on top of a traditional HPC queuing system, such as Grid Engine, Slurm or cloud style compute systems such as AWS Batch or Kubernetes. ## Introduction This document describes the TES API and provides details on the specific endpoints, request formats, and responses. It is intended to provide key information for developers of TES-compatible services as well as clients that will call these TES services. Use cases include:    - Deploying existing workflow engines on new infrastructure. Workflow engines   such as CWL-Tes and Cromwell have extentions for using TES. This will allow   a system engineer to deploy them onto a new infrastructure using a job scheduling   system not previously supported by the engine.    - Developing a custom workflow management system. This API provides a common   interface to asynchronous batch processing capabilities. A developer can write   new tools against this interface and expect them to work using a variety of   backend solutions that all support the same specification.   ## Standards The TES API specification is written in OpenAPI and embodies a RESTful service philosophy. It uses JSON in requests and responses and standard HTTP/HTTPS for information transport. HTTPS should be used rather than plain HTTP except for testing or internal-only purposes. ### Authentication and Authorization Is is envisaged that most TES API instances will require users to authenticate to use the endpoints. However, the decision if authentication is required should be taken by TES API implementers.  If authentication is required, we recommend that TES implementations use an OAuth2  bearer token, although they can choose other mechanisms if appropriate.  Checking that a user is authorized to submit TES requests is a responsibility of TES implementations. ### CORS If TES API implementation is to be used by another website or domain it must implement Cross Origin Resource Sharing (CORS). Please refer to https://w3id.org/ga4gh/product-approval-support/cors for more information about GA4GHâ€™s recommendations and how to implement CORS. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tes

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// TaskServiceAPIService TaskServiceAPI service
type TaskServiceAPIService service

type ApiCancelTaskRequest struct {
	ctx context.Context
	ApiService *TaskServiceAPIService
	id string
}

func (r ApiCancelTaskRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CancelTaskExecute(r)
}

/*
CancelTask CancelTask

Cancel a task based on providing an exact task ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of task to be canceled.
 @return ApiCancelTaskRequest
*/
func (a *TaskServiceAPIService) CancelTask(ctx context.Context, id string) ApiCancelTaskRequest {
	return ApiCancelTaskRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *TaskServiceAPIService) CancelTaskExecute(r ApiCancelTaskRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskServiceAPIService.CancelTask")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tasks/{id}:cancel"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTaskRequest struct {
	ctx context.Context
	ApiService *TaskServiceAPIService
	body *TesTask
}

func (r ApiCreateTaskRequest) Body(body TesTask) ApiCreateTaskRequest {
	r.body = &body
	return r
}

func (r ApiCreateTaskRequest) Execute() (*TesCreateTaskResponse, *http.Response, error) {
	return r.ApiService.CreateTaskExecute(r)
}

/*
CreateTask CreateTask

Create a new task. The user provides a Task document, which the server
uses as a basis and adds additional fields.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTaskRequest
*/
func (a *TaskServiceAPIService) CreateTask(ctx context.Context) ApiCreateTaskRequest {
	return ApiCreateTaskRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TesCreateTaskResponse
func (a *TaskServiceAPIService) CreateTaskExecute(r ApiCreateTaskRequest) (*TesCreateTaskResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TesCreateTaskResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskServiceAPIService.CreateTask")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tasks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceInfoRequest struct {
	ctx context.Context
	ApiService *TaskServiceAPIService
}

func (r ApiGetServiceInfoRequest) Execute() (*TesServiceInfo, *http.Response, error) {
	return r.ApiService.GetServiceInfoExecute(r)
}

/*
GetServiceInfo GetServiceInfo

Provides information about the service, this structure is based on the
standardized GA4GH service info structure. In addition, this endpoint
will also provide information about customized storage endpoints offered
by the TES server.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceInfoRequest
*/
func (a *TaskServiceAPIService) GetServiceInfo(ctx context.Context) ApiGetServiceInfoRequest {
	return ApiGetServiceInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TesServiceInfo
func (a *TaskServiceAPIService) GetServiceInfoExecute(r ApiGetServiceInfoRequest) (*TesServiceInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TesServiceInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskServiceAPIService.GetServiceInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service-info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTaskRequest struct {
	ctx context.Context
	ApiService *TaskServiceAPIService
	id string
	view *string
}

// OPTIONAL. Affects the fields included in the returned Task messages.  &#x60;MINIMAL&#x60;: Task message will include ONLY the fields: - &#x60;tesTask.Id&#x60; - &#x60;tesTask.State&#x60;  &#x60;BASIC&#x60;: Task message will include all fields EXCEPT: - &#x60;tesTask.ExecutorLog.stdout&#x60; - &#x60;tesTask.ExecutorLog.stderr&#x60; - &#x60;tesInput.content&#x60; - &#x60;tesTaskLog.system_logs&#x60;  &#x60;FULL&#x60;: Task message includes all fields.
func (r ApiGetTaskRequest) View(view string) ApiGetTaskRequest {
	r.view = &view
	return r
}

func (r ApiGetTaskRequest) Execute() (*TesTask, *http.Response, error) {
	return r.ApiService.GetTaskExecute(r)
}

/*
GetTask GetTask

Get a single task, based on providing the exact task ID string.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of task to retrieve.
 @return ApiGetTaskRequest
*/
func (a *TaskServiceAPIService) GetTask(ctx context.Context, id string) ApiGetTaskRequest {
	return ApiGetTaskRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TesTask
func (a *TaskServiceAPIService) GetTaskExecute(r ApiGetTaskRequest) (*TesTask, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TesTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskServiceAPIService.GetTask")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tasks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.view != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "view", r.view, "form", "")
	} else {
		var defaultValue string = "MINIMAL"
		r.view = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTasksRequest struct {
	ctx context.Context
	ApiService *TaskServiceAPIService
	namePrefix *string
	state *TesState
	tagKey *[]string
	tagValue *[]string
	pageSize *int32
	pageToken *string
	view *string
}

// OPTIONAL. Filter the list to include tasks where the name matches this prefix. If unspecified, no task name filtering is done.
func (r ApiListTasksRequest) NamePrefix(namePrefix string) ApiListTasksRequest {
	r.namePrefix = &namePrefix
	return r
}

// OPTIONAL. Filter tasks by state. If unspecified, no task state filtering is done.
func (r ApiListTasksRequest) State(state TesState) ApiListTasksRequest {
	r.state = &state
	return r
}

// OPTIONAL. Provide key tag to filter. The field tag_key is an array of key values, and will be zipped with an optional tag_value array. So the query: &#x60;&#x60;&#x60;   ?tag_key&#x3D;foo1&amp;tag_value&#x3D;bar1&amp;tag_key&#x3D;foo2&amp;tag_value&#x3D;bar2 &#x60;&#x60;&#x60; Should be constructed into the structure { \&quot;foo1\&quot; : \&quot;bar1\&quot;, \&quot;foo2\&quot; : \&quot;bar2\&quot;}  &#x60;&#x60;&#x60;   ?tag_key&#x3D;foo1 &#x60;&#x60;&#x60; Should be constructed into the structure {\&quot;foo1\&quot; : \&quot;\&quot;}  If the tag_value is empty, it will be treated as matching any possible value. If a tag value is provided, both the tag&#39;s key and value must be exact matches for a task to be returned. Filter                            Tags                          Match? ---------------------------------------------------------------------- {\&quot;foo\&quot;: \&quot;bar\&quot;}                    {\&quot;foo\&quot;: \&quot;bar\&quot;}                Yes {\&quot;foo\&quot;: \&quot;bar\&quot;}                    {\&quot;foo\&quot;: \&quot;bat\&quot;}                No {\&quot;foo\&quot;: \&quot;\&quot;}                       {\&quot;foo\&quot;: \&quot;\&quot;}                   Yes {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}      {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}  Yes {\&quot;foo\&quot;: \&quot;bar\&quot;}                    {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}  Yes {\&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;baz\&quot;: \&quot;bat\&quot;}      {\&quot;foo\&quot;: \&quot;bar\&quot;}                No {\&quot;foo\&quot;: \&quot;\&quot;}                       {\&quot;foo\&quot;: \&quot;bar\&quot;}                Yes {\&quot;foo\&quot;: \&quot;\&quot;}                       {}                            No
func (r ApiListTasksRequest) TagKey(tagKey []string) ApiListTasksRequest {
	r.tagKey = &tagKey
	return r
}

// OPTIONAL. The companion value field for tag_key
func (r ApiListTasksRequest) TagValue(tagValue []string) ApiListTasksRequest {
	r.tagValue = &tagValue
	return r
}

// Optional number of tasks to return in one page. Must be less than 2048. Defaults to 256.
func (r ApiListTasksRequest) PageSize(pageSize int32) ApiListTasksRequest {
	r.pageSize = &pageSize
	return r
}

// OPTIONAL. Page token is used to retrieve the next page of results. If unspecified, returns the first page of results. The value can be found in the &#x60;next_page_token&#x60; field of the last returned result of ListTasks
func (r ApiListTasksRequest) PageToken(pageToken string) ApiListTasksRequest {
	r.pageToken = &pageToken
	return r
}

// OPTIONAL. Affects the fields included in the returned Task messages.  &#x60;MINIMAL&#x60;: Task message will include ONLY the fields: - &#x60;tesTask.Id&#x60; - &#x60;tesTask.State&#x60;  &#x60;BASIC&#x60;: Task message will include all fields EXCEPT: - &#x60;tesTask.ExecutorLog.stdout&#x60; - &#x60;tesTask.ExecutorLog.stderr&#x60; - &#x60;tesInput.content&#x60; - &#x60;tesTaskLog.system_logs&#x60;  &#x60;FULL&#x60;: Task message includes all fields.
func (r ApiListTasksRequest) View(view string) ApiListTasksRequest {
	r.view = &view
	return r
}

func (r ApiListTasksRequest) Execute() (*TesListTasksResponse, *http.Response, error) {
	return r.ApiService.ListTasksExecute(r)
}

/*
ListTasks ListTasks

List tasks tracked by the TES server. This includes queued, active and completed tasks.
How long completed tasks are stored by the system may be dependent on the underlying
implementation.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListTasksRequest
*/
func (a *TaskServiceAPIService) ListTasks(ctx context.Context) ApiListTasksRequest {
	return ApiListTasksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TesListTasksResponse
func (a *TaskServiceAPIService) ListTasksExecute(r ApiListTasksRequest) (*TesListTasksResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TesListTasksResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskServiceAPIService.ListTasks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tasks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.namePrefix != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name_prefix", r.namePrefix, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	} else {
		var defaultValue TesState = "UNKNOWN"
		r.state = &defaultValue
	}
	if r.tagKey != nil {
		t := *r.tagKey
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag_key", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag_key", t, "form", "multi")
		}
	}
	if r.tagValue != nil {
		t := *r.tagValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag_value", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag_value", t, "form", "multi")
		}
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "form", "")
	}
	if r.view != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "view", r.view, "form", "")
	} else {
		var defaultValue string = "MINIMAL"
		r.view = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
