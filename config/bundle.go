// Code generated by go-bindata.
// sources:
// config/default-config.yaml
// config/gridengine-template.txt
// config/htcondor-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x51\x73\x1b\xb9\x6f\x7f\xdf\x4f\x81\x5a\xf9\x4f\x93\x19\x49\x96\xff\x99\xeb\xdc\x69\xc6\x0f\xb6\xec\x73\xdc\x38\x8e\x6b\x29\x4d\xfb\xe4\xa1\x96\x58\x2d\xcf\x5c\x72\x8f\xe4\x5a\x56\xdc\x7c\xf7\x0e\x40\xee\x4a\x72\xec\x38\xd7\x73\x6e\xd2\x99\xf3\x93\xc5\x05\x01\x10\xc0\x0f\x04\xb0\xdb\x83\x59\x89\x60\x44\x85\x60\x0b\x08\x25\x82\xc8\x83\xba\x41\xf0\xe8\x6e\xd0\x81\x14\x41\xcc\x85\x47\x98\x8b\xfc\x1a\x8d\xcc\x7a\x70\x70\x23\x94\x16\x73\xdd\xad\xf9\x31\xcc\xad\x0e\x72\xde\x07\xb9\x32\xa2\xb2\xf4\x1f\x6a\xe1\x83\xca\xfb\x50\x59\xb3\xb0\x72\x9e\x1d\x25\x4e\x2d\x71\x96\x3d\x2a\x3b\xb7\x55\xdd\x84\xa7\x64\x6a\x9b\x0b\xdd\x87\x32\xe4\xd6\x48\xeb\xfa\xe0\x75\xe3\xaa\x3e\xd4\x73\xdf\x87\x85\x53\x12\xcd\x42\x19\xec\x43\x25\x4c\x43\x94\x62\xe9\x07\x73\x11\xf2\x32\x9b\x44\x01\x89\xc7\x57\x34\xc1\x1b\x34\x01\x96\x4e\x05\x74\xad\xe8\x97\xfe\xd5\xf0\x51\x95\x16\xfd\x6f\xb0\x45\x1f\xae\x45\x71\x2d\xb2\x63\xe2\xfe\x91\x99\xfb\x31\x64\x00\x83\xd6\x36\xf4\xaf\xb6\x8b\x2c\x3b\xb3\x8b\x05\xba\x71\x06\xd0\x03\xfa\x5f\x99\x05\x68\xbc\x41\xed\xc7\x20\x71\xde\x2c\xfa\xa0\x4c\x61\xfb\x80\xce\x59\x97\x01\x9c\xd1\xc3\x31\x2f\xf2\x26\x66\x4f\xbc\x3c\x04\x0b\xa1\x54\x1e\x6a\x11\xca\x21\x9c\x16\x80\x55\x1d\x56\xfd\xf8\x50\x38\xe4\x73\x06\x34\x44\xe8\x83\x44\xe7\x86\x19\xc0\xfb\x26\xd4\x4d\xf8\x55\x69\x1c\xc3\xce\x4e\x96\x4d\x39\x30\xa2\x46\x6f\xac\x0f\x9b\x56\xfb\xb5\x31\x06\x75\x8a\x1d\xda\x4c\x04\xe7\xa2\x6a\x2d\x5d\x5a\x1f\x32\xde\x79\x61\x5d\x80\xc6\xa3\x84\xc2\x3a\x78\x33\x9b\x5d\x90\xd7\xab\xc6\xa8\x5c\x04\x65\x0d\x08\x23\x99\xe5\x12\xe7\x20\x85\x2f\xe7\x56\x38\xc9\x2c\x67\xb3\x0b\xda\x3d\x86\x9f\x47\xa3\xd1\x43\xdc\x2e\x2f\x26\xdb\xcc\x68\xdb\xe5\xc5\x24\xee\xfa\x65\xf4\x4b\xda\x75\x89\xbf\x37\xca\x91\xff\xbc\xca\x41\x34\xa1\x44\x13\x5a\xf9\xc4\x88\xe4\x27\x1c\x1c\x5c\x9c\x7a\x68\x3c\x99\x5f\x40\x2d\xbc\x5f\xda\xa8\x4e\x8f\x0c\x49\xa2\x29\xce\xae\x11\x7c\xe3\x90\x0c\x58\x3b\x5b\xa3\xd3\x2b\x70\xe8\x83\x53\x79\x00\x91\xe7\xe8\x93\x17\x28\xc6\x4d\xa1\x16\x50\x28\x8d\xcc\xe5\x25\x0e\x17\x43\xc8\xcb\xca\x4a\xf8\xb7\xd1\x08\x0a\x36\xe5\x30\x92\x0d\x57\x95\x7e\x15\x4f\x9a\x44\x8f\x41\xcc\xf3\xbd\x7f\xbe\x8e\x27\x39\x35\xb9\x6e\x24\x82\x80\x9d\x89\xc8\x4b\x1c\x4c\xac\x09\xce\xea\x31\x18\x3b\xf0\xc1\x3a\xdc\x89\x36\x2e\x51\x48\x74\xa0\x0c\x9c\x60\xd8\x3d\x53\x3e\x90\x7e\xb5\x35\x1e\x3d\x73\x62\xcd\x63\xd4\xe7\x22\x2f\xe9\xbc\xf3\x15\x28\x13\xd0\x55\x28\x95\x70\x2b\xb6\x88\xca\xd1\xd3\xe9\x8f\x94\x27\x08\x10\x6f\x16\x3c\x86\xe0\x1a\x4c\xe6\x25\x37\x68\xc5\xac\xac\x31\x98\xb3\x5d\x83\xaa\xd0\x36\x21\x99\xce\x80\x11\xc6\x7a\x24\x08\xfb\xe4\xa6\x09\xef\x99\x45\xba\x31\x19\xa3\xfd\x83\x1e\xbc\x1e\x41\xa2\x8e\x42\x08\xb7\x95\xb8\x55\x55\x53\x81\x69\xaa\x39\x3a\x8e\x45\x55\xa1\x87\x50\x8a\x00\x02\x1c\xfe\xde\xa0\x0f\xb0\x54\x5a\xc3\x1c\xc1\x61\x70\x2a\x85\x4a\x21\x94\x6e\x5c\x3c\x4b\x0f\x48\x26\xcc\x31\x2c\x11\x4d\x22\xf3\x50\x58\xad\xed\xd2\x83\x30\x80\xb7\xb5\x35\x14\x23\x42\x33\xe8\x6d\x51\x80\x0f\xc2\x05\x0e\x8b\x00\x3f\x75\xba\x11\xb7\xa6\x26\x6b\xee\x41\xa5\x4c\x13\x70\xf3\x6c\xef\xc4\xed\x65\xe4\x3e\x86\xbd\x51\xd6\xe6\x1f\x9f\x97\x28\x1b\x4d\xfe\xf1\xeb\x68\xa6\x60\x79\xc7\x19\xec\x7e\x5e\x1c\x42\x36\x6d\xb7\xb4\x78\x5c\x82\x2d\x12\x84\x5d\x63\x40\x6c\x32\x0d\xe8\x3a\x38\x3c\x64\xfb\x96\xd9\xa5\xa0\xd4\xb8\xb7\x69\xf6\xbd\x74\xb2\x4e\x4a\x25\xcc\x0a\x82\xf0\xd7\x1c\xd0\xad\x10\x0a\x2c\x6b\x70\x5b\x54\xcb\x76\x52\x36\xe6\x9a\x0f\xdc\x32\xd1\xd6\x2c\x68\xfb\x52\xa8\xd0\xd9\xbd\xa9\xa5\x08\xe8\x61\x8e\x85\x75\xe4\x5c\x77\x1d\x51\x67\xac\x44\x90\x28\xe4\x63\xfa\x9f\x5b\x89\x17\xca\x2c\x1e\x09\x9d\x0d\x4f\x3c\x20\x9e\x4c\x9d\x64\x70\xfa\x13\x2e\xf4\xef\xeb\x40\xae\xf8\x26\x2d\x4e\x8d\x5a\x07\xf0\xeb\xd1\x96\x1a\x3f\x25\x35\x7c\x96\x11\xe9\xb8\xcd\x21\x29\x19\x27\x1d\x4e\x8f\xba\x78\x15\x4d\xb0\x95\xa0\xc4\xa4\xf5\x0a\x16\x68\xc8\xb6\xc8\xf2\x4f\x8f\x62\x4e\x4e\x2c\x3a\xfd\x4a\x41\xf6\x43\x03\x4a\x6a\xe4\xa3\xd1\x59\x91\x82\x49\x18\x26\x4b\x30\xec\x83\x4a\xc0\xf0\x65\x13\x40\xda\x65\x8a\x8e\xc1\x1e\x54\x28\x0c\x81\x08\x1d\x52\x40\x1a\xdb\x61\x17\x46\xed\xc3\xb8\x00\xaa\xe2\xe4\x10\x50\xaf\x40\x14\x01\x63\xd4\x16\xca\xf9\xc0\x41\x42\x3c\x3b\x7b\x0c\xf6\xa2\xc2\x07\x6c\xaa\x28\x7d\xfb\x8c\xc1\xad\xc8\x09\x12\x03\xe6\x01\x96\x04\x63\x87\xde\x36\x2e\xc7\x78\x51\x89\xee\xee\x0d\x16\x54\x18\x02\x33\x3c\xc2\x42\x19\xf2\xd3\x65\x47\xac\xe2\x69\x59\x50\x4c\xa5\x4d\x0c\x4c\xb0\x37\xe8\xa8\x46\xf0\xf1\x4e\x9c\x63\x29\x6e\x94\xe5\x4b\xab\xdb\x4e\xbe\x21\xc6\x93\x8b\x0f\x7e\x2d\x73\xd8\xae\xd6\x8d\x1f\x03\xdf\x25\x9c\xee\x0e\xde\xad\x69\xfa\x9c\x62\x0f\x5b\xd2\x4b\x51\x9d\xcc\xc7\x30\x1a\x76\xd4\x47\xca\x5f\x83\xaf\x45\x8e\x8f\x6e\x22\x92\x8d\x5d\x3d\xf8\x95\xfd\xb8\x1c\xf0\xfd\x0f\xa1\xa1\xb3\x0e\xbf\xc4\xbd\x5f\x99\x1c\x96\x2a\x94\x0f\x5f\xc9\x0f\xc5\xec\x07\xc6\x5c\xc4\xfd\x4f\xdb\xc1\xda\x65\xdb\x8f\xd6\x5d\xb7\x79\x86\xaa\x01\x0f\xb9\x43\x0a\x44\x90\x8d\x23\xab\xd7\xce\xd2\x05\x47\xff\xb6\xa1\xdb\x16\x14\xec\x06\xe5\x41\x2a\x87\x79\xb0\x6e\x45\x42\x89\xe1\x91\x72\x63\x18\xee\xc6\xcb\x6e\xb0\xb4\xee\x7a\x20\x95\xfb\x43\xc7\xad\xad\xd6\x1c\xe2\xb9\x30\x39\x9d\x54\x2d\x8c\xd0\xfe\x91\x93\x5e\x58\xad\x95\x59\x7c\xfd\xa8\x7f\xc4\xd8\x68\x24\x15\x4b\xb6\x09\xbb\xe8\x1c\x47\x3b\x15\x54\x5d\x1a\x4b\xd7\xfd\x03\x6e\x98\x62\x08\x31\xab\x28\x26\x1b\x45\xb3\x39\xf4\x8d\x0e\x29\x72\x3d\xa1\x08\xb5\xa4\x00\x25\xda\xc8\x55\x52\x5e\x57\x66\xa1\x23\x8e\x99\xdb\x1a\x76\x78\x8b\x79\x13\xac\x03\xbc\x55\xc1\x3f\xe6\xf2\x33\xbb\xf8\x16\xaf\xd3\xe6\x77\xe2\x16\xe6\xab\x74\x18\xae\x26\xd8\xde\x1b\xa7\x4e\x30\x6b\x0f\x9f\xf8\xcf\x84\xd2\x53\xf5\xa9\xbd\x4b\x28\x05\x8f\xe0\xed\x61\x64\x7a\x6e\x5d\x15\xc1\x4e\x45\x1e\xc7\x16\x48\xd4\x48\x62\x54\xf0\xbc\x44\x27\xee\x42\x26\x9d\x30\x9e\xae\x73\xc6\x8c\x8c\x67\x6b\x86\xb4\x8c\xc5\x48\xba\xf8\x37\x11\x7d\x86\xe2\x06\xbb\x78\x2b\x84\xf6\x98\x65\xbd\xc1\xf3\xfe\x65\x3d\x68\x7b\x1c\xaa\x16\xe4\xae\x75\xc0\x15\x3e\xa4\x12\x7f\xf7\x8d\x30\x52\xa3\xf3\xcf\x2f\x3a\x3b\xb4\x3a\x1c\x1d\x8e\x53\x8d\x48\xd8\x8f\x71\xd7\xf5\x6f\xa9\xd0\xa4\x67\x0f\x20\x2e\xfd\x1e\x52\x5b\x76\xc4\x7d\x4b\xcb\xec\x50\x78\xe4\x12\x3f\x58\xaa\x49\xd8\xf3\x6d\x67\x03\x81\xed\x4d\xc9\x9d\xfe\x69\x49\xc7\xa9\x78\x8d\x59\xfe\xe3\x14\x1c\x2e\x94\x35\x9c\x59\xe9\x1f\xbe\xb3\xda\x67\x07\xb1\x2a\xbe\xc6\x15\x9c\x1e\x65\x00\x6f\x71\xb5\xf5\x7c\x8a\xb9\xc3\xd0\x92\xbd\xc5\x15\x55\x14\xbc\x16\xaf\xbe\xe3\xd8\x5b\xa5\x93\x3b\x2c\xd4\xed\xa6\xaa\xca\x48\xbc\x45\x0f\x2f\x29\x36\xfb\xb1\x9f\xf3\x7d\xbe\x25\x3d\x55\xd4\xa7\xf4\x3c\x6e\xdb\x52\xfb\xc3\xe5\x59\xdb\xd4\xa4\xee\xcd\xa3\x70\x79\xb9\x81\xe0\x0f\x97\x67\x63\x28\x43\xa8\xc7\xbb\xbb\x5d\x77\x33\xfe\xe5\x9f\xd4\x94\xf4\xe0\xc4\x5a\xc2\xe7\x44\xdb\x46\x72\x5c\x44\xe0\x30\x44\x5a\xa7\x0c\xb3\xee\x01\xe9\x7f\xe1\xec\x6f\x98\x87\xee\xf8\xad\x1f\x45\x9e\xdb\x86\xaa\x68\x87\x32\x56\x9f\x9e\xdd\x19\x11\xf0\x9e\x83\x5f\x68\xee\xe8\x6a\xeb\xbd\xe2\xab\x64\x93\xf8\xe1\x4a\x42\x2a\x9f\xd3\x2d\x88\xb1\xaa\x2b\x9c\xad\xe2\x79\xcd\x8d\x72\xd6\x54\x68\xb8\x4a\x9f\xac\x19\x75\x4d\x20\x40\xf6\x8e\x5a\xd9\x36\x48\x0e\xa4\x74\x1e\x4a\x4b\x89\x8a\xbb\x67\x29\x1d\x7a\xcf\xd5\x73\xdb\x46\xa1\x4c\xb6\xe3\xf4\xc3\x3b\xe2\xfd\x3a\xd8\xe8\x0d\xf9\xde\x6b\x43\x56\xf9\xed\x10\xe6\x30\xe4\xba\x98\x6e\x37\x65\x20\xe9\xb0\x91\x96\x62\x96\xa5\x1d\xdc\x9d\x74\x23\x87\x0d\xcf\xce\xda\x9a\x25\xa9\x5a\xb1\x6d\x53\xd3\x70\xaf\x1c\x4c\xcd\x1f\x15\xd3\xdc\x25\x49\x58\x96\x68\xa2\xb9\xb8\xb8\x69\x1b\x1b\x2a\x50\x8d\x04\xee\x1b\xa9\x5d\xa0\xe2\x9f\xfa\x3f\xae\x35\xba\x32\xc4\xd3\xf5\x68\x0d\x79\x2a\x36\x5b\x6b\x55\x3e\xa1\xb3\xfd\xd8\x18\x0a\xad\xa1\x12\x2b\x98\x6b\x9b\x5f\x93\x22\x48\x3a\x90\x56\x24\x26\x2a\xb6\x6e\xa8\xda\xae\x6d\x8e\x80\x9e\xf0\xa8\x7c\x19\x8b\xc3\xa7\x0b\x50\x0e\x74\x8f\x8e\x0d\x4b\xfa\xb7\xdd\x25\x8f\x0f\x5c\x0c\x87\xad\xa8\x4b\xde\x54\x46\x71\x13\xb4\xdd\x33\x33\x3f\x49\xf5\xbf\x35\xdb\x9e\x93\x54\x99\xa1\xa4\x56\x92\xd6\x8f\xd6\x49\x09\x35\xeb\xda\x6a\x91\xa2\x6b\xdd\xe5\x12\xc4\xdf\x8a\xe2\x5a\x8c\x19\xf7\x1c\x3f\x6d\xd8\x30\xe9\xcc\xd6\x2a\xef\x1c\xfc\x3d\x92\x7a\x1a\x16\xc1\x61\x1a\xf3\x7c\x87\xec\xfd\x66\x36\xe1\x19\x56\x44\xd3\xac\x71\x06\xa8\xb7\xe4\x64\xe1\x83\x08\xd4\xb4\xe6\xd6\xe4\x4a\xa3\x1b\xc2\xc7\x12\x0d\xa0\xa1\x94\x2b\xfb\x6d\x65\xb1\x1e\x78\xa0\x5f\x57\x7f\x6f\x2e\x26\xcc\x72\xdd\x05\x06\x0b\x85\x32\xb2\xed\xdd\xb8\x45\x76\x08\x3e\x34\xf9\x35\xc5\xa9\x80\xdf\x1b\x6c\x08\xac\x2c\x97\xca\x08\xe7\xac\xa3\x9a\x23\xb5\x7f\x5d\x65\xd3\xde\xf8\x91\x92\xb2\x94\x93\x54\x95\xac\x36\x26\x03\x97\x9d\xde\xed\xbd\x1b\x27\x2f\x69\x95\x8a\x0f\x0a\xff\x72\x5d\x53\x95\x5f\xcc\xff\xf8\xb7\x70\xe8\xa3\x24\x86\x53\x3c\xf5\xbf\xfa\x6e\x46\x98\x60\x10\x4a\xeb\xc9\x5a\xb5\x75\x61\x1d\x70\x6b\xa2\x2d\xc9\x63\xd8\xfb\x79\x1b\x1b\xf0\x7a\xb4\x81\x8e\x19\x56\xb5\x66\xba\xff\xe1\x90\x6b\x8c\xa2\xf8\x43\xd8\x87\x1b\x61\x94\xd6\x82\x97\x17\x18\xd0\xdc\xc0\x3e\xcc\x5c\x83\xbc\x12\x8b\x14\x6e\x50\xf6\xe1\xee\x6e\x78\xdc\xfd\xfe\xfc\x99\x09\x84\x5b\x34\x94\x60\x3d\xec\xb7\xc5\x0f\xb5\xeb\x83\x41\x1a\x0b\xdd\xdd\x0d\x27\xfc\xdf\xe7\xcf\x30\x18\x90\x95\x07\x4a\xd2\xea\x4c\xf8\xeb\x53\x99\xb8\x50\x9d\xc9\xfc\x53\x69\xf3\xf9\xf3\x6e\x9c\x85\x0e\xf8\x9e\x1b\x68\xbb\x88\xea\x90\x07\xef\x53\xa6\x0a\x20\x0e\xfa\x98\xcc\xf2\xa4\xef\x71\x3a\xdb\x04\xa6\xf3\xa5\x6d\xb4\xbc\x0a\x4e\x18\x5f\xa0\xbb\x2a\xb8\x1b\xd8\x87\xff\x3e\x9e\xf2\x73\xca\x91\x57\xc1\xae\x09\x3a\xc6\xef\xcf\xaf\x8e\xff\xeb\x74\x76\xf5\xfe\xf2\xea\xf8\x3f\x4f\x27\x33\x26\xbf\xbb\x53\x05\x18\x84\x21\x35\x54\x30\x82\x41\x3a\xdd\xdd\x5d\xed\x94\x09\x05\xec\xa4\x09\xce\x55\x4e\x04\xfb\xf0\x0f\xb9\x13\x89\x3b\xc2\x01\xa0\x91\xdd\xaf\xc4\x8e\x9b\x2e\xea\x9e\xbe\xc2\xb1\xc2\x8a\x4a\xcb\x7d\xf8\xc7\x70\x54\xc0\xc9\xe1\x4e\xda\xf6\x75\xce\xb1\x33\x7b\x82\xb5\xa4\x0e\x6f\x93\x71\xdc\xf5\x05\x67\xfe\xc9\x98\xcb\xb2\x8b\xc3\xe9\xdf\x29\xe0\x87\x4e\x01\xbd\x7f\x99\x2b\xb3\x3b\x17\xbe\x8c\x3f\x2f\x0e\xa7\x30\x38\x27\xc4\xf0\xdc\xa7\x0d\x95\xb8\x6e\x9f\x42\x52\x24\xc3\xa7\x80\xf9\x34\x42\x22\x23\x1d\xeb\xda\xfd\xbd\x71\x5d\x9b\xfd\x67\x80\x49\xcb\xb6\xc2\x6a\x9f\x02\x79\x31\x7f\x06\x80\xb4\x4c\x29\x6d\xac\xb9\x7e\x0d\x1d\xf7\x32\xe8\xff\x31\x63\x66\x27\x4e\xc9\x63\x7e\x27\xf4\x37\xc8\xfe\x5f\x81\xec\xc5\x83\x10\x7b\xf1\x2d\x00\x7b\xf1\x0d\xf0\x22\xa2\x0e\x3a\xdf\x0a\xb8\x17\x30\xa8\x11\xaa\x5a\x3d\xc7\x75\x14\x35\x28\xaf\x6e\x5a\xa0\x9d\x3c\x07\xce\x12\xd3\xc2\xab\x4f\xd8\x71\xfd\x0b\x70\x36\xd5\x8d\xab\xfe\x86\xd8\x0f\x0e\xb1\xdd\x6d\x8c\x4d\x0f\x0f\x66\x93\x37\x30\x18\xfc\x66\xe7\x03\x6e\x08\xbf\x00\x5c\x47\x62\xa2\xc5\xf7\xee\x2d\xc7\x32\xf3\x29\xb0\x75\xe4\xa9\x2a\x7c\x02\xc1\xdf\x00\xc5\x8e\x23\xd5\x87\x83\x1a\x1d\x87\xe5\xb3\xe0\xb2\x63\x5d\x61\xc5\xa5\xdc\xb3\x94\x88\x6b\xb6\xa1\xaa\xd7\x6c\xff\x02\x68\xf2\x4c\xed\x50\x84\xbc\x04\x89\x3e\x77\x6a\x9e\xa2\x7f\xfb\xe5\x48\xdb\xe7\x1f\x7c\x9c\x42\xa4\xbe\xff\xea\x31\x6b\xf9\x3c\x2b\xce\x3b\x79\x2d\x06\xee\xe3\xdb\xf0\x2c\x84\xdf\xce\x45\x18\xaf\x21\xfc\xe3\xc3\x77\xf3\x74\x7f\x08\xbc\x3d\xf8\x77\x3b\x8f\x6f\xb7\xd8\x3d\xb9\x30\x3c\xef\x51\xa1\x44\x7e\x6b\xc9\x9f\x60\x24\x97\x55\xe2\x93\x35\xdd\x3b\x2c\x38\xa7\x67\x2f\x0f\x2e\xcf\x5f\x91\x2d\xb6\xf8\x8c\x61\x27\xe1\x8d\x30\x2f\xb1\xd8\x69\x65\xfd\x07\xe5\xcd\x3f\x27\x86\x59\x6c\x4b\xe0\x6c\xbc\x73\x6f\x2a\xdc\x4e\x59\x7d\x8d\xb9\x2a\x14\x4a\xf8\xcd\xce\x63\xe2\x8e\xdf\x80\xd8\xf4\x9e\x89\xa9\xe8\x99\x5c\x1b\x42\x7d\x31\x54\x5e\x8f\x8f\x37\x87\xc4\xdf\x61\x2a\x34\x0d\xd6\x89\x05\x7e\x87\x61\x50\xef\x4f\x0c\x72\x1f\x1b\xe3\x66\x3d\x38\xb3\xb9\x88\x45\x37\xf8\x95\x0f\x58\x0d\x33\x5e\x4a\x07\x89\x38\xfe\x58\xaa\x80\x5a\x79\x1e\x88\xf2\x58\x76\xe3\x05\x4c\x2d\x42\xe9\x61\x59\xaa\xbc\x6c\x21\xac\x3c\x08\xad\xed\x12\x65\x1a\x54\xa3\x8f\xe3\xdd\xb8\x78\xa4\xd6\xd3\xba\xe1\x2e\x69\xf1\x66\x36\xbb\x48\x12\xbb\xaf\x1c\x82\xe5\x17\xcf\xda\x0a\x09\x75\x33\xd7\x2a\x87\x38\x52\x48\x63\xc4\x25\xce\xe1\x46\x09\x10\x70\x72\x3c\x6b\x3f\xe7\x18\x66\x1b\xac\xc6\x5b\x93\x5d\xca\x5e\x65\x08\xf5\x4b\xff\x6a\x73\xc7\xa3\xaf\xc2\x1e\x1a\x94\xde\xfb\xd4\x24\x86\xfb\xf4\xf5\x78\x9d\x4f\xe4\x66\x1a\x79\xc6\xcf\x50\xee\x7d\x1c\xf2\x5c\xef\x49\x7a\x30\x49\x29\x1e\x79\x58\x4e\x0e\x68\x3f\x5c\x63\x1d\xa6\xaf\xa1\x76\xf6\x46\x49\x74\x1e\x7c\x93\x97\x20\x3c\xbc\x53\x46\xd9\xf6\x65\xd6\x04\xeb\x32\xeb\xc1\x09\x1a\x74\x2a\x27\x63\xf4\xd8\xb3\x6b\x83\xf0\xc7\x3f\xb4\x08\x70\x6c\x64\x6d\x95\x89\xd2\xe3\x52\xab\x72\xfc\xb5\xa9\x5c\x7c\x59\xb2\xe1\xcc\x87\x6c\xfc\xe3\xbe\x0e\xc9\xa6\x4b\x55\x84\x87\xf5\xfe\xe0\xd1\x9d\x3f\x32\xd9\x06\x38\x68\x42\xc9\xef\x91\xe2\x2c\x1b\x8d\x30\x61\x83\x3a\x2e\xa4\xaf\x3c\xda\x4c\xd7\x3d\xff\xdf\x00\x00\x00\xff\xff\x21\xcd\x81\xc5\xbc\x29\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 10684, mode: os.FileMode(420), modTime: time.Unix(1519154943, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcf\x4a\xc3\x40\x18\xc4\xef\x79\x8a\x31\xb5\xc7\xdd\xe4\x05\x3c\x35\x52\xbc\x78\x10\xc1\xa3\x24\xcd\xb7\x76\x49\xb2\x1b\xf6\x8f\x8a\xcb\xf7\xee\xb2\xdb\x22\x14\x6a\x6f\xc3\xf0\x9b\xdf\x61\x36\x77\xcd\xa0\x4d\x33\xf4\xfe\x58\x6d\xee\x21\x9e\x91\x92\x7c\xed\xfd\xf4\x34\x32\x97\xc6\xe6\xe6\xcd\xba\xa9\xd3\x8e\xb9\x51\xd1\x18\x9a\x85\x0f\xa3\x8d\xa1\x00\xf4\x1f\x40\xce\x55\x29\x69\x05\x43\x90\xbb\x35\x7a\xb4\x10\xcc\x55\x4a\xab\xd3\x26\x28\xd4\x79\xbe\x12\x96\x55\x63\x3b\xd6\x27\xa8\x00\x02\x64\xc6\x92\xce\xf3\x97\x7e\xd9\x0f\x68\xe5\x35\xc3\x8c\xe3\xfb\xe7\x42\xcb\xc3\x56\xb6\x6a\x5f\x9f\xe1\xeb\x9e\x4e\xfb\xe9\xa6\x48\x79\xfd\x43\x7f\xa6\x13\x7e\xa1\xaa\x52\x92\x8f\xdf\x74\x88\xa1\x1f\x66\x62\xc6\x97\x75\x13\x39\xb8\x68\x20\xc4\xc1\x1a\xa5\x3f\xf2\x23\xbb\x92\x98\x21\x44\xc8\x7f\x76\x17\xcf\xfe\x06\x00\x00\xff\xff\x43\xce\xa0\xb4\x78\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 376, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x11\xd2\x5d\x3a\x97\x17\xc8\xe6\x42\x84\xd8\x5c\x24\x1a\xf5\x67\x15\x85\x64\x12\xac\x38\x63\x18\x7b\x42\xab\xc8\xef\x5e\x05\x10\x15\x55\xe9\xee\xd8\xe7\x3b\x9f\x46\xc8\x0c\xc8\x1e\x21\x85\xa1\x24\x63\x6d\xa9\x5a\x0c\x48\x03\xa4\x90\xb3\xa0\xc2\x77\xac\x24\x94\x3b\x3b\x21\xe3\x98\x64\xb7\x77\x8c\xaa\xe4\x56\x7a\xa4\xe0\x21\x85\x93\xe3\x0e\x19\x58\x08\xb4\xae\x1c\x35\xa6\x9d\xf8\xc5\x39\xc5\x08\x5a\x87\xd2\x77\xeb\xe5\xf4\x99\x4f\xa9\x8e\x51\x59\xd7\x5e\xb4\x2f\x8e\xbb\xa5\xe1\x18\xff\x56\x8e\x6a\xc7\x1a\x07\xa4\xa0\xad\x6b\x15\x32\x3b\xfe\x4e\x35\x42\x84\x56\xfb\x50\x23\xb3\x72\x12\x0e\x12\x1e\x33\x4e\x82\xf2\x7b\x27\xb6\x2e\x02\x97\xe4\x1b\xe4\xa2\x31\x16\xa7\xbb\xdf\xb2\x27\x75\xda\x23\x15\xc1\x7d\x95\x37\xe1\xe6\x7f\x91\xbd\xae\xf3\x62\xb3\x2d\xb2\xe7\xf5\x22\x57\xe3\x68\x1a\x20\x84\x64\x71\x10\x0f\x73\xd0\x31\xaa\x71\x3c\xb0\xa1\xd0\xc0\x8c\xf1\x28\xe8\x43\x51\x4d\x65\x0a\x7f\xea\xd9\x05\x3c\x43\x1a\x90\xea\x73\xba\x2a\xb6\x65\xbf\xda\xc1\x3c\x79\x64\xe9\xb1\x77\xfc\x31\x79\x92\x79\x03\xab\x7f\xb3\xeb\xe4\x67\xdb\xd2\xf8\xee\x57\x5d\x6d\x7c\x77\x27\xbb\x2c\xee\x6c\xea\x28\x28\xa8\x3e\x03\x00\x00\xff\xff\xbb\x66\xa4\x8a\x17\x02\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 535, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\x4d\x4b\xc4\x30\x10\xc6\xf1\x7b\x3f\xc5\xd8\x65\x8f\x49\xeb\x55\xe8\xc5\xad\x88\x17\x11\x15\x3c\x37\x9b\xc9\x1a\xda\x4e\x4a\x5e\x50\x08\xf3\xdd\xa5\x2f\x20\x0b\xd6\xdb\x30\xfc\xf9\x1d\x9e\xc3\x4d\xa5\x2c\x55\xaa\x0b\x9f\xc5\xe1\xe5\xfe\x0d\xc4\x33\xe4\x2c\xdf\xbb\xd0\x3f\x69\xe6\xed\xe7\xe6\xdf\x87\xf3\x7d\x6b\x3d\x73\x65\x12\x11\x0e\x22\x44\xed\x52\xdc\x12\xdc\x4b\xd0\xfb\x22\x67\x6b\x80\x10\xe4\x69\x4a\x01\x6a\x10\xcc\x45\xce\x93\xb7\x14\x0d\x94\x2b\x30\x00\x39\x8d\xa1\xb9\xbd\x9b\x26\x6a\x8e\xba\x5c\xeb\xa5\x14\x80\xa4\x97\x6b\x73\x5e\xbb\xf1\x51\x41\x2d\xf7\xa8\x11\xc7\xe6\x28\x6b\x73\x51\xe5\x16\xff\xed\xb4\x36\xf4\xff\x42\xc6\x0e\xf8\x2b\xad\xf9\x15\x55\xe4\x2c\x1f\xbe\xf1\x9c\x62\xa7\x06\x64\x86\x2f\xe7\x7b\xf4\xe0\x13\x81\x10\x67\x47\xc6\x5e\xe6\x69\x4e\xcb\xc5\x0c\x42\xc4\x79\xdc\xf6\x6a\xe6\x9f\x00\x00\x00\xff\xff\xd8\xa6\xd9\x67\x87\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 391, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x6a\xeb\x30\x10\x45\xf7\xfe\x8a\x79\x0e\x59\xca\xf6\xfb\x84\xc6\x2e\x69\xb7\x6d\xa0\x6b\x39\x1e\xb7\xaa\xe3\x91\x18\x49\xb4\x20\xe6\xdf\x8b\x9c\x40\x1c\x68\xe8\xee\x22\x1d\x1d\x34\x73\x37\xff\xea\xde\x50\xdd\x6b\xff\x51\x6c\x5e\x77\x0f\x87\xf6\x09\x94\xfa\xb4\xbd\x22\x3d\x23\xa4\x54\x1d\xb4\x9f\x9e\x07\x91\xd5\x35\x05\xed\x27\x0f\xff\x57\x47\xc8\x6c\x39\xe3\x6f\x96\xa7\xce\xb0\x48\x3d\x46\x22\x3c\x29\x1f\x06\x64\x5e\xa1\x36\x06\x17\xc3\x3d\xd6\xc6\x50\xa4\x64\x46\x20\x84\xaa\x75\xd1\x43\x03\x4a\xa4\x48\xc9\xb1\xa1\x30\x42\x79\x35\x1d\x5d\xf4\xca\x21\xab\xfc\x1f\xd8\x0e\xe5\xf9\xc5\x42\x2b\x40\x1a\x96\x74\x71\xbd\xe8\x79\xdf\x43\x53\xdd\xd7\xcd\x38\xc3\xb6\x6a\xc6\xfd\xae\xbc\xe0\xbf\x9b\x3a\xe3\xa7\x3f\x54\x61\x76\x57\xd5\x99\xbf\x71\x15\x29\x55\x8f\xdf\x78\x8c\x41\xf7\x27\x14\x81\x2f\xcb\x13\x32\x70\xa4\x3c\x97\xa5\xd1\xbc\xe7\x0d\xb5\x4b\x12\xc9\xca\xdc\x43\x77\xd3\xc8\x4f\x00\x00\x00\xff\xff\x46\x53\xad\xe9\xbd\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 445, mode: os.FileMode(420), modTime: time.Unix(1514578149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
